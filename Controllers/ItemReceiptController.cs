using Aadyam.SDS.Business.BusinessConstant;
using Aadyam.SDS.Business.Model.Order;
using System;
using System.Collections.Generic;
using System.Web.Http;

namespace Aadyam.SDS.API.Controllers
{
    public class ItemReceiptController : BaseApiController
    {
        decimal LogId = 0;

        #region Godown Keeper
        /// <summary>
        /// Return history of Invoice generated by godown keeper
        /// </summary>
        /// <param name="DistId">Return against distributor id</param>
        /// <returns></returns>
        [HttpPost]
        [Route("ItemReceipt/ItemReceiptHistory")]
        public ItemReceiptHistoryList ItemReceiptHistory(ItemReceiptHistory itemReceiptHistory)
        {
            ItemReceiptHistoryList itemReceiptHistoryList = new ItemReceiptHistoryList();
            try
            {
                if(!string.IsNullOrEmpty(itemReceiptHistory.FromDate) && !string.IsNullOrEmpty(itemReceiptHistory.ToDate))
                {
                    DateTime FromDate = BusinessCont.StrConvertIntoDatetime(itemReceiptHistory.FromDate);
                    DateTime ToDate = BusinessCont.StrConvertIntoDatetime(itemReceiptHistory.ToDate);
                    itemReceiptHistoryList = _unitOfWork.stockRepository.ItemReceiptHistory(itemReceiptHistory.DistributorId, FromDate,ToDate);
                }
                itemReceiptHistoryList.Status = BusinessCont.SuccessStatus;
            }
            catch (Exception ex)
            {
                itemReceiptHistoryList.Status = BusinessCont.FailStatus;
                itemReceiptHistoryList.ExMsg = ex.Message;
                BusinessCont.SaveLog(LogId,0, itemReceiptHistory.DistributorId, 0, 0, "Item Receipt History", "FromDate= " + itemReceiptHistory.FromDate + ", ToDate=" + itemReceiptHistory.ToDate, BusinessCont.FailStatus, ex.Message);
            }
            return itemReceiptHistoryList;
        }

        /// <summary>
        /// Method return list of Item Return history to plant from godown
        /// </summary>
        /// <param name="DistId"></param>
        /// <param name="GodownkeeperId"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("ItemReceipt/ItemReceiptWebHistory")]
        public ItemReceiptList ItemReceiptWebHistory([FromBody]commonPstMdl model)
        {
            ItemReceiptList itemReturnList = new ItemReceiptList();
            itemReturnList.ItemReceiptDetails = new List<ItemReceiptWebMst>();
            try
            {
                DateTime FromDate = !string.IsNullOrEmpty(model.FromDate) ? BusinessCont.StrConvertIntoDatetime(model.FromDate) : DateTime.Now;
                DateTime ToDate = !string.IsNullOrEmpty(model.ToDate) ? BusinessCont.StrConvertIntoDatetime(model.ToDate) : DateTime.Now;
                itemReturnList.ItemReceiptDetails = _unitOfWork.stockRepository.ItemReceiptWebHistory(model.DistId, 0, FromDate, ToDate);
                itemReturnList.Status = BusinessCont.SuccessStatus;
            }
            catch (Exception ex)
            {
                itemReturnList.Status = BusinessCont.FailStatus;
                itemReturnList.ExMsg = ex.Message;
                BusinessCont.SaveLog(LogId, 0, 0, 0, 0, "ItemReceiptWebHistory", null, itemReturnList.Status, ex.Message);
            }
            return itemReturnList;
        }

        /// <summary>
        /// Method return list of Item Return history to plant from godown
        /// </summary>
        /// <param name="DistId"></param>
        /// <param name="GodownkeeperId"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("ItemReceipt/ItemReturnHistory")]
        public ItemReturnList ItemReturnHistory([FromBody]commonPstMdl model)
        {
            ItemReturnList itemReturnList = new ItemReturnList();
            itemReturnList.ItemReturnDetails = new List<ItemRtnDtl>();
            try
            {
                DateTime FromDate = !string.IsNullOrEmpty(model.FromDate) ? BusinessCont.StrConvertIntoDatetime(model.FromDate) : DateTime.Now;
                DateTime ToDate = !string.IsNullOrEmpty(model.ToDate) ? BusinessCont.StrConvertIntoDatetime(model.ToDate) : DateTime.Now;
                itemReturnList.ItemReturnDetails = _unitOfWork.stockRepository.ItemReturnHistory(model.DistId, 0, FromDate, ToDate);
                itemReturnList.Status = BusinessCont.SuccessStatus;
            }
            catch (Exception ex)
            {
                itemReturnList.Status = BusinessCont.FailStatus;
                itemReturnList.ExMsg = ex.Message;
                BusinessCont.SaveLog(LogId, 0, 0, 0, 0, "ItemReturnHistory", null, itemReturnList.Status, ex.Message);
            }
            return itemReturnList;
        }
        #endregion

        #region Add item Receipt

        /// <summary>
        /// Use to Add item Receipt details
        /// </summary>
        /// <param name="addItm"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("ItemReceipt/AddItemReceipt")]
        public ItemRcptModel AddItemReceipt([FromBody]AddItmReceipt addItm)
        {
            ItemRcptModel itemRcptModel = new ItemRcptModel();
            itemRcptModel.Status = BusinessCont.FailStatus;
            try
            {
                itemRcptModel = _unitOfWork.stockRepository.AddItemReceipt(addItm.ItemReceiptDtls, addItm.itemReceiptItem, 0);
            }
            catch (Exception ex)
            {
                BusinessCont.SaveLog(LogId, 0, 0, 0, 0, "AddItemReceipt", "itemReceiptItem = " + addItm.itemReceiptItem, BusinessCont.FailStatus, ex.Message);
            }
            return itemRcptModel;
        }
        #endregion

        #region Add item Return
        /// <summary>
        /// Use To add item Return Details
        /// </summary>
        /// <param name="addItmReturn"></param>
        /// <returns></returns>

        [HttpPost]
        [Route("ItemReceipt/AddItemReturn")]
        public ItemRcptModel AddItemReturn([FromBody]AddItmReturn addItmReturn)
        {
            ItemRcptModel itemRcptModel = new ItemRcptModel();
            itemRcptModel.Status = BusinessCont.FailStatus;
            try
            {
                itemRcptModel = _unitOfWork.stockRepository.AddItemReturn(addItmReturn.ItemReturnDtls, addItmReturn.itemReturnItem);
            }
            catch (Exception ex)
            {
                BusinessCont.SaveLog(LogId, 0, 0, 0, 0, "AddItemReturn", null, BusinessCont.FailStatus, ex.Message);
            }
            return itemRcptModel;
        }

        [HttpGet]
        [Route("ItemReceipt/GetInvoiceDtlsByIveNoForItemReturn")]
        public ItemReturnListModel GetInvoiceDtlsByIveNoForItemReturn(string InvoiceNo, int DistributorId)
        {
            ItemReturnListModel invoiceDtls = new ItemReturnListModel();
            try
            {
                invoiceDtls = _unitOfWork.stockRepository.GetInvoiceDtlsByIveNoForItemReturn(InvoiceNo, DistributorId);
            }
            catch (Exception ex)
            {
                BusinessCont.SaveLog(LogId, 0, DistributorId, 0, 0, "GetInvoiceDtlsByIveNoForItemReturn", null, BusinessCont.FailStatus, ex.Message);
            }
            return invoiceDtls;
        }
        #endregion

        #region Get Invoice Details By InvoiceNo
        [HttpGet]
        [Route("ItemReceipt/GetInvoiceDtlsByInvoiceNo")]
        public InvoiceDtls GetInvoiceDtlsByInvoiceNo(string InvoiceNo,int DistributorId)
        {
            InvoiceDtls invoiceDtls = new InvoiceDtls();
            try
            {
                invoiceDtls = _unitOfWork.stockRepository.GetInvoiceDtlsByIveNo(InvoiceNo, DistributorId);
            }
            catch (Exception ex)
            {
                BusinessCont.SaveLog(LogId, 0, DistributorId, 0, 0, "GetInvoiceDtlsByInvoiceNo", null, BusinessCont.FailStatus, ex.Message);
            }
            return invoiceDtls;
        }
        #endregion

    }
}
