USE [SDSDB]
GO
/****** Object:  StoredProcedure [dbo].[GetActiveFlags]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetActiveFlags]
 @Id int
AS
BEGIN
	SELECT count(d.Flag) FlagCount from Token_Distributor d
	inner join Token_SA a on a.Id= d.SAId where d.Flag=1 and a.Id=@Id
END


GO
/****** Object:  StoredProcedure [dbo].[GetDistributorDetailsByTokenNumber]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[GetDistributorDetailsByTokenNumber]
 @Token int
AS
BEGIN
	SELECT d.Id [DistributorId],d.[DistributorName],d.Token,d.Flag,a.[SAName] from Token_Distributor d
	inner join Token_SA a on a.Id= d.SAId where d.Flag=0 and d.Token= @Token 
END


GO
/****** Object:  StoredProcedure [dbo].[GetWinnerDistributorDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[GetWinnerDistributorDetails]
 @Id int
AS
BEGIN
	SELECT d.Id [DistributorId],d.[DistributorName],d.Token,d.Flag,a.[SAName] from Token_Distributor d
	inner join Token_SA a on a.Id= d.SAId where d.Flag=1 and a.Id=@Id
END


GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllSA]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[sp_GetAllSA] 
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	
	SELECT s.SAcode SAcode ,s.SAName SAName ,s.Id SAId from Token_SA  s
END


GO
/****** Object:  StoredProcedure [dbo].[sp_GetDistributorBySAId]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[sp_GetDistributorBySAId]
	-- Add the parameters for the stored procedure here
	@SAId int
AS
BEGIN
	SELECT d.Id [DistributorId],d.[DistributorName],d.Token,d.Flag,a.[SAName] from Token_Distributor d
	inner join Token_SA a on a.Id= d.SAId where d.Flag=0 and d.SAId=@SAId
END


GO
/****** Object:  StoredProcedure [dbo].[sp_GetDistributorTokensBySAId]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[sp_GetDistributorTokensBySAId]
	-- Add the parameters for the stored procedure here
	@SAId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SELECT d.Token from Token_Distributor d
	inner join Token_Distributor a on a.Id= d.SAId where d.Flag=0 and d.SAId=@SAId
END


GO
/****** Object:  StoredProcedure [dbo].[UpdateDistributorflag]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create PROCEDURE [dbo].[UpdateDistributorflag]
	@Token int,
	@SAId int
AS
BEGIN

	Update Token_Distributor 
	set Flag= 1 where Token=@Token and SAId =@SAId;

	SELECT d.Id [DistributorId],d.[DistributorName],d.Token,d.Flag,a.[SAName] from Token_Distributor d
	inner join Token_SA a on a.Id= d.SAId where Flag=1 and  d.Token= @Token and d.SAId =@SAId
END


GO
/****** Object:  StoredProcedure [NIU].[ClearData]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [NIU].[ClearData]
--declare
@distributorid int--=88888

as


select * from sds.tblTransferBooking where fromdistributorid=@distributorid or todistributorid=@distributorid
select * from sds.tblTripExpectedStock where distributorid=@distributorid

select * from sds.tblTripPlanningDetails where tripid in (select tripid from sds.tblTripPlanning where distributorid=@distributorid)
select * from sds.tblTripPlanning where distributorid=@distributorid

select * from sds.tblTripPlanningDetailsHistory where TripId in (select TripId from sds.tblTripPlanningHistory where distributorid=@distributorid)
select * from sds.tblTripPlanningHistory where distributorid=@distributorid

select * from sds.tblDefectiveByGodown where distributorid=@distributorid
select * from sds.tblDefectiveReturnDtls where DefectiveReturnId in (select DefectiveReturnId from sds.tblDefectiveReturn where distributorid=@distributorid)
select * from sds.tblDefectiveReturn where distributorid=@distributorid

select * from sds.tblDistributorAreawiseBacklog  where distributorid=@distributorid
select * from sds.tblDistributorClusterCoordinates where distributorid=@distributorid
select * from sds.tblDistributorClusterwiseBacklog where distributorid=@distributorid

select * from sds.tblStockAllotmentDetails where StockAllotmentId in (select StockAllotmentId from sds.tblStockAllotment where distributorid=@distributorid)
select * from sds.tblStockAllotment where distributorid=@distributorid
select * from sds.tblStockAllotTransferTrack where distributorid=@distributorid
select * from sds.tblStockTransferDetails where StockTransferId in (select StockTransferId from sds.tblStockTransfer where distributorid=@distributorid)
select * from sds.tblStockTransfer where distributorid=@distributorid

select * from sds.tblDeliveryBoyStock where deliveryboyId in (select staffrefno from dcms.tblDistributorStaffDetails where distributorid=@distributorid)
select * from sds.tblDeliveryBoyStockHistory where distributorid=@distributorid

select * from sds.tblDistributorGodownStaffMapping where godownid in (select godownid from sds.tblDistributorGodown where distributorid=@distributorid)
select * from sds.tblDistributorGodown where distributorid=@distributorid
select * from sds.tblDistributorLocation where distributorid=@distributorid

select * from sds.tblPendingRefillSales  where distributorid=@distributorid



select * from sds.tblAreaClusterMapping where distributorid=@distributorid
select * from sds.tblAuditLog where distributorid=@distributorid
select * from sds.tblBreakDown where distributorid=@distributorid

select * from sds.tblConsumerDetails where distributorid=@distributorid

select * from sds.tblDeliveryBoyClusterMapping where clusterid in (select clusterid from sds.tblclustermaster where distributorid=@distributorid)
select * from sds.tblClusterMaster where distributorid=@distributorid

select * from sds.tblDistributorAreaMapping where distributorid=@distributorid
select * from sds.tblDistributorDeliveryTaluka where distributorid=@distributorid

select * from sds.tblDistributorStock where distributorid=@distributorid
select * from sds.tblDistributorSystemStock where distributorid=@distributorid
select * from sds.tblDistributorTradingAreaCoordinates where distributorid=@distributorid
select * from sds.tblDistributorTradingAreaMapping where distributorid=@distributorid
select * from sds.tblDistributorWiseBacklog where distributorid=@distributorid


select * from sds.tblOnBoardingCompleted where distributorid=@distributorid
select * from sds.tblVehicleDeliveryBoyMapping where distributorid=@distributorid
select * from sds.tblVehicleMaster where distributorid=@distributorid
GO
/****** Object:  StoredProcedure [NIU].[GetUnformatedCoordinatesTemp]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
--   [SDS].[GetUnformatedCoordinatesTemp] 'PUNEC1'
create PROCEDURE [NIU].[GetUnformatedCoordinatesTemp]
	-- Add the parameters for the stored procedure here
	@DistrictCode nvarchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	 --select AreaCode,AreaJson,TalukaName,DistrictName from [SDS].[tblGeoCoordinateMaster] GM inner join  
  --[SDS].[tblTalukaMaster] TM with(nolock) on TM.TalukaCode = AreaCode inner join
  --[SDS].[tblDistrictMaster] DM with(nolock) on DM.DistrictCode = TM.DistrictCode
  --where DM.DistrictCode = 'PUNEC1'

  select GM.AreaCode,AreaJson,TalukaName,TM.TalukaCode,DistrictName,DM.DistrictCode from [SDS].[tblGeoCoordinateMaster] GM inner join  
  
  [SDS].[tblTalukaMaster] TM with(nolock) on TM.TalukaCode = GM.AreaCode inner join
  [SDS].[tblDistrictMaster] DM with(nolock) on DM.DistrictCode = TM.DistrictCode
  where DM.DistrictCode = @DistrictCode

END


GO
/****** Object:  StoredProcedure [NIU].[usp_AddDistAreaGeoCoordinates_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_AddDistAreaGeoCoordinates]
--	Description		:	Add Area Geo Coordinates

--	Author			:	24-06-2019

					     Modifications
--	24-06-2019			Prasanna        Created
**************************************************************/
CREATE PROCEDURE [NIU].[usp_AddDistAreaGeoCoordinates_NotInUse]
@DistributorId int,
@AreaRefNo varchar(20),
@AreaJSON nvarchar(MAX),
@ActiveStatus bit,
@RtnValue bigint output
AS
BEGIN
	 IF NOT EXISTS(SELECT 1 FROM SDS.[tblDistributorAreaGeoCoordinates] WITH (NOLOCK) WHERE DistributorId=@DistributorId AND AreaRefNo=@AreaRefNo)
     BEGIN
		INSERT INTO SDS.[tblDistributorAreaGeoCoordinates] ([DistributorId],[AreaRefNo],[AreaJSON],[ActiveStatus],[LastUpdateDateTime])
          VALUES (@DistributorId,@AreaRefNo,@AreaJSON,@ActiveStatus,GETDATE())     
		SET @RtnValue=@@IDENTITY

		update sds.tblDistributorAreaMapping set TradingAreaStatus=1, LastUpdateBy='MANUAL', LastUpdateDateTime=getdate()
		where DistributorID=@DistributorId and AreaRefNo=@AreaRefNo

	 END 
	 ELSE
	 BEGIN
		UPDATE SDS.tblDistributorAreaGeoCoordinates
		SET AreaJSON=@AreaJSON,ActiveStatus=@ActiveStatus
		WHERE DistributorId=@DistributorId AND AreaRefNo=@AreaRefNo
		SET @RtnValue=@@ROWCOUNT
		
		update sds.tblDistributorAreaMapping set TradingAreaStatus=1, LastUpdateBy='MANUAL', LastUpdateDateTime=getdate()
		where DistributorID=@DistributorId and AreaRefNo=@AreaRefNo

	 END
END



GO
/****** Object:  StoredProcedure [NIU].[usp_AddFormatedCoordinates_Temp]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_AddFormatedCoordinates_Temp]
--	Description		:	to insert Correct Coordinates for Wards 

--	Author			:	Rahul	22-Nov-2019

--	Date Modified		Modified By	     Modifications
--	22-Nov-2019		Rahul         Created
**************************************************************/

create PROCEDURE [NIU].[usp_AddFormatedCoordinates_Temp]
	@AreaCode varchar(100),
	@AreaName varchar(500),
	@TalukaCode varchar(500),
	@AreaJSON varchar(max),
	@Out int output
	
AS
BEGIN

	declare @id int;
	set @id =0;
	IF NOT EXISTS (SELECT AreaCode FROM SDS.tblAreaMasterTemp WITH(NOLOCK) WHERE AreaCode=@AreaCode)
	BEGIN
		INSERT INTO SDS.tblAreaMasterTemp([AreaCode],[AreaName],[TalukaCode],[ActiveFlag],[LastUpdateTime])
		VALUES (@AreaCode,@AreaName,@TalukaCode,'Y',getdate())				

		INSERT INTO SDS.tblGeoCoordinateMasterTemp([AreaCode],[AreaJSON],[LastUpdateDateTime])
		VALUES (@AreaCode,@AreaJSON,getdate())
		if(SCOPE_IDENTITY()	> 0)
		SET @Out = 1;
	END	
		
	--SELECT @Id AS ActiveUserId
END


GO
/****** Object:  StoredProcedure [NIU].[usp_AddOrderItemDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_AddOrderItemDetails]
--	Description		:	ADD Order Items in tblOrderItemDetails

--	Author			:	Rakesh	15-January-2018

--	Date Modified		Modified By	     Modifications
--	15-January-2018		Rakesh	         Created
**************************************************************/
CREATE PROCEDURE [NIU].[usp_AddOrderItemDetails]
	-- Add the parameters for the stored procedure here
	@OrderID bigint, 
	@ItemID int,
	@Price money,
	@Quantity int,
	@TotalPrice money		
	
AS
BEGIN
	
	DECLARE @OrderItemID BIGINT = 0
		
	INSERT INTO SDS.tblOrderItemDetails
	(OrderID,ItemID,Price,OrderQuantity,FilledQuantity,EmptyQuantity,RemainingQuantity,TotalPrice,LastUpdateDate) 
	VALUES(@OrderID,@ItemID,@Price,@Quantity,0,0,@Quantity,@TotalPrice,GETDATE())  
	
	SET @OrderItemID = SCOPE_IDENTITY()
	
	RETURN @OrderItemID
END



GO
/****** Object:  StoredProcedure [NIU].[usp_AddUpdatetripCaseActiveDistwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [NIU].[usp_AddUpdatetripCaseActiveDistwise]
--declare
@pk_MappingId bigint,
@DistributorId int,
@CaseId int,
@Status nvarchar(20),
@Result bigint OUTPUT
AS
BEGIN
	--SET FMTONLY OFF
	set @Result=0;


	IF(@Status='Delete')
	Begin
		IF  EXISTS(Select pk_MappingId from SDS.[tbltripCaseActiveDistributorwise] where pk_MappingId=@pk_MappingId)
		BEGIN
			delete from SDS.[tbltripCaseActiveDistributorwise] where pk_MappingId=@pk_MappingId
			set @Result= @@rowcount
		END
	END
	ELSE 
	BEGIN
		IF NOT EXISTS(Select pk_MappingId from SDS.[tbltripCaseActiveDistributorwise] where pk_MappingId=@pk_MappingId)
		BEGIN
			INSERT INTO [SDS].[tbltripCaseActiveDistributorwise]([DistributorId],[CaseId],[LastUpdatedDate])
			VALUES        (@DistributorId,@CaseId, GETDATE())
			set @Result= SCOPE_IDENTITY()
		
		END
		ELSE 
		BEGIN
			Update SDS.[tbltripCaseActiveDistributorwise] 
			Set DistributorId=@DistributorId,
				CaseId=@CaseId,
				LastUpdatedDate=GETDATE() 
			where pk_MappingId=@pk_MappingId

			set @Result= @@rowcount
		END

	END
	
END



GO
/****** Object:  StoredProcedure [NIU].[usp_ClusterAndAreawiseConsumerCounts_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_ClusterMasterList 8131,'Y'

create proc [NIU].[usp_ClusterAndAreawiseConsumerCounts_NotInUse]
--declare
@DistributorId int,
@ActiveFlag varchar(10),
@ClusterId int

--set @DistributorId=88888 set @ActiveFlag='Y'
as
BEGIN
	declare @tbl Table(ClusterId int,DistributorId int,ClusterName nvarchar(100),AreaRefNo numeric(17,0),AreaCode varchar(10),AreaName varchar(100),AllConsumers int,Active int,InActive int,Inside int,OutSide int,
	Verified int,Auto int,Manual int,MI int,Ezygas int, NotAvailable int,AreaClusterId int)

	insert into @tbl
	SELECT c.ClusterId, c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName) as ClusterName, 
	0 as AreaRefNo,0 as AreaCode,null as AreaName,
	0 as AllConsumers,0 as Active,0 as InActive, 0 as Inside, 0 as OutSide,
	0 as Verified, 0 as Auto, 0 as Manual,0 as MI,0 as Ezygas, 0 as NotAvailable,0 as AreaClusterId
	--(select count(AreaRefNo) from sds.tblAreaClusterMapping where AreaClusterId=c.ClusterId) AreaCount
	FROM 
	SDS.tblClusterMaster AS c WITH(NOLOCK)
	where c.DistributorId=@DistributorId and c.IsActive=@ActiveFlag

	insert into @tbl
	SELECT 0 as ClusterId, a.DistributorID as DistributorId, null as ClusterName,
	a.AreaRefNo, a.AreaCode ,SDS.fn_CamelCase( a.AreaName ) as AreaName,
	0 as AllConsumers,0 as Active,0 as InActive, 0 as Inside, 0 as OutSide,
	0 as Verified, 0 as Auto, 0 as Manual,0 as MI,0 as Ezygas, 0 as NotAvailable,isnull(m.AreaClusterId,0) AreaClusterId
	FROM DCMS.tblDistributorAreaMaster a with (nolock) left outer join sds.tblAreaClusterMapping m with (nolock) on a.AreaRefNo=m.areaRefNo
	where (a.DistributorID=@DistributorId or @DistributorId=0) and (a.StatusFlag='Y') 
	and a.AreaRefNo in (select AreaRefNo from sds.tblDistributorAreaMapping where  (DistributorID=@DistributorId or @DistributorId=0) and (nullif(areaCode,'') is not null))
	
	select * from @tbl
END



GO
/****** Object:  StoredProcedure [NIU].[usp_DistributorAreaMappingAdd_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorAreaMappingAdd 14193

create proc [NIU].[usp_DistributorAreaMappingAdd_NotInUse]
--declare
@DistributorId int,
@RtnValue int output
--set @DistributorId=14193

as
BEGIN

	insert into sds.tblDistributorAreaMapping(AreaRefNo,DistributorID,DBLinkAreaCode,AreaName,TradingAreaStatus,StatusFlag,LastUpdateBy,LastUpdateDateTime)

	select da.AreaRefNo,da.DistributorID,da.AreaCode, da.AreaName,0,'Y','DataMigration',getdate() 
	from DCMS.tblDistributorAreaMaster AS da  with(nolock)
	where DistributorID=@DistributorId and statusflag='Y'
	and AreaRefNo not in (select AreaRefNo from sds.tblDistributorAreaMapping with(nolock) where DistributorID=@DistributorId and statusflag='Y')

	update sds.tblDistributorAreaMapping 
	set AreaCode=r2.AreaCode, 
	MajorArea=r2.AreaName,
	TradingAreaStatus=1
	from 
	(
		SELECT a.AreaRefNo,  loc.AreaCode, loc.AreaName, loc.TalukaName, loc.DistrictName
		FROM DCMS.tblDistributorAreaMaster AS a with(nolock) INNER JOIN DCMS.tblDistributorMaster AS d with(nolock) ON a.DistributorID = d.DistributorId 
		INNER JOIN DCMS.tblDistrictMaster AS dt with(nolock) ON d.DistrictCode = dt.DistrictCode 
		LEFT OUTER JOIN (SELECT a.AreaCode, a.AreaName, t.TalukaName, dt.DistrictName
		FROM SDS.tblDistrictMaster AS dt with(nolock) INNER JOIN SDS.tblTalukaMaster AS t with(nolock) ON dt.DistrictCode = t.DistrictCode 
		INNER JOIN SDS.tblAreaMaster AS a with(nolock) ON t.TalukaCode = a.TalukaCode
		) AS loc ON a.AreaName COLLATE SQL_Latin1_General_CP1_CI_AS = loc.AreaName AND dt.DistrictName COLLATE SQL_Latin1_General_CP1_CI_AS = loc.DistrictName
		WHERE        (a.DistributorID = @DistributorId) 
	) r2 inner join sds.tblDistributorAreaMapping r1 on r1.AreaRefNo=r2.AreaRefNo and r1.AreaName=r2.AreaName 
	where r1.TradingAreaStatus=0 and DistributorID=@DistributorId

-- Add Geo coordinates for distributor area table
	insert into sds.tblDistributorAreaGeoCoordinates(DistributorId,AreaRefNo,AreaJSON,ActiveStatus,LastUpdateDateTime)
	select da.DistributorID, da.AreaRefNo, g.AreaJSON,1, getdate() 
	from  sds.tblGeoCoordinateMaster g inner join sds.tblDistributorAreaMapping da on da.AreaCode=g.AreaCode and da.LastUpdateBy='DataMigration'
	where AreaRefNo not in (select AreaRefNo from sds.tblDistributorAreaGeoCoordinates) and da.DistributorID=@DistributorId

	set @RtnValue=@@rowcount
END



GO
/****** Object:  StoredProcedure [NIU].[usp_DistributorAreaMappingList_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--			sds.usp_DistributorAreaMappingList 14145

CREATE proc [NIU].[usp_DistributorAreaMappingList_NotInUse]
--declare
@DistributorId int  --  =15139

as

SELECT        dam.AreaRefNo, dam.DistributorID, dam.DBLinkAreaCode,SDS.fn_CamelCase( dam.MajorArea) as AreaName, dam.AreaCode,SDS.fn_CamelCase( dam.MajorArea )as MajorArea , 
dam.TradingAreaStatus, dam.StatusFlag, dam.LastUpdateBy, dam.LastUpdateDateTime, g.AreaJSON
FROM  SDS.tblDistributorAreaMapping dam with(nolock) left outer join sds.tblDistributorAreaGeoCoordinates g on dam.AreaRefNo=g.AreaRefNo and dam.DistributorID=g.DistributorId
where dam.DistributorId=@DistributorId and isnull(ltrim(rtrim(g.AreaJSON)),'')<>''
order by dam.AreaName


GO
/****** Object:  StoredProcedure [NIU].[usp_DistributorAreaMappingUpdate_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	Update Areacode and MajorArea manually 

CREATE proc [NIU].[usp_DistributorAreaMappingUpdate_NotInUse]
@DistributorId int,
@AreaRefNo varchar(20),
@AreaCode nvarchar(50),
@MajorArea nvarchar(200),
@AreaJSON nvarchar(max),
@Action varchar(10),
@RtnValue int output

as

BEGIN
if(@Action ='ADD')
begin
	update sds.tblDistributorAreaMapping 
	set AreaCode=@AreaCode, 
		MajorArea=@MajorArea,
		TradingAreaStatus=1,
		LastUpdateBy='MANUAL',
		LastUpdateDateTime=getdate()
		where DistributorID=@DistributorId and AreaRefNo=@AreaRefNo
	
	if not exists(select 1 from sds.tblDistributorAreaGeoCoordinates with (nolock) where DistributorId =@DistributorId and AreaRefNo=@AreaRefNo)
	Begin
		insert into sds.tblDistributorAreaGeoCoordinates(DistributorId,AreaRefNo,AreaJSON,ActiveStatus,LastUpdateDateTime)
		select @DistributorId, @AreaRefNo, @AreaJSON,1, getdate() --from  sds.tblGeoCoordinateMaster where AreaCode =@AreaCode
	End
	Else
	Begin
		update sds.tblDistributorAreaGeoCoordinates 
		set AreaJSON=@AreaJSON,--(select AreaJSON from sds.tblGeoCoordinateMaster where AreaCode ='MHLoni-kalbhor14699'),
			ActiveStatus=1,
			LastUpdateDateTime=getdate()
		where DistributorId=@DistributorId and AreaRefNo=@AreaRefNo
	End

	set @RtnValue=@@rowcount
	end	
		 
 else if(@Action ='DELETE')
  begin

	  update  sds.tblDistributorAreaMapping 	
	  set AreaCode = null,
	  MajorArea = null,
	  TradingAreaStatus =0
	  where DistributorID=@DistributorId and AreaRefNo=@AreaRefNo
	  set @RtnValue =@@ROWCOUNT 

		if(@RtnValue > 0)
	  Begin
	  delete from  sds.tblDistributorAreaGeoCoordinates where DistributorId=@DistributorId and AreaRefNo=@AreaRefNo	
	  set @RtnValue =@@ROWCOUNT 
	  End
  end
 
END



GO
/****** Object:  StoredProcedure [NIU].[usp_DistributorClusterCoordinatesAdd_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [NIU].[usp_DistributorClusterCoordinatesAdd_NotInUse]
@DistributorId	int,
@AreaClusterId	int,
@AreaJSON	nvarchar(MAX),
@ActiveStatus	char(1),
@RtnValue bigint output
as	

BEGIN
	If not exists(select 1 from sds.tblDistributorClusterCoordinates WITH(NOLOCK) where DistributorId=@DistributorId and AreaClusterId=@AreaClusterId)
	Begin
		insert into sds.tblDistributorClusterCoordinates(DistributorId,AreaClusterId,AreaJSON,ActiveStatus,LastUpdateDateTime)
		values(@DistributorId,@AreaClusterId,@AreaJSON,@ActiveStatus,getdate())

		set @RtnValue=scope_identity()
	End
	else
	Begin
		update sds.tblDistributorClusterCoordinates
		set AreaJSON=@AreaJSON,
			ActiveStatus=@ActiveStatus,
			LastUpdateDateTime=getdate()
			where DistributorId=@DistributorId and AreaClusterId=@AreaClusterId

			set @RtnValue=@AreaClusterId
	End
END



GO
/****** Object:  StoredProcedure [NIU].[Usp_DistributorClusterCoordinatesList_NotInuse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.Usp_DistributorClusterCoordinatesList 88888, 0

create proc [NIU].[Usp_DistributorClusterCoordinatesList_NotInuse]
--declare
@DistributorId int,
@ClusterId bigint
--set @DistributorId=15139
--set @ClusterId=0
as
Begin
	declare @Table TABLE(ClusterId int, DistributorId int, ClusterName nvarchar(50), AreaJSON nvarchar(max), LastUpdatedDatetime DateTime, 
	IsActive nchar(1), AreaCount int, SelectArea nvarchar(max))
	
	insert into @Table
	SELECT c.ClusterId as ClusterId,c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName),cc.AreaJSON, c.LastUpdatedDatetime,c.IsActive, 
	(select count(MajorAreaCode) from sds.tblDistributorClusterMajorAreaMapping where ClusterId=c.ClusterId and DistributorId=@DistributorId) AreaCount,
	
	isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(mac.majorAreaCode,'')) from sds.tblDistributorClusterMajorAreaMapping mac
	where mac.DistributorId=@DistributorId and mac.ClusterId=cc.AreaClusterId  FOR XML PATH('')),1,1,'')),'') AS SelectArea
	
	FROM sds.tblClusterMaster AS c WITH(NOLOCK) left outer join SDS.tblDistributorClusterCoordinates cc ON c.ClusterId=cc.AreaClusterId
	where c.DistributorId=@DistributorId and (c.ClusterId=isnull(@ClusterId,0) or isnull(@ClusterId,0)=0)

	Select * from @Table
End



GO
/****** Object:  StoredProcedure [NIU].[usp_DistriUnMappedAreaCount_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [NIU].[usp_DistriUnMappedAreaCount_NotInUse]
--declare
@DistributorId int
--set @DistributorId=14193
as

select count(1) CntUnmappedArea from DCMS.tblDistributorAreaMaster  with (nolock)
where DistributorID=@DistributorId and statusflag='Y'
and AreaRefNo not in (select AreaRefNo from sds.tblDistributorAreaMapping with (nolock) where DistributorID=@DistributorId and statusflag='Y')



GO
/****** Object:  StoredProcedure [NIU].[usp_GenerateTripsForClusters_Old]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--------		sds.usp_GenerateTripsForClusters 14193

CREATE Proc [NIU].[usp_GenerateTripsForClusters_Old]
--declare
@DistributorId int
--set @DistributorId=14193

as

SET FMTONLY OFF
BEGIN
----------------- Get Cluster wise order count to pick for trip planning
	declare  @clusterwiseOrderCnt table(id int identity,clusterId int,ClusterName nvarchar(200),NoOfTrips int, vehicleId bigint, VehCapacity int, orderCnt int)
	
	insert into @clusterwiseOrderCnt	
	SELECT   c.clusterid, c.AreaClusterName, isnull(dc.NoOfTrip,0),v.VehicleId, isnull(v.RTOCapacity,0),isnull(dc.NoOfTrip,0)* isnull(v.RTOCapacity,0) 
	FROM sds.tblClusterMaster c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId
	left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
	left outer join SDS.tblVehicleMaster AS v ON v.VehicleId = dv.VehicleId	
	where c.IsActive='Y' and dc.IsActive='Y' and dv.Active='Y' and v.Active='Y' and c.distributorId=@DistributorId
	
	--select * from @clusterwiseOrderCnt
-----------------------------------------------------------------------------------
	DECLARE @GroupCode VARCHAR(3)=''
				
		SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
		if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
		--print @GroupCode

	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

	CREATE TABLE #tblpendingOdr(id int identity, BackLogdays int,ClusterId int,VehicleId bigint, StaffRefNo numeric(17, 0),DistributorID int,
	AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),ConsumerNo int,ConsumerName varchar(100),
	AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),PlaceId nvarchar(500),ConMobileNo numeric(10,0),ConAddress nvarchar(500),
	NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money, Source nvarchar(50))

declare @c int, @c1 int, @OrderCnt int, @ClusterId int, @strquery varchar(max), @VehicleId bigint, @OrderPickBuffer int

select @c1=max(id) from @clusterwiseOrderCnt

set @c=1

While (@c<=@c1)
Begin
	set @OrderCnt=0; set @ClusterId=0; set @strquery=''; set @VehicleId=0;
	select @OrderCnt=orderCnt, @ClusterId=clusterId,@VehicleId=VehicleId from @clusterwiseOrderCnt where id=@c
	select @OrderPickBuffer=isnull(OrderPickBuffer,0) from sds.tblAppConfigData
	---select @ClusterId, @OrderCnt,@OrderPickBuffer
	set @OrderCnt=@OrderCnt+(@OrderCnt*@OrderPickBuffer/100)
	--print  @OrderCnt
	-- temp added to select 23 records for each cluster ---- RajendraG
	--set @OrderCnt=23

	set @strquery=( '
		insert into #tblpendingOdr (BackLogdays,ClusterId,VehicleId, StaffRefNo,DistributorID,AreaRefNo,OrderRefNo,OrderNo,OrderDate,UniqueConsumerId,ConsumerNo,ConsumerName,
		AreaName,Latitude,Longitude,PlaceId,ConMobileNo,ConAddress,NatureCode,PriceCode,ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,Source)
		
		SELECT top '+convert(nvarchar(3),@OrderCnt)+' datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId,'+convert(nvarchar(10),@VehicleId)+', dc.StaffRefNo, o.DistributorID, o.AreaRefNo, o.OrderRefNo, o.OrderNo,o.OrderDate,
		o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, c.Latitude, c.Longitude, c.PlaceId, c.MobileNo, c.Address,
		o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP,c.Source
		FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) LEFT OUTER JOIN 
		SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
		DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
		SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
		SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
		DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
		SDS.tblTripPlanningDetails t with(nolock) on t.OrderRefNo = o.OrderRefNo
		WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
		AND dc.ClusterId = '+convert(nvarchar(20),@ClusterId)+' 
		and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(20),@DistributorId)+')
		 AND t.OrderRefNo IS NULL		
		order by o.OrderDate, o.orderrefno' )

		print @strquery
		exec (@strquery)

	set @c=@c+1
	End
	
	-- Added Temporary as there are few consumers which are not in HPCLDCMS database but in refill booking table
	--delete from #tblpendingOdr where (isnull(Latitude,'')='' or isnull(Longitude,'')='')
	
if exists(select 1 from #tblpendingOdr where (isnull(Latitude,'')='' or isnull(Longitude,'')='' or isnull(PlaceId,'')=''))
Begin
--print 1
	select 0 As IsLocated, po.BackLogdays,po.ClusterId, po.VehicleId,po.StaffRefNo,po.DistributorID,po.AreaRefNo,po.OrderRefNo,po.OrderNo,po.OrderDate,
	po.UniqueConsumerId,c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName ,SDS.fn_CamelCase( po.AreaName ) as AreaName ,po.Latitude,po.Longitude,po.PlaceId,c.MobileNo ConMobileNo,
	c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress, cast(c.pin as numeric(6,0)) as pin, po.NatureCode,po.PriceCode,
	SDS.fn_CamelCase( po.ItemDescription ) as ItemDescription,po.OrderQuantity,po.OrderStatusCode,po.ExpectedDeliveryDate,po.RSP,SDS.fn_CamelCase( po.Source ) as Source
	from #tblpendingOdr po left outer join DCMS.tblConsumerMaster AS c WITH (NOLOCK) on po.UniqueConsumerId=c.UniqueConsumerId
	--inner join DCMS.tblConsumerContact AS cc WITH (NOLOCK) on c.ContactRefNo=cc.ContactRefNo
	--inner join DCMS.tblConsumerAddress AS ca WITH (NOLOCK) on c.AddressRefNo=ca.AddressRefNo
	inner join DCMS.tblDistributorAreaMaster AS ar WITH (NOLOCK) on c.AreaRefNo=ar.AreaRefNo
	where c.ConsumerStatus='Active' and (isnull(po.Latitude,'')='' or isnull(po.Longitude,'')='' or isnull(PlaceId,'')='') order by po.clusterId
End
else
Begin
--print 2
	select  1 As IsLocated, BackLogdays,ClusterId, VehicleId, StaffRefNo, DistributorID,AreaRefNo,OrderRefNo,OrderNo,OrderDate,
	UniqueConsumerId,ConsumerNo,SDS.fn_CamelCase( ConsumerName ) as ConsumerName,SDS.fn_CamelCase( AreaName ) as AreaName,Latitude,Longitude,PlaceId,ConMobileNo,
	ConAddress ConsumerAddress,cast(0 as numeric(6,0)) as pin,NatureCode,PriceCode,
	SDS.fn_CamelCase( ItemDescription ) as ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,SDS.fn_CamelCase( Source ) as Source
	from #tblpendingOdr order by clusterId, OrderDate
End
drop table #tblpendingOdr

END


GO
/****** Object:  StoredProcedure [NIU].[usp_GetInvoiceDetailsByInvoiceNoForItemReturn]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetInvoiceDetailsByInvoiceNoForItemReturn
--	Description		:	Get Invoice Details By InvoiceNo for Item Return

--	Author			:	rahul

--	Date Modified		Modified By	     Modifications
--	29-06-2019		Rahul			Created
**************************************************************/

create PROCEDURE [NIU].[usp_GetInvoiceDetailsByInvoiceNoForItemReturn]

@InvoiceNo  VARCHAR(100),
@DistributorId int
AS
BEGIN		
			--SELECT ird.LineNumber,InvoiceNo,ird.PriceCode,ird.LoadEMRFlag,ird.InvoiceQty,InvoiceDate,ird.ReceiptQty,ird.TruckNo,ipcm.ItemCode,ipcm.ItemDescription
			--FROM SDS.tblItemReceiptDtls ird with(nolock) inner join
			--SDS.tblItemreceiptHdr irh with(nolock) on ird.ReceiptRefNo=irh.ReceiptRefNo inner join
			--DCMS.tblItemPriceCodeMap ipcm with(nolock) on ipcm.PriceCode = ird.PriceCode		
			--where irh.InvoiceNo=@InvoiceNo and irh.DistributorId=@DistributorId	

			IF(PATINDEX('%[a-z]%', @InvoiceNo) = 1)
		BEGIN
			SELECT	top 1 irh.InvoiceNo,ird.PriceCode,ird.InvoiceQty,irh.InvoiceDate,ird.ReceiptQty,
					ird.TruckNo,ipcm.ItemCode,ipcm.ItemDescription,
					(CASE When IRtnH.InvoiceNo is null then 'N' Else 'Y' End)as IsUpload 
			FROM	DCMS.tblItemReceiptDtls ird with(nolock) inner join
					DCMS.tblItemreceiptHdr irh with(nolock) on ird.ReceiptRefNo=irh.ReceiptRefNo inner join
					DCMS.tblItemPriceCodeMap ipcm with(nolock) on ipcm.PriceCode = ird.PriceCode	left outer join 
					[SDS].[tblItemReturnHdr] IRtnH with(nolock) on IRtnH.[InvoiceNo]=irh.InvoiceNo	
			where	ird.TruckNo=@InvoiceNo and irh.DistributorId=@DistributorId
			order by irh.InvoiceDate desc
		END
	ELSE
	BEGIN
			SELECT	irh.InvoiceNo,ird.PriceCode,ird.InvoiceQty,irh.InvoiceDate,ird.ReceiptQty,
					ird.TruckNo,ipcm.ItemCode,ipcm.ItemDescription,
					(CASE When IRtnH.InvoiceNo is null then 'N' Else 'Y' End)as IsUpload 
			FROM	DCMS.tblItemReceiptDtls ird with(nolock) inner join
					DCMS.tblItemreceiptHdr irh with(nolock) on ird.ReceiptRefNo=irh.ReceiptRefNo inner join
					DCMS.tblItemPriceCodeMap ipcm with(nolock) on ipcm.PriceCode = ird.PriceCode	left outer join 
					[SDS].[tblItemReturnHdr] IRtnH with(nolock) on IRtnH.[InvoiceNo]=irh.InvoiceNo	
			where	irh.InvoiceNo=@InvoiceNo and irh.DistributorId=@DistributorId
			order by irh.InvoiceDate desc
	END
END


GO
/****** Object:  StoredProcedure [NIU].[usp_GetItemReturnByItemRefNo]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetItemReturnByItemRefNo
--	Description		:	To View the Stock Item Return Details by Item Return Reference no

--	Author			:	Santosh	09-February-2018

--	Date Modified		Modified By	     Modifications
--	09-February-2018	Santosh	         Created
**************************************************************/

CREATE PROCEDURE [NIU].[usp_GetItemReturnByItemRefNo]
	@ItemReturnRefNo bigint
AS
BEGIN

	BEGIN
			SELECT	icm.ItemDescription, id.EmptyQty,isnull(id.ItemID,0)as ItemID, id.DefectiveQty,icm.ItemShortDescription
			FROM	DCMS.tblItemReturnDtls id inner join
					DCMS.tblItemCodeMaster icm on icm.ItemID = id.ItemID
			WHERE	id.ItemReturnRefNo = @ItemReturnRefNo
	END

END



GO
/****** Object:  StoredProcedure [NIU].[usp_GetPendingOrdersClusterwise_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  sds.usp_GetPendingOrdersClusterwise 14193,0      
      
create PROC [NIU].[usp_GetPendingOrdersClusterwise_NotInUse]      
--declare      
@DistributorId bigint,      
@ClusterId int      
--set @DistributorId=14193 ; set @ClusterId=0      
As      
Begin      
 --declare @dt datetime=getdate()      
 --SET FMTONLY OFF      
      
 --SELECT c.DistributorId, c.ClusterId,SDS.fn_CamelCase( c.AreaClusterName )as AreaClusterName, dc.StaffRefNo,      
 --SDS.fn_CamelCase( db.StaffName ) as StaffName, isnull(bk.TotalPendingOrder,0) PendingOrders,       
 --cast( round(isnull(bk.AvgSale,0),0) as int) AvgDailySale, CAST(bk.Backlog as DECIMAL(10,2)) Backlog,      
 --cast(round((isnull(bk.TotalPendingOrder,0)*100.0)/(select sum(isnull(TotalPendingOrder,0)) from sds.tblDistributorClusterwiseBacklog),1) as decimal(4,1))  as PendingOrderPercent,      
       
 --(select count( distinct tripid) from SDS.tblTripPlanning where ClusterId=c.clusterId  and cast(TripDate as date)=cast(@dt as date)) GeneratedTrips,       
 --(select count( distinct tripid) from SDS.tblTripPlanning where ClusterId=c.clusterId  and cast(TripDate as date)=cast(@dt as date) and (TripStatus='COMPLETED' or TripEndDate is not null )) CompletedTrips,       
 --dc.NoOfTrip,at.RTOCapacity,(isnull(dc.NoOfTrip,0)) - (ceiling (isnull(bk.TotalPendingOrder,0)/convert(float,isnull(nullif(at.RTOCapacity,0),1)))) AvailableTrips,      
 --case when ((isnull(dc.NoOfTrip,0)) - (ceiling (isnull(bk.TotalPendingOrder,0)/convert(float,isnull(nullif(at.RTOCapacity,0),1)))))>=0       
 -- then 'Less Booking, Trips Available' else 'Shortfall of Trips' End TripsAvailRemark,      
 --case when ((isnull(dc.NoOfTrip,0)) - (ceiling (isnull(bk.TotalPendingOrder,0)/convert(float,isnull(nullif(at.RTOCapacity,0),1)))))=0       
 -- then 'No Trips Can Be Used For Another Cluster.'      
 -- when ((isnull(dc.NoOfTrip,0)) - (ceiling (isnull(bk.TotalPendingOrder,0)/convert(float,isnull(nullif(at.RTOCapacity,0),1)))))> 0       
 -- then convert(nvarchar(3),((isnull(dc.NoOfTrip,0)) - (ceiling (isnull(bk.TotalPendingOrder,0)/convert(float,isnull(nullif(at.RTOCapacity,0),1)))))) + ' Trips Can Be Used For Another Cluster.'      
 --else 'Infrastructure Insufficient ' End Remark,      
 --(SELECT max(cd.DistanceFromAgency) FROM SDS.tblConsumerDetails AS cd INNER JOIN SDS.tblAreaClusterMapping ac ON cd.AreaRefNo = ac.AreaRefNo      
 -- where cd.DistributorID=@DistributorId and ac.AreaClusterId=c.ClusterId and upper(isnull(cd.ConsumerStatus,''))='ACTIVE') DistanceFromAgency,      
 --(SELECT max(cd.DistanceFromGodown) FROM SDS.tblConsumerDetails AS cd INNER JOIN SDS.tblAreaClusterMapping ac ON cd.AreaRefNo = ac.AreaRefNo       
 -- where cd.DistributorID=@DistributorId and ac.AreaClusterId=c.ClusterId and upper(isnull(cd.ConsumerStatus,''))='ACTIVE') DistanceFromGodown      
      
 --FROM SDS.tblDeliveryBoyClusterMapping AS dc RIGHT OUTER JOIN SDS.tblClusterMaster AS c ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN      
 -- DCMS.tblDistributorStaffDetails AS db WITH (NOLOCK) ON dc.StaffRefNo = db.StaffRefNo left outer join sds.tblDistributorClusterwiseBacklog bk on c.ClusterId=bk.ClusterId      
 -- left outer join (select distinct t.clusterId, v.RTOCapacity        
 --  from sds.tblTripPlanning t left outer join sds.tblVehicleMaster v on t.VehicleId=v.VehicleId      
 --  where t.distributorId=@distributorId and cast(TripDate as date)=cast(@dt as date)      
 -- ) at on c.ClusterId=at.ClusterId      
       
 --where c.IsActive='Y' and c.DistributorId=@DistributorId and (c.clusterid=@ClusterId or @ClusterId=0) and isnull(bk.TotalPendingOrder,0)>0      
 --order by CAST(bk.Backlog as DECIMAL(10,2)) desc      
      
      
      
      
 DECLARE @TotalPendingOrder int = 0      
 SELECT @TotalPendingOrder= sum(isnull(TotalPendingOrder,0))       
 FROM sds.tblDistributorClusterwiseBacklog with(NOLOCK) where DistributorId =@DistributorId  
      
 SELECT a.DistributorId,a.ClusterId,a.AreaClusterName,a.StaffRefNo,a.StaffName,a.PendingOrders,a.AvgDailySale,a.Backlog,      
 Convert(decimal(4,1),convert(float,ROUND(CAST((e.TotalPendingOrder * 100.0 / @TotalPendingOrder) AS FLOAT), 4))) as PendingOrderPercent,    
 ISNULL(b.GeneratedTrips, 0) as GeneratedTrips,ISNULL(c.CompletedTrips,0) as CompletedTrips,a.NoOfTrip,      
 ISNULL(f.RTOCapacity,0) as RTOCapacity,      
 (isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))) AvailableTrips,      
 case when ((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))>=0       
 then 'Less Booking, Trips Available' else 'Shortfall of Trips' End TripsAvailRemark,      
 case when ((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))=0       
 then 'No Trips Can Be Used For Another Cluster.'      
 when ((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))> 0       
 then convert(nvarchar(3),((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))) + ' Trips Can Be Used For Another Cluster.'      
 else 'Infrastructure Insufficient ' End Remark,      
 d.DistanceFromAgency,d.DistanceFromGodown      
 FROM      
 (      
 --SELECT c.DistributorId, c.ClusterId,SDS.fn_CamelCase( c.AreaClusterName )as AreaClusterName, dc.StaffRefNo,      
 --SDS.fn_CamelCase( db.StaffName ) as StaffName, isnull(bk.TotalPendingOrder,0) PendingOrders,      
 --cast( round(isnull(bk.AvgSale,0),0) as int) AvgDailySale, CAST(bk.Backlog as DECIMAL(10,2)) Backlog,      
 --dc.NoOfTrip      
 --FROM SDS.tblClusterMaster AS c  LEFT OUTER JOIN      
 --SDS.tblDeliveryBoyClusterMapping AS dc ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN      
 --DCMS.tblDistributorStaffDetails AS db WITH (NOLOCK) ON dc.StaffRefNo = db.StaffRefNo left outer join       
 --sds.tblDistributorClusterwiseBacklog bk on c.ClusterId=bk.ClusterId      
 --WHERE c.IsActive='Y' and c.DistributorId=@DistributorId and (c.clusterid=@ClusterId or @ClusterId=0) and isnull(bk.TotalPendingOrder,0)>0    
  
  
 SELECT c.DistributorId, c.ClusterId,SDS.fn_CamelCase( c.AreaClusterName )as AreaClusterName, dc.StaffRefNo,    
 SDS.fn_CamelCase( db.StaffName ) as StaffName, isnull(bk.TotalPendingOrder,0) PendingOrders,    
 cast( round(isnull(bk.AvgSale,0),0) as int) AvgDailySale, CAST(bk.Backlog as DECIMAL(10,2)) Backlog,    
 dc.NoOfTrip    
 FROM SDS.tblClusterMaster AS c  LEFT OUTER JOIN    
 SDS.tblDeliveryBoyClusterMapping AS dc ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN    
 DCMS.tblDistributorStaffDetails AS db WITH (NOLOCK) ON dc.StaffRefNo = db.StaffRefNo   
 left outer join   
 (select DistributorId, clusterId,-- max(EntryDate)
 TotalPendingOrder, AvgSale,Backlog from sds.tblDistributorClusterwiseBacklog where DistributorId=14193   
 group by DistributorId, clusterId, TotalPendingOrder, AvgSale,Backlog) bk on bk.DistributorId=c.DistributorId and bk.clusterId=c.ClusterId  
 WHERE c.IsActive='Y' and c.DistributorId=@DistributorId and (c.clusterid=0 or 0=0) and isnull(bk.TotalPendingOrder,0)>0    
 ) as a      
 LEFT OUTER JOIN      
 (      
 select ClusterId, count(tripid) as GeneratedTrips      
 from SDS.tblTripPlanning  with(NOLOCK)      
  where cast(TripDate as date)=cast(getdate() as date)      
  GROUP BY ClusterId      
 ) as b on a.ClusterId = b.ClusterId      
 LEFT OUTER JOIN      
 (       
  select ClusterId, count(tripid) as CompletedTrips      
 from SDS.tblTripPlanning  with(NOLOCK)      
 where cast(TripDate as date)=cast(getdate() as date) and (TripStatus='COMPLETED' or TripEndDate is not null )      
 GROUP BY ClusterId      
 ) as c on c.ClusterId = a.ClusterId      
 LEFT OUTER JOIN      
 (      
 SELECT ac.AreaClusterId, max(cd.DistanceFromAgency) as DistanceFromAgency , max(cd.DistanceFromGodown) as DistanceFromGodown      
 FROM SDS.tblConsumerDetails AS cd INNER JOIN SDS.tblAreaClusterMapping ac ON cd.AreaRefNo = ac.AreaRefNo    
 where cd.DistributorID=@DistributorId and upper(isnull(cd.ConsumerStatus,''))='ACTIVE'      
 GROUP BY ac.AreaClusterId      
 ) as d on d.AreaClusterId =  a.ClusterId      
 LEFT OUTER JOIN      
 (      
 SELECT clusterId, SUM(TotalPendingOrder) as TotalPendingOrder      
 from sds.tblDistributorClusterwiseBacklog      
 GROUP BY clusterId      
 ) as e on e.clusterId = a.ClusterId      
 LEFT OUTER JOIN      
 (      
 select distinct t.clusterId, v.RTOCapacity        
 from sds.tblTripPlanning t left outer join sds.tblVehicleMaster v on t.VehicleId=v.VehicleId      
 where t.distributorId=@DistributorId and cast(TripDate as date)=cast(getdate() as date)      
 ) as f on f.ClusterId=e.clusterId      
      
End      
GO
/****** Object:  StoredProcedure [NIU].[usp_GetPendingOrdersTotalItemCountByDeliveryBoyId]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_GetDistributorOrdersByDistId]
--	Description		:	To Get DeliveryBoy item wise count of pending order

--	Author			:	Swapnil	03-FEB-2018

--	Date Modified		Modified By	     Modifications
--	03-FEB-2018      	Swapnil         Created
**************************************************************/
CREATE PROCEDURE [NIU].[usp_GetPendingOrdersTotalItemCountByDeliveryBoyId]
@DeliveryBoyId numeric(17,0),
@DistributorId int,
@status nvarchar(100)

AS
BEGIN

		select  im.ItemID,im.ItemDescription,SUM(ISNULL(od.OrderQuantity,0)) as OrderQty,im.ItemShortDescription
		from SDS.tblOrder o right outer join
		SDS.tblOrderItemDetails od on o.OrderId = od.OrderID right outer join
		SDS.tblItemCodeMaster im on im.ItemID = od.ItemID and o.OrderStatus = @status and o.DeliveryBoyRefNo=@DeliveryBoyId AND o.DistributorId=@DistributorId 
		where im.Active='Y'   
		GROUP BY im.ItemID,im.ItemDescription,im.ItemShortDescription
		
END




GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReceiptDtlsAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [NIU].[usp_ItemReceiptDtlsAdd]
@ReceiptRefNo	numeric(17, 0),
@LineNumber	tinyint,
@PriceCode	int,
@LoadEMRFlag	varchar(15),
@InvoiceQty	int,
@ReceiptQty	int,
@TruckNo	varchar(20),
@LastUpdateBy	varchar(20),
@RtnValue bigint output

as

BEGIN
	if exists(select 1 from sds.tblItemReceiptDtls where ReceiptRefNo=@ReceiptRefNo and isnull(ProcessFlag,'N')='Y')
	Begin
		set @RtnValue =-2
	End
	else
	Begin
		insert into sds.tblItemReceiptDtls(ReceiptRefNo,LineNumber,PriceCode,LoadEMRFlag,InvoiceQty,ReceiptQty,TruckNo,LastUpdateBy,LastUpdateDateTime,ProcessFlag)
		values(@ReceiptRefNo,@LineNumber,@PriceCode,@LoadEMRFlag,@InvoiceQty,@ReceiptQty,@TruckNo,@LastUpdateBy,getdate(),'N')

		set @RtnValue = scope_identity()


		-- Add/Update Distributor System Stock
		declare @DistributorID bigint
		select @DistributorID= DistributorID from sds.tblItemReceiptHdr where ReceiptRefNo=@ReceiptRefNo

		exec sds.usp_DistributorSystemStockUpdate  @DistributorID,@PriceCode,@ReceiptQty,0,@LastUpdateBy,0

		-- Add/Update Distributor-Godown stock
		declare @ItemId int
		select @itemId = ItemCode from DCMS.tblItemPriceCodeMap with (nolock) where PriceCode=@PriceCode

		exec sds.usp_DistributorStockUpdate @DistributorId,@ItemID,@ReceiptQty,0,0,@LastUpdateBy,0

	End
END



GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReceiptHdrAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [NIU].[usp_ItemReceiptHdrAddEdit]
@ReceiptRefNo 	bigint,
@ReceiptDate	date,
@InvoiceNo	varchar(20),
@InvoiceDate	date,
@ReceiptStatus	varchar(5),
@DistributorID	int,
@TotalAmount	money,
@LastUpdateBy	varchar(20),
@Action nvarchar(20),
@ReceiptRefId	 bigint OUTPUT

AS
BEGIN
If (upper(@Action)='ADD')
Begin
	if not exists(select 1 from sds.tblItemReceiptHdr where InvoiceNo=@InvoiceNo and DistributorID=@DistributorID)
	Begin
		-- Generate New Receipt Ref No.
		DECLARE @TodayCount int=0,@ReceiptRefNoStr nvarchar(25), @ReceiptRefNoNew bigint =0
	
		SELECT @TodayCount = COUNT(1) FROM sds.tblItemReceiptHdr with(nolock) WHERE DistributorId = @DistributorId AND CAST(@ReceiptDate as DATE) = CAST(@ReceiptDate as DATE)
		SET @TodayCount = @TodayCount+1
		print @TodayCount
	
		SET @ReceiptRefNoStr = '1'+ RIGHT('0'+ CAST(YEAR(@ReceiptDate) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(@ReceiptDate) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(@ReceiptDate) AS varchar(2)),2) + 
		RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@TodayCount)))) + CONVERT(varchar(8000),@TodayCount)
	
		SET @ReceiptRefNoNew = CAST(@ReceiptRefNoStr as bigint)
		print @ReceiptRefNoNew

		--Add Item Receipt Header 
		insert into sds.tblItemReceiptHdr(ReceiptRefNo,ReceiptDate,InvoiceNo,InvoiceDate,ReceiptStatus,DistributorID,TotalAmount,LastUpdateBy,LastUpdateDateTime,ProcessFlag)
		values(@ReceiptRefNoNew,@ReceiptDate,@InvoiceNo,@InvoiceDate,'SUBTD',@DistributorID,@TotalAmount,@LastUpdateBy,getdate(),'N')

		set @ReceiptRefId=@ReceiptRefNoNew

		-- delete detils entries to add new 
		delete from sds.tblItemReceiptDtls where ReceiptRefNo=@ReceiptRefNo and isnull(ProcessFlag,'N')='N'
	End
	Else
	Begin
		set @ReceiptRefId=-1
	End
End
Else if (upper(@Action)='EDIT')
Begin
	if exists(select 1 from sds.tblItemReceiptHdr where InvoiceNo=@InvoiceNo and DistributorID=@DistributorID and ProcessFlag='N')
	Begin
		--Update Item Receipt Header 
		Update sds.tblItemReceiptHdr
		set ReceiptDate=@ReceiptDate,
			TotalAmount=@TotalAmount,
			LastUpdateBy=@LastUpdateBy,
			LastUpdateDateTime=Getdate()
		where ReceiptRefNo=@ReceiptRefNo and InvoiceNo=@InvoiceNo and DistributorID=@DistributorID

		set @ReceiptRefId=@ReceiptRefNo

		-- delete detils entries to add new 
		delete from sds.tblItemReceiptDtls where ReceiptRefNo=@ReceiptRefNo and isnull(ProcessFlag,'N')='N'
	End
	Else
	Begin
		set @ReceiptRefId=-2
	End
End

END



GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReceiptHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [NIU].[usp_ItemReceiptHistory]
--declare
@DistributorID bigint,
@FromDate datetime,
@ToDate datetime
--set @DistributorID=14193 set @FromDate='2019-06-10' set @ToDate='2019-07-15'
as

SELECT ir.ReceiptRefNo, ir.ReceiptDate, ir.InvoiceNo, ir.InvoiceDate, ir.ReceiptStatus, ir.DistributorID, ir.TotalAmount, 
ird.PriceCode, ird.InvoiceQty, ird.ReceiptQty, ird.TruckNo, ird.LastUpdateDateTime,
ipm.PackageCode,  ipm.ItemCode, ipm.ItemDescription
FROM DCMS.tblItemReceiptHdr AS ir LEFT OUTER JOIN
DCMS.tblItemReceiptDtls AS ird ON ir.ReceiptRefNo = ird.ReceiptRefNo
left outer join DCMS.tblItemPriceCodeMap ipm with (nolock) on ird.PriceCode=ipm.PriceCode
where ipm.ActiveFlag='Y' and DistributorID=@DistributorID
and (cast(ir.ReceiptDate as date)>=cast(@FromDate as date) or isnull(@FromDate,'')='') 
and (cast(ir.ReceiptDate as date)<=cast(@ToDate as date) or isnull(@ToDate,'')='')
order by ir.InvoiceDate desc


GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReceiptItemDetailsHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [NIU].[usp_ItemReceiptItemDetailsHistory]
@ReceiptRefNo bigint

as

BEGIN
	SELECT  r.ReceiptRefNo,r.PriceCode,r.InvoiceQty,r.ReceiptQty,r.TruckNo, --r.ProcessFlag,
			i.ItemDescription, SDS.fn_CamelCase( i.ItemShortDescription ) as ItemShortDescription 
	FROM    DCMS.tblItemReceiptDtls r with (nolock) 
			inner join DCMS.tblItemPriceCodeMap i with (nolock) on r.PriceCode=i.PriceCode
	where ReceiptRefNo=@ReceiptRefNo
END


GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReceiptMasterHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [NIU].[usp_ItemReceiptMasterHistory]
--declare 
@DistributorId int,
@FromDate datetime,
@ToDate datetime

--set @DistributorId=88888; set @FromDate='2019-06-01'; set @ToDate='2020-01-09'
as
BEGIN
	select  r.ReceiptRefNo, r.ReceiptDate, r.InvoiceNo, r.InvoiceDate, SDS.fn_CamelCase(r.ReceiptStatus) as ReceiptStatus, r.DistributorID, r.TotalAmount,
	SUM(d.InvoiceQty) as InvoiceQty, SUM(d.ReceiptQty) as ReceiptQty, 
	(select top 1 TruckNo from DCMS.tblItemReceiptDtls where ReceiptRefNo=r.ReceiptRefNo) as TruckNo

	from DCMS.tblItemReceiptHdr r with(nolock) inner join DCMS.tblItemReceiptDtls d with(nolock) on r.ReceiptRefNo=d.ReceiptRefNo
	where DistributorID=@DistributorId and cast(r.ReceiptDate as date) between cast(@FromDate as date) and cast(@ToDate as date)
	group By  r.ReceiptRefNo, r.ReceiptDate, r.InvoiceNo, r.InvoiceDate, r.ReceiptStatus, r.DistributorID, r.TotalAmount
	order by InvoiceDate Desc
END

--SELECT			IRH.[ReceiptRefNo],IRH.[ReceiptDate],IRH.[InvoiceNo],IRH.[InvoiceDate],
--				SDS.fn_CamelCase( IRH.[ReceiptStatus] )as ReceiptStatus,
--				IRH.[DistributorID],IRH.[TotalAmount],
--				SUM(IRD.[InvoiceQty]) as InvoiceQty,SUM(IRD.ReceiptQty) as ReceiptQty,
--				(Select top 1 TruckNo from [SDS].[tblItemReceiptDtls] where [ReceiptRefNo]=IRH.[ReceiptRefNo]) as TruckNo
				
--FROM            [SDS].[tblItemReceiptHdr] AS IRH with(nolock)  inner join 
--				[SDS].[tblItemReceiptDtls] AS IRD with(nolock)  on  IRD.[ReceiptRefNo]=IRH.[ReceiptRefNo]
				
				
--where DistributorID=@DistributorID and Cast(IRH.[ReceiptDate] as date) between CAst(@FromDate as date) and CAST(@ToDate as date)
--group by IRH.[ReceiptRefNo],IRH.[ReceiptDate],IRH.[InvoiceNo],IRH.[InvoiceDate],
--				IRH.ReceiptStatus,IRH.[DistributorID],IRH.[TotalAmount]
--order by InvoiceDate desc



GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReturnDtlsAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [NIU].[usp_ItemReturnDtlsAdd]
@ReturnRefNo numeric(17, 0),
@PriceCode	int,
@EmptyDefectTiveFlag varchar(10),
@DefectiveQty int,
@EmptyQty int,
@ReasonCode	varchar(10),
@Remarks varchar(10),
@LastUpdateBy nvarchar(20),
@RtnValue bigint output

as

BEGIN
	SET @RtnValue = 0

	-- get price code for empty item 
	declare @EmptyPriceCode int=0,@lineNo int=0,@itemId int=0, @DistributorID int=0,@CurrEmptyStk int=0, @CurrDefectiveStk int=0

	select @EmptyPriceCode=PriceCode from DCMS.tblItemPriceCodeMap with (nolock)
	where ItemCategory='E' and packagecode=(select packagecode from DCMS.tblItemPriceCodeMap with (nolock) where PriceCode=@PriceCode)

	select @ItemID=ItemCode from DCMS.tblItemPriceCodeMap with (nolock) where PriceCode=@PriceCode
	
	select @DistributorID=DistributorID from sds.tblItemReturnHdr where ReturnRefNo=@ReturnRefNo
	
	select @CurrEmptyStk=EmptyQuantity, @CurrDefectiveStk=DefectiveQuantity from sds.tbldistributorstock where DistributorID=@DistributorID and ItemID=@ItemID

	if(@EmptyQty<=@CurrEmptyStk and @DefectiveQty<=@CurrDefectiveStk)
	Begin
		if not exists(select 1 from sds.tblItemReturnDtls where ReturnRefNo=@ReturnRefNo and PriceCode=@EmptyPriceCode)
		Begin		
			if(@EmptyQty>0)--- Add Empty Item Entry
			Begin
				select @lineNo=max(LineNumber) from sds.tblItemReturnDtls where ReturnRefNo=@ReturnRefNo
				set @lineNo=isnull(@lineNo,0)+1

				insert into sds.tblItemReturnDtls(ReturnRefNo,LineNumber,PriceCode,EmptyDefectTiveFlag,ReturnQty,Remarks,LastUpdateBy,LastUpdateDateTime,ProcessFlag)
				values(@ReturnRefNo,@lineNo,@EmptyPriceCode,'E',@EmptyQty,@Remarks,@LastUpdateBy,getdate(),'N')

				set @RtnValue = @ReturnRefNo
			End
			if(@DefectiveQty>0) --Add Defective Item Entry
			Begin
				select @lineNo=max(LineNumber) from sds.tblItemReturnDtls where ReturnRefNo=@ReturnRefNo
				set @lineNo=isnull(@lineNo,0)+1

				insert into sds.tblItemReturnDtls(ReturnRefNo,LineNumber,PriceCode,EmptyDefectTiveFlag,ReturnQty,Remarks,LastUpdateBy,LastUpdateDateTime,ProcessFlag)
				values(@ReturnRefNo,@lineNo,@PriceCode,'D',@DefectiveQty,@Remarks,@LastUpdateBy,getdate(),'N')

				set @RtnValue = @ReturnRefNo
			End
		End
		Else
		Begin
			if(@EmptyQty>0)  -- Add Empty Item for same pricecode
			Begin
				update sds.tblItemReturnDtls 
				set ReturnQty=isnull(ReturnQty,0)+@EmptyQty, LastUpdateBy=@LastUpdateBy, LastUpdateDateTime=getdate()
				where ReturnRefNo=@ReturnRefNo and PriceCode=@EmptyPriceCode and EmptyDefectTiveFlag='E'
			
				set @RtnValue = @ReturnRefNo
			End
			if(@DefectiveQty>0)--Add Defective Item for same pricecode
			Begin
				update sds.tblItemReturnDtls
				set ReturnQty=isnull(ReturnQty,0)+@DefectiveQty, LastUpdateBy=@LastUpdateBy, LastUpdateDateTime=getdate()
				where ReturnRefNo=@ReturnRefNo and PriceCode=@EmptyPriceCode and EmptyDefectTiveFlag='D'
			
				set @RtnValue = @ReturnRefNo
			End
		End
	
		-- Update Distributor System Stock 
			declare @NEmptyQty int, @NDefectiveQty int
			set @NEmptyQty=@EmptyQty * -1 ; 	set @NDefectiveQty=@DefectiveQty * -1
		
			exec sds.usp_DistributorSystemStockUpdate  @DistributorID,@PriceCode,@NEmptyQty,@NDefectiveQty,@LastUpdateBy,0

		-- Update  Godown Stock 
			exec sds.usp_DistributorStockUpdate @DistributorId,@ItemID,0,@NEmptyQty,@NDefectiveQty,@LastUpdateBy,0
	End
	Else
	Begin
		set @RtnValue=-1	-- Return Quantity is greater than Available Quantity
	End

END



GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReturnHdrAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		

CREATE proc [NIU].[usp_ItemReturnHdrAddEdit]
@ReturnDate	date,
@InvoiceNo	varchar(20),
@InvoiceDate date,
@ReturnStatus varchar(5),
@DistributorID	int,
@Remarks varchar(256),
@LastUpdateBy	varchar(20),
@VehicleNo nvarchar(25),
@ReturnRefId bigint OUTPUT

AS
BEGIN

	if not exists(select 1 from [SDS].[tblItemReturnHdr] where InvoiceNo=@InvoiceNo and DistributorID=@DistributorID)
	Begin
		-- Generate New return Ref No.
		DECLARE @TodayCount int=0,@ReturnRefNoStr nvarchar(25), @ReturnRefNoNew bigint =0
	
		SELECT @TodayCount = COUNT(1) FROM sds.[tblItemReturnHdr] with(nolock) WHERE DistributorId = @DistributorId AND CAST(ReturnDate as DATE) = CAST(GETDATE() as DATE)
		SET @TodayCount = @TodayCount+1
		print @TodayCount
	
		SET @ReturnRefNoStr = '1'+ RIGHT('0'+ CAST(YEAR(GETDATE()) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(GETDATE()) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(GETDATE()) AS varchar(2)),2) + 
		RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@TodayCount)))) + CONVERT(varchar(8000),@TodayCount)
	
		SET @ReturnRefNoNew = CAST(@ReturnRefNoStr as bigint)
		print @ReturnRefNoNew

		--Add Item return Header 
		insert into sds.tblItemReturnHdr(ReturnRefNo,ReturnDate,InvoiceNo,InvoiceDate,ReturnStatus,DistributorID,Remarks,LastUpdateBy,LastUpdateDateTime,ProcessFlag,VehicleNo)
		values(@ReturnRefNoNew,getdate(),@InvoiceNo,@InvoiceDate,'SUBTD',@DistributorID,@Remarks,@LastUpdateBy,getdate(),'N',@VehicleNo)

		set @ReturnRefId=@ReturnRefNoNew	
		
	End
	Else
	Begin
		set @ReturnRefId=-1
	End
END



GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReturnItemDetailsHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [NIU].[usp_ItemReturnItemDetailsHistory]
@ReturnRefNo bigint
as

SELECT        r.ReturnRefNo, r.PriceCode, r.TruckNo,r.EmptyDefectTiveFlag, i.ItemDescription, SDS.fn_CamelCase( i.ItemShortDescription ) as ItemShortDescription ,
case r.EmptyDefectTiveFlag when 'E' then r.ReturnQty else 0 end as EmptyReturnQty,
case r.EmptyDefectTiveFlag when 'D' then r.ReturnQty else 0 end as DefectiveReturnQty
FROM            DCMS.tblItemReturnDtls r with (nolock) inner join DCMS.tblItemPriceCodeMap i with (nolock) on r.PriceCode=i.PriceCode
where ReturnRefNo=@ReturnRefNo


GO
/****** Object:  StoredProcedure [NIU].[usp_ItemReturnMasterHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [NIU].[usp_ItemReturnMasterHistory]
@DistributorId int,
@FromDate datetime,
@ToDate datetime

as

SELECT        ReturnRefNo, ReturnDate, InvoiceNo, InvoiceDate, SDS.fn_CamelCase( ReturnStatus ) as ReturnStatus , DistributorID, VehicleNo
FROM            DCMS.tblItemReturnHdr with (nolock)
where DistributorID=@DistributorID and Cast(ReturnDate as date) between CAst(@FromDate as date) and CAST(@ToDate as date)
order by InvoiceDate desc


GO
/****** Object:  StoredProcedure [NIU].[usp_OnboardingApproveReject_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_OnboardingApproveReject 15139,3,4,'STAGE1', 'Remark for stage 1'
CREATE proc [NIU].[usp_OnboardingApproveReject_NotInUse]
@DistributorId	int,
@UserId	bigint,
@IsOnBoardingStageStatus int,
@ForStage	nvarchar(10),
@Remark	varchar(max),
@RetValue int output

as

BEGIN
	if(upper(@ForStage)='STAGE1')
	Begin
		if not exists(select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId)
		Begin
			insert into sds.tblOnBoardingCompleted(DistributorId,UserId,IsOnBoardingStage1,Remark1,LastUpdatedOn)
			values (@DistributorId,@UserId,@IsOnBoardingStageStatus,@Remark,getdate())

			set @RetValue=@DistributorId
		End
		else
		Begin
			update sds.tblOnBoardingCompleted set IsOnBoardingStage1=@IsOnBoardingStageStatus,Remark1=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId

			set @RetValue=@DistributorId
		End
	End
	else if(upper(@ForStage)='STAGE2')
	Begin
		if not exists(select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId)
		Begin
			set @RetValue=-1
		End
		else
		Begin
			update sds.tblOnBoardingCompleted set IsOnBoardingStage2=@IsOnBoardingStageStatus,Remark2=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId

			set @RetValue=@DistributorId
		End
	End
	else
		set @RetValue=-1

	return @RetValue
END


GO
/****** Object:  StoredProcedure [NIU].[usp_ShowLocationOnMap_NotInUse]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [NIU].[usp_ShowLocationOnMap_NotInUse]    
@DistributorId int,  
@TripId bigint,  
@StaffRefNo numeric(17,0),    
@DateTime datetime  
  
AS  
  
BEGIN   
 select s.DistributorId, s.TripId,s.StaffRefNo,s.DateTime,s.Latitude,s.Longitude,  
 tp.GLatitude, tp.GLongitude  
 From SDS.tblTripPlanning tp with(nolock) inner join SDS.tblSaveLocation s with(nolock) on tp.TripId=s.TripId  
 where s.DistributorId=@DistributorId and CAST(s.[DateTime] AS Date) = CAST(@DateTime AS Date)   
 and (s.TripId=@TripId or isnull(@TripId,0)=0) and (s.StaffRefNo=@StaffRefNo or @StaffRefNo=0)   
END  
  
  
GO
/****** Object:  StoredProcedure [SDS].[AAusp_GetTripCasesSummary]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[AAusp_GetTripCasesSummary]    
--declare    
@DistributorId int,    
@ClusterId INT,    
@Tdate datetime--,    
--@CaseNo nvarchar(50)    
--set @DistributorId=14145; set @ClusterId=115; set @Tdate='2021-08-27'; --set @CaseNo='OD'    
  
as    
declare @trip INT=0;     
BEGIN  
 SET FMTONLY OFF  
    IF OBJECT_ID('tempdb..#CasesDetails') IS NOT NULL BEGIN  DROP TABLE #CasesDetails END  
  create table #CasesDetails (CaseNo varchar(10), TripDate datetime ,DistributorId int ,ClusterId bigint, ClusterName varchar(100), DensityGroupNo int ,NoOfBookings int,  
   OldestBookingDate datetime, latedeliverydate datetime,  
 OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int, KM_Air int, KM_Road int ,DelTripSequenceNoDA int,DelTripSequenceNoOD int)  
   
   Insert into #CasesDetails    
   SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName,     
   dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,    
   max(datediff(dd,dad.OrderDate,@Tdate)) latedeliverydate,  
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,    
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,    
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,    
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,    
   Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, --dad.DelTripSequenceNo as DelTripSequenceNo1,dad.DelTripSequenceNo_OD as DelTripSequenceNo,  
   ISNULL(dad.DelTripSequenceNo,0) as DelTripSequenceNoDA  ,  
   ROW_NUMBER() OVER(ORDER BY Isnull(max(dad.KM_Air),0) ASC)  as DelTripSequenceNoOD  
   FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId    
   left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId    
   where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)    
   and (isnull(da.CaseNo,'') in ('DA'))    
   GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName,   
   dad.DensityGroupNo, dad.DelTripSequenceNo ,dad.DelTripSequenceNo_OD,dad.DelTripSequenceNo_AD   
  
   select @trip = max(DelTripSequenceNoDA)from #CasesDetails   
  
   SELECT CaseNo,TripDate,DistributorId,ClusterId,ClusterName,DensityGroupNo,NoOfBookings,OldestBookingDate,latedeliverydate ,OlderThan10Days,OlderThan5Days,  
   OlderThan2Days, Upto2Days, KM_Air, KM_Road ,DelTripSequenceNoDA,(CASE when (DelTripSequenceNoOD <= @trip) THEN   DelTripSequenceNoOD ELSE 0  END)DelTripSequenceNoOD  
   FROM #CasesDetails  
   DROP TABLE #CasesDetails   
End    
GO
/****** Object:  StoredProcedure [SDS].[CustomerDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: CustomerDetails
--	Description		:	Used for camparison google and map my India

--	Author			:	Prasanna	17-06-2020

--	Date Modified		Modified By	     Modifications
--	17-06-2020			Prasanna         Created
**************************************************************/

CREATE PROCEDURE [SDS].[CustomerDetails]
	@UniqueConsumerId numeric(18,0),
	@Latitude varchar(25),
	@Longitude varchar(25),
	@SequenceNo int,
	@Flag nvarchar(10)
AS
BEGIN

	IF(@Flag='SELECT')
	BEGIN
		--SELECT top 25 [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
		--	,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[GoogleSequenceNo],[TempGoogleSequenceNo] as MMISequenceNo,[LastUpdatedDatetime]
		--FROM [SDS].[tblConsumerDetailsForComparison]
	 --WHERE [MMISequenceNo]= 999--[UniqueConsumerId] in (9100826300010045,9100826300032064)
		--ORDER BY LastUpdatedDatetime

		--SELECT top 1000 [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
		--	,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[GoogleSequenceNo], MMISequenceNo,[LastUpdatedDatetime]
		--FROM [SDS].[tblConsumerDetailsForComparison]
	 --WHERE GoogleLat is not null and cast(GoogleLong as float)> 0 and cast(GoogleLat as float) > 0
		--ORDER BY LastUpdatedDatetime

		--SELECT top 100 [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],'' AreaName
		--	,[GoogleLat],[GoogleLong],'' MMILat,'' MMILong,[GoogleSequenceNo],1 MMISequenceNo,getdate() LastUpdatedDatetime
		--FROM [SDS].[tblConsumerDetailsForGoogleDemo]
	 --WHERE GoogleLat is not null and cast(GoogleLong as float)> 0 and cast(GoogleLat as float) > 0--MMISequenceNo =991--[UniqueConsumerId] in (9100826300010045,9100826300032064)
		
		SELECT r.[UniqueConsumerId],r.[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],r.[AreaRefNo],[AreaName]
			,c.Latitude as [GoogleLat],c.Longitude as [GoogleLong],c.Latitude as [MMILat],c.Longitude as [MMILong],1 as [GoogleSequenceNo],1 as MMISequenceNo,[LastUpdatedDatetime]
		FROM [DCMS].[tblRefillOrderDtls$BA] r INNER JOIN
		[SDS].[tblConsumerDetails] c ON c.UniqueConsumerId=r.UniqueConsumerId
		WHERE r.DistributorID=14193 AND c.Latitude is not null and cast(c.Latitude as float)> 0 and cast(c.Longitude as float) > 0 and C.InCluster=1
		ORDER BY LastUpdatedDatetime

	END
	ELSE IF(@Flag='GLOC')--Update Google Location
	BEGIN
		UPDATE [SDS].[tblConsumerDetailsForComparison]
		SET [GoogleLat]=@Latitude,[GoogleLong]=@Longitude
		WHERE [UniqueConsumerId]=@UniqueConsumerId

		SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
			,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[GoogleSequenceNo],[MMISequenceNo],[LastUpdatedDatetime]
		FROM [SDS].[tblConsumerDetailsForComparison]
	END
	ELSE IF(@Flag='MMILOC')--Update Map My India Location
	BEGIN
		UPDATE [SDS].[tblConsumerDetailsForComparison]
		SET [MMILat]=@Latitude,[MMILong]=@Longitude
		WHERE [UniqueConsumerId]=@UniqueConsumerId
		
		SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
			,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[GoogleSequenceNo],[MMISequenceNo],[LastUpdatedDatetime]
		FROM [SDS].[tblConsumerDetailsForComparison]
	END
	ELSE IF(@Flag='GSQNC')--Update Google Location
	BEGIN
		UPDATE [SDS].[tblConsumerDetailsForComparison]
		SET [GoogleSequenceNo]=@SequenceNo
		WHERE [UniqueConsumerId]=@UniqueConsumerId

		SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
			,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[GoogleSequenceNo],[MMISequenceNo],[LastUpdatedDatetime]
		FROM [SDS].[tblConsumerDetailsForComparison]
	END
	ELSE IF(@Flag='GSQNCTemp')--Update Google Location
	BEGIN
		UPDATE [SDS].[tblConsumerDetailsForComparison]
		SET [TempGoogleSequenceNo]=@SequenceNo
		WHERE [UniqueConsumerId]=@UniqueConsumerId

		SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
			,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[TempGoogleSequenceNo] as GoogleSequenceNo,[MMISequenceNo],[LastUpdatedDatetime]
		FROM [SDS].[tblConsumerDetailsForComparison]
	END
	ELSE IF(@Flag='MMISQNC')--Update Map My India Location
	BEGIN
		UPDATE [SDS].[tblConsumerDetailsForComparison]
		SET [MMISequenceNo]=@SequenceNo
		WHERE [UniqueConsumerId]=@UniqueConsumerId
		
		SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[MobileNo],[Address],[Pin],[AreaRefNo],[AreaName]
			,[GoogleLat],[GoogleLong],[MMILat],[MMILong],[GoogleSequenceNo],[MMISequenceNo],[LastUpdatedDatetime]
		FROM [SDS].[tblConsumerDetailsForComparison]
	END
END
GO
/****** Object:  StoredProcedure [SDS].[RG_2ndGCSummaryData_distributorwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[RG_2ndGCSummaryData_distributorwise]
as
--select * from SDS.tblConsumerLocationHistoryNew where DistributorID=14193 
--and (cast(VitranLastUpdateDateTime as date)=cast(getdate()-1 as date) or 
--cast(VitranLastUpdateDateTime1 as date)=cast(getdate()-1 as date) or
--cast(MILastUpdateDateTime as date)=cast(getdate()-1 as date) or
--cast(HPpayLastUpdateDateTime as date)=cast(getdate()-1 as date))
BEGIN
select d.DistributorId, d.JDEDistributorCode, d.DistributorName,
(sum(case when cl.VitranLatitude is not null or cl.VitranLatitude1 is not null then 1 else 0 end) +
sum(case when cl.VitranLatitude1 is not null and (cl.VitranLatitude<>cl.VitranLatitude1) then 1 else 0 end)) VitranGCTotal,
sum(case when cl.VitranLatitude is not null then 1 else 0 end) VitranGCFirst,
sum(case when (cl.VitranLatitude is not null and cd.InCluster=1 and cd.ClusterId=ac.AreaClusterId) then 1 else 0 end) InsideCnt,
sum(case when (cl.VitranLatitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId)) then 1 else 0 end) outsideCnt,
sum(case when cl.VitranLatitude1 is not null and (cl.VitranLatitude<>cl.VitranLatitude1) then 1 else 0 end) VitranGCLatest,
sum(case when (cl.VitranLatitude1 is not null and (cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId =ac.AreaClusterId)) then 1 else 0 end) as InsideVitranGCLatest,
sum(case when (cl.VitranLatitude1 is not null and (cl.VitranLat1InCluster=0 or cl.VitranLat1InClusterId<>ac.AreaClusterId)) then 1 else 0 end) as OutsideVitranGCLatest
from SDS.tblConsumerLocationHistoryNew cl left outer join SDS.tblConsumerDetails cd on cl.DistributorID=cd.DistributorID and cl.UniqueConsumerId=cd.UniqueConsumerId
left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo
inner join DCMS.tblDistributorMaster d on cd.DistributorID=d.DistributorId
where cd.ConsumerStatus='Active'
group by d.DistributorId, d.JDEDistributorCode, d.DistributorName
order by d.DistributorName
End
GO
/****** Object:  StoredProcedure [SDS].[RG_ParameterTripBkgSummary]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[RG_ParameterTripBkgSummary]

as
set FMTONLY OFF
IF OBJECT_ID('tempdb..#summ') IS NOT NULL DROP TABLE #summ;
create table #summ (id int identity, DId int,DCode varchar(20),DName varchar(200),
ClusterId bigint,ClusterName varchar(200),TotalBkg int,ValidBkg int, PMUYBkg int,NONPMUYBkg int,PrepaidBkg int,SBCBkg int,DBCBkg int,PendingSV int, Refill int, LossReq int,
BkgSourceDistri int,BkgSourceCSC int,BkgSourcePortal int,BkgSourceCustConn int,BkgSourceIVRS int,BkgSourceEComm int,BkgSourceChatBot int,
BkgSourceVitran int,BkgSourceHPPay  int, BkgInstant int, BkgHome int, BkgShop int)
declare @didtbl table(id int identity, did int)
insert into @didtbl(did) select d.DistributorId from DCMS.tblDistributorMaster d inner join SDS.tblOnBoardingCompleted b on d.DistributorId=b.DistributorId
where b.IsOnBoardingStage1=2 and d.StatusCode='A'		-- DistributorId in (14193,14145,9128,8118,15139)--,6659,6676)

declare @c int=1, @c1 int,@did int,@GroupCode varchar(5), @str varchar(max)
select @c1=max(id) from @didtbl

while(@c<=@c1)
Begin
	set @GroupCode=''; set @str=''
	select @did=did from @didtbl where id=@c
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @did
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	if (isnull(@GroupCode,'')<>'')
	Begin
		set @str='Insert into #summ(DId,DCode,DName,ClusterId,ClusterName,TotalBkg,ValidBkg,PMUYBkg,NONPMUYBkg,PrepaidBkg,SBCBkg,DBCBkg,PendingSV, Refill, LossReq,BkgSourceDistri,BkgSourceCSC,
		BkgSourcePortal,BkgSourceCustConn,BkgSourceIVRS,BkgSourceEComm,BkgSourceChatBot,BkgSourceVitran,BkgSourceHPPay,BkgInstant,BkgHome, BkgShop)
		select d.DistributorId,d.JDEDistributorCode,d.DistributorName,t.ClusterId,t.AreaClusterName,count(distinct o.OrderRefNo),
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId then 1 else 0 end)Valid,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.NatureCode=16 then 1 else 0 end)PMUY,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.NatureCode<>16 then 1 else 0 end)NONPMUY,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.Prepaid=''Y'' then 1 else 0 end)Prepaid,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.SingleDouble=''S'' then 1 else 0 end)SBC, 
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.SingleDouble=''D'' then 1 else 0 end)DBC, 
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderTypeCode=''PSV'' then 1 else 0 end)PSV,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderTypeCode=''RFL'' then 1 else 0 end)RFL,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderTypeCode=''LR'' then 1 else 0 end)LR,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=1 then 1 else 0 end)Distri,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=2 then 1 else 0 end)CSC,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=3 then 1 else 0 end)Portal,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=4 then 1 else 0 end)CustConn,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=5 then 1 else 0 end)IVRS,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=6 then 1 else 0 end)EComm,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=7 then 1 else 0 end)ChatBot,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=8 then 1 else 0 end)Vitran,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=9 then 1 else 0 end)HPPay,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.DeliveryMode=''I'' then 1 else 0 end),
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.DeliveryMode=''H'' then 1 else 0 end),
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.DeliveryMode=''S'' then 1 else 0 end)
		from DCMS.tblDistributorMaster d inner join SDS.tblClusterMaster t on d.DistributorId=t.DistributorId
		inner join SDS.tblAreaClusterMapping ac on t.ClusterId=ac.AreaClusterId
		inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o with (nolock) on d.DistributorId=o.DistributorID and ac.AreaRefNo=o.AreaRefNo
		inner join DCMS.tblDistributorAreaMaster a with (nolock) on o.AreaRefNo=a.AreaRefNo
		inner join SDS.tblConsumerDetails c with (nolock) on d.DistributorId=c.DistributorID and c.UniqueConsumerId=o.UniqueConsumerId 
		Where d.DistributorId = '+convert(nvarchar(25),@did)+'
		group by d.DistributorId,d.JDEDistributorCode,d.DistributorName,t.ClusterId,t.AreaClusterName'
		Print (@str)
		--select len(@str)
		exec(@str)
	End
set @c=@c+1
End

Select id, DId as DistributorId,DCode as JDEDistributorCode,DName as DistributorName,
ClusterId,ClusterName,TotalBkg,ValidBkg, PMUYBkg,NONPMUYBkg,PrepaidBkg,SBCBkg,DBCBkg,PendingSV, Refill, LossReq,
BkgSourceDistri,BkgSourceCSC,BkgSourcePortal,BkgSourceCustConn,BkgSourceIVRS,BkgSourceEComm,BkgSourceChatBot,
BkgSourceVitran,BkgSourceHPPay, BkgInstant, BkgHome, BkgShop
from #summ order by ValidBkg desc
drop table #summ

GO
/****** Object:  StoredProcedure [SDS].[sp_ConsumerLatitude1]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[sp_ConsumerLatitude1] 
@UniqueConsumerId as nvarchar(50),
@For char(1),
@Lat nvarchar(50) output
as

--declare 
--@UniqueConsumerId nvarchar(20)= 1100669600031442,
--@DistributorId int = null, @For char(1)='T'

Begin
	declare @Sourcestr nvarchar(1000)='', @str nvarchar(max)='', @ConsumerLatitude nvarchar(50)
	if(upper(@For)='T') 
		set @Sourcestr= (select isnull((STUFF((select ', ' + case when lower(SourceName)= 'hppay' then 'HPPayLatitude' 
		when lower(SourceName)= 'vitaran' then 'VitaranLatitude'	when lower(SourceName)= 'miapp' then 'MILatitude'
		when lower(SourceName)= 'auto' then 'AutoLatitude'	when lower(SourceName)= 'manual' then 'ManualLatitude'
		when lower(SourceName)= 'ezygas' then 'EzygasLatitude' end	from sds.tblConsumerGCSequenceNo 
		where DistributorId=0 order by TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)
	else  
		set @Sourcestr= (select isnull((STUFF((select ', ' + case when lower(SourceName)= 'hppay' then 'HPPayLatitude' 
		when lower(SourceName)= 'vitaran' then 'VitaranLatitude'	when lower(SourceName)= 'miapp' then 'MILatitude'
		when lower(SourceName)= 'auto' then 'AutoLatitude'	when lower(SourceName)= 'manual' then 'ManualLatitude'
		when lower(SourceName)= 'ezygas' then 'EzygasLatitude' end	from sds.tblConsumerGCSequenceNo 
		where DistributorId=0 order by TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)

	set @ConsumerLatitude = ''
	set @str = ('select  @x=coalesce ('+@Sourcestr+') from sds.tblConsumerLocationHistory where UniqueConsumerId=' + @UniqueConsumerId)
	
	exec sp_executesql @str, N'@x nvarchar(50) out', @ConsumerLatitude out

	return @ConsumerLatitude

	--declare @result table (lat nvarchar(50))
	--insert into @result(lat) exec ('select  coalesce ('+@Sourcestr+') from sds.tblConsumerLocationHistory where UniqueConsumerId=' + @UniqueConsumerId)

	--select @ConsumerLatitude=lat from @result
	--return @ConsumerLatitude

End
GO
/****** Object:  StoredProcedure [SDS].[ups_clusterDetailsForTrip]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[ups_clusterDetailsForTrip]
--declare
@DistributorId int,
@TripDate datetime
as
Begin
	declare @GLat nvarchar(50), @GLogi nvarchar(50)
		SELECT  @GLat=Latitude, @GLogi=Longitude FROM SDS.tblDistributorGodown where DistributorId=@DistributorId and isnull(ActiveFlag,'N')='Y'

	SELECT   c.clusterid, c.AreaClusterName, isnull(dc.NoOfTrip,0) NoOfTrip,v.VehicleId, isnull(v.RTOCapacity,0) VehCapacity,
		isnull(dc.NoOfTrip,0)* isnull(v.RTOCapacity,0) TripBookingCount, isnull(pod.POD,0) NoOfPODAreas, c.Regionid, rt.RegionType,
		isnull(c.PickupLocation,'G') PickupLocation, isnull(c.Latitude,@GLat) PickLatitude, isnull(c.Longitude,@GLogi) pickLongitude
	FROM sds.tblClusterMaster c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId
		left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
		left outer join SDS.tblVehicleMaster AS v ON v.VehicleId = dv.VehicleId	
		left outer join sds.tblClusterRegionTypeMaster rt on c.Regionid=rt.Id	
		Left outer Join (
			select ac.AreaClusterId,count(p.AreaRefNo) POD from sds.tblCDCMSAreaPODDetails p inner join sds.tblAreaClusterMapping ac on p.AreaRefNo=ac.AreaRefNo 
			inner join sds.tblPODWeekdaysDetails wd on p.AreaPodId=wd.PODId and wd.weekdays=datepart(dw,@TripDate)
			where ac.distributorId=@DistributorId and isnull(p.DeliveryType,'HD')='POD' and isnull(ac.IsActive,'N')='Y'
			group by ac.AreaClusterId
		) pod on pod.AreaClusterId=c.ClusterId
	where c.IsActive='Y' and dc.IsActive='Y' and dv.Active='Y' and v.Active='Y' and c.distributorId=@DistributorId

	
End




GO
/****** Object:  StoredProcedure [SDS].[ups_SaveClusterWiseTripDtls]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROC [SDS].[ups_SaveClusterWiseTripDtls]
--declare
@DistributorId int,
@ClusterId int,
@TripStatus int,
@NoOfTrips int

AS
BEGIN
	INSERT INTO [SDS].[tblClusterWiseTripDtls](DistributorId,ClusterId,TripStatus,NoOfTrips,AddedOn)
	VALUES (@DistributorId,@ClusterId,@TripStatus,@NoOfTrips,GETDATE())	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_AcceptDeliveryOrder]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,swapnil>
-- Create date: <Create Date,23-01-2018,>
-- Description:	<Description,Accept the order which will assign to Delivery boy>
-- =============================================
CREATE PROCEDURE [SDS].[usp_AcceptDeliveryOrder]
	-- Add the parameters for the stored procedure here
	@OrderId bigint,
	@ExpectedDeliDate datetime
AS
BEGIN
	UPDATE SDS.tblOrder 	
	SET	DeliveryBoyExpectedDeliDate = @ExpectedDeliDate,
		IsAceepted='Y'	
	WHERE OrderId=@OrderId	
END






GO
/****** Object:  StoredProcedure [SDS].[usp_AcceptStockAllotment]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_AcceptStockAllotment
--	Description		:	To Accept the alloted stock

--	Author			:	Santosh	23-January-2018

--	Date Modified		Modified By	     Modifications
--	23-January-2018		Santosh	         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AcceptStockAllotment]
@StockAllotmentId bigint,
@DistributorId int,
@AcceptedBy numeric(17,0),
@IsAccepted char(1),
@Remark nvarchar(400),
@UpdatedRow int output
AS
BEGIN
	UPDATE sds.tblStockAllotment
	SET IsAccepted=@IsAccepted,AcceptedBy=@AcceptedBy,AcceptedDatetime=GETDATE(),Remark=@Remark
	WHERE StockAllotmentId=@StockAllotmentId AND DistributorId=@DistributorId
	SET @UpdatedRow=@@ROWCOUNT

	declare @DeliveryBoy numeric(17,0),@i int,@StockTransferId bigint,@AllotmentBy nvarchar(10)
	
	select @StockTransferId=StockTransferId,@AllotmentBy=AllotmentBy from sds.tblStockAllotment WITH(NOLOCK)  WHERE StockAllotmentId=@StockAllotmentId AND DistributorId=@DistributorId
		
	IF(@AllotmentBy='D')
	Begin
			UPDATE SDS.tblStockTransfer
			SET IsAccepted=@IsAccepted,AcceptedBy=@AcceptedBy,AcceptedDatetime=GETDATE(),Remark=@Remark
			WHERE StockTransferId=@StockTransferId AND DistributorId=@DistributorId
			
			if(@IsAccepted='Y')
			begin
				select @DeliveryBoy=SA.DeliveryBoyId from SDS.tblStockAllotment SA WITH(NOLOCK)  where SA.StockAllotmentId=@StockAllotmentId 

				Merge SDS.tblDeliveryBoyStock as target
				using  tblStockAllotmentDetails as source
				on
				target.ItemId=source.ItemId and target.DeliveryBoyId=@DeliveryBoy   
				When matched and source.StockAllotmentId=@StockAllotmentId
				Then
				update 
				set target.FilledQuantity=ISNULL(target.FilledQuantity,0)+ISNULL(source.Quantity,0),
				target.EmptyQuantity=ISNULL(target.EmptyQuantity,0)+ISNULL(source.EmptyQty,0)
				    
				When not matched by target and source.StockAllotmentId=@StockAllotmentId
				Then
				INSERT (DeliveryBoyId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LastUpdatedDate)
				VALUES (@DeliveryBoy,source.ItemId,source.Quantity,source.EmptyQty,'D-'+@DeliveryBoy,GETDATE());
				
			end
			ELSE IF(@IsAccepted='N')
			Begin
				select @DeliveryBoy=ST.DeliveryBoyId from tblStockTransfer ST WITH(NOLOCK) where StockTransferId=@StockTransferId AND DistributorId=@DistributorId
				Merge  SDS.tblDeliveryBoyStock as target
				using  SDS.tblStockAllotmentDetails as source
				on
				target.ItemId=source.ItemId and target.DeliveryBoyId=@DeliveryBoy   
				When matched and source.StockAllotmentId=@StockAllotmentId
				Then
				update 
				set target.FilledQuantity=ISNULL(target.FilledQuantity,0)+ISNULL(source.Quantity,0),
				target.EmptyQuantity=ISNULL(target.EmptyQuantity,0)+ISNULL(source.EmptyQty,0)
				When not matched by target and source.StockAllotmentId=@StockAllotmentId
				Then
				INSERT (DeliveryBoyId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LastUpdatedDate) 
				VALUES (@DeliveryBoy,source.ItemId,source.Quantity,source.EmptyQty,'D-'+@DeliveryBoy,GETDATE());
					
			END
	End
	ELSE 
	BEGIN
		if(@IsAccepted='Y')
		begin
			select @DeliveryBoy=SA.DeliveryBoyId from SDS.tblStockAllotment SA WITH(NOLOCK) where SA.StockAllotmentId=@StockAllotmentId 
			Merge SDS.tblDeliveryBoyStock as target
			using  SDS.tblStockAllotmentDetails as source
			on 
				target.ItemId=source.ItemId and target.DeliveryBoyId=@DeliveryBoy   
			When matched and source.StockAllotmentId=@StockAllotmentId
			Then
				update set target.FilledQuantity=ISNULL(target.FilledQuantity,0)+ISNULL(source.Quantity,0)
			When not matched by target and source.StockAllotmentId=@StockAllotmentId
			Then
				INSERT (DeliveryBoyId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LastUpdatedDate) 
				VALUES (@DeliveryBoy,source.ItemId,source.Quantity,0,'D',GETDATE());
		end
		ELSE IF(@IsAccepted='N')
		Begin
			select @DeliveryBoy=SA.DeliveryBoyId from SDS.tblStockAllotment SA WITH(NOLOCK) where SA.StockAllotmentId=@StockAllotmentId 
			
			Merge  SDS.tblDistributorStock as target
			using  SDS.tblStockAllotmentDetails as source
			on
				target.ItemId=source.ItemId and target.DistributorId=@DistributorId   
			When matched and source.StockAllotmentId=@StockAllotmentId
			Then
				update 	set target.FilledQuantity=ISNULL(target.FilledQuantity,0)+ISNULL(source.Quantity,0)
			When not matched by target and source.StockAllotmentId=@StockAllotmentId
			Then
				INSERT (DistributorId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LatsUpdatedDate) 
				VALUES (@DistributorId,source.ItemId,source.Quantity,0,'D',GETDATE());
			
		END
	END
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AcceptStockTransfer]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_AcceptStockTransfer
--	Description		:	To Accept the Transfered stock to Godown/Delivery Boy

--	Author			:	Santosh	23-January-2018

--	Date Modified		Modified By	     Modifications
--	23-January-2018		Santosh	         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AcceptStockTransfer]
	@StockTransferId bigint,
	@DistributorId int,
	@AcceptedBy numeric(17,0),
	@IsAccepted char(1),
	@AcceptFlag char(1),
	@Remark nvarchar(400)
AS
BEGIN
	UPDATE SDS.tblStockTransfer
	SET IsAccepted=@IsAccepted,AcceptedBy=@AcceptedBy,AcceptedDatetime=GETDATE(),Remark=@Remark
	WHERE StockTransferId=@StockTransferId AND DistributorId=@DistributorId AND TransferedTo=@AcceptFlag
	
	declare @DeliveryBoy numeric(17,0)
	
	select @DeliveryBoy=DeliveryBoyId from SDS.tblStockTransfer WITH(NOLOCK) where StockTransferId=@StockTransferId
	
	if(@IsAccepted='Y')
	Begin
			Merge SDS.tblDistributorStock as target
			using  SDS.tblStockTransferDetails as source
			on
			target.ItemId=source.ItemId and target.DistributorId=@DistributorId   
			When matched and source.StockTransferId=@StockTransferId
			Then
			update 
			set target.FilledQuantity=ISNULL(target.FilledQuantity,0)+ISNULL(source.FilledQty,0),
			target.EmptyQuantity=ISNULL(target.EmptyQuantity,0)+ISNULL(source.EmptyQty,0),
			target.DefectiveQuantity=ISNULL(target.DefectiveQuantity,0)+ISNULL(source.DefectiveQty,0)
			When not matched by target and source.StockTransferId=@StockTransferId
			Then
			INSERT (DistributorId,ItemID,FilledQuantity,EmptyQuantity,DefectiveQuantity,LastUpdatedBy,LatsUpdatedDate) 
			VALUES (@DistributorId,source.ItemId,source.FilledQty,source.EmptyQty,source.DefectiveQty,@DistributorId,GETDATE());
	End
	else if(@IsAccepted='N')
	Begin
		Merge SDS.tblDeliveryBoyStock as target
		using  SDS.tblStockTransferDetails as source
		on
		target.ItemId=source.ItemId and target.DeliveryBoyId=@DeliveryBoy   
		When matched and source.StockTransferId=@StockTransferId
		Then
		update 
		set target.FilledQuantity=ISNULL(target.FilledQuantity,0)+ISNULL(source.FilledQty,0)+ISNULL(source.DefectiveQty,0),
		target.EmptyQuantity=ISNULL(target.EmptyQuantity,0)+ISNULL(source.EmptyQty,0)
		When not matched by target and source.StockTransferId=@StockTransferId
		Then
		INSERT (DeliveryBoyId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LastUpdatedDate) 
		VALUES (@DeliveryBoy,source.ItemId,source.FilledQty,source.EmptyQty,@DistributorId,GETDATE());
	
	End
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ActiveTripDistributors]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_ActiveTripDistributors]
@DistributorId int

AS
BEGIN

	select DistributorId,DistributorName from sds.tblTripDistributors where DistributorId=@DistributorId

END
GO
/****** Object:  StoredProcedure [SDS].[usp_AddActiveUser]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_AddActiveUser
--	Description		:	To Insert Active user details

--	Author			:	Prasanna	13-April-2018

--	Date Modified		Modified By	     Modifications
--	13-April-2018		Prasanna         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddActiveUser]
	@DistributorId int,
	@UserId numeric(18,0),
	@UserTypeId int,
	@MobileNo varchar(15),
	@VersionNo varchar(15),
	@DeviceId nvarchar(max)
AS
BEGIN

	--DECLARE @Id bigint = 0
	IF NOT EXISTS (SELECT DistributorId FROM SDS.tblActiveUsers WITH(NOLOCK) WHERE DistributorId=@DistributorId AND StaffRefNo=@UserId AND MobileNo=@MobileNo)
	BEGIN
		INSERT INTO SDS.tblActiveUsers(DistributorId,StaffRefNo,MobileNo,RoleId,VersionNo,ApplActiveFrom,LastSeen,DeviceId,ActiveStatus,UninstallStatus,UninstalledDate)
		VALUES(@DistributorId,@UserId,@MobileNo,@UserTypeId,@VersionNo,GETDATE(),GETDATE(),@DeviceId,'Y','N',NULL)
		--SET @Id = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE SDS.tblActiveUsers
		SET VersionNo=@VersionNo,LastSeen=GETDATE(),DeviceId=@DeviceId
		WHERE DistributorId=@DistributorId AND StaffRefNo=@UserId AND MobileNo=@MobileNo
		--SET @Id = @@ROWCOUNT
	END
		
	--SELECT @Id AS ActiveUserId
END






GO
/****** Object:  StoredProcedure [SDS].[usp_AddAllMuncipalAreaCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Rahul>
-- Create date: <Create 25-05-2018>
-- Description:	<Description,To Add All the Muncipal Areas and Village From Geojson 
--File to Table for Later Use to Identify the Distributor Areas anbd to Display the Trading area>
-- =============================================
CREATE PROCEDURE [SDS].[usp_AddAllMuncipalAreaCoordinates]
	-- Add the parameters for the stored procedure here
	@DistributorID int,
	
	--for StateMaster
	@StateCode varchar(50),
	@StateName varchar(50) = null,	
	--For DistrictMaster
	@DistrictCode varchar(50) ,
	@DistrictName varchar(50) = null,			
	--for TalukaMAster
	@TalukaCode  varchar(50),
	@TalukaName varchar(50) = null,		
	--FOR AreaMaster
	@AreaCode varchar(50),
	@AreaName varchar(50) = null,
	--Area coordinates
	@AreaJSON nvarchar(MAX),
	@MapId int output
	
AS
Declare @HasError int;
set @HasError = 0;

BEGIN
BEGIN TRANSACTION

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;   
    
    --insert into State Master Table
			IF NOT EXISTS (SELECT StateCode FROM SDS.tblStateMasterPinCode WHERE StateCode=@StateCode) 
				BEGIN
					insert into SDS.tblStateMasterPinCode (StateCode,StateName,ActiveFlag,LastUpdateTime)
					values (@StateCode,@StateName,'1',GETDATE())	
					if (@@ERROR != 0)
					 set @HasError = 1	
				END		
	
		
	--insert into tblDistrictMaster
			IF NOT EXISTS (SELECT DistrictCode FROM SDS.tblDistrictMasterPinCode WHERE DistrictCode=@DistrictCode) 
				BEGIN
					insert into SDS.tblDistrictMasterPinCode (DistrictCode,DistrictName,StateCode,ActiveFlag,LastUpdateTime) 
					values (@DistrictCode,@DistrictName,@StateCode,'1',GETDATE())
					
					if (@@ERROR != 0)
					 set @HasError = 1
				END
				
	--insert into tblTalukaMaster				
		
			IF NOT EXISTS (SELECT TalukaCode FROM SDS.tblTalukaMasterPinCode WHERE TalukaCode=@TalukaCode) 
				BEGIN
					insert into SDS.tblTalukaMasterPinCode (TalukaCode,TalukaName,DistrictCode,ActiveFlag,LastUpdateTime)
					values (@TalukaCode,@TalukaName,@DistrictCode,'1',GETDATE())
					if (@@ERROR != 0)
					 set @HasError = 1
				END
		
		
	--insert into tblAreaMaster 
			
			IF NOT EXISTS (SELECT AreaCode FROM SDS.tblAreaMasterPinCode WHERE AreaCode=@AreaCode) 
				BEGIN
					insert into SDS.tblAreaMasterPinCode (AreaCode,AreaName,TalukaCode,ActiveFlag,LastUpdateTime)
					values  (@AreaCode,@AreaName,@TalukaCode,'1',GETDATE())
					if (@@ERROR != 0)
					 set @HasError = 1
				END	
				
	--inserting  Distributor Delivery Area
				
				IF NOT EXISTS (SELECT AreaCode FROM SDS.tblGeoCoordinateMasterPinCode WHERE AreaCode=@AreaCode) 
				BEGIN
				INSERT INTO SDS.[tblGeoCoordinateMasterPinCode] ([AreaCode],[AreaJSON],[LastUpdateDateTime])
			                   VALUES (@AreaCode,@AreaJSON,GETDATE())   
							
					if (@@ERROR != 0)
						set @HasError = 1
						
				END	
				
				if @HasError > 0
				ROLLBACK TRANSACTION
			ELSE
				COMMIT TRANSACTION
				
				
				
END
    -- insert into error table error_number() & error_message()



GO
/****** Object:  StoredProcedure [SDS].[usp_AddAreaGeoCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_AddAreaGeoCoordinates]
--	Description		:	Add Area Geo Coordinates

--	Author			:	13-January-2018

					     Modifications
--	11-April-2018			Prasanna        Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_AddAreaGeoCoordinates]
@AreaCode nvarchar(20),
@AreaJSON nvarchar(MAX)
AS
BEGIN
	     
     INSERT INTO SDS.[tblGeoCoordinateMaster] ([AreaCode],[AreaJSON],[LastUpdateDateTime])
          VALUES (@AreaCode,@AreaJSON,GETDATE())      
END




GO
/****** Object:  StoredProcedure [SDS].[usp_AddBreakDownRequest]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [SDS].[usp_AddBreakDownRequest]
@BreakdownId bigint,
@DistributorId int,
@DeliveryBoyId numeric(18,0),
@VehicleId bigint,
@VehicleNo nvarchar(50),
@TripId bigint,
@BreakDownDateTime datetime,
@BreakDownReason nvarchar(max),
@StockTransferTo nvarchar(max),
@ExpectResolve datetime,
@IsConfirm nvarchar(2),
@Latitude nvarchar(50),
@Longitude nvarchar(50),
@PlaceId nvarchar(max),
@UpdatedBy nvarchar(50),
@Operation nvarchar(50),
@Result bigint OUTPUT
AS
BEGIN
	
	set @Result=0;
	IF NOT EXISTS(Select BreakdownId from SDS.tblBreakDown where BreakdownId=@BreakdownId)
	BEGIN
		if(@TripId <>'' or @TripId is not null)
		begin
			INSERT INTO SDS.tblBreakDown(DistributorID, DeliveryBoyId,VehicleId,VehicleNo, TripId, BreakDownDateTime,BreakDownReason,ExpectResolve,--IsConfirm,
							Latitude, Longitude, PlaceId, CreatedBy, CreateDateTime)
			VALUES (@DistributorId,@DeliveryBoyId,@VehicleId,@VehicleNo,@TripId,@BreakDownDateTime,@BreakDownReason,@ExpectResolve,--'N',
							@Latitude,@Longitude,@PlaceId,@UpdatedBy, GETDATE())
			set @Result= SCOPE_IDENTITY()
		end
		else
		begin
			set @Result= -1
		end
		
		IF(@Result>0)
		BEGIN
			Update SDS.tblTripPlanning Set [TripStatus]='BREAKDOWN',UpdatedDate=Getdate() where TripId=@TripId

			Update SDS.tblTripPlanningHistory Set [TripStatus]='BREAKDOWN',UpdatedDate=Getdate() where TripId=@TripId
		END
	END
	ELSE IF(@Operation='UpdateStatus')
	BEGIN
		Update SDS.tblBreakDown Set IsConfirm=@IsConfirm,StockTransferTo=@StockTransferTo,LastUpdatedBy=@UpdatedBy,LastUpdatedDate=GETDATE() where BreakdownId=@BreakdownId

		set @Result= @@rowcount
	END
	ELSE IF(@Operation='UpdateAvailable')
	BEGIN
		Update SDS.tblBreakDown Set IsRepaired='Y',	LastUpdatedBy=@UpdatedBy,LastUpdatedDate=GETDATE()	where BreakdownId=@BreakdownId

		set @Result= @@rowcount
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddCurrentLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_AddCurrentLocation
--	Description		:	To Insert delivery boy current location

--	Author			:	Prasanna	16-Oct-2019

--	Date Modified		Modified By	     Modifications
--	16-Oct-2019			Prasanna         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddCurrentLocation]
	@DistributorId int,
	@StaffRefNo numeric(18,0),
	@Latitude nvarchar(50),
	@Longitude nvarchar(50),
	@LocationDateTime datetime
AS
BEGIN


		--INSERT INTO SDS.tblCurrentLocation(DistributorId,StaffRefNo,Latitude,Longitude,LocationDateTime,InsertedDateTime)
		--VALUES(@DistributorId,@StaffRefNo,@Latitude,@Longitude,@LocationDateTime,GETDATE())
		
		DECLARE @LastDT DATETIME=NULL
		SELECT @LastDT=LocationDateTime FROM SDS.tblCurrentLocation WHERE DistributorId=@DistributorId AND StaffRefNo=@StaffRefNo
		PRINT @LastDT
		IF(@LastDT <> '')
		BEGIN
			IF(@LastDT <> @LocationDateTime)
			BEGIN
				UPDATE SDS.tblCurrentLocation
				SET Latitude=@Latitude,
					Longitude=@Longitude,
					LocationDateTime=@LocationDateTime,
					InsertedDateTime=GETDATE()
				WHERE StaffRefNo=@StaffRefNo AND DistributorId=@DistributorId
			END
		END
		ELSE 
		BEGIN
			INSERT INTO SDS.tblCurrentLocation(DistributorId,StaffRefNo,Latitude,Longitude,LocationDateTime,InsertedDateTime)
			VALUES(@DistributorId,@StaffRefNo,@Latitude,@Longitude,@LocationDateTime,GETDATE())
		END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddDefectiveReturn]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_AddDefectiveReturn
--	Description		:	To Insert return Defective items

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	26-March-2018		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddDefectiveReturn]
	@UniqueConsumerId bigint,
	@DistributorId int,
	@DeliveryBoyId numeric(17,0),
	@ReturnDate date,
	@Latitude nvarchar(10),
	@Longitude nvarchar(10),
	@DefectiveReturnId bigint OUTPUT
AS
BEGIN

	SET @DefectiveReturnId = 0
	
	INSERT INTO SDS.tblDefectiveReturn(UniqueConsumerId,DistributorId,DeliveryBoyId,ReturnDate,Latitude,Longitude,LastUpdateDatetime)
	VALUES(@UniqueConsumerId,@DistributorId,@DeliveryBoyId,@ReturnDate,@Latitude,@Longitude,GETDATE())
	
	SET @DefectiveReturnId = SCOPE_IDENTITY()
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddDefectiveReturnDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_AddDefectiveReturnDetails
--	Description		:	To Insert defective Item detils

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	26-March-2018		Prasanna		 Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_AddDefectiveReturnDetails]
	@DefectiveReturnId bigint,
	@ItemID int,
	@DefectiveQty int,
	@SavedItemId bigint output
AS
BEGIN

	SET @SavedItemId = 0
	
	INSERT INTO SDS.tblDefectiveReturnDtls(DefectiveReturnId,ItemID,DefectiveQty,LastUpdateDatetime)
	VALUES (@DefectiveReturnId,@ItemID,@DefectiveQty,GETDATE())
	
	SET @SavedItemId = SCOPE_IDENTITY()
		
END




GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditApiconfigurationDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/**************************************************************											
--	Stored Procedure Name	: [usp_AddEditApiconfigurationDetails]
--	Description		:	To Insert/Update Apiconfiguration Details in database

--	Author			:	Rahul G

**************************************************************/

create PROCEDURE [SDS].[usp_AddEditApiconfigurationDetails]
@PkId int,
@Key varchar(50),
@Value varchar(max),
@Info varchar(max)
AS
BEGIN
	
	IF(@PkId = 0)
	BEGIN		
		INSERT INTO SDS.tblAppConfiguration([Key],[Value],Info,LastUpdatedOn)
		VALUES(@Key,@Value,@Info,GETDATE())	
		SET @PkId = @@IDENTITY
	END
	ELSE IF(@PkId > 0)
	BEGIN
		BEGIN
			UPDATE SDS.tblAppConfiguration 
			SET [Value]=@Value,Info=@Info,LastUpdatedOn=GETDATE()
			WHERE Id=@PkId
		END
	END
	ELSE IF(@PkId = -1)
	BEGIN
		BEGIN
			UPDATE SDS.tblAppConfiguration 
			SET [Value]=@Value,LastUpdatedOn=GETDATE()
			WHERE [Key]=@Key
		END
	END
	SELECT @PkId AS PkId
END


GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditAppconfigurationDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_AddEditAppconfigurationDetails]
--	Description		:	To Insert Appconfiguration Details in database

--	Author			:	Rahul G

**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddEditAppconfigurationDetails]
	@PkId int,
	@DeviationDistanceMtr int,
	@NoOfDaysForOrderAvg int,
	@NoOfDaysForBacklog int,
	@OrderPickBuffer int,
	@AddedBy nvarchar(50)
AS
BEGIN
	
	IF not exists(select 1 from sds.tblAppConfigData)
	BEGIN		
		INSERT INTO SDS.tblAppConfigData(DeviationDistanceMtr,NoOfDaysForOrderAvg,NoOfDaysForBacklog,OrderPickBuffer,AddedBy,AddedOn,LastUpdatedOn)
		VALUES(@DeviationDistanceMtr,@NoOfDaysForOrderAvg,@NoOfDaysForBacklog,@OrderPickBuffer,@AddedBy,GETDATE(),GETDATE())	
		SET @PkId = @@IDENTITY
	END
	else 
	BEGIN
		BEGIN
			UPDATE SDS.tblAppConfigData 
			SET DeviationDistanceMtr=@DeviationDistanceMtr,NoOfDaysForOrderAvg=@NoOfDaysForOrderAvg,OrderPickBuffer=@OrderPickBuffer,
				AddedBy=@AddedBy,LastUpdatedOn=GETDATE()
			WHERE PkId=@PkId
		END
	END
	SELECT @PkId AS PkId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditAuditLog]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_AddEditAuditLog
--	Description		:	To Insert Mobile App log in database

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddEditAuditLog]
	@LogID numeric(17,0),
	@ServiceId int,
	@DistributorId int,
	@GodownkeeperId numeric(17,0),
	@DeliveryBoyId numeric(17,0),
	@LogFor nvarchar(150),
	@LogData nvarchar(max),
	@LogStatus nvarchar(50),
	@LogDatetime datetime,
	@LogException nvarchar(max)
AS
BEGIN
	DECLARE @IdentityId numeric(17,0)
	IF(@LogID = 0)
	BEGIN		
		INSERT INTO SDS.tblAuditLog(ServiceId,DistributorId,GodownkeeperId,DeliveryBoyId,LogFor,LogData,LogStatus,LogDatetime,LogException,UpdatedDatetime)
		VALUES(@ServiceId,@DistributorId,@GodownkeeperId,@DeliveryBoyId,@LogFor,@LogData,@LogStatus,@LogDatetime,@LogException,GETDATE())	
		SET @IdentityId = @@IDENTITY
	END
	IF(@LogID > 0)
	BEGIN
		IF(@DistributorId > 0)
		BEGIN
			UPDATE SDS.tblAuditLog 
			SET DistributorId=@DistributorId,DeliveryBoyId=@DeliveryBoyId,GodownkeeperId=@GodownkeeperId,
				LogStatus=@LogStatus,LogException=@LogException,UpdatedDatetime=GETDATE()
			WHERE LogID=@LogID
		END
		ELSE
		BEGIN	
			UPDATE SDS.tblAuditLog 
			SET LogStatus=@LogStatus,LogException=@LogException,UpdatedDatetime=GETDATE()
			WHERE LogID=@LogID
		END
	END
	SELECT @IdentityId AS IdentityId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditConsumerDeliveryDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_AddEditConsumerDeliveryDetails]
 
@ConsumerNo int,
@DistributorId int,
@StaffRefNo nvarchar(50),
@Lat nvarchar(50),
@Lng nvarchar(50),
@InsertedDatetime nvarchar(50),
@ResultId bigint output
as
BEGIN
set FMTONLY OFF
	
	set @ResultId =-1;


	IF NOT EXISTS(select [TransId] from  SDS.tblConsumerDeliveryDetails Where DistributorId=@DistributorId and StaffRefNo=@StaffRefNo and ConsumerNo=@ConsumerNo and CAST(InsertedDatetime as date)=CAST(@InsertedDatetime as date))
	BEGIN
			Insert into SDS.tblConsumerDeliveryDetails(ConsumerNo, DistributorId, StaffRefNo, Lat, Lng, InsertedDatetime,LastUpdateDateTime)
			Values(@ConsumerNo,@DistributorId,@StaffRefNo,@Lat,@Lng,@InsertedDatetime,GETDATE())

			set @ResultId= SCOPE_IDENTITY();

	END
	ELSE 
	BEGIN
		set @ResultId= -1;
		--Update [SDS].[tblConsumerDeliveryDetails]
		--Set [Lat]=@Lat,
		--	[Lng]=@Lng,
		--	InsertedDatetime=@InsertedDatetime

		--where DistributorId=@DistributorId and StaffRefNo=@StaffRefNo and ConsumerNo=@ConsumerNo and CAST(InsertedDatetime as date)=CAST(@InsertedDatetime as date)

	END
END

GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditCSDeliveryRoute]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_AddEditCSDeliveryRoute]
--	Description		:	To Insert delivery boy coordinate  to use in delivery

--	Author			:	Swapnil

--	Date Modified	Modified By	     Modifications
--	01-FEb-2020		Swapnil			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddEditCSDeliveryRoute]
@Id bigint,
@DistributorId int,
@StaffRefNo numeric(17,0),
@Lat nvarchar(50),
@Lng nvarchar(50),
@mobDatetime datetime,
@resultId bigint output
AS
BEGIN
	
	set @resultId=0;

		INSERT INTO [SDS].[tblCSDeliveryRoute]([DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime])
		VALUES (@DistributorId,@StaffRefNo,@Lat,@Lng,@mobDatetime,GETDATE())

	--IF EXISTS(SELECT 1 FROM [SDS].[tblCSDeliveryRoute] WHERE DistributorId=@DistributorId AND StaffRefNo=@StaffRefNo)
	--BEGIN
	--	UPDATE [SDS].[tblCSDeliveryRoute]
	--	SET Lat=@Lat,Lng=@Lng,mobDatetime=@mobDatetime,LastUpdatedDatetime=GETDATE()
	--	WHERE DistributorId=@DistributorId AND StaffRefNo=@StaffRefNo
	--END
	--ELSE 
	--BEGIN
	--	INSERT INTO [SDS].[tblCSDeliveryRoute]([DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime])
	--	VALUES (@DistributorId,@StaffRefNo,@Lat,@Lng,@mobDatetime,GETDATE())
	--END
	set @resultId=@@IDENTITY

	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditDistributorWiseActiveTripCase]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_AddEditDistributorWiseActiveTripCase
--	Description		:	To Insertand Update Distributor Wise Active Trip Case
--	Author			:	Swapnil
--	Date Modified	Modified By	     Modifications
--	26-FEb-2021		Swapnil			Created
--	08-03-2021		Rajendra		Changed
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddEditDistributorWiseActiveTripCase]
--declare
@DistributorId int,
@TripDate datetime,
@ActiveCaseId int,
@ResultId bigint output
--set @DistributorId=14145;set @TripDate='2021-03-08'; set @ActiveCaseId=1

AS

BEGIN
	
	set @resultId=0;

	IF not EXISTS(SELECT * FROM SDS.tblDistributorWiseActiveTripCase WHERE DistributorId=@DistributorId AND CAST(TripDate as date)=CAST(@TripDate as date))
	Begin
		INSERT INTO  SDS.tblDistributorWiseActiveTripCase(DistributorId,TripDate,ActiveCaseId,ParameterId,Weightage,OnOffFlag,SequencePriority,RefId,RefValue,LastUpdatedDate)

		SELECT ac.DistributorId,cast(@TripDate as date) , ac.CaseId, tp.ParameterId, tp.Weightage, tp.OnOffFlag, tp.SequencePriority, tp.RefId, tp.RefValue, getdate()
		FROM SDS.tbltripCaseActiveDistributorwise AS ac INNER JOIN SDS.tblTripCaseParameter AS tp ON ac.CaseId = tp.CaseId
		where ac.DistributorId=@DistributorId and  upper(tp.OnOffFlag)='ON'
		set @ResultId=@@ROWCOUNT
	END
	Else
	Begin
		set @ResultId=-1
	End 
	return @ResultId
	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_AddEditUpdateAddressLocationInCDCMS]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_AddEditUpdateAddressLocationInCDCMS]  
@Id bigint,  
@UniqueConsumerId numeric(17, 0),  
@DistributorCode nvarchar(20),  
@LocFlag nvarchar(150),  
@CommJson nvarchar(max),  
@UpdatedBy nvarchar(50),  
@UpdatedRoleId int,  
@UpdatedDate datetime,  
@UpdatedFlag bit,  
@Action nvarchar(150),  
@Status nvarchar(20),  
@ResultId bigint output  
AS  
BEGIN  
	set @ResultId=0;  
	IF(@Status='UpdateStatus')  
	BEGIN  
		UPDATE SDS.tblUpdateAddressLocationInCDCMS SET UpdatedDate=GetDate(), UpdatedFlag=@UpdatedFlag, ReturnResult=@CommJson  
		WHERE  Id=@Id and DistributorCode=@DistributorCode AND UniqueConsumerId=@UniqueConsumerId  
		set @ResultId = @@ROWCOUNT  
	END  
	ELSE IF(@Status='DeleteRecord')  
	BEGIN  
		delete from SDS.tblUpdateAddressLocationInCDCMS
		WHERE  Id=@Id and DistributorCode=@DistributorCode AND UniqueConsumerId=@UniqueConsumerId  
		set @ResultId = @@ROWCOUNT  
	END  
	ELSE IF Not EXISTS(SELECT UniqueConsumerId FROM SDS.tblUpdateAddressLocationInCDCMS   
		WHERE DistributorCode=@DistributorCode AND UniqueConsumerId=@UniqueConsumerId and Action=@Action)  
	BEGIN  
		INSERT INTO SDS.tblUpdateAddressLocationInCDCMS(UniqueConsumerId,DistributorCode,LocFlag,CommJson,Action,UpdatedBy,UpdatedRoleId,UpdatedFlag,UpdatedDate)  
		VALUES (@UniqueConsumerId,@DistributorCode,@LocFlag,@CommJson,@Action,@UpdatedBy,@UpdatedRoleId,@UpdatedFlag,GETDATE())  
		set @ResultId=@@IDENTITY  
	END  
	ELSE   
	BEGIN  
		UPDATE SDS.tblUpdateAddressLocationInCDCMS SET CommJson=@CommJson,UpdatedBy=@UpdatedBy,UpdatedRoleId=@UpdatedRoleId,UpdatedDate=GetDate()  
		WHERE DistributorCode=@DistributorCode AND UniqueConsumerId=@UniqueConsumerId and Action=@Action    
		set @ResultId = @@ROWCOUNT
	END  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_AddNewAreawithGeoCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_AddNewAreawithGeoCoordinates]
--declare
@StateCode nvarchar(50),
@TalukaCode nvarchar(50),
@AreaName nvarchar(200),
@AreaJSON varchar(MAX),
@RetValue int output

--set @StateCode='MH'; set @TalukaCode='MHPUNShirur'; set @AreaName='Dhonore1123';
--set @AreaJSON='{"AreaCoordinates":[{"lat":18.6282686390001,"lng":74.106188192},{"lat":18.629395673,"lng":74.1067033570001},{"lat":18.6300335490001,"lng":74.1071002510001},{"lat":18.6311941380001,"lng":74.1073134660001},{"lat":18.6313846780001,"lng":74.107018263},{"lat":18.6325551320001,"lng":74.10745172},{"lat":18.632442132,"lng":74.1079278380001},{"lat":18.6344217980001,"lng":74.108834248},{"lat":18.6362864320001,"lng":74.109348293},{"lat":18.636339424,"lng":74.109506796},{"lat":18.6355937760001,"lng":74.112910626},{"lat":18.6317130640001,"lng":74.1114734950001},{"lat":18.629978232,"lng":74.1107798670001},{"lat":18.627844091,"lng":74.109795233},{"lat":18.627695186,"lng":74.109676606},{"lat":18.628354512,"lng":74.1087130110001},{"lat":18.6268488900001,"lng":74.1079696400001},{"lat":18.6267927810001,"lng":74.107491057},{"lat":18.6271827520001,"lng":74.106859135},{"lat":18.6273108300001,"lng":74.106440812},{"lat":18.627597499,"lng":74.1061829880001},{"lat":18.6282686390001,"lng":74.106188192}]}'
as

BEGIN
	set @RetValue=0
	if (ltrim(rtrim(isnull(@StateCode,'')))='' or ltrim(rtrim(isnull(@TalukaCode,'')))='' or ltrim(rtrim(isnull(@AreaName,'')))='')
	Begin
		set @RetValue=-1
	End
	else if exists (select areaname from sds.tblareamaster where AreaName=@AreaName and TalukaCode=@TalukaCode)
	Begin
		set @RetValue=-2
	End
	Else
	Begin
		declare @NewAreaCode nvarchar(100),  @c int=1
		set @NewAreaCode=@StateCode+upper(replace(@AreaName,' ',''))+convert(nvarchar(10),@c)

		while (@c>0)
		Begin
			if exists(select 1 from sds.tblAreaMaster where AreaCode=@NewAreaCode) 
			Begin
				set @c=@c+1
				set @NewAreaCode=@StateCode+upper(replace(@AreaName,' ',''))+convert(nvarchar(10),@c)		
			End
			else
				set @c=0
		End	

		insert into sds.tblAreaMaster(AreaCode,AreaName,TalukaCode,ActiveFlag,LastUpdateBy,LastUpdateTime)
		values (@NewAreaCode,@AreaName,@TalukaCode,1,'Admin',getdate())

		set @RetValue=@@ROWCOUNT
		
		if (@RetValue>0)
		Begin
			insert into sds.tblGeoCoordinateMaster(AreaCode,AreaJSON,LastUpdateDateTime)
			values (@NewAreaCode,@AreaJSON, getdate())
			set @RetValue=@@ROWCOUNT
		End
	End
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddOfficerEmailDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================================================
--	Stored Procedure Name	: usp_AddOfficerEmailDetails
--	Description		:	To Insert Officer Email details for Email Scheduler

--	Author			:	Rahul G

--	Date Modified		Modified By	     Modifications
--	28-10-2020		    Rahul G			Created
-- ==============================================================================


create PROCEDURE [SDS].[usp_AddOfficerEmailDetails]
	@Code nvarchar(50),
	@Name nvarchar(100),
	@EmployeeNo int,
	@EmployeeName nvarchar(100),
	@MobileNo numeric(10,0),
	@Email nvarchar(100),
	@OfficerRole nvarchar(10),
	@Flag nvarchar(10),
	@Action nvarchar(10),
	@ReturnId bigint OUTPUT
AS
BEGIN

	SET @ReturnId = 0
	IF(@Action = 'ADD')
	BEGIN
	INSERT INTO [SDS].[tblOfficerEmailData]([Code],[Name],[EmployeeNo],[EmployeeName],[MobileNo],[Email],[OfficerRole],[LastUpdatedDate],[Active])
	VALUES(@Code,@Name,@EmployeeNo,@EmployeeName,@MobileNo,@Email,@OfficerRole,GETDATE(),'Y')
	SET @ReturnId = SCOPE_IDENTITY()
	END
	ELSE IF(@Action = 'DELETE')
	BEGIN
	UPDATE [SDS].[tblOfficerEmailData] SET Active=@Flag WHERE EmployeeNo=@EmployeeNo and OfficerRole=@OfficerRole
	SET @ReturnId = @EmployeeNo
	END
	
	
	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_AddSDSVersionDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================================
--	Stored Procedure Name	: usp_AddSDSVersionDetails
--	Description		:	To Insert Add SDS Version Details

--	Author			:	Rahul G

--	Date Modified		Modified By	     Modifications
--	18-01-2021		    Rahul G			Created
-- ==============================================================================


CREATE PROCEDURE [SDS].[usp_AddSDSVersionDetails]
	@VersionId int,
	@VersionNo nvarchar(100),
	@VersionDate datetime,
	@RealeasedOn datetime,
	@Releases varchar(max),
	@ActiveStatus char(1),
	@Action nvarchar(10),
	@ReturnId bigint OUTPUT
AS
BEGIN

	SET @ReturnId = 0
	IF(@Action = 'ADD')
	BEGIN
	INSERT INTO [SDS].[tblSDSVersionMaster](
			  [VersionNo]
			  ,[VersionDate]
			  ,[ReleasedOn]
			  ,[Releases]
			  ,[ActiveStatus]
			  ,[CreatedDate]
			  )
		VALUES( 
				@VersionNo ,
				@VersionDate ,
				@RealeasedOn ,
				@Releases ,
				@ActiveStatus,
				GETDATE())
	SET @ReturnId = SCOPE_IDENTITY()
	END
	ELSE IF(@Action = 'EDIT')
	BEGIN
	UPDATE [SDS].[tblSDSVersionMaster] SET VersionNo=@VersionNo,VersionDate=@VersionDate,ReleasedOn=@RealeasedOn,Releases=@Releases, ActiveStatus=@ActiveStatus,UpdatedDate=GETDATE() WHERE VersionId=@VersionId
	SET @ReturnId = @VersionId
	END
	ELSE IF(@Action = 'DELETE')
	BEGIN
	UPDATE [SDS].[tblSDSVersionMaster] SET ActiveStatus=@ActiveStatus WHERE VersionId=@VersionId
	SET @ReturnId = @VersionId
	END
	
	
	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_AddSendOTPLog]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_AddSendOTPLog
--	Description		:	To Insert OTP details sent on user mobile number

--	Author			:	Prasanna	

--	Date Modified		Modified By	     Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddSendOTPLog]
	@DistributorId int,
	@StaffRefNo numeric(18,0),
	@UserTypeId int,
	@MobileNo varchar(15),
	@OTP int,
	@Status varchar(15),
	@OTPDateTime datetime,
	@MsgId nvarchar(50),
	@Description nvarchar(200),
	@OTPReqDateTime datetime
AS
BEGIN

	--DECLARE @LogId bigint = 0
	
	INSERT INTO SDS.tblSendOTPLog(DistributorId,StaffRefNo,UserTypeId,MobileNo,OTP,Status,OTPDateTime,MsgId,Description,OTPReqDateTime)
	VALUES(@DistributorId,@StaffRefNo,@UserTypeId,@MobileNo,@OTP,@Status,@OTPDateTime,@MsgId,@Description,GETDATE())
	
	--SET @LogId = SCOPE_IDENTITY()
	
	--SELECT @LogId AS LogId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddStockTransfer]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_AddStockTransfer
--	Description		:	To Insert Stock Transfer from Delivery Boy to Godown Keeper or Delivery boy to Delivery Boy

--	Author			:	Prasanna

--				    Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddStockTransfer]
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@BreakdownId bigint,
@TransferDate datetime,
@VehicleNo bigint,
@TransferedTo char(2),
@TransferedDeliveryBoyID numeric(17,0),
@Latitude nvarchar(10),
@Longitude nvarchar(10),
@IsAllStock char(1),
@StockTransferId bigint OUTPUT,
@StockAllotmentId bigint OUTPUT
AS
BEGIN
	declare @StockTransferNo bigint=0, @max bigint=0, @StockTransferNostr nvarchar(max)
	DECLARE @TodayStockCount int=0, @StockAllotmentNo bigint =0, @StockAllotmentNoStr nvarchar(Max)

	IF(@BreakdownId is null or @BreakdownId<=0)
	BEGIN
		SET @StockTransferId = 0
	
		
		
		select @StockTransferNo=COUNT(1) from sds.tblStockTransfer WITH(NOLOCK) where DistributorId=@DistributorId	
		SET @StockTransferNo = @StockTransferNo+1
	
		SET @StockTransferNostr = '1'+ RIGHT('0'+ CAST(YEAR(GETDATE()) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(GETDATE()) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(GETDATE()) AS varchar(2)),2) 
		+ RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@StockTransferNo)))) + CONVERT(varchar(8000),@StockTransferNo)
		SET @StockTransferNo = CAST(@StockTransferNostr as bigint)

		INSERT INTO SDS.tblStockTransfer(StockTransferNo,BreakdownId,DistributorId,DeliveryBoyId,TransferDate,VehicleId,TransferedTo,TransferedDeliveryBoyID,Latitude,Longitude,LastUpdatedBy,LastUpdateDate)
		VALUES(@StockTransferNo,@BreakdownId, @DistributorId, @DeliveryBoyId, @TransferDate, @VehicleNo, @TransferedTo,@TransferedDeliveryBoyID, @Latitude, @Longitude,'D', GETDATE())
		SET @StockTransferId = SCOPE_IDENTITY()
	

		IF(@TransferedTo='D')
		begin
	
			SET @StockAllotmentId = 0
			SELECT @TodayStockCount = COUNT(1) FROM sds.tblStockAllotment s with(nolock) WHERE s.DistributorId = @DistributorId AND CAST(s.AllotmentDate as DATE) = CAST(GETDATE() as DATE)
			SET @TodayStockCount = @TodayStockCount+1
	
			SET @StockAllotmentNoStr = '1'+ RIGHT('0'+ CAST(YEAR(GETDATE()) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(GETDATE()) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(GETDATE()) AS varchar(2)),2) 
			+ RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@TodayStockCount)))) + CONVERT(varchar(8000),@TodayStockCount)
			SET @StockAllotmentNo = CAST(@StockAllotmentNoStr as bigint)

			INSERT INTO SDS.tblStockAllotment(StockAllotmentNo,StockTransferId,BreakdownId,DistributorId,DeliveryBoyId,GodownKeeperId,AllotmentBy,AllotmentDate,VehicleId,LastUpdatedBy,LastUpdateDate)
			VALUES(@StockAllotmentNo,@StockTransferId,@BreakdownId,@DistributorId,@TransferedDeliveryBoyID,@DeliveryBoyId,'D',GETDATE(),@VehicleNo,'G',GETDATE())
	
			SET @StockAllotmentId = SCOPE_IDENTITY()	
		end

		IF(@StockAllotmentId is null)
		begin
			SET @StockAllotmentId=0
		end
	END
	ELSE
	BEGIN
			declare @IsConfirm nvarchar(1)
			select @IsConfirm=IsConfirm from [SDS].[tblBreakDown] where BreakdownId=@BreakdownId

			IF(@IsConfirm='Y')
			BEGIN
					UPDATE	SDS.tblBreakDown
					SET		IsAllStock = @IsAllStock
					WHERE	BreakdownId=@BreakdownId

					SET @StockTransferId = 0
					
					select @StockTransferNo=COUNT(1) from sds.tblStockTransfer WITH(NOLOCK) where DistributorId=@DistributorId	
					SET @StockTransferNo = @StockTransferNo+1
	
					SET @StockTransferNostr = '1'+ RIGHT('0'+ CAST(YEAR(GETDATE()) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(GETDATE()) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(GETDATE()) AS varchar(2)),2) 
					+ RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@StockTransferNo)))) + CONVERT(varchar(8000),@StockTransferNo)
					SET @StockTransferNo = CAST(@StockTransferNostr as bigint)

					INSERT INTO SDS.tblStockTransfer(StockTransferNo,BreakdownId,DistributorId,DeliveryBoyId,TransferDate,VehicleId,TransferedTo,TransferedDeliveryBoyID,Latitude,Longitude,LastUpdatedBy,LastUpdateDate)
					VALUES(@StockTransferNo,@BreakdownId, @DistributorId, @DeliveryBoyId, @TransferDate, @VehicleNo, @TransferedTo,@TransferedDeliveryBoyID, @Latitude, @Longitude,'D', GETDATE())
					SET @StockTransferId = SCOPE_IDENTITY()
					IF(@TransferedTo='D')
					begin
	
						SET @StockAllotmentId = 0
						SELECT @TodayStockCount = COUNT(1) FROM sds.tblStockAllotment s with(nolock) WHERE s.DistributorId = @DistributorId AND CAST(s.AllotmentDate as DATE) = CAST(GETDATE() as DATE)
						SET @TodayStockCount = @TodayStockCount+1
	
						SET @StockAllotmentNoStr = '1'+ RIGHT('0'+ CAST(YEAR(GETDATE()) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(GETDATE()) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(GETDATE()) AS varchar(2)),2) 
						+ RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@TodayStockCount)))) + CONVERT(varchar(8000),@TodayStockCount)
						SET @StockAllotmentNo = CAST(@StockAllotmentNoStr as bigint)

						INSERT INTO SDS.tblStockAllotment(StockAllotmentNo,StockTransferId,BreakdownId,DistributorId,DeliveryBoyId,GodownKeeperId,AllotmentBy,AllotmentDate,VehicleId,LastUpdatedBy,LastUpdateDate)
						VALUES(@StockAllotmentNo,@StockTransferId,@BreakdownId,@DistributorId,@TransferedDeliveryBoyID,@DeliveryBoyId,'D',GETDATE(),@VehicleNo,'G',GETDATE())
	
						SET @StockAllotmentId = SCOPE_IDENTITY()	
					end

					if(@StockAllotmentId is null)
					begin
						SET @StockAllotmentId=0
					end
			END
			ELSE
			BEGIN
				-- IF BreakDown IS NOT Confirm by delivery boy
				SET @StockTransferId= -4
				SET @StockAllotmentId= -4
			END
	END
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddStockTransferDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_AddStockTransferDetails
--	Description		:	To Insert Stock Transfer Details from  Delivery Boy to Godown Keeper 

--	Author			:	Prasanna

--	26-Feb-2018			Swapnil     Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_AddStockTransferDetails]
@StockTransferDetId bigint,
@StockAllotmentId bigint,
@ItemId int,
@FilledQty int,
@EmptyQty int,
@DefectiveQty int,
@DeliveryBoyId numeric(17,0),
@InsertedId bigint output,
@AllotInsertedId bigint output
AS
BEGIN
	SET @InsertedId = 0
	
	declare @DbFilledStock int,@DBEmptyStock int
	
	select @DbFilledStock=(FilledQuantity-@FilledQty-ISNULL(@DefectiveQty,0)),@DBEmptyStock=(EmptyQuantity-@EmptyQty) from SDS.tblDeliveryBoyStock WITH(NOLOCK) where ItemId=@ItemId and DeliveryBoyId=@DeliveryBoyId
	
	if(@DbFilledStock>=0 AND @DBEmptyStock>=0)
	BEGIN
		update SDS.tblDeliveryBoyStock set FilledQuantity=@DbFilledStock,EmptyQuantity=@DBEmptyStock where  ItemId=@ItemId and DeliveryBoyId=@DeliveryBoyId
		
		INSERT INTO SDS.tblStockTransferDetails(StockTransferId,ItemId,FilledQty,EmptyQty,DefectiveQty,LastUpdatedBy,LastUpdateDate)
		VALUES(@StockTransferDetId,@ItemId,@FilledQty,@EmptyQty,ISNULL(@DefectiveQty,0),'G',GETDATE())
		SET @InsertedId = SCOPE_IDENTITY()
	END
	else
	begin
		SET @InsertedId =0
	End


	if(@StockAllotmentId<>0)
	begin
		declare @AllotDeliveryBoyId bigint=0
		select @AllotDeliveryBoyId=DeliveryBoyId from  SDS.tblStockAllotment WITH(NOLOCK) where StockAllotmentId=@StockAllotmentId
		
		IF NOT EXISTS(SELECT 1 FROM SDS.tblDeliveryBoyStock with(nolock) WHERE DeliveryBoyId = @AllotDeliveryBoyId AND ItemId = @ItemId)
		BEGIN
			INSERT INTO SDS.tblDeliveryBoyStock(DeliveryBoyId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LastUpdatedDate)
			VALUES(@AllotDeliveryBoyId,@ItemId,0,0,'G',GETDATE())
		END
		
		INSERT INTO SDS.tblStockAllotmentDetails(StockAllotmentId,ItemId,Quantity,EmptyQty,LastUpdatedBy,LastUpdatedDate)
		VALUES(@StockAllotmentId,@ItemId,@FilledQty,@EmptyQty,'D',GETDATE())
		SET @AllotInsertedId = SCOPE_IDENTITY()
	End
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AddTripsCaseParameters]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_AddTripsCaseParameters]
--DECLARE
@DistributorId int,
@ClusterId int,
@ParameterFlag nvarchar(50),
@RetValue int Output

As

BEGIN
    SET @RetValue = 0;  

    IF NOT EXISTS (SELECT DistributorId FROM [SDS].[tblTripCaseDetails] WHERE DistributorId = @DistributorId AND ClusterId = @ClusterId and ParameterValueText=@ParameterFlag) 
    BEGIN
        DECLARE @ParameterId INT,@ParameterType nvarchar(50),@ParameterValue nvarchar(50),@ParameterValueText nvarchar(50);

        SELECT  @ParameterId = ParameterId,
                     @ParameterType = ParameterType,
                     @ParameterValue = Parametervalue, 
                     @ParameterValueText = Category 
        FROM SDS.[tblParameterDetails] WHERE Category = @ParameterFlag;

        IF (@ParameterId IS NOT NULL)
        BEGIN
            INSERT INTO [SDS].[tblTripCaseDetails] ([DistributorId], [ClusterId], [ParameterId], [ParameterType], [ParameterValue], [ParameterValueText], [Sequence], CreatedDateTime)
            VALUES (@DistributorId, @ClusterId, @ParameterId, @ParameterType, @ParameterValue, @ParameterValueText,0, GETDATE());

            SET @RetValue = 1;
        END
        ELSE
        BEGIN
            SET @RetValue = -2; 
        END
    END
    ELSE
    BEGIN
        SET @RetValue = -1; 
    END
END
GO
/****** Object:  StoredProcedure [SDS].[usp_AddUpdateDistGCInsideStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_AddUpdateDistGCInsideStatus]
--declare
 @DistributorID INT,
 @GCCount int,
 @InsideGCCount int,
 @LogFor NVARCHAR(100),
 @RetValue int output

 AS 
 BEGIN
 set @RetValue=0;
    if not exists (select 1 from SDS.tblDistributorGCInsideStatus where DistributorId=@DistributorID)
		Begin
			 INSERT INTO SDS.tblDistributorGCInsideStatus(DistributorId,GCCount,InsideGCCount,StatusDate,LogFor)
			 VALUES(@DistributorId,@GCCount,@InsideGCCount,GETDATE(),@LogFor)
			 set @RetValue=@@ROWCOUNT;
		end
	else
		begin
			UPDATE SDS.tblDistributorGCInsideStatus
			SET GCCount=@GCCount,
				InsideGCCount = @InsideGCCount,
				StatusDate = GETDATE()
			WHERE DistributorId=@DistributorID
			set @RetValue=@@ROWCOUNT;
		end
 END
GO
/****** Object:  StoredProcedure [SDS].[usp_AddUpdateDistTaluka]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetDistTalukaMstByDistributorId
--	Description		:	To Dist Taluka Master By DistributorId

--	Author			:	Swapnil

--				    Modifications
--	06-12-2019		Swapnil			Created
**************************************************************/

CREATE  PROCEDURE [SDS].[usp_AddUpdateDistTaluka]

@DistributorId int,
@DistrictCode nvarchar(50),
@TalukaCode nvarchar(50),
@LastUpdateBy nvarchar(20),
@Flag nvarchar(10),
@ResultId int output
AS
BEGIN
	
	set @ResultId=-1

	IF(@Flag='ALL')
	BEGIN
		Delete FROM [SDS].[tblDistributorDeliveryTaluka] WHERE DistributorId=@DistributorId AND DistrictCode=@DistrictCode
		
		INSERT INTO [SDS].[tblDistributorDeliveryTaluka]([DistributorId],[DistrictCode],[TalukaCode],[ActiveFlag],[LastUpdateBy],[LastUpdateTime])
		SELECT @DistributorId,@DistrictCode,TalukaCode,'Y',@LastUpdateBy,GETDATE()
		FROM [SDS].[tblTalukaMaster] WHERE DistrictCode= @DistrictCode
				
		set @ResultId=@@rowcount
	END
	ELSE IF(@Flag='First')
	BEGIN
		Delete From [SDS].[tblDistributorDeliveryTaluka] where DistributorId=@DistributorId AND DistrictCode=@DistrictCode
		set @ResultId=@@rowcount
	END
	ELSE IF(@Flag='Delete')
	BEGIN
		Delete From [SDS].[tblDistributorDeliveryTaluka] where DistributorId=@DistributorId AND DistrictCode=@DistrictCode and [TalukaCode]=@TalukaCode
		set @ResultId=@@rowcount
	END
	ELSE IF NOT Exists(SELECT DistributorId FROM [SDS].[tblDistributorDeliveryTaluka] WHERE DistributorId=@DistributorId and DistrictCode=@DistrictCode and TalukaCode=@TalukaCode)
	BEGIN
		
		insert into [SDS].[tblDistributorDeliveryTaluka]([DistributorId],[DistrictCode],[TalukaCode],[ActiveFlag],[LastUpdateBy],[LastUpdateTime])
		select @DistributorId,@DistrictCode,@TalukaCode,'Y',@LastUpdateBy,GETDATE()

		set @ResultId=@@rowcount
	END
	ELSE
	BEGIN 
		set @ResultId=-1;
	END

END


GO
/****** Object:  StoredProcedure [SDS].[usp_AddUpdatetripCaseActiveDistwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [SDS].[usp_AddUpdatetripCaseActiveDistwise]
--declare
@pk_MappingId bigint,
@DistributorId int,
@CaseId int,
@Status nvarchar(20),
@Result bigint OUTPUT
AS
BEGIN
	--SET FMTONLY OFF
	set @Result=0;


	IF(@Status='Delete')
	Begin
		IF  EXISTS(Select pk_MappingId from SDS.[tbltripCaseActiveDistributorwise] where pk_MappingId=@pk_MappingId)
		BEGIN
			delete from SDS.[tbltripCaseActiveDistributorwise] where pk_MappingId=@pk_MappingId
			set @Result= @@rowcount
		END
	END
	ELSE 
	BEGIN
		IF NOT EXISTS(Select pk_MappingId from SDS.[tbltripCaseActiveDistributorwise] where pk_MappingId=@pk_MappingId)
		BEGIN
			INSERT INTO [SDS].[tbltripCaseActiveDistributorwise]([DistributorId],[CaseId],[LastUpdatedDate])
			VALUES        (@DistributorId,@CaseId, GETDATE())
			set @Result= SCOPE_IDENTITY()
		
		END
		ELSE 
		BEGIN
			Update SDS.[tbltripCaseActiveDistributorwise] 
			Set DistributorId=@DistributorId,
				CaseId=@CaseId,
				LastUpdatedDate=GETDATE() 
			where pk_MappingId=@pk_MappingId

			set @Result= @@rowcount
		END

	END
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_AdmDistributorClusterdata]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_AdmDistributorClusterdata]
@DistributorId int=0

as
BEGIN
	SELECT        d.DistributorId, d.DistributorName, c.ClusterId, c.AreaClusterName AS ClusterName, v.VehicleNo, v.VehicleType, 
	v.NumberOfWheels, v.RTOCapacity, dc.NoOfTrip, v.RTOCapacity* dc.NoOfTrip PossibleDel
	FROM            SDS.tblClusterMaster AS c INNER JOIN
	DCMS.tblDistributorMaster AS d ON c.DistributorId = d.DistributorId LEFT OUTER JOIN
	SDS.tblVehicleMaster AS v RIGHT OUTER JOIN
	SDS.tblVehicleDeliveryBoyMapping AS vd ON v.VehicleId = vd.VehicleId RIGHT OUTER JOIN
	SDS.tblDeliveryBoyClusterMapping AS dc ON vd.DeliveryBoyId = dc.StaffRefNo ON c.ClusterId = dc.ClusterId
	where (d.DistributorId=@DistributorId or @DistributorId=0)
	ORDER BY c.DistributorId, ClusterName
END

GO
/****** Object:  StoredProcedure [SDS].[usp_AdmDistributorConsumerdata]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_AdmDistributorConsumerdata]

as
Begin
SET FMTONLY OFF

	declare @Result table (SrNo int identity(1,1), DistributorId int, DistributorName nvarchar(200),ConsumerHolding int, AvgDelivery int, 
		MI_Nos  int, MI_Percernt decimal(10,2), EZYGAS_Nos  int, EZYGas_Percernt decimal(10,2), SARVEKSHAN_Nos int,Sarvekshan_Percernt decimal(10,2), 
		Total_Nos int, Total_Percernt decimal(10,2), PendingForRevgeo int, PendingForRevGeo_Percernt decimal(10,2), NoOfVehicles int, NoOfTrips int)


	insert into @Result(DistributorId,DistributorName,ConsumerHolding,MI_Nos,EZYGAS_Nos,SARVEKSHAN_Nos,AvgDelivery,NoOfVehicles,NoOfTrips)
	select d.DistributorId, d.DistributorName, count(c.UniqueConsumerId) TotalConsumer,
		sum(case when (cl.source ='MIAPP' or cl.source='MIAPP_U') then 1 else 0  end) MI,
		sum(case when cl.source ='EZYGAS' then 1 else 0  end) EZYGAS,
		sum(case when cl.source ='SARVEKSHAN' then 1 else 0  end) SARVEKSHAN,
		isnull(AvgDelivery,0), isnull(v.Vcount,0), isnull(dcm.NoOfTrip,0)
	from dcms.tblDistributorMaster d with (nolock) left outer join dcms.tblConsumerMaster c with (nolock) on d.DistributorId=c.DistributorID
		left outer join DCMS.tblConsumerLocation cl with (nolock) on c.UniqueConsumerId=cl.UniqueConsumerId
		left outer join (
		select DistributorId, count(OrderRefNo)/30 AvgDelivery from dcms.tblRefillOrderDtls
		where cast(ActualDeliveryDate as date)>= dateadd(dd,-30,getdate()) group by DistributorId
		) a on d.DistributorId=a.DistributorId
		left outer join ( select DistributorId, count(VehicleId) Vcount from sds.tblVehicleMaster group by DistributorId) v on d.DistributorId=v.DistributorId
		left outer join ( select c.DistributorId, sum(dc.NoOfTrip) NoOfTrip from sds.tblclusterMaster c inner join sds.tblDeliveryBoyClusterMapping dc on c.ClusterId=dc.ClusterId
		group by c.DistributorId) dcm on d.DistributorId=dcm.DistributorId
	where ConsumerStatus='Active'
	group by d.DistributorId, d.DistributorName, a.AvgDelivery, v.Vcount, dcm.NoOfTrip

	update @Result set Total_Nos=isnull(MI_Nos,0)+isnull(EZYGAS_Nos,0)+isnull(SARVEKSHAN_Nos,0)
	update @Result set PendingForRevgeo=isnull(ConsumerHolding,0)-(isnull(MI_Nos,0)+isnull(EZYGAS_Nos,0)+isnull(SARVEKSHAN_Nos,0))
	update @Result set MI_Percernt=isnull(MI_Nos,0.00)*100.00/isnull(ConsumerHolding,0.00),
						EZYGas_Percernt=isnull(EZYGas_Nos,0.00)*100.00/isnull(ConsumerHolding,0.00),
						Sarvekshan_Percernt=isnull(Sarvekshan_Nos,0.00)*100.00/isnull(ConsumerHolding,0.00),
						Total_Percernt=isnull(Total_Nos,0.00)*100.00/isnull(ConsumerHolding,0.00),
						PendingForRevGeo_Percernt=isnull(PendingForRevgeo,0.00)*100.00/isnull(ConsumerHolding,0.00)



	select SrNo, DistributorId, DistributorName, ConsumerHolding, AvgDelivery, MI_Nos, MI_Percernt, EZYGAS_Nos, EZYGas_Percernt, 
	SARVEKSHAN_Nos, Sarvekshan_Percernt, Total_Nos, Total_Percernt, PendingForRevgeo, PendingForRevGeo_Percernt, NoOfVehicles, NoOfTrips
from @Result

End

GO
/****** Object:  StoredProcedure [SDS].[usp_AllClusterTripDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_AllClusterTripDetails]   
--declare  
@DistributorId int,  
@Tripdate varchar(50)  
  
as    
   
-- set @DistributorId=14145; set @Tripdate= '07-01-2022';  
    
BEGIN    
 set FMTONLY OFF 

 declare @TripDtls  Table(TripId bigint, ClusterId bigint, ClusterName nvarchar(100), StaffrefNo nvarchar(25), StaffName nvarchar(100), VehicleId bigint, VehicleNo Nvarchar(50),    
 TotalTrips int, TotalOrders int, CompletedTrips int, CurrentTripId bigint, CurrentTrip nvarchar(50), CompletedOrders int, PendingOrders int)    
    
 insert into @TripDtls(TripId, ClusterId, ClusterName, staffrefNo, StaffName, VehicleId, VehicleNo,TotalTrips,CompletedTrips,CurrentTripId,CurrentTrip,TotalOrders, completedOrders, PendingOrders)    
 SELECT t.TripId, c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, v.VehicleNo,count(distinct t.TripId),    
 sum( case when t.TripEndDate is not null then 1 else 0 end ), isnull(ct.TripId,0),isnull(ct.TripNo,'-'), odr.TotalOrders, odr.completedOrders,     
 isnull(odr.TotalOrders,0)- isnull(odr.completedOrders,0)     
 FROM sds.tblClusterMaster c left outer join SDS.tblTripPlanning AS t on c.ClusterId=t.ClusterId LEFT OUTER JOIN    
 SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId    
 left outer join     
 (    
  select ClusterId, TripId, TripNo from SDS.tblTripPlanning     
  where DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date) and TripStartDate is not null and TripEndDate is null    
 ) ct on ct.ClusterId=c.ClusterId    
 left outer join     
 (    
  select t.ClusterId, count(d.OrderRefNo) TotalOrders,sum(case d.OrderStatus when 'Deliver' then 1 when 'NotAvailable' then 1 when 'Denied' then 1 else 0 end) completedOrders    
  from SDS.tblTripPlanning AS t inner join SDS.tblTripPlanningDetails d on t.TripId = d.TripId    
  where t.DistributorId=@DistributorId and cast(t.TripDate as date)=cast(@Tripdate as date)    
  group by t.ClusterId    
 ) odr on c.ClusterId=odr.ClusterId
 where t.DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date)    
 group by  c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, v.VehicleNo,ct.TripId,t.TripId,ct.TripNo, odr.TotalOrders, odr.completedOrders    
     
 select TripId, ClusterId, ClusterName, StaffrefNo, StaffName, VehicleId, VehicleNo, TotalTrips, TotalOrders, CompletedTrips,   
 CurrentTripId, CurrentTrip, CompletedOrders, PendingOrders from @TripDtls    
  
END
GO
/****** Object:  StoredProcedure [SDS].[usp_AllClusterTripDetailsForKM]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create proc [SDS].[usp_AllClusterTripDetailsForKM]   
--declare  
@DistributorId int,  
@Tripdate varchar(50),
@StaffRefNo   varchar(50)
  
as    
   
-- set @DistributorId=14145; set @Tripdate= '07-01-2022';  
    
BEGIN    
 set FMTONLY OFF 

 declare @TripDtls  Table(TripId bigint, ClusterId bigint, ClusterName nvarchar(100), StaffrefNo nvarchar(25), StaffName nvarchar(100), VehicleId bigint, VehicleNo Nvarchar(50),    
 TotalTrips int, TotalOrders int, CompletedTrips int, CurrentTripId bigint, CurrentTrip nvarchar(50), CompletedOrders int, PendingOrders int)    
    
 insert into @TripDtls(TripId, ClusterId, ClusterName, staffrefNo, StaffName, VehicleId, VehicleNo,TotalTrips,CompletedTrips,CurrentTripId,CurrentTrip,TotalOrders, completedOrders, PendingOrders)    
 SELECT t.TripId, c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, v.VehicleNo,count(distinct t.TripId),    
 sum( case when t.TripEndDate is not null then 1 else 0 end ), isnull(ct.TripId,0),isnull(ct.TripNo,'-'), odr.TotalOrders, odr.completedOrders,     
 isnull(odr.TotalOrders,0)- isnull(odr.completedOrders,0)     
 FROM sds.tblClusterMaster c left outer join SDS.tblTripPlanning AS t on c.ClusterId=t.ClusterId LEFT OUTER JOIN    
 SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId    
 left outer join     
 (    
  select ClusterId, TripId, TripNo from SDS.tblTripPlanning     
  where DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date) and TripStartDate is not null and TripEndDate is null    
 ) ct on ct.ClusterId=c.ClusterId    
 left outer join     
 (    
  select t.ClusterId, count(d.OrderRefNo) TotalOrders,sum(case d.OrderStatus when 'Deliver' then 1 when 'NotAvailable' then 1 when 'Denied' then 1 else 0 end) completedOrders    
  from SDS.tblTripPlanning AS t inner join SDS.tblTripPlanningDetails d on t.TripId = d.TripId    
  where t.DistributorId=@DistributorId and cast(t.TripDate as date)=cast(@Tripdate as date)    
  group by t.ClusterId    
 ) odr on c.ClusterId=odr.ClusterId
 where t.DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date)   and t.StaffRefNo=@StaffRefNo  
 group by  c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, v.VehicleNo,ct.TripId,t.TripId,ct.TripNo, odr.TotalOrders, odr.completedOrders    
     
 select TripId, ClusterId, ClusterName, StaffrefNo, StaffName, VehicleId, VehicleNo, TotalTrips, TotalOrders, CompletedTrips,   
 CurrentTripId, CurrentTrip, CompletedOrders, PendingOrders from @TripDtls    
  
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ApproveClusterEditRequest]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_ApproveClusterEditRequest]
--declare
@DistributorID int,
@ClusterId int,
@FlagFor nvarchar(10),
@RetValue int output

--set @DistributorID=14193;set @ClusterId=71;set @FlagFor ='DC';
as
BEGIN
	SET @RetValue =0;
	if exists( select 1 from SDS.tblRequestForClusterEdit where DistributorID=@DistributorID and ClusterId=@ClusterId and FlagFor=@FlagFor)
		begin
			UPDATE SDS.tblRequestForClusterEdit
			SET [Status]=1,
				Flag=0
			WHERE DistributorID=@DistributorID and ClusterId=@ClusterId and FlagFor=@FlagFor
			SET @RetValue=SCOPE_IDENTITY()
		end
	ELSE
		BEGIN
			SET @RetValue=-1
		END
END
GO
/****** Object:  StoredProcedure [SDS].[usp_AreaClusterMappingAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_AreaClusterMappingAdd 9128,1,'1151468200000001,1151468200000011,1161468200000020,1181468200000001,1151468200000013',12333

CREATE proc [SDS].[usp_AreaClusterMappingAdd]
@DistributorId	int,
@ClusterId	int,
@AreaRefNo	nvarchar(max),
@RtnValue bigint output

as

BEGIN
	declare @tblAreaRefNo table(id int, AreaRefNo numeric(17,0))

	insert into @tblAreaRefNo select id,value from sds.fn_StringSplit(@AreaRefNo,',')

	delete from sds.tblAreaClusterMapping where AreaClusterId=@ClusterId			-- delete old records then add new records

	if not exists(select 1 from sds.tblAreaClusterMapping WITH(NOLOCK) where AreaRefNo in (select AreaRefNo from @tblAreaRefNo))
	Begin
		insert into sds.tblAreaClusterMapping(DistributorId,AreaClusterId,AreaRefNo,LastUpdatedDatetime,IsActive)
		select @DistributorId,@ClusterId,ar.AreaRefNo,getdate(),'Y' from @tblAreaRefNo ar

		set @RtnValue=SCOPE_IDENTITY()
	End
	else
		set @RtnValue=-2

END




GO
/****** Object:  StoredProcedure [SDS].[usp_AreaListForMapping]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_AreaListForMapping]
--declare
@DistributorId int

as

BEGIN

 SELECT ac.AreaRefNo AreaCode, 
 case when c.AreaClusterName is not null then SDS.fn_CamelCase('Cluster: '+c.AreaClusterName) else 
SDS.fn_CamelCase('Area: '+ ISNULL(a.AreaName + ' (' + t.TalukaName + ')', 'New area' + 
ac.AreaRefNo + CASE WHEN isnull(a.AreaCode, '') = '' THEN '(D)' ELSE '' END)) End AS AreaName, 
 ac.AreaJSON  
    
 FROM  SDS.tblTalukaMaster AS t WITH (NOLOCK) INNER JOIN  
 SDS.tblAreaMaster AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode RIGHT OUTER JOIN  
 SDS.tblDistributorAreaGeoCoordinates AS ac WITH (NOLOCK) ON ac.AreaRefNo = a.AreaCode  
 left outer join SDS.tblDistributorClusterMajorAreaMapping cma on ac.AreaRefNo=cma.MajorAreaCode and ac.DistributorId=cma.DistributorId
left outer join SDS.tblClusterMaster c on cma.ClusterId=c.ClusterId and cma.DistributorId=c.DistributorId
 WHERE (ac.DistributorId = @DistributorId) and (a.ActiveFlag=1 or ac.ActiveStatus=1)  
    
 union  
  
 SELECT a.AreaCode, SDS.fn_CamelCase('Area: '+a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,cm.AreaJSON  
 FROM SDS.tblTalukaMaster AS t WITH (NOLOCK) INNER JOIN  
 SDS.tblAreaMaster AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN  
 SDS.tblDistributorDeliveryTaluka AS da WITH (NOLOCK) ON t.TalukaCode = da.TalukaCode INNER JOIN  
 SDS.tblGeoCoordinateMaster AS cm WITH (NOLOCK) ON cm.AreaCode = a.AreaCode  
 WHERE (da.DistributorId = @DistributorId) and da.TalukaCode <> '' and a.ActiveFlag=1  
 and cm.AreaCode not in (select replace(AreaRefNo,convert(nvarchar(20),DistributorId)+convert(nvarchar(20),Id)+'_','') 
 from sds.tblDistributorAreaGeoCoordinates where DistributorId = @DistributorId)  
 ORDER BY AreaCode  

END
GO
/****** Object:  StoredProcedure [SDS].[usp_AreaListForNewAreaFensing]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_AreaListForNewAreaFensing]  
--declare  
@DistrictCode nvarchar(50),  
@TalukaCode  nvarchar(50)  
  
--set @DistrictCode='257,PUNEC1'; set @TalukaCode=''  
  
as  
  
BEGIN  
 set fmtonly off  
  
  
 --SELECT AreaRefNo AreaCode, 'Area' AreaName, AreaJSON   
 --FROM [SDS].[tblDistributorAreaGeoCoordinates]   
 --where DistributorId = 10031  
   
 declare @code table (DCode nvarchar(100))  
  
 insert into @code select value from sds.fn_StringSplit(@DistrictCode,',')  
  
 SELECT a.AreaCode, SDS.fn_CamelCase(a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,cm.AreaJSON  
 FROM SDS.tblTalukaMaster AS t WITH (NOLOCK) INNER JOIN  
 SDS.tblAreaMaster AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN  
 SDS.tblGeoCoordinateMaster AS cm WITH (NOLOCK) ON cm.AreaCode = a.AreaCode  
 WHERE (t.talukacode=isnull(@TalukaCode,'') or isnull(@TalukaCode,'0')=0) and (t.districtcode in (select DCode from @code)) -- and cast(a.LastUpdateTime as date) < cast('20210204' as date)  
  
 --(t.talukacode=isnull(@TalukaCode,'') or isnull(@TalukaCode,'0')=0)  
 --t.talukacode in ('RJJAIAmber','RJJAIBassi','RJJAIJaipur','RJJAISanganer')  
 --UNION  
  
 --SELECT cm.AreaCode as AreaCode, sds.fn_CamelCase(isnull(a.AreaName + ' (' + t.TalukaName + ')','New area'))  AS AreaName, cm.AreaJSON  
 --FROM  SDS.tblTalukaMasterTemp AS t WITH (NOLOCK) INNER JOIN  
 --SDS.[tblAreaMasterTemp] AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode LEFT OUTER JOIN  
 --SDS.tblDistrictMasterTemp as d WITH (NOLOCK) ON t.DistrictCode = d.DistrictCode RIGHT OUTER JOIN  
 --SDS.tblStateMasterTemp as s WITH (NOLOCK) ON d.StateCode = s.StateCode RIGHT OUTER JOIN  
 --SDS.tblGeoCoordinateMasterTemp AS cm WITH (NOLOCK) ON cm.AreaCode = a.AreaCode   
 --WHERE (t.talukacode=isnull(@TalukaCode,'') or isnull(@TalukaCode,'0')=0) and (t.districtcode in (select DCode from @code) ) and cm.AreaJSON like '{"AreaCoordinates"%"}'  
   
 --SELECT a.AreaCode, SDS.fn_CamelCase(a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,cm.AreaJSON  
 --FROM SDS.tblTalukaMaster AS t WITH (NOLOCK) INNER JOIN  
 --SDS.tblAreaMaster AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN  
 --SDS.tblGeoCoordinateMaster AS cm WITH (NOLOCK) ON cm.AreaCode = a.AreaCode INNER JOIN  
 --SDS.tblDistrictMaster d WITH (NOLOCK) ON t.DistrictCode = d.DistrictCode INNER JOIN  
 --SDS.tblStateMaster s WITH (NOLOCK) ON d.StateCode = s.StateCode  
 --WHERE t.DistrictCode IN ('GANorth GoaDT','GASouth GoaDT')  
 ----WHERE s.StateCode = 'MH'  
 --ORDER BY TalukaName  
  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_AreaListWithFencingByState]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_AreaListWithFencingByState]
--declare
@StateCode  nvarchar(50)

as

BEGIN
	set fmtonly off
	

	SELECT a.AreaCode, SDS.fn_CamelCase(a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,cm.AreaJSON
	FROM SDS.tblTalukaMaster AS t WITH (NOLOCK) INNER JOIN
	SDS.tblDistrictMaster as d WITH (NOLOCK) ON t.DistrictCode = d.DistrictCode RIGHT OUTER JOIN
	SDS.tblStateMaster as s WITH (NOLOCK) ON d.StateCode = s.StateCode RIGHT OUTER JOIN
	SDS.tblAreaMaster AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN
	SDS.tblGeoCoordinateMaster AS cm WITH (NOLOCK) ON cm.AreaCode = a.AreaCode
	WHERE (s.StateCode=isnull(@StateCode,''))
	ORDER BY TalukaName
	

END


GO
/****** Object:  StoredProcedure [SDS].[usp_AreawiseBacklogAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_AreawiseBacklogAddEdit 14193,0

CREATE proc [SDS].[usp_AreawiseBacklogAddEdit]
--declare
@DistributorID int,
@AreaRefNo numeric(17,0)
--set @DistributorID=14193; set @AreaRefNo=0

as
BEGIN
set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr 	create table #TotOdr(AreaRefNo numeric(17, 0), PendingOrders int)
	IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale create table #TotSale(AreaRefNo numeric(17, 0), TotalSale int, AvgDailySale int)
	
	declare @Str varchar(max)= 'insert into #TotOdr
		select o.AreaRefNo, count(distinct o.OrderRefNo)   from DCMS.tblRefillOrderDtls'+@GroupCode+' o inner join 
		sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
		where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
		and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (o.AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
		group by o.AreaRefNo'  
	exec (@Str)

	declare @Str1 varchar(max)='insert into #TotSale
			select tot.AreaRefNo, isnull(tot.TCnt,0)+isnull(curr.CCnt,0) TotalSale, 
			round((isnull(tot.TCnt,0)+isnull(curr.CCnt,0)) / (select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),0)
			 from
			(select o.AreaRefNo, count(distinct o.OrderRefNo) as TCnt 
			from DCMS.tblRefillOrderDtls o inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''  
			where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (o.OrderStatusCode in ( ''DLVD'')) 
			and (o.AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
			and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
			group by AreaRefNo) tot
			full outer join
			(select r1.AreaRefNo, count(distinct r1.OrderRefNo)	CCnt	
			from DCMS.tblRefillOrderDtls'+@GroupCode+' r1 inner join sds.tblactiveitems ai with (nolock) on r1.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
			where (r1.DistributorId='+convert(nvarchar(20),@DistributorId) +') --and (r1.OrderStatusCode in ( ''DLVD'')) 
			and (r1.AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
			and cast(r1.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
			group by r1.AreaRefNo) curr on tot.AreaRefNo=curr.AreaRefNo'
		print (@Str1)
		exec (@Str1)
	
		update sds.tblDistributorAreawiseBacklog 
		set EntryDate=getdate(), TotalPendingOrder=isnull(o.PendingOrders,0),AvgSale=isnull(s.AvgDailySale,0),BackLog=(isnull(o.PendingOrders,0)/convert(float,isnull(nullif(s.AvgDailySale,0),1)))
		from sds.tblDistributorAreawiseBacklog t1 inner join 
		#TotOdr o on t1.AreaRefNo=o.AreaRefNo left outer join #TotSale s on o.AreaRefNo=s.AreaRefNo 
		and DistributorId=@DistributorId and BackLogOf='A' and cast(EntryDate as date) =cast(getdate() as date) 
		where DistributorId=@DistributorId and BackLogOf='A' and cast(EntryDate as date) =cast(getdate() as date) 

		insert into sds.tblDistributorAreawiseBacklog(DistributorId,BackLogOf,EntryDate,clusterId,AreaRefNo,TotalPendingOrder,AvgSale,BackLog)
		select @DistributorId,'A',getdate(),0,o.AreaRefNo,isnull(o.PendingOrders,0),isnull(s.AvgDailySale,0),isnull(o.PendingOrders,0)/convert(float,isnull(nullif(s.AvgDailySale,0),1))
		from #TotOdr o left outer join #TotSale s on o.AreaRefNo=s.AreaRefNo 
		where o.AreaRefNo not in (select ArearefNo from sds.tblDistributorAreawiseBacklog where DistributorId=@DistributorId and BackLogOf='A' and cast(EntryDate as date) =cast(getdate() as date))
	
		--set @RtnValue=SCOPE_IDENTITY()
		update SDS.tblDistributorAreawiseBacklog set TotalPendingOrder= 0 where TotalPendingOrder is null
		update SDS.tblDistributorAreawiseBacklog set AvgSale= 0 where AvgSale is null
		update SDS.tblDistributorAreawiseBacklog set BackLog= 0 where BackLog is null

	--return isnull(@RtnValue,0)
	drop table #TotOdr
	drop table #TotSale
END


GO
/****** Object:  StoredProcedure [SDS].[usp_AreawiseBacklogAddEditNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_AreawiseBacklogAddEditNew 14193,0

CREATE proc [SDS].[usp_AreawiseBacklogAddEditNew]
--declare
@DistributorID int,
@AreaRefNo numeric(17,0)
--set @DistributorID=14193; set @AreaRefNo=0

as
BEGIN
set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)='', @bkDays int=0
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	set @bkDays=(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData)

	IF OBJECT_ID('tempdb..#tbl1') IS NOT NULL DROP TABLE #tbl1 	create table #tbl1(AreaRefNo numeric(17, 0), TotalSale1 int)
	IF OBJECT_ID('tempdb..#tbl2') IS NOT NULL DROP TABLE #tbl2 	create table #tbl2(AreaRefNo numeric(17, 0),PendingCnt int, TotalSale2 int)
	IF OBJECT_ID('tempdb..#Result') IS NOT NULL DROP TABLE #Result 	create table #Result(AreaRefNo numeric(17, 0),PendingOrders int, AvgDailySale int, BacklogDays float)

	insert into #tbl1(AreaRefNo,TotalSale1)  select o.AreaRefNo, count(distinct o.OrderRefNo) as TotalSale1 
	from DCMS.tblRefillOrderDtls o with (nolock) inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,'N')='Y'  
	where (o.DistributorId=@DistributorID) and (o.OrderStatusCode in ( 'DLVD')) and (o.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(isnull(@bkDays,0)),getdate())
	group by AreaRefNo

	declare @Str varchar(max)= 'insert into #tbl2(AreaRefNo,PendingCnt,TotalSale2)
	select o.AreaRefNo, sum(case when o.OrderStatusCode in (''AGEN'',''APRN'',''OPEN'') then 1 else 0 end) PendingCnt,
	sum(case when o.OrderStatusCode in ( ''DLVD'') and cast(o.ActualDeliveryDate as date)>=dateadd(dd,-(isnull('+convert(nvarchar(20),@bkDays) +',0)),getdate()) then 1 else 0 end) TotalSale2
	from DCMS.tblRefillOrderDtls'+@GroupCode+' o inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (o.AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
	group by o.AreaRefNo'  

	print (@Str)
	exec (@Str)
	
	insert into #Result(AreaRefNo,PendingOrders, AvgDailySale, BacklogDays)
	select ISNULL( t1.AreaRefNo,t2.AreaRefNo) AreaRefNo, isnull(t2.PendingCnt,0) PendingOrders,  
		(isnull(t1.TotalSale1,0)+isnull(t2.TotalSale2,0))/isnull(@bkDays,1) AvgDailySale,
		(isnull(t2.PendingCnt,0)/convert(float,isnull(nullif((isnull(t1.TotalSale1,0)+isnull(t2.TotalSale2,0))/isnull(@bkDays,1),0),1))) BacklogDays
	from #tbl1 t1 full outer join #tbl2 t2 on t1.AreaRefNo=t2.AreaRefNo

	update sds.tblDistributorAreawiseBacklog 
	set EntryDate=getdate(), TotalPendingOrder=isnull(o.PendingOrders,0),AvgSale=isnull(o.AvgDailySale,0),BackLog=isnull(o.BacklogDays,0)
	from sds.tblDistributorAreawiseBacklog t1 
		inner join #Result o on t1.AreaRefNo=o.AreaRefNo and DistributorId=@DistributorId and BackLogOf='A' and cast(EntryDate as date) =cast(getdate() as date) 
	where DistributorId=@DistributorId and BackLogOf='A' and cast(EntryDate as date) =cast(getdate() as date) 
	print 1
	insert into sds.tblDistributorAreawiseBacklog(DistributorId,BackLogOf,EntryDate,clusterId,AreaRefNo,TotalPendingOrder,AvgSale,BackLog)
	select @DistributorId,'A',getdate(),0, AreaRefNo,isnull(PendingOrders,0), isnull(AvgDailySale,0),isnull(BacklogDays,0)
	from #Result
	where AreaRefNo not in (select ArearefNo from sds.tblDistributorAreawiseBacklog where DistributorId=@DistributorId and BackLogOf='A' and cast(EntryDate as date) =cast(getdate() as date))
	
	--set @RtnValue=SCOPE_IDENTITY()
	update SDS.tblDistributorAreawiseBacklog set TotalPendingOrder= 0 where TotalPendingOrder is null
	update SDS.tblDistributorAreawiseBacklog set AvgSale= 0 where AvgSale is null
	update SDS.tblDistributorAreawiseBacklog set BackLog= 0 where BackLog is null

drop table #tbl1
drop table #tbl2
drop table #Result
END
GO
/****** Object:  StoredProcedure [SDS].[usp_AssignDeliveryOrderToHelper]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_AssignDeliveryOrderToHelper]
@Id bigint,
@DistributorId int,
@AdditionalStaffRefNo numeric(17,0),
@result bigint OUTPUT
AS
BEGIN
Set @result=0;	
UPDATE       SDS.tblTripPlanningDetails
		SET             AssignedTo = @AdditionalStaffRefNo,
						UpdatedDate = GETDATE()
		WHERE        (TripPlanningDetId = @Id)	
		IF(@@rowcount=1) BEGIN SET @result=@Id END
END

GO
/****** Object:  StoredProcedure [SDS].[usp_CashMemoStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---- sds.usp_CashMemoStatus 14193,215,1  
CREATE proc [SDS].[usp_CashMemoStatus]  
--declare  
@DistributorId int,  
@ClusterId int,  
@Status int  
--set @DistributorId=14193; set @ClusterId=74; set @Status=0 -- status (0-All, 1-Cashmemo Printed, 2-Cashmemo Not Printed)  
as  
begin  
   
 SET FMTONLY OFF    
 IF OBJECT_ID('tempdb..#CashMemoStatus') IS NOT NULL DROP TABLE #CashMemoStatus    
 create table #CashMemoStatus(id int identity,DistributorCode nvarchar(50),DistributorName nvarchar(200),ConsumerNo int,ConsumerName nvarchar(200),  
 AreaClusterName nvarchar(200),DeliveryStaff nvarchar(200),OrderNo int,OrderDate datetime,AreaName nvarchar(200),CashmemoStatus nvarchar(200))  
   
 declare @GroupCode VARCHAR(3)='', @strquery varchar(max), @strCond varchar(max) 
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId=@DistributorId  
  
 -- dblink  
 -- [HPGASDRDB1\MSSQLHPGASDR1,1530].[HPGASDB].DCMS  
IF(@Status=1) -- O (All)  
	set @strCond=' and o.OrderStatusCode in (''APRN'') order by cl.AreaClusterName '
Else IF(@Status=2) 
	set @strCond=' and o.OrderStatusCode not in (''DLVD'',''APRN'',''CNCL'') order by cl.AreaClusterName '
Else
	set @strCond=' order by cl.AreaClusterName  '

  set @strquery='  
  insert into #CashMemoStatus(DistributorCode,DistributorName,ConsumerNo,ConsumerName,AreaClusterName,DeliveryStaff,OrderNo,OrderDate,AreaName,CashmemoStatus)  
    
  select dm.JDEDistributorCode as DistributorCode,dm.DistributorName,cm.ConsumerNo,cm.ConsumerName,cl.AreaClusterName,  
  t.StaffName as DeliveryStaff,o.OrderNo,o.OrderDate,dam.AreaName,o.OrderStatusCode as CashmemoStatus  
  from DCMS.tblRefillOrderDtls$' + @GroupCode +' o with(nolock)  
  inner join SDS.tblTripPlanningDetails td with(nolock) on o.orderrefno=td.OrderRefNo  
  inner join SDS.tblTripPlanning t with(nolock) on td.TripId=t.TripId  
  inner join SDS.tblClusterMaster cl with(nolock) on t.ClusterId=cl.ClusterId  
  inner join DCMS.tblDistributorMaster dm with(nolock) on o.DistributorID=dm.DistributorId  
  inner join DCMS.tblConsumerMaster cm with(nolock) on o.UniqueConsumerId=cm.UniqueConsumerId  
  inner join DCMS.tblDistributorAreaMaster dam with(nolock) on o.AreaRefNo=dam.AreaRefNo  
  inner join SDS.tblAreaClusterMapping acm with(nolock) on dam.AreaRefNo=acm.AreaRefNo and cl.ClusterId=acm.AreaClusterId  
  where t.DistributorId='+convert(nvarchar(20),@DistributorId)+' and cast(t.TripDate as date)=cast(getdate() as date)   
  and (t.ClusterId=' + convert(nvarchar(20),@ClusterId) + ' or 0='+convert(nvarchar(20),@ClusterId)+') and dam.StatusFlag=''Y''  
  '  
  Set @strquery=@strquery+@strCond
 print @strquery  
 exec (@strquery)  
    
 select DistributorCode,DistributorName,ConsumerNo,ConsumerName,AreaClusterName,DeliveryStaff,OrderNo,OrderDate,AreaName,CashmemoStatus  
 from #CashMemoStatus  
   
 drop table #CashMemoStatus   
  
end  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_CDCMSAreaPODDetailsAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_CDCMSAreaPODDetailsAdd]
@DistributorId	int,
@AreaRefNo	numeric(17, 0),
@DeliveryType char(5),	-- POD or HD
@Latitute	nvarchar(50),
@Longitute	nvarchar(50),
@Weekdays	nvarchar(100),
@RetValue bigint OUTPUT

as	

BEGIN
	if exists(select 1 from sds.tblAreaClusterMapping where DistributorId=@DistributorId and AreaRefNo=@AreaRefNo and isnull(Isactive,'N')='Y')
	Begin
		set @retValue=-2
	End
	Else
	Begin
		if not exists(select 1 from sds.tblCDCMSAreaPODDetails where DistributorId=@DistributorId and AreaRefNo=@AreaRefNo)
		Begin
			insert into sds.tblCDCMSAreaPODDetails(DistributorId,AreaRefNo,DeliveryType,Latitute,Longitute,createdDatetime)
			values(@DistributorId,@AreaRefNo,@DeliveryType,@Latitute,@Longitute,getdate())

			set @RetValue=SCOPE_IDENTITY()

			if (@RetValue>0)
			Begin
				if exists(select 1 from sds.tblPODWeekdaysDetails where PODId=@RetValue) 
					delete from sds.tblPODWeekdaysDetails where PODId=@RetValue
				insert into sds.tblPODWeekdaysDetails(PODId,AreaRefNo,weekdays) 
				select @RetValue, @AreaRefNo, value from sds.fn_StringSplit(@Weekdays,',')
			End
			else
				set @RetValue=-1
		End
		else
		Begin
			update sds.tblCDCMSAreaPODDetails
			set DeliveryType=@DeliveryType,
				Latitute=@Latitute,
				Longitute=@Longitute,
				LastUpdatedDatetime=getdate()
			where DistributorId=@DistributorId and AreaRefNo=@AreaRefNo

			set @RetValue=@@rowcount

			if (@RetValue>0)
			Begin
				declare @PODId bigint
				select @PODId=AreaPodId from sds.tblCDCMSAreaPODDetails where DistributorId=@DistributorId and AreaRefNo=@AreaRefNo

				if exists(select 1 from sds.tblPODWeekdaysDetails where PODId=@PODId) delete from sds.tblPODWeekdaysDetails where PODId=@PODId
	
				insert into sds.tblPODWeekdaysDetails(PODId,AreaRefNo,weekdays) 
				select @PODId, @AreaRefNo, value from sds.fn_StringSplit(@Weekdays,',')
			End
			else
				set @RetValue=-1
		
		End
	End
END






GO
/****** Object:  StoredProcedure [SDS].[usp_ChangeClusterArea]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_ChangeClusterArea]
--declare
@DistributorId int,
@FromClusterId int ,
@ToClusterId int ,
@AreaRefNo numeric(17,0),
@RetValue int output
AS 
BEGIN
	SET @RetValue=0
	IF exists(select 1 from SDS.tblAreaClusterMapping where DistributorID=@DistributorID and AreaRefNo=@AreaRefNo and AreaClusterId=@FromClusterId )
		BEGIN
			UPDATE SDS.tblAreaClusterMapping
			SET AreaClusterId=@ToClusterId,
				LastUpdatedDatetime=GETDATE()
			WHERE DistributorID=@DistributorID and AreaRefNo=@AreaRefNo and AreaClusterId=@FromClusterId
			SET @RetValue=@@ROWCOUNT
		END
	ELSE
		BEGIN		
			SET @RetValue=-1
		END
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ChangePassword]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,Rahul>
-- Create date: <Create Date,04-012-2019,>
-- Description:	<Description, to change the password>
-- =============================================
create PROCEDURE [SDS].[usp_ChangePassword] 
	-- Add the parameters for the stored procedure here
	
	@DistributorCode nvarchar(50),
	@DistributorId int,
	@Password nvarchar(50),
	@EncryptPassword nvarchar(1000),
	@ResetId numeric(17,2),
	@Status char(1),
	@Rtnval int output
	
AS
Declare @HasError int;
set @HasError = 0;
BEGIN
BEGIN TRANSACTION
	DECLARE @RowCnt int=0 
 IF EXISTS 
	(
	SELECT DisplayName FROM SDS.tbluser WHERE UserName = @DistributorCode and refNo =@DistributorId
	)	
	BEGIN 
	UPDATE SDS.tbluser	
	SET 
	Password =@Password,
	EncryptPassword = @EncryptPassword,	
	LastUpdatedDate = GETDATE()		
	WHERE UserName = @DistributorCode and refNo =@DistributorId	
	set @HasError = @@ERROR		
	END 	
		
	if (@HasError =0)
	begin
IF EXISTS 
	(
	SELECT DistributorCode FROM SDS.tbl_ResetPassword  WHERE ResetID = @ResetId
	)	 				
	BEGIN 
	UPDATE SDS.tbl_ResetPassword	
	SET 
	ResetDate = GETDATE(),
	ResetStatus = @Status		
	WHERE ResetID = @ResetId 	
	set @HasError =@@ERROR
	SET @RowCnt = @@ROWCOUNT	
	set @Rtnval = @@ROWCOUNT	
	END
END		      
	if @HasError =0	
	BEGIN
			COMMIT TRANSACTION	
			return @RowCnt
			END	
					
			ELSE
			
			BEGIN
			ROLLBACK TRANSACTION	
			END	
				 		
	END



GO
/****** Object:  StoredProcedure [SDS].[usp_CheckDataProcessStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [SDS].[usp_CheckDataProcessStatus]
-- It will give the status for Data flow events as discussed and suggested by Sancheet Sir...
as

BEGIN
set fmtonly off
	IF OBJECT_ID('tempdb..#Rpt') IS NOT NULL DROP TABLE #Rpt

	create table #Rpt(id int identity, Did int, DCode nvarchar(50),DName Nvarchar(250),ObStage1 nvarchar(25), 
	GCMst Varchar(5),GCConsLoc varchar(5),InsideProcFlag varchar(5),PendingBkg int,ValidBkg int,TotalCluster int,ClusterWithValidBkg int, 
	TripsForClusterwithValidBkg int,TripsFailedForClusterValidBkg int)

	Insert into #Rpt(Did, DCode, DName, ObStage1)
	select d.DistributorId,d.JDEDistributorCode,d.DistributorName,isnull(ob.IsOnBoardingStage1,0)
	From DCMS.tbldistributorMaster d left outer join SDS.tblOnBoardingCompleted ob on d.DistributorId=ob.DistributorId
	
	if exists(select 1 from DCMS.tblConsumerLocation where cast(SchDataInsertedOn as date)=cast(getdate() as date))
		Update #Rpt set GCMst='Y'
	Else 
		Update #Rpt set GCMst='N'

	Update #Rpt	set GCConsLoc=b.GCatMst
	From #Rpt a inner join (select DistributorId,
		case when cast(Max(cl.VitranLastUpdateDateTime) as date)=cast(getdate() as date) then 'Y' 
		When cast(Max(cl.VitranLastUpdateDateTime1) as date)=cast(getdate() as date) then 'Y' 
		When cast(Max(cl.MILastUpdateDateTime) as date)=cast(getdate() as date) then 'Y' 
		When cast(Max(cl.HPPayLastUpdateDateTime) as date)=cast(getdate() as date) then 'Y' 
		When cast(Max(cl.LastUpdatedDatetime) as date)=cast(getdate() as date) then 'Y' 
		Else 'N' End as GCatMst 
		From SDS.tblConsumerLocationHistoryNew cl group by DistributorId
		) b on a.DId=b.DistributorId

	declare @c int, @c1 int, @did int, @GCode VARCHAR(3)='', @Str varchar(max); select @c=1, @c1=max(id) from #Rpt
	While (@c<=@c1)
	Begin
		set @did=0; set @GCode =''; set @Str=''; select @did=Did from #Rpt where id=@c
 
		SELECT @GCode=GroupCode FROM DCMS.tblDistributorGroupDetails WITH(NOLOCK) WHERE DistributorId=@did
		if(isnull(@GCode,'')='') set @GCode='' else set @GCode='$'+@GCode

		IF OBJECT_ID('tempdb..#Odr') IS NOT NULL DROP TABLE #Odr 
		create table #Odr(DID int,OrderRefNo numeric(17, 0),UniqueConsumerId numeric(17, 0),AreaRefNo numeric(17, 0),OdrClusterId bigint,
		InCluster int, InClusterId bigint)
	
		set  @Str = ' 
			Insert into #Odr(DID,OrderRefNo,UniqueConsumerId,AreaRefNo,OdrClusterId,InCluster, InClusterId)
			select distinct o.DistributorID, o.OrderRefNo,o.UniqueConsumerId,o.AreaRefNo,acm.AreaClusterId,isnull(c.InCluster,0),c.ClusterId
			FROM DCMS.tblRefillOrderDtls'+@GCode +' o WITH (NOLOCK) INNER JOIN 
				SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
				DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
				sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
				SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
				sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId 	
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@did)+' 
				AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
				and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice with(nolock) where DistributorID = '+convert(nvarchar(25),@did)+')
				and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''	
			'
		Print (@Str)	
		exec (@Str)

		update #Rpt set PendingBkg=(select count(distinct orderrefno) from #Odr where DID=@did) where DID=@did		
		update #Rpt set ValidBkg=(select count(distinct orderrefno) from #Odr where DID=@did and isnull(InCluster,0)=1) where DID=@did
		update #Rpt set TotalCluster=(select count(clusterId) from sds.tblclusterMaster where Regionid=1 and IsActive='Y' and DistributorId=@did) 
		where Did=@did
		update #Rpt set ClusterWithValidBkg=(select count(distinct OdrClusterId) from #Odr where DID=@did and isnull(InCluster,0)=1 
			and OdrClusterId=InClusterId) where DID=@did
		update #Rpt set TripsForClusterwithValidBkg=(select count(distinct TripId) from SDS.tblTripPlanning where DistributorId=@did 
			and cast(tripDate as date)=cast(getdate() as date))
		where Did=@did
		update #Rpt set TripsFailedForClusterValidBkg= (select count(distinct ClusterId) from SDS.tblClusterWiseTripDtls where DistributorId=@did and TripStatus=2 
			and cast(addedon as date)=cast(getdate()as date))
		where Did=@did

		if exists(select InsideGCCount from sds.tblDistributorGCInsideStatus where Distributorid=@did and cast(statusdate as date)=cast(getdate() as date))
			 update #Rpt set InsideProcFlag='Y' where Did=@did
		Else 
			 update #Rpt set InsideProcFlag='N' where Did=@did

	set @c=@c+1
End

select id,Did Distributorid,DCode DistributorCode,DName DistributorName,ObStage1,GCMst,GCConsLoc,InsideProcFlag,PendingBkg,ValidBkg,
TotalCluster,ClusterWithValidBkg,TripsForClusterwithValidBkg,TripsFailedForClusterValidBkg 
from #Rpt where ObStage1=2 order by ValidBkg desc

drop table #Rpt
drop table #Odr
END
GO
/****** Object:  StoredProcedure [SDS].[usp_CheckDataProcessStatus_Clusterwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [SDS].[usp_CheckDataProcessStatus_Clusterwise]
-- It will give the status for Data flow events as discussed and suggested by Anand Sir Cluster wise Same as Distributor data...
as

BEGIN
set fmtonly off
	IF OBJECT_ID('tempdb..#Rpt') IS NOT NULL DROP TABLE #Rpt
	IF OBJECT_ID('tempdb..#Dist') IS NOT NULL DROP TABLE #Dist

	create table #Rpt(id int identity,Did int,DCode nvarchar(50),DName Nvarchar(250),GCMst Varchar(5),GCConsLoc varchar(5),InPFlag varchar(5),
	CtId bigint,CtName Varchar(250),PndBkg int,ValidBkg int,CtPndBkg int,CtValidBkg int,NoofTrips int,TotCt int,CtValBkg int,ctTripsFailed int)
	create table #Dist(id int identity, Did int, DCode nvarchar(50))
	Insert into #Rpt(Did, DCode, DName, CtId,CtName) select d.DistributorId,JDEDistributorCode,DistributorName,ClusterId, AreaClusterName
	From DCMS.tbldistributorMaster d inner join SDS.tblOnBoardingCompleted ob on d.DistributorId=ob.DistributorId 
	left outer Join SDS.tblClusterMaster ct on d.DistributorId=ct.DistributorId where IsOnBoardingStage1=2

	Insert into #Dist(Did, DCode) select d.DistributorId,d.JDEDistributorCode
	From DCMS.tbldistributorMaster d left outer join SDS.tblOnBoardingCompleted ob on d.DistributorId=ob.DistributorId where ob.IsOnBoardingStage1=2
	
	if exists(select 1 from DCMS.tblConsumerLocation where cast(SchDataInsertedOn as date)=cast(getdate() as date))	Update #Rpt set GCMst='Y'
	Else Update #Rpt set GCMst='N'

	Update #Rpt	set GCConsLoc=b.GMst
	From #Rpt a inner join (select DistributorId,
		case when cast(Max(cl.VitranLastUpdateDateTime) as date)=cast(getdate() as date) or cast(Max(cl.VitranLastUpdateDateTime1) as date)=cast(getdate() as date) or 
		cast(Max(cl.MILastUpdateDateTime) as date)=cast(getdate() as date) or cast(Max(cl.HPPayLastUpdateDateTime) as date)=cast(getdate() as date)then 'Y' Else 'N' End as GMst From SDS.tblConsumerLocationHistoryNew cl group by DistributorId ) b on a.DId=b.DistributorId

	declare @c int,@c1 int,@did int,@GCode VARCHAR(3)='',@Str varchar(max); select @c=1, @c1=max(id) from #Dist
	IF OBJECT_ID('tempdb..#Odr') IS NOT NULL DROP TABLE #Odr 
	create table #Odr(DID int,OdrRefNo numeric(17, 0),UniqueId numeric(17, 0),AreaRefNo numeric(17, 0),OdrCtId bigint,InCluster int, InClusterId bigint)

	While (@c<=@c1)
	Begin
		set @did=0;set @GCode ='';set @Str='';select @did=Did from #Dist where id=@c;truncate table #Odr
		SELECT @GCode=GroupCode FROM DCMS.tblDistributorGroupDetails WITH(NOLOCK) WHERE DistributorId=@did
		if(isnull(@GCode,'')='') set @GCode='' else set @GCode='$'+@GCode	
		set  @Str = ' Insert into #Odr(DID,OdrRefNo,UniqueId,AreaRefNo,OdrCtId,InCluster,InClusterId)
			select distinct o.DistributorID, o.OrderRefNo,o.UniqueConsumerId,o.AreaRefNo,a.AreaClusterId,isnull(c.InCluster,0),c.ClusterId
			FROM DCMS.tblRefillOrderDtls'+@GCode +' o WITH (NOLOCK) INNER JOIN 
				SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
				DCMS.tblItemPriceCodeMap i ON o.PriceCode = i.PriceCode INNER JOIN
				sds.tblactiveitems ai on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
				SDS.tblAreaClusterMapping a on a.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
				sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId 	
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@did)+' 
				AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
				and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@did)+')
				and upper(isnull(pod.DeliveryType,''''))<>''POD''
			'
		exec (@Str)
		update #Rpt set PndBkg=(select count(distinct OdrRefNo) from #Odr where DID=@did) where DID=@did		
		update #Rpt set ValidBkg=(select count(distinct OdrRefNo) from #Odr where DID=@did and isnull(InCluster,0)=1) where DID=@did
		update #Rpt set TotCt=(select count(clusterId) from sds.tblclusterMaster where Regionid=1 and IsActive='Y' and DistributorId=@did) 
		where Did=@did	

		if exists(select InsideGCCount from sds.tblDistributorGCInsideStatus where Distributorid=@did and cast(statusdate as date)=cast(getdate() as date))
			 update #Rpt set InPFlag='Y' where Did=@did
		Else  update #Rpt set InPFlag='N' where Did=@did
		
		update #Rpt set CtPndBkg=isnull(o.pbkg,0) 
		From #Rpt r inner join (select OdrCtId, count(distinct OdrRefNo) pbkg from #Odr where DID=@did group by OdrCtId ) o on r.CtId=o.OdrCtId where Did=@did

		update #Rpt set CtValBkg=isnull(o.vbkg,0)
		From #Rpt r inner join (select OdrCtId, count(distinct OdrRefNo) vbkg from #Odr where DID=@did and isnull(InCluster,0)=1 and OdrCtId=InClusterId group by OdrCtId
		) o on r.CtId=o.OdrCtId where Did=@did

		update #Rpt set NoofTrips=isnull(o.tp,0)
		From #Rpt r inner join (select DistributorId, ClusterId, count(distinct TripId) tp From SDS.tblTripPlanning
		where DistributorId=@did and cast(TripDate as date)=cast(getdate() as date) group by DistributorId,ClusterId
		) o on r.CtId=o.ClusterId and r.Did=o.DistributorId where Did=@did

		update #Rpt set ctTripsFailed=isnull(o.ftrp,0)
		From #Rpt r inner join (	select DistributorId,ClusterId, count(*) ftrp from SDS.tblClusterWiseTripDtls 
		where DistributorId=@did and TripStatus=2 and cast(addedon as date)=cast(getdate()as date) group by DistributorId,ClusterId
		) o on r.CtId=o.ClusterId and r.Did=o.DistributorId where Did=@did

	set @c=@c+1
End

select id,Did Distributorid,DCode DistributorCode,DName DistributorName,GCMst,GCConsLoc,InPFlag,PndBkg PendingBkg,ValidBkg,TotCt TotalCluster,
CtId ClusteId,CtName ClusterName, CtPndBkg ClusterPendingBkg, CtValBkg ClusterValidBkg,NoofTrips,ctTripsFailed TripsFailed
from #Rpt order by ValidBkg desc

drop table #Rpt;drop table #Dist;drop table #Odr
END
GO
/****** Object:  StoredProcedure [SDS].[usp_CheckMasters]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_CheckMasters 14193 

CREATE proc [SDS].[usp_CheckMasters]
--declare 
@DistributorId int
--set @DistributorId=	13465900

as

declare @Result table (Id int identity(1,1), MasterName nvarchar(200), MasterMsg nvarchar(max), Flag nvarchar(10), CanContinue int)

----- Vehicles not available
if not exists(select 1 from sds.tblVehicleMaster where DistributorId=@DistributorId and Active='Y')
Begin
	insert into @Result values('Vehicle Master', 'Vehicle Details', 'VDN', 0)
End

----- Vehicle Delivery Boy Mapping Not done
if not exists(select 1 from sds.tblVehicleDeliveryBoyMapping where DistributorId=@DistributorId and Active='Y')
Begin
	insert into @Result values('Vehicle Delivery Boy Mapping', 'Vehicle-Del. Boy Mapping', 'VDB', 0)
End
----- Godown Master
if not exists(select 1 from sds.tblDistributorGodown where DistributorId=@DistributorId and ActiveFlag='Y' and Latitude is not null and isnull(GodownKeeperId,0)<>0)
Begin
	insert into @Result values('Godown Master', 'Godown Details', 'GDN', 0)
End
------- Some Vehicle Delivery Boy Mapping Not done
--if exists(select v.VehicleId, m.VehicleId from sds.tblVehicleMaster v left outer join sds.tblVehicleDeliveryBoyMapping m on v.VehicleId=m.VehicleId
--	where v.DistributorId=@DistributorId and m.VehicleId is null and v.Active='Y')
--Begin
--	insert into @Result values('Vehicle Delivery Boy Mapping', 'Some Vehicle(s) are not Mapped to Delivery Boy.', 'SDB', 1)
--End

----- Clusters Not alterd
if not exists(select 1 from sds.tblClusterMaster where DistributorId=@DistributorId and IsActive='Y')
Begin
	insert into @Result values('Cluster Master', 'Cluster Creation', 'CDN', 0)
End
----- Cluster Area Mapping Not done
if not exists(select 1 from sds.tblAreaClusterMapping where DistributorId=@DistributorId and IsActive='Y')
Begin
	insert into @Result values('Cluster Delivery Boy Mapping', 'Map Area with Cluster', 'CDB', 0)
End
----- Godown Keeper Mapping
if not exists(select 1 from sds.tblDistributorGodownStaffMapping m inner join sds.tblDistributorGodown g on g.GodownId=m.GodownId 
				where g.DistributorId=@DistributorId and g.ActiveFlag='Y' and isnull(m.GodownKeeperId,0)>0)
Begin
	insert into @Result values('Godown Keeper Mapping', 'Map Godown Keeper', 'GKN', 0)
End
if exists(select 1 from DCMS.tblDistributorAreaMaster where DistributorID=@DistributorId and StatusFlag='Y' and AreaRefNo not in (
						select AreaRefNo from sds.tblAreaClusterMapping where DistributorId=@DistributorId and IsActive='Y'))
Begin
	insert into @Result values('Area Cluster Mapping', 'Some Areas are not Mapped with Clusters.', 'ACN', 1)
	--select AreaRefNo, AreaCode, AreaName from DCMS.tblDistributorAreaMaster 
	--where DistributorID=@DistributorId and StatusFlag='Y' and AreaRefNo not in (select AreaRefNo from sds.tblAreaClusterMapping where DistributorId=@DistributorId)
End

if exists(select * from sds.tblclustermaster where distributorId=@DistributorId and IsActive='Y' and clusterId not in 
			(select clusterId from sds.tblDeliveryBoyClusterMapping where distributorId=@DistributorId))
Begin
	insert into @Result values('Delivery Boy Cluster Mapping', 'Some Clusters are not Mapped with Delivery Boy.', 'DCN', 1)
	
	--SELECT ClusterId, ClusterCode, AreaClusterName FROM SDS.tblClusterMaster where distributorId=@DistributorId and IsActive='Y' 
	--and clusterId not in (select clusterId from sds.tblDeliveryBoyClusterMapping where distributorId=@DistributorId)
End

Select * from @Result


GO
/****** Object:  StoredProcedure [SDS].[usp_CheckOnBoardingDone]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_CheckOnBoardingDone 15139

CREATE PROCEDURE [SDS].[usp_CheckOnBoardingDone]
@DistributorId int
--set @DistributorId=15139
as

BEGIN

if not exists(select 1 from sds.tblOnBoardingCompleted  where DistributorId=@DistributorId)
Begin
	insert into sds.tblOnBoardingCompleted(DistributorId,UserId,IsOnBoardingStage1,IsOnBoardingStage2,Remark1,Remark2,LastUpdatedOn)
	select @DistributorId, UserId,0,0,'','',getdate() from sds.tblUser where refno=@DistributorId
End

SELECT b.DistributorId, b.UserId, b.IsOnBoardingStage1, bs1.Statustext as OnboardingStage1Status, 
b.IsOnBoardingStage2, bs2.Statustext as OnboardingStage2Status, b.LastUpdatedOn, b.Remark1 
FROM sds.tblOnBoardingCompleted b left outer join sds.tblOnboardingStatus bs1 on b.IsOnBoardingStage1=bs1.value and upper(bs1.ForType)='STAGE1'
left outer join sds.tblOnboardingStatus bs2 on b.IsOnBoardingStage2=bs2.value  and upper(bs2.ForType)='STAGE2'
where DistributorId=@DistributorId

END


GO
/****** Object:  StoredProcedure [SDS].[usp_CheckTripsAvailability]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

----		[SDS].[usp_CheckTripsAvailability] 14193,'2021-08-13',0

CREATE PROCEDURE [SDS].[usp_CheckTripsAvailability]
--DECLARE 
@DistributorId int,
@TripDate datetime,
@ClusterId bigint
-- set @DistributorId=14193 ; set @clusterId=0; set @TripDate='2021-08-27'
AS 

BEGIN

SET FMTONLY OFF

	declare @tblAvailbeTrips table (Id int Identity,ClusterName VARCHAR(500),ClusterId bigint,NoOfTrips int,DeliveryBoy VARCHAR(500),VehicleNo VARCHAR(50),VehicleId bigint, VehicleCapacity int,
	TotalRefills int,RemainingRefills int,RemainingTrips int,requiredTrips int)

	Declare @VehicleTripDetails table (Id int Identity,ClusterName VARCHAR(500),CluterId bigint,NoOfTrips int,GeneratedTrips int,VehicleId bigint, VehicleCapacity int,DeliveryBoy VARCHAR(500),
	VehicleNo VARCHAR(50),TotalRefills numeric(17,0), RequiredRefills int,
	RemainingRefills int,RemainingTrips int)

	Declare @GeneratedTripDetails table (Id int Identity,TripId bigint,VehicleId bigint,TotalRefills int,IsExtraTrip char(1), Trip int)


	--Get Vehicle details and how many trips can generate from cluster
	insert into @VehicleTripDetails (ClusterName,CluterId,NoOfTrips,GeneratedTrips,VehicleId, VehicleCapacity,DeliveryBoy,VehicleNo,TotalRefills, RequiredRefills,RemainingRefills,RemainingTrips)
	Select cd1.AreaClusterName,cd1.ClusterId,cd1.NoOfTrip,cd1.GeneratedTrips,cd1.VehicleId,cd1.VehCapacity,cd1.StaffName,cd1.VehicleNo,td1.TotalRefills,cd1.RequiredRefills,
	(cd1.RequiredRefills - td1.TotalRefills) RemainingRefills,ceiling(cast((cd1.RequiredRefills - td1.TotalRefills) as decimal) / cast(cd1.VehCapacity as decimal)) GenerateTrips from
	(
		select c.AreaClusterName, t.clusterid,dc.NoOfTrip, count(t.VehicleId) GeneratedTrips,v.VehicleId,v.RTOCapacity VehCapacity,dl.StaffName,v.VehicleNo, (v.RTOCapacity * dc.NoOfTrip) RequiredRefills 
		from sds.tblTripPlanning t
		inner join sds.tblClusterMaster c on t.ClusterId = c.ClusterId
		left outer join sds.tblDeliveryBoyClusterMapping dc on c.ClusterId = dc.ClusterId
		left outer join DCMS.tblDistributorStaffDetails dl on dc.StaffRefNo = dl.StaffRefNo 
		left outer join sds.tblVehicleMaster v on v.VehicleId = t.VehicleId and v.VehicleId=t.VehicleId
		where t.DistributorId=@DistributorId and cast(TripDate as date) = cast(@TripDate as date) and 
			t.ClusterId not in (select clusterid from sds.tblTripPlanning where cast(TripDate as date) = cast(@TripDate as date) and distributorid=@distributorid and IsExtraTrip='Y')
		group by t.ClusterId,c.AreaClusterName,dc.NoOfTrip,v.RTOCapacity,v.VehicleId,v.VehicleNo,dl.StaffName
	) cd1 
	left outer join
	(
		select t.VehicleId,count(Distinct td.TripPlanningDetId) TotalRefills from sds.tblTripPlanning t 
		inner join sds.tblTripPlanningDetails td on t.TripId = td.TripId
		where t.DistributorId=@DistributorId and cast(TripDate as date) = cast(@TripDate as date)
		group by t.VehicleId
	) td1 on cd1.VehicleId = td1.VehicleId 
	WHERE ISNULL((cd1.RequiredRefills - td1.TotalRefills),0)>0
	order by ClusterId

	--SELECT * FROM @VehicleTripDetails

	--select * from sds.tblDeliveryBoyClusterMapping where ClusterId in (select ClusterId from sds.tblClusterMaster where DistributorId = @DistributorId)
	--select * from DCMS.tblDistributorStaffDetails where DistributorId = @DistributorId

	-- Get how many trips are generated for clusters
	insert into @GeneratedTripDetails (TripId,VehicleId,TotalRefills,IsExtraTrip,Trip)
	select td2.tripid,td2.VehicleId,td2.TotalRefills,td2.IsExtraTrip,ROW_NUMBER() over(partition by td2.VehicleId order by td2.VehicleId) trp
	from
	(
	select t.tripid,t.VehicleId,count(Distinct td.TripPlanningDetId) TotalRefills,dc.NoOfTrip,t.IsExtraTrip
	 from sds.tblTripPlanning t 
		inner join sds.tblTripPlanningDetails td on t.TripId = td.TripId
		inner join sds.tblClusterMaster c on t.ClusterId = c.ClusterId
		left outer join sds.tblDeliveryBoyClusterMapping dc on c.ClusterId = dc.ClusterId
		left outer join sds.tblVehicleMaster v on v.VehicleId = t.VehicleId and v.VehicleId=t.VehicleId
		where t.DistributorId=@DistributorId and cast(TripDate as date) = cast(@TripDate as date)
		group by t.tripid,t.VehicleId,dc.NoOfTrip,c.ClusterId,t.IsExtraTrip
	) td2 

	insert into @tblAvailbeTrips (ClusterName,ClusterId,NoOfTrips,VehicleId, VehicleCapacity,DeliveryBoy,VehicleNo,TotalRefills,RemainingRefills,RemainingTrips,requiredTrips)
	select td1.ClusterName,td1.CluterId,td1.NoOfTrips,td1.vehicleId,td1.VehicleCapacity,td1.DeliveryBoy,td1.VehicleNo,td1.TotalRefills,td1.RemainingRefills,td1.RemainingTrips
	,ROW_NUMBER() over(partition by td1.VehicleId order by td1.VehicleId) trp1
	from @VehicleTripDetails td1
	join (select distinct RemainingTrips from @VehicleTripDetails where ISNULL(RemainingRefills,0)>0) g on td1.NoOfTrips>=g.RemainingTrips
	where td1.RemainingTrips>0
	order by 2 desc


	--select distinct RemainingTrips from @VehicleTripDetails where ISNULL(RemainingRefills,0)>0
	--select * from @GeneratedTripDetails
	--select * from @VehicleTripDetails
	--select * from @tblAvailbeTrips
	
	select at1.ClusterName,at1.ClusterId,at1.VehicleId,at1.VehicleCapacity,at1.DeliveryBoy,at1.VehicleNo,isnull(gt.TotalRefills,0) schBookings,
	at1.requiredTrips as actTripNo,(at1.VehicleCapacity - isnull(gt.TotalRefills,0)) AvailableCapacity
	from @tblAvailbeTrips at1
	left outer join @GeneratedTripDetails gt
	on at1.VehicleId = gt.VehicleId and at1.requiredTrips = gt.Trip
	where (at1.VehicleCapacity - isnull(gt.TotalRefills,0))>0 and ClusterId not in (select CluterId from @VehicleTripDetails where isnull(RemainingTrips,0) = 0) and isnull(gt.IsExtraTrip,'N') <> 'Y'

	--select CluterId from @VehicleTripDetails where isnull(RemainingTrips,0) = 0

END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterAreaFensingAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_ClusterAreaFensingAdd]
@DistributorId	int,
@clusterId	bigint,
@ClusterJSON	nvarchar(max),
@Retvalue bigint output

as

BEGIN
	if not exists (select 1 from sds.tblClusterAreaFensing where clusterId=@clusterId and DistributorId=@DistributorId)
	Begin
		insert into sds.tblClusterAreaFensing(DistributorId,clusterId,ClusterJSON) values(@DistributorId,@clusterId,@ClusterJSON)
		set @Retvalue=SCOPE_IDENTITY()
	End
	else
	Begin
		Update sds.tblClusterAreaFensing set ClusterJSON=@ClusterJSON where clusterId=@clusterId and DistributorId=@DistributorId
		set @Retvalue=@@ROWCOUNT
	End


END


GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_ClusterMasterList 8131,'Y'

create proc [SDS].[usp_ClusterDetails]
--declare
@DistributorId int,
@ActiveFlag varchar(10)

--set @DistributorId=8131 set @ActiveFlag='Y' set @ClusterId=0
as
BEGIN
	
	SELECT c.ClusterId, c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName) as AreaClusterName, c.LastUpdatedDatetime, c.IsActive, isnull(dc.StaffRefNo,0) StaffRefNo,SDS.fn_CamelCase( st.StaffName)as StaffName, 
	isnull(dc.NoOfTrip,0) NoOfTrip, v.VehicleNo, isnull(v.RTOCapacity,0) RTOCapacity,
	isnull(dc.NoOfTrip,0) * isnull(v.RTOCapacity,0) PossDelivery, (select count(AreaRefNo) from sds.tblAreaClusterMapping where AreaClusterId=c.ClusterId) AreaCount
	FROM SDS.tblVehicleDeliveryBoyMapping AS vd WITH(NOLOCK) LEFT OUTER JOIN 
	SDS.tblVehicleMaster AS v WITH(NOLOCK) ON vd.VehicleId = v.VehicleId RIGHT OUTER JOIN
	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON vd.DeliveryBoyId = dc.StaffRefNo RIGHT OUTER JOIN
	SDS.tblClusterMaster AS c WITH(NOLOCK) ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN
	DCMS.tblDistributorStaffDetails AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo 
	where c.DistributorId=@DistributorId and c.IsActive=@ActiveFlag
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterEditRequestList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_ClusterEditRequestList]--332
--declare
@SACode nvarchar(10)

--set @SACode=332;
as
BEGIN
	
	SELECT rc.DistributorID,rc.ClusterId,ISNULL(cl.AreaClusterName,'Trading Area')as AreaClusterName,dm.JDEDistributorCode,dm.DistributorName,
	rc.[Status],rc.Flag,rc.FlagFor,rc.AddedOn
	FROM SDS.tblRequestForClusterEdit rc with(nolock) left outer join
	SDS.tblClusterMaster cl with(nolock) ON rc.ClusterId=cl.ClusterId left outer join
	DCMS.tblDistributorMaster dm with(nolock) ON rc.DistributorID=dm.DistributorId
	where flag=1 and [Status]=0 and rc.DistributorID in(select DistributorId from DCMS.tblDistributorMaster where SACode=@SACode)

END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterMappingDeliveryBoyUnassign]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [SDS].[usp_ClusterMappingDeliveryBoyUnassign]
--declare
@DistributorId bigint,
@VehicleId bigint
--SET @DistributorId=15139; SET @VehicleId=10058
as 
BEGIN
	DECLARE @DelBoyId NUMERIC(17,0);
	SET @DelBoyId = (SELECT DeliveryBoyId FROM SDS.tblVehicleDeliveryBoyMapping WHERE DistributorId=@DistributorId AND VehicleId=@VehicleId)

	IF EXISTS(SELECT 1 FROM SDS.tblDeliveryBoyClusterMapping WHERE StaffRefNo=@DelBoyId)
	BEGIN
		SELECT 2 as IsDeliveryBoyMapped;
	END
	else 
	begin
		SELECT 0 as IsDeliveryBoyMapped;
	 end
END

GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterMasterAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_ClusterMasterAddEdit]
@ClusterId	int,
@DistributorId	int,
@Regionid int,
@AreaClusterName	nvarchar(50),
@IsActive	nchar(1),
@StaffRefNo numeric(17,0),
@AdditionalStaffRefNo numeric(17,0),
@NoOfTrip int,
@Action nvarchar(25),
@PickupLocation	char(1),
@GodownId nvarchar(50),
@Latitude	nvarchar(50),
@Longitude	nvarchar(50),
@RtnValue int output

as

BEGIN
	set @RtnValue=0
	If (upper(@Action)='ADD')
	Begin		-- Check Duplicate Cluster Name under same Distributor
		IF NOT EXISTS (SELECT 1 FROM SDS.tblClusterMaster with(nolock) WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(AreaClusterName))) = ltrim(rtrim(lower(@AreaClusterName))))
		Begin
			Begin
				INSERT INTO SDS.tblClusterMaster(DistributorId,Regionid,AreaClusterName,LastUpdatedDatetime,IsActive,Pickuplocation, GodownId,Latitude, Longitude) 
				Values(@DistributorId,@Regionid, @AreaClusterName,getdate(),'Y',@PickupLocation, @GodownId, @Latitude, @Longitude)	

				SET @RtnValue = SCOPE_IDENTITY()

				if(@RtnValue>0)
				begin
					insert into sds.tblDeliveryBoyClusterMapping(ClusterId,StaffRefNo,AdditionalStaffRefNo,NoOfTrip,IsActive,LastUpdatedDatetime)
					values(@RtnValue,@StaffRefNo,@AdditionalStaffRefNo,@NoOfTrip,'Y',getdate())
				end
				else
					set @RtnValue=-2
			End
			
		End			
		else
			SET @RtnValue = -1	
	End
	Else If (upper(@Action)='EDIT')
	Begin
		IF NOT EXISTS (SELECT 1 FROM SDS.tblClusterMaster with(nolock) WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(AreaClusterName))) = ltrim(rtrim(lower(@AreaClusterName))) and ClusterId<>@ClusterId)
		Begin
			Begin
				UPDATE	SDS.tblClusterMaster SET AreaClusterName= @AreaClusterName,Regionid=@Regionid,IsActive= @IsActive, LastUpdatedDatetime= Getdate(), 
				PickupLocation=@PickupLocation,GodownId=@GodownId, Latitude=@Latitude, Longitude=@Longitude
				where ClusterId= @ClusterId		
			
				if not exists(select 1 from  sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId)
				Begin					 
					insert into sds.tblDeliveryBoyClusterMapping(ClusterId,StaffRefNo,AdditionalStaffRefNo,NoOfTrip,IsActive,LastUpdatedDatetime)
					values(@ClusterId,@StaffRefNo,@AdditionalStaffRefNo,@NoOfTrip,'Y',getdate())
				end
				else	
				begin
					UPDATE sds.tblDeliveryBoyClusterMapping set StaffRefNo=@StaffRefNo, AdditionalStaffRefNo=@AdditionalStaffRefNo, NoOfTrip=@NoOfTrip, LastUpdatedDatetime=getdate() where ClusterId=@ClusterId
				End
				SET @RtnValue = @ClusterId
			End
		End
		else
			SET @RtnValue = -1
	End

	Else If (upper(@Action)='DELETE')
	Begin		
			UPDATE	SDS.tblClusterMaster SET  IsActive= @IsActive, LastUpdatedDatetime= Getdate() where ClusterId= @ClusterId			
			SET @RtnValue = @ClusterId		
	End
END





GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterMasterList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_ClusterMasterList]
--declare
@DistributorId bigint,
@ClusterId int,
@ActiveFlag varchar(10)
--set @DistributorId=14193; set @ClusterId=0; set @ActiveFlag='ALL'
as
BEGIN
	SELECT c.ClusterId,c.Regionid,RM.RegionType,c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName) as AreaClusterName, c.LastUpdatedDatetime, 
	c.IsActive, isnull(dc.StaffRefNo,0) StaffRefNo,SDS.fn_CamelCase( st1.StaffName)as AdditionalStaffRefName, 
	isnull(dc.AdditionalStaffRefNo,0) AdditionalStaffRefNo,SDS.fn_CamelCase( st.StaffName)as StaffName,
	isnull(dc.NoOfTrip,0) NoOfTrip, v.VehicleNo, isnull(v.RTOCapacity,0) RTOCapacity, c.PickupLocation, c.GodownId, c.Latitude, c.Longitude,s2.saleCnt,s2.AvgPerDaySale,
	isnull(dc.NoOfTrip,0) * isnull(v.RTOCapacity,0) PossDelivery, (select count(AreaRefNo) from sds.tblAreaClusterMapping with(nolock) where AreaClusterId=c.ClusterId) AreaCount,

	isnull((STUFF((select ', ' + SDS.fn_CamelCase(a.AreaName) from DCMS.tblDistributorAreaMaster a  WITH(NOLOCK)
	inner join sds.tblAreaClusterMapping ac with(nolock) on ac.AreaClusterId=c.clusterId where a.AreaRefNo=ac.AreaRefNo FOR XML PATH('')),1,1,'')),'') AS SelectArea,

	--(SELECT max(cd.DistanceFromAgency) FROM SDS.tblConsumerDetails AS cd with(nolock) INNER JOIN SDS.tblAreaClusterMapping ac with(nolock) ON cd.AreaRefNo = ac.AreaRefNo
	--where cd.DistributorID=@DistributorId and ac.AreaClusterId=c.ClusterId and upper(isnull(cd.ConsumerStatus,''))='ACTIVE') 
	0 DistanceFromAgency,

	--(SELECT max(cd.DistanceFromGodown) FROM SDS.tblConsumerDetails AS cd with(nolock) INNER JOIN SDS.tblAreaClusterMapping ac with(nolock) ON cd.AreaRefNo = ac.AreaRefNo
	--where cd.DistributorID=@DistributorId and ac.AreaClusterId=c.ClusterId and upper(isnull(cd.ConsumerStatus,''))='ACTIVE') 
	0 DistanceFromGodown,
	req.[Status],req.Flag


	FROM SDS.tblVehicleDeliveryBoyMapping AS vd WITH(NOLOCK) LEFT OUTER JOIN 
	SDS.tblVehicleMaster AS v WITH(NOLOCK) ON vd.VehicleId = v.VehicleId RIGHT OUTER JOIN
	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON vd.DeliveryBoyId = dc.StaffRefNo RIGHT OUTER JOIN
	SDS.tblClusterMaster AS c WITH(NOLOCK) ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN
	SDS.tblClusterRegionTypeMaster AS RM with(nolock) ON RM.Id=C.Regionid LEFT OUTER JOIN
	DCMS.tblDistributorStaffDetails AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo LEFT OUTER JOIN
	SDS.tblRequestForClusterEdit as Req WITH(NOLOCK) ON c.ClusterId = Req.ClusterId
	LEFT OUTER JOIN DCMS.tblDistributorStaffDetails AS st1 with(nolock) ON dc.AdditionalStaffRefNo = st1.StaffRefNo 
	left outer join 
	(
		select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) saleCnt, 
		round((count(OrderRefNo))/(select top 1 convert(float,NoOfDaysForOrderAvg) from SDS.tblAppConfigData),2) AvgPerDaySale
		from sds.tblAreaClusterMapping ac with(nolock) left outer join DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,'N')='Y' 
		where (ac.DistributorId=@DistributorId) and (o.OrderStatusCode in ( 'DLVD')) and (ac.areaclusterId=@ClusterId or @ClusterId=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
		group by ac.DistributorId, ac.areaclusterId
	) s2 on c.DistributorId=s2.DistributorId and c.ClusterId=s2.areaclusterId
	
	where (c.DistributorId=@DistributorId or @DistributorId=0) and (c.IsActive=@ActiveFlag or upper(@ActiveFlag)='ALL') 
	AND (c.ClusterId =@ClusterId or @ClusterId=0)
	order by  StaffRefNo,AreaCount,c.AreaClusterName

END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterMasterList_New]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_ClusterMasterList_New]
--declare
@DistributorId bigint,
@ClusterId int,
@ActiveFlag varchar(10)
--set @DistributorId=14193; set @ClusterId=0; set @ActiveFlag='ALL'
as
BEGIN
	SELECT c.ClusterId,c.Regionid,RM.RegionType,c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName) as AreaClusterName, c.LastUpdatedDatetime, 
	c.IsActive, isnull(dc.StaffRefNo,0) StaffRefNo,SDS.fn_CamelCase( st1.StaffName)as AdditionalStaffRefName, 
	isnull(dc.AdditionalStaffRefNo,0) AdditionalStaffRefNo,SDS.fn_CamelCase( st.StaffName)as StaffName,
	isnull(dc.NoOfTrip,0) NoOfTrip, v.VehicleNo, isnull(v.RTOCapacity,0) RTOCapacity, c.PickupLocation, c.GodownId, c.Latitude, c.Longitude,s2.saleCnt,s2.AvgPerDaySale,
	isnull(dc.NoOfTrip,0) * isnull(v.RTOCapacity,0) PossDelivery, (select count(AreaRefNo) from sds.tblAreaClusterMapping with(nolock) where AreaClusterId=c.ClusterId) AreaCount,

	isnull((STUFF((select ', ' + SDS.fn_CamelCase(a.AreaName) from DCMS.tblDistributorAreaMaster a  WITH(NOLOCK)
	inner join sds.tblAreaClusterMapping ac with(nolock) on ac.AreaClusterId=c.clusterId where a.AreaRefNo=ac.AreaRefNo FOR XML PATH('')),1,1,'')),'') AS SelectArea,
	0 DistanceFromAgency,0 DistanceFromGodown,req.[Status],req.Flag
	
	FROM SDS.tblVehicleDeliveryBoyMapping AS vd WITH(NOLOCK) LEFT OUTER JOIN 
	SDS.tblVehicleMaster AS v WITH(NOLOCK) ON vd.VehicleId = v.VehicleId RIGHT OUTER JOIN
	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON vd.DeliveryBoyId = dc.StaffRefNo RIGHT OUTER JOIN
	SDS.tblClusterMaster AS c WITH(NOLOCK) ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN
	SDS.tblClusterRegionTypeMaster AS RM with(nolock) ON RM.Id=C.Regionid LEFT OUTER JOIN
	DCMS.tblDistributorStaffDetails AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo LEFT OUTER JOIN
	SDS.tblRequestForClusterEdit as Req WITH(NOLOCK) ON c.ClusterId = Req.ClusterId
	LEFT OUTER JOIN DCMS.tblDistributorStaffDetails AS st1 with(nolock) ON dc.AdditionalStaffRefNo = st1.StaffRefNo 
	left outer join 
	(
		select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) saleCnt, 
		round((count(OrderRefNo))/(select top 1 convert(float,NoOfDaysForOrderAvg) from SDS.tblAppConfigData),2) AvgPerDaySale
		from sds.tblAreaClusterMapping ac with(nolock) left outer join DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,'N')='Y' 
		where (ac.DistributorId=@DistributorId) and (o.OrderStatusCode in ( 'DLVD')) and (ac.areaclusterId=@ClusterId or @ClusterId=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
		group by ac.DistributorId, ac.areaclusterId
	) s2 on c.DistributorId=s2.DistributorId and c.ClusterId=s2.areaclusterId
	
	where (c.DistributorId=@DistributorId or @DistributorId=0) and (c.IsActive=@ActiveFlag or upper(@ActiveFlag)='ALL') 
	AND (c.ClusterId =@ClusterId or @ClusterId=0)
	order by  StaffRefNo,AreaCount,c.AreaClusterName

END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterMasterListForDDL]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_ClusterMasterListForDDL]
--declare
@DistributorId bigint,
@ClusterId int,
@ActiveFlag varchar(10)
--set @DistributorId=88888; set @ClusterId=0; set @ActiveFlag='ALL'
as
BEGIN
	SELECT c.ClusterId,c.Regionid,RM.RegionType,c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName) as AreaClusterName,  
	c.IsActive, c.PickupLocation, c.GodownId, c.Latitude, c.Longitude
	FROM SDS.tblClusterMaster AS c WITH(NOLOCK) LEFT OUTER JOIN 
	SDS.tblClusterRegionTypeMaster AS RM with(nolock) ON RM.Id=C.Regionid 	
	where (c.DistributorId=@DistributorId) and (c.IsActive=@ActiveFlag or upper(@ActiveFlag)='ALL') 
	AND (c.ClusterId =@ClusterId or @ClusterId=0)
	order by  c.AreaClusterName

END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterwiseBacklogAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_ClusterwiseBacklogAdd 14193,0

CREATE proc [SDS].[usp_ClusterwiseBacklogAdd]
--declare
@DistributorID int,
@ClusterId int
--set @DistributorID=14193; set @ClusterId=0

as
BEGIN
set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr create table #TotOdr(ClusterId int, PendingOrders int)
	IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale create table #TotSale(ClusterId int, TotalSale int, AvgDailySale int)
	
	declare @Str varchar(max)= 'insert into #TotOdr		
		select ac.areaclusterId, count(distinct OrderRefNo) PendingOrders  
		from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo
		where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
		and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
		and o.pricecode in (select PriceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
		group by ac.areaclusterId'
	exec (@Str)
	
	declare @Str1 varchar(max)= 'insert into #TotSale
		select tot.areaclusterId, isnull(tot.TCnt,0)+isnull(curr.CCnt,0) TotalSale, 
		round((isnull(tot.TCnt,0)+isnull(curr.CCnt,0)) / (select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),0) AvgSale
		from (
		select ac.areaclusterId, count(distinct o.OrderRefNo) TCnt
		from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
		where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (o.OrderStatusCode in ( ''DLVD'')) 
		and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
		and o.pricecode in (select PriceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
		group by ac.DistributorId, ac.areaclusterId
		) tot
		full outer join
		(
		select ac.areaclusterId, count(distinct o.OrderRefNo) CCnt
		from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+'  o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo	
		where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (o.OrderStatusCode in ( ''DLVD'')) 
		and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
		and o.pricecode in (select PriceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
		group by ac.areaclusterId
		) curr on tot.areaclusterId=curr.areaclusterId '
	print (@Str1)
	exec (@Str1)
	
	 update sds.tblDistributorClusterwiseBacklog 
	 set EntryDate=getdate(), TotalPendingOrder=isnull(o.PendingOrders,0),AvgSale=isnull(s.AvgDailySale,0),BackLog=(isnull(o.PendingOrders,0)/isnull(nullif(s.AvgDailySale,0),1))
	  from sds.tblDistributorClusterwiseBacklog t1 inner join 
	 #TotOdr o on t1.clusterId=o.ClusterId left outer join #TotSale s on o.ClusterId=s.ClusterId 
	 and DistributorId=@DistributorId and BackLogOf='C' and cast(EntryDate as date) =cast(getdate() as date) 
	
	 insert into sds.tblDistributorClusterwiseBacklog(DistributorId,BackLogOf,EntryDate,clusterId,TotalPendingOrder,AvgSale,BackLog)
	 select @DistributorId,'C',getdate(),o.ClusterId,isnull(o.PendingOrders,0),isnull(s.AvgDailySale,0),isnull(o.PendingOrders,0)/isnull(nullif(s.AvgDailySale,0),1)
	 from #TotOdr o left outer join #TotSale s on o.ClusterId=s.ClusterId 
	 where o.ClusterId not in (select ClusterId from sds.tblDistributorClusterwiseBacklog where DistributorId=@DistributorId and BackLogOf='C' 
	 and cast(EntryDate as date) =cast(getdate() as date))
	
	 --set @RtnValue=isnull(SCOPE_IDENTITY(),0)
	 update SDS.tblDistributorClusterwiseBacklog set TotalPendingOrder= 0 where TotalPendingOrder is null
	 update SDS.tblDistributorClusterwiseBacklog set AvgSale= 0 where AvgSale is null
	 update SDS.tblDistributorClusterwiseBacklog set BackLog= 0 where BackLog is null

	drop table #TotOdr
	drop table #TotSale
	 
	--return @RtnValue;

END


GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterwiseBacklogAddNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_ClusterwiseBacklogAddNew 14193,0

Create proc [SDS].[usp_ClusterwiseBacklogAddNew]
--declare
@DistributorID int,
@ClusterId int
--set @DistributorID=14193; set @ClusterId=0

as
BEGIN
set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)='', @bkDays int=0
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	set @bkDays=(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData)

	IF OBJECT_ID('tempdb..#tbl1') IS NOT NULL DROP TABLE #tbl1 	create table #tbl1(ClusterId bigint, TotalSale1 int)
	IF OBJECT_ID('tempdb..#tbl2') IS NOT NULL DROP TABLE #tbl2 	create table #tbl2(ClusterId bigint,PendingCnt int, TotalSale2 int)
	IF OBJECT_ID('tempdb..#Result') IS NOT NULL DROP TABLE #Result 	create table #Result(ClusterId bigint,PendingOrders int, AvgDailySale int, BacklogDays float)

	insert into #tbl1(ClusterId,TotalSale1)  select ac.AreaClusterId, count(distinct o.OrderRefNo) as TotalSale1 
	from DCMS.tblRefillOrderDtls o with (nolock) inner join sds.tblAreaClusterMapping ac with (nolock) on ac.AreaRefNo=o.AreaRefNo  
	where (ac.DistributorId=@DistributorID) and (o.OrderStatusCode in ( 'DLVD')) and (ac.AreaClusterId=@ClusterId or @ClusterId=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(isnull(@bkDays,0)),getdate())
		and o.pricecode in (select PriceCode from sds.tblactiveitems where isnull(Active,'N')='Y')
	group by ac.AreaClusterId

	declare @Str varchar(max)= 'insert into #tbl2(ClusterId,PendingCnt,TotalSale2)
	select ac.AreaClusterId, sum(case when o.OrderStatusCode in (''AGEN'',''APRN'',''OPEN'') then 1 else 0 end) PendingCnt,
	sum(case when o.OrderStatusCode in ( ''DLVD'') and cast(o.ActualDeliveryDate as date)>=dateadd(dd,-(isnull('+convert(nvarchar(20),@bkDays) +',0)),getdate()) then 1 else 0 end) TotalSale2
	from DCMS.tblRefillOrderDtls'+@GroupCode+' o inner join sds.tblAreaClusterMapping ac with (nolock) on ac.AreaRefNo=o.AreaRefNo  
	where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (ac.AreaClusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
	and o.pricecode in (select PriceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
	group by ac.AreaClusterId'  

	print (@Str)
	exec (@Str)
	
	insert into #Result(ClusterId,PendingOrders, AvgDailySale, BacklogDays)
	select ISNULL( t1.ClusterId,t2.ClusterId) ClusterId, isnull(t2.PendingCnt,0) PendingOrders,  
		(isnull(t1.TotalSale1,0)+isnull(t2.TotalSale2,0))/isnull(@bkDays,1) AvgDailySale,
		(isnull(t2.PendingCnt,0)/convert(float,isnull(nullif((isnull(t1.TotalSale1,0)+isnull(t2.TotalSale2,0))/isnull(@bkDays,1),0),1))) BacklogDays
	from #tbl1 t1 full outer join #tbl2 t2 on t1.ClusterId=t2.ClusterId

	print (@Str)
	exec (@Str)
	
	 update sds.tblDistributorClusterwiseBacklog 
	 set EntryDate=getdate(), TotalPendingOrder=isnull(o.PendingOrders,0),AvgSale=isnull(o.AvgDailySale,0),BackLog=isnull(o.BacklogDays,0)
	 from sds.tblDistributorClusterwiseBacklog t1 inner join #Result o on o.ClusterId=t1.ClusterId 
	 and DistributorId=@DistributorId and BackLogOf='C' and cast(EntryDate as date) =cast(getdate() as date) 
	
	 insert into sds.tblDistributorClusterwiseBacklog(DistributorId,BackLogOf,EntryDate,clusterId,TotalPendingOrder,AvgSale,BackLog)
	 select @DistributorId,'C',getdate(),ClusterId,isnull(PendingOrders,0),isnull(AvgDailySale,0),isnull(BacklogDays,0)
	 from #Result
	 where ClusterId not in (select ClusterId from sds.tblDistributorClusterwiseBacklog where DistributorId=@DistributorId and BackLogOf='C' 
	 and cast(EntryDate as date) =cast(getdate() as date))
	
	 --set @RtnValue=isnull(SCOPE_IDENTITY(),0)
	 update SDS.tblDistributorClusterwiseBacklog set TotalPendingOrder= 0 where TotalPendingOrder is null
	 update SDS.tblDistributorClusterwiseBacklog set AvgSale= 0 where AvgSale is null
	 update SDS.tblDistributorClusterwiseBacklog set BackLog= 0 where BackLog is null

drop table #tbl1
drop table #tbl2
drop table #Result

END


GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterwiseconsumerLatLong]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [SDS].[usp_ClusterwiseconsumerLatLong]
--Declare
@DistributorId bigint,
@ClusterId int
--set @DistributorId=14193; set @ClusterId=70;
AS
BEGIN
	SELECT c.ClusterId,c.AreaClusterName,cd.UniqueConsumerId,cd.AreaRefNo,cd.MobileNo, Cd.ConsumerNo,SDS.fn_CamelCase(Cd.ConsumerName) as ConsumerName,Cd.ConsumerStatus,
		Cd.Latitude,Cd.Longitude , Cd.ClusterId As InClusterId, case when (Cd.InCluster=1 and cd.ClusterId=@ClusterId) then 1 else 0 End InCluster,
		Cd.InArea, Cd.TripGCDate, SDS.fn_CamelCase(Cd.Address) as ConsumerAddress,SDS.fn_CamelCase(ca.AreaName) as CDCMSArea,
		cl.VitranLatitude,cl.VitranLongitude,cl.VitranLastUpdateDateTime,cl.VitranLatitude1,cl.VitranLongitude1,cl.VitranLastUpdateDateTime1
	FROM SDS.tblClusterMaster AS c WITH(NOLOCK) 
		LEFT OUTER JOIN SDS.tblAreaClusterMapping ac WITH(NOLOCK) on c.ClusterId = ac.AreaClusterId
		LEFT OUTER JOIN SDS.tblConsumerDetails as cd WITH(NOLOCK) ON ac.AreaRefNo = cd.AreaRefNo
		LEFT OUTER JOIN DCMS.tblDistributorAreaMaster ca with (nolock) on ca.AreaRefNo=cd.AreaRefNo 
		LEFT OUTER JOIN SDS.tblConsumerLocationHistoryNew cl with (nolock) on cd.UniqueConsumerId=cl.UniqueConsumerId and cd.DistributorID=cl.DistributorID
	where (C.DistributorId=@DistributorId) and (C.ClusterId=@ClusterId) and cd.ConsumerStatus='Active'	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterwiseconsumerList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 ----[SDS].[usp_ClusterwiseconsumerList] 14193,'Y'
CREATE PROC [SDS].[usp_ClusterwiseconsumerList]
--declare
@DistributorId bigint,
@ActiveFlag varchar(10)
--set @DistributorId=6659 set @ActiveFlag='Y'
as
BEGIN
	SELECT c.ClusterId,c.DistributorId, (c.AreaClusterName) as ClusterName,	c.IsActive, isnull(dc.StaffRefNo,0) StaffRefNo,(st.StaffName)as StaffName,
	count(cd.UniqueConsumerId) TotalConsumer,
	sum(case when (isnull(cd.InCluster,0)=1 and ac.AreaClusterId=cd.ClusterId) then 1 else 0 end) InCluster,
	sum(case when (cd.Latitude is not null and (isnull(cd.InCluster,0)=0 or ac.AreaClusterId<>cd.ClusterId)) then 1 else 0 end) OutCluster,
	sum(case when (cd.Latitude is null) then 1 else 0 end) NotAvailable
	FROM SDS.tblClusterMaster AS c WITH(NOLOCK) LEFT OUTER JOIN	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON c.ClusterId = dc.ClusterId 
	LEFT OUTER JOIN	DCMS.tblDistributorStaffDetails AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo  
	LEFT OUTER JOIN SDS.tblAreaClusterMapping ac WITH(NOLOCK) on c.ClusterId = ac.AreaClusterId
	LEFT OUTER JOIN SDS.tblConsumerDetails as cd WITH(NOLOCK) ON ac.AreaRefNo = cd.AreaRefNo
	where (c.DistributorId=@DistributorId) and (c.IsActive=@ActiveFlag or upper(@ActiveFlag)='ALL') and cd.ConsumerStatus='Active'	
	group by c.ClusterId,c.DistributorId,c.AreaClusterName, 
	c.IsActive,dc.StaffRefNo, st.StaffName 
	order by c.AreaClusterName	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterwiseconsumerListSummary]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_ClusterwiseconsumerListSummary]
--declare

    @DistributorId bigint,
    @ActiveFlag varchar(10),
    @ClusterId bigint  -- Add ClusterId as a parameter
--set @DistributorId=14193 set @ActiveFlag='Y' set @ClusterId=75
AS
BEGIN
    SELECT 
        c.ClusterId,
        c.DistributorId, 
        (c.AreaClusterName) as ClusterName,
        c.IsActive, 
        ISNULL(dc.StaffRefNo,0) StaffRefNo,
        (st.StaffName) as StaffName,
        COUNT(cd.UniqueConsumerId) TotalConsumer,
        SUM(CASE WHEN (ISNULL(cd.InCluster,0)=1 AND ac.AreaClusterId=cd.ClusterId) THEN 1 ELSE 0 END) InCluster,
        SUM(CASE WHEN (cd.Latitude IS NOT NULL AND (ISNULL(cd.InCluster,0)=0 OR ac.AreaClusterId<>cd.ClusterId)) THEN 1 ELSE 0 END) OutCluster,
        SUM(CASE WHEN (cd.Latitude IS NULL) THEN 1 ELSE 0 END) NotAvailable
    FROM 
        SDS.tblClusterMaster AS c WITH(NOLOCK) 
    LEFT OUTER JOIN	 	
        SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON c.ClusterId = dc.ClusterId 
    LEFT OUTER JOIN
        DCMS.tblDistributorStaffDetails AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo  
    LEFT OUTER JOIN 
        SDS.tblAreaClusterMapping ac ON c.ClusterId = ac.AreaClusterId
    LEFT OUTER JOIN 
        SDS.tblConsumerDetails AS cd ON ac.AreaRefNo = cd.AreaRefNo
    WHERE 
        c.DistributorId = @DistributorId 
        AND (c.IsActive = @ActiveFlag OR UPPER(@ActiveFlag) = 'ALL') 
        AND cd.ConsumerStatus = 'Active'
        AND c.ClusterId = @ClusterId  -- Filter by ClusterId
    GROUP BY 
        c.ClusterId, c.DistributorId, c.AreaClusterName, 
        c.IsActive, dc.StaffRefNo, st.StaffName 
    ORDER BY 
        c.AreaClusterName	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ClusterwiseOrderCntTrips]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	get Cluster wise order count for trip planning
--		SDS.usp_ClusterwiseOrderCntTrips 14193

CREATE proc [SDS].[usp_ClusterwiseOrderCntTrips]
--declare
@DistributorId bigint
--set @DistributorId=14193
As
BEGIN
	DECLARE @GroupCode VARCHAR(3)=''
				
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	print @GroupCode

	declare @strquery varchar(max)
	set @strquery=('SELECT c.ClusterId,  SDS.fn_CamelCase( c.areaClustername ) as areaClustername,  o.PriceCode, i.ItemDescription, COUNT(o.OrderRefNo) OrderCnt
		FROM SDS.tblClusterMaster c INNER JOIN
		SDS.tblAreaClusterMapping ac ON c.ClusterId = ac.AreaClusterId INNER JOIN
		DCMS.tblRefillOrderDtls'+@GroupCode +' AS o WITH (NOLOCK) ON ac.AreaRefNo = o.AreaRefNo 
		INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) on o.PriceCode=i.PriceCode
		inner join sds.tblitemcodemaster im on i.ItemCode=im.ItemId
		where o.DistributorId='+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
		and o.PriceCode in (select priceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
		GROUP BY c.ClusterId, c.areaClustername, o.PriceCode,i.ItemDescription' )

	print @strquery
	exec (@strquery)
END


GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerAreaAddressUpdate]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerAreaAddressUpdate]      
--declare      
@UniqueConsumerId numeric(17,0),      
@ConsAddress nvarchar(500),      
@ConsAddress1 nvarchar(500),      
@ConsAddress2 nvarchar(500),      
@ConsAddress3 nvarchar(500),      
@AreaRefNo numeric(17,0),      
@Latitude nvarchar(50),      
@Longitude nvarchar(50),      
@IsUpdate int,      
@Action nvarchar(50),      
@RetValue nvarchar(50) output      
      
--set @UniqueConsumerId=9110916600023516;set @ConsAddress='Sr No 56/18 F No C-104 Metro Greenssn Nr Iscon Tempal Telekar Nagae A';set @AreaRefNo=1161513900000017;      
--set @Latitude=''; set @Longitude='';--set @Source='';set @IsVerified=0;      
--set @Action='ADDRESS';set @RetValue=0; set @IsUpdate=1      
AS      
      
BEGIN      
	If (upper(@action)='ADDRESS')      
	Begin      
		if(isnull(@IsUpdate,0)=1)      
		Begin      
			update sds.tblConsumerDetails set Address=@ConsAddress, AddrLastUpdateDateTime=getdate(),LastUpdatedDatetime=getdate() 
			where UniqueConsumerId=@UniqueConsumerId      
			UPDATE DCMS.tblConsumerMaster set AddressLine1=@ConsAddress1,AddressLine2=@ConsAddress2,AddressLine3=@ConsAddress3,      
				AreaRefNo=@AreaRefNo,LastUpdateDateTime=GETDATE() 
			where UniqueConsumerId=@UniqueConsumerId      
		End      
		update sds.tblConsumerDetails set AddressConfirmed=1, LastUpdatedDatetime=getdate() where UniqueConsumerId=@UniqueConsumerId      
		set @RetValue=1;      
	End
	Else If (upper(@action)='AREA')      
	Begin      
		if(isnull(@IsUpdate,0)=1)      
		Begin      
			declare @AreaName nvarchar(200)      
			select @AreaName=AreaName from DCMS.tblDistributorAreaMaster where AreaRefNo=@AreaRefNo      
			update sds.tblConsumerDetails set AreaRefNo=@AreaRefNo, AreaName=@AreaName, LastUpdatedDatetime=getdate() where UniqueConsumerId=@UniqueConsumerId      
			UPDATE DCMS.tblConsumerMaster set AreaRefNo=@AreaRefNo,LastUpdateDateTime=GETDATE() where UniqueConsumerId=@UniqueConsumerId      
		End      
		update sds.tblConsumerDetails set AreaConfirmed=1, LastUpdatedDatetime=getdate() where UniqueConsumerId=@UniqueConsumerId      
		set @RetValue=1;      
	End      
	else If (upper(@action)='LOCATION')      
	Begin      
		if(isnull(@IsUpdate,0)=1)      
		Begin      
			declare @Source nvarchar(50)      
			set @Source='MANUAL'      
			-- Update to Consumer Details page as Trip GC  
			update sds.tblConsumerDetails set Latitude=@Latitude, Longitude=@Longitude,Source=@Source,      
			IsVerifiedDate=GETDATE(),IsVerifiedUpdated=1, LastUpdatedDatetime=getdate()  where UniqueConsumerId=@UniqueConsumerId      
			-- Update to Location History Table  
			update sds.tblConsumerLocationHistoryNew set ManualLatitude=@Latitude, ManualLongitude=@Longitude,     
			ManualLastUpdateDateTime=getdate(), LastUpdatedDatetime=getdate()  where UniqueConsumerId=@UniqueConsumerId      
		End          
		update sds.tblConsumerDetails set LocationConfirmed=1, LastUpdatedDatetime=getdate() where UniqueConsumerId=@UniqueConsumerId      
		set @RetValue=1;      
	End      

	-- If all 3 (Address, Area, Location) are confirmed then update Isverify flag      
	Begin      
		update sds.tblConsumerDetails set IsVerified=1, LastUpdatedDatetime=getdate()        
		where UniqueConsumerId=@UniqueConsumerId and isnull(AddressConfirmed,0)=1 and isnull(AreaConfirmed,0)=1 and isnull(LocationConfirmed,0)=1      
		set @RetValue=1;      
	End      
      
	return  @RetValue      
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDensity]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_ConsumerDensity]
--	Description		:	save consumer dencity data for R&D

--	Author			:	Prasanna	14-08-2020

--	Date Modified		Modified By	     Modifications
--	14-08-2020			Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_ConsumerDensity]
@CustDensity SDS.CustDensity readonly,
@Flag varchar(15)
AS
BEGIN
	IF(@Flag='TOTAL')
	BEGIN
		DELETE FROM [SDS].[tblConsumersTotalDensity]
		INSERT INTO [SDS].[tblConsumersTotalDensity] ([UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName]
      ,[250],[500],[750],[1000],[1500],[2000],[2500],[3000],[Above3000],[LastUpdatedDatetime])
		SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName]
      ,[250],[500],[750],[1000],[1500],[2000],[2500],[3000],[Above3000],GETDATE()
		FROM @CustDensity		
	END
	ELSE IF(@Flag='PART')
	BEGIN
		DELETE FROM [SDS].[tblConsumersPartDensity]
		INSERT INTO [SDS].[tblConsumersPartDensity] ([UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName]
      ,[0To250],[251To500],[501To750],[751To1000],[1001To1500],[1501To2000],[2001To2500],[2501To3000],[Above3000],[LastUpdatedDatetime])
	  SELECT [UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName]
      ,[250],[500],[750],[1000],[1500],[2000],[2500],[3000],[Above3000],GETDATE()
		FROM @CustDensity
	END
	ELSE IF(@Flag='DISTANCE')
	BEGIN
		DELETE FROM [SDS].[tblConsumersWiseDistance]
		INSERT INTO [SDS].[tblConsumersWiseDistance] ([FromUniqueConsumerId],[DistributorID],[ToUniqueConsumerId],[Distance],[LastUpdatedDatetime])
	  SELECT [UniqueConsumerId],[DistributorID],[ToUniqueConsumerId],[Distance],GETDATE()
		FROM @CustDensity
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDetails_UpdateInout]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerDetails_UpdateInout]    
--declare     
@DistributorID int,    
@consumerDtlstbl sds.ConLatLongInOutDisttbl ReadOnly    
as    
  
BEGIN     
    
 Begin    --  Update flags for Existing consumers only  
  UPDATE sds.tblConsumerDetails     
  SET InArea = t1.InArea,    
  InCluster = t1.InCluster,    
  ClusterId = t1.InClusterId,    
  InTradingArea = t1.InTradingArea,
  LastUpdatedDatetime=getdate()   
  FROM   sds.tblConsumerDetails t2 with (nolock) inner join @consumerDtlstbl t1 on t2.UniqueConsumerId=t1.UniqueConsumerId   
  where t2.DistributorID=@DistributorID  
    
    
  --(    
  -- SELECT c.DistributorID, c.UniqueConsumerId,c.InArea, c.InCluster,c.InClusterId,c.inTradingArea    
  -- FROM  inner join SDS.tblConsumerDetails AS cd with(nolock) inner join     
  -- DCMS.tblDistributorAreaMaster AS ar with(nolock) on cd.AreaRefNo=ar.AreaRefNo     
  -- where c.DistributorID=@DistributorID and (cd.AreaRefNo=@AreaRefNo or @AreaRefNo=0)    
  -- and c.UniqueConsumerId in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID )    
  --) t1 on t2.UniqueConsumerId=t1.UniqueConsumerId and t2.DistributorID=t1.DistributorID    
 End    
  
END    
    
    
GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDetailsAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerDetailsAdd]
--declare 
@DistributorID int,
@AreaRefNo numeric(17, 0),
@consumerDtlstbl sds.ConLatLongInOutDisttbl ReadOnly
as
BEGIN	

	insert into [SDS].[ConLatLongInOutDisttbl] (UniqueConsumerId,Latitude,Longitude,InArea,InCluster,inTradingArea,InClusterId,DistanceGodown,DistanceAgency,LastUpdatedDate)
	select t.UniqueConsumerId,t.Latitude,t.Longitude,t.InArea,t.InCluster,t.inTradingArea,t.InClusterId,t.DistanceGodown,t.DistanceAgency,GETDATE()
	from @consumerDtlstbl as t

	Begin				--		Update Existing 
		UPDATE sds.tblConsumerDetails 
		SET ConsumerNo = t1.ConsumerNo,
			ConsumerName = t1.ConsumerName,
			ConsumerStatus = t1.ConsumerStatus,
			MobileNo = t1.MobileNo,
			Address = t1.ConsumerAddress,
			Pin = t1.Pin,
			AreaRefNo = t1.AreaRefNo,
			AreaName = t1.AreaName,
			Latitude = t1.Latitude,
			Longitude = t1.Longitude,
			InArea = t1.InArea,
			InCluster = t1.InCluster,
			ClusterId = t1.InClusterId,
			InTradingArea = t1.InTradingArea,
			Source ='AUTO',
			MstLastUpdateDateTime = t1.MstLastUpdateDateTime,
			AddrLastUpdateDateTime = t1.AddrLastUpdateDateTime,
			ConLastUpdateDateTime = t1.ConLastUpdateDateTime,
			LastUpdatedDatetime = getdate(),
			IsVerified=t1.InCluster,
		    AddressConfirmed=t1.InCluster,
		    AreaConfirmed=t1.InCluster,
		    LocationConfirmed=t1.InCluster,
			DistanceFromAgency=t1.DistanceAgency,
			DistanceFromGodown=t1.DistanceGodown
		FROM   sds.tblConsumerDetails t2 inner join 
		(
			SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
			newc.Latitude, newc.Longitude, newc.InArea,newc.InCluster,newc.inTradingArea, c.LastUpdateDateTime as MstLastUpdateDateTime, 
			c.LastUpdateDateTime as AddrLastUpdateDateTime, c.LastUpdateDateTime as ConLastUpdateDateTime, newc.InClusterId, newc.DistanceAgency,newc.DistanceGodown
			FROM @consumerDtlstbl newc 
			inner join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
			inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
			where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
			and newc.UniqueConsumerId in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID )--and (upper(source)='AUTO' or isnull(source,'')=''))
		) t1 on t2.UniqueConsumerId=t1.UniqueConsumerId and t2.DistributorID=t1.DistributorID
		--WHERE  (upper(t2.source) = 'AUTO' or isnull(t2.source,'')='')
	End

	Begin			-- Insert which are not added previosly
		declare @RtnValue int =0
		insert into sds.tblConsumerDetails(DistributorID,UniqueConsumerId,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,AreaName,
		Latitude,Longitude,InArea,InCluster,inTradingArea,ClusterId,Source,MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime,
		IsVerified,AddressConfirmed,AreaConfirmed,LocationConfirmed,DistanceFromAgency,DistanceFromGodown)

		SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
		c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
		newc.Latitude, newc.Longitude, newc.InArea, newc.InCluster, newc.inTradingArea ,InClusterId, 'AUTO', c.LastUpdateDateTime, c.LastUpdateDateTime, c.LastUpdateDateTime, getdate()
		,newc.InCluster,newc.InCluster,newc.InCluster,newc.InCluster,newc.DistanceAgency,newc.DistanceGodown
		FROM @consumerDtlstbl newc 
		INNER join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
		inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
		and newc.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID)

		set @RtnValue=@@ROWCOUNT
		--select @RtnValue as RtnValue
	End

	-- Update/Insert new consumer data to consumer location table...
	Begin
		UPDATE sds.tblConsumerLocationHistory SET AutoLatitude = t1.Latitude,AutoLongitude = t1.Longitude,AutoLastUpdateDateTime=getdate(),LastUpdatedDatetime = getdate()
		FROM  sds.tblConsumerLocationHistory cl WITH(NOLOCK) 
		inner join sds.tblConsumerDetails cd WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId and cl.DistributorID=cd.DistributorID
		inner join @consumerDtlstbl t1 on cd.UniqueConsumerId=t1.UniqueConsumerId 
		where cl.DistributorID=@DistributorID

		insert into SDS.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)
		select newC.UniqueConsumerId,cd.DistributorID,newC.Latitude,newC.Longitude,getdate(),getdate() 
		from @consumerDtlstbl newC inner join sds.tblConsumerDetails cd on newC.UniqueConsumerId=cd.UniqueConsumerId
		where cd.DistributorID=@DistributorID and newC.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory where DistributorID=@DistributorID)
	End
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDetailsAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerDetailsAddEdit]      
@DistributorID int,      
@UniqueConsumerId numeric(17, 0),      
@Latitude nvarchar(50),      
@Longitude nvarchar(50),      
@PlaceId nvarchar(500),      
@TripPlanNotIncludedId bigint=null,      
@RtnValue bigint output  
      
--set @DistributorID=14193 set @UniqueConsumerId=1141419300000009  
      
as       
      
BEGIN      
	if not exists(select 1 from sds.tblConsumerDetails  where UniqueConsumerId=@UniqueConsumerId)      
	Begin      
		insert into sds.tblConsumerDetails(DistributorID,UniqueConsumerId,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,      
		AreaName,Latitude,Longitude,PlaceId,Source,MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime)      
      
		SELECT c.DistributorID, c.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo,       
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,      
			@Latitude, @Longitude, @PlaceId, 'MANUAL', c.LastUpdateDateTime, c.LastUpdateDateTime, c.LastUpdateDateTime, getdate()      
		FROM DCMS.tblConsumerMaster AS c  with(nolock) inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo       
		where c.UniqueConsumerId=@UniqueConsumerId      
    
		set @RtnValue=@UniqueConsumerId      
		if(isnull(@TripPlanNotIncludedId,0)>0)      
		Begin      
			update SDS.tblTripPlanningNotIncluded set IsUpdated=1 where TripPlanNotIncludedId=@TripPlanNotIncludedId      
		End      
	End      
	Else      
	Begin      
		UPDATE sds.tblConsumerDetails       
		SET ConsumerNo = c.ConsumerNo,      
			ConsumerName = c.ConsumerName,      
			ConsumerStatus = c.ConsumerStatus,      
			MobileNo = c.MobileNo,      
			Address = c.ConsumerAddress,      
			Pin = c.Pin,      
			AreaRefNo = c.AreaRefNo,      
			AreaName = c.AreaName,      
			Latitude = @Latitude,      
			Longitude = @Longitude,      
			PlaceId=@PlaceId,      
			Source ='MANUAL',      
			MstLastUpdateDateTime = c.LastUpdateDateTime,      
			AddrLastUpdateDateTime = c.LastUpdateDateTime,      
			ConLastUpdateDateTime = c.LastUpdateDateTime,      
			LastUpdatedDatetime = getdate()      
		from sds.tblConsumerDetails lc inner join 
		(      
			SELECT c.DistributorID, c.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo,       
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName, c.LastUpdateDateTime        
			FROM DCMS.tblConsumerMaster AS c  with(nolock) inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo      
		) AS c  on lc.UniqueConsumerId=c.UniqueConsumerId       
		where lc.UniqueConsumerId=@UniqueConsumerId      
      
		set @RtnValue=@UniqueConsumerId      
      
		if(isnull(@TripPlanNotIncludedId,0)>0)      
		Begin      
			update SDS.tblTripPlanningNotIncluded set IsUpdated=1 where TripPlanNotIncludedId=@TripPlanNotIncludedId      
		End      
	End      
      
	-- Update/Insert new consumer data to consumer location table...      
	Begin      
		if exists( select 1 from sds.tblConsumerLocationHistoryNew where DistributorID=@DistributorID and UniqueConsumerId =@UniqueConsumerId)    
		Begin    
			UPDATE sds.tblConsumerLocationHistoryNew   
			SET ManualLatitude = @Latitude,   
				ManualLongitude = @Longitude,  
				ManualLastUpdateDateTime=getdate(),  
				LastUpdatedDatetime = getdate()      
			where UniqueConsumerId=@UniqueConsumerId and DistributorID=@DistributorID      
		End    
		Else    
		Begin    
			insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID,ManualLatitude,ManualLongitude,ManualLastUpdateDateTime,LastUpdatedDatetime)
			values(@UniqueConsumerId,@DistributorID,@Latitude,@Longitude,getdate(),getdate())      
		End    
	End      
END      
GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDetailsAddNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerDetailsAddNew]
--declare 
@DistributorID int,
@AreaRefNo numeric(17, 0)=0
--,@consumerDtlstbl sds.ConLatLongInOutDisttbl ReadOnly
as
BEGIN	

	Begin				--		Update Existing 
		UPDATE sds.tblConsumerDetails 
		SET ConsumerNo = t1.ConsumerNo,
			ConsumerName = t1.ConsumerName,
			ConsumerStatus = t1.ConsumerStatus,
			MobileNo = t1.MobileNo,
			Address = t1.ConsumerAddress,
			Pin = t1.Pin,
			AreaRefNo = t1.AreaRefNo,
			AreaName = t1.AreaName,
			MstLastUpdateDateTime = t1.MstLastUpdateDateTime,
			AddrLastUpdateDateTime = t1.AddrLastUpdateDateTime,
			ConLastUpdateDateTime = t1.ConLastUpdateDateTime,
			LastUpdatedDatetime = getdate(),
			IsVerified=0
			--Latitude = t1.Latitude,
			--Longitude = t1.Longitude,
			--Source ='AUTO',
			--InArea = t1.InArea,
			--InCluster = t1.InCluster,
			--ClusterId = t1.InClusterId,
			--InTradingArea = t1.InTradingArea,
		 --   AddressConfirmed=t1.InCluster,
		 --   AreaConfirmed=t1.InCluster,
		 --   LocationConfirmed=t1.InCluster,
			--DistanceFromAgency=t1.DistanceAgency,
			--DistanceFromGodown=t1.DistanceGodown
		FROM   sds.tblConsumerDetails t2 inner join 
		(
			SELECT c.DistributorID, c.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
			c.LastUpdateDateTime as MstLastUpdateDateTime,c.LastUpdateDateTime as AddrLastUpdateDateTime, c.LastUpdateDateTime as ConLastUpdateDateTime
			FROM DCMS.tblConsumerMaster AS c with(nolock) inner join 
			DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
			where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
			and c.UniqueConsumerId in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID )
		) t1 on t2.UniqueConsumerId=t1.UniqueConsumerId and t2.DistributorID=t1.DistributorID
	End

	Begin			-- Insert which are not added previosly
		declare @RtnValue int =0
		insert into sds.tblConsumerDetails(DistributorID,UniqueConsumerId,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,AreaName,
		MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime,IsVerified)
		--,Latitude,Longitude,InArea,InCluster,inTradingArea,ClusterId,Source,
		--AddressConfirmed,AreaConfirmed,LocationConfirmed,DistanceFromAgency,DistanceFromGodown)

		SELECT c.DistributorID, c.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
		c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
		c.LastUpdateDateTime, c.LastUpdateDateTime, c.LastUpdateDateTime, getdate(),0
		FROM DCMS.tblConsumerMaster AS c with(nolock) inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
		and c.UniqueConsumerId not in (select UniqueConsumerId from SDS.tblConsumerDetails where DistributorID=@DistributorID)

		set @RtnValue=@@ROWCOUNT
		--select @RtnValue as RtnValue
	End
END



GO
/****** Object:  StoredProcedure [SDS].[Usp_ConsumerDetailsBKAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[Usp_ConsumerDetailsBKAdd]
--declare 
@DistributorID int,
@AreaRefNo numeric(17, 0),
@consumerDtlstbl sds.ConLatLongInOutDisttbl ReadOnly
as

BEGIN	
	Begin				--		Update Existing 
		UPDATE sds.tblConsumerDetailsBK 
		SET ConsumerNo = t1.ConsumerNo,
			ConsumerName = t1.ConsumerName,
			ConsumerStatus = t1.ConsumerStatus,
			MobileNo = t1.MobileNo,
			Address = t1.ConsumerAddress,
			Pin = t1.Pin,
			AreaRefNo = t1.AreaRefNo,
			AreaName = t1.AreaName,
			Latitude = t1.Latitude,
			Longitude = t1.Longitude,
			InArea = t1.InArea,
			InCluster = t1.InCluster,
			ClusterId = t1.InClusterId,
			InTradingArea = t1.InTradingArea,
			Source ='AUTO',
			MstLastUpdateDateTime = t1.MstLastUpdateDateTime,
			AddrLastUpdateDateTime = t1.AddrLastUpdateDateTime,
			ConLastUpdateDateTime = t1.ConLastUpdateDateTime,
			LastUpdatedDatetime = getdate(),
			DistanceFromAgency=t1.DistanceAgency,
			DistanceFromGodown=t1.DistanceGodown
		FROM   sds.tblConsumerDetailsBK t2 inner join 
		(
			SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
			newc.Latitude, newc.Longitude, newc.InArea,newc.InCluster,newc.inTradingArea, c.LastUpdateDateTime as MstLastUpdateDateTime, 
			c.LastUpdateDateTime as AddrLastUpdateDateTime, c.LastUpdateDateTime as ConLastUpdateDateTime, newc.InClusterId, newc.DistanceAgency,newc.DistanceGodown
			FROM @consumerDtlstbl newc 
			inner join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
			inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
			where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
			and newc.UniqueConsumerId in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID )
		) t1 on t2.UniqueConsumerId=t1.UniqueConsumerId and t2.DistributorID=t1.DistributorID
	End

	Begin			-- Insert which are not added previosly
		declare @RtnValue int =0
		insert into sds.tblConsumerDetailsBK(DistributorID,UniqueConsumerId,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,AreaName,
		Latitude,Longitude,InArea,InCluster,inTradingArea,ClusterId,Source,MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime,
		DistanceFromAgency,DistanceFromGodown)

		SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
		c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
		newc.Latitude, newc.Longitude, newc.InArea, newc.InCluster, newc.inTradingArea ,InClusterId, 'AUTO', c.LastUpdateDateTime, c.LastUpdateDateTime, 
		c.LastUpdateDateTime, getdate(), newc.DistanceAgency,newc.DistanceGodown
		FROM @consumerDtlstbl newc 
		inner join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
		inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
		and newc.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID)

		set @RtnValue=@@ROWCOUNT

	End
	return @RtnValue
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDetailsUpdateInOut]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerDetailsUpdateInOut]  
--declare   
@DistributorID int,  
@AreaRefNo numeric(17, 0),  
@consumerDtlstbl sds.ConLatLongInOutDisttbl ReadOnly  
as  
BEGIN   
  --insert into sds.TblConLatLongInOutDisttblTemp(pk_id,UniqueConsumerId,Latitude,Longitude,InArea,InCluster,inTradingArea,InClusterId,DistanceGodown,DistanceAgency)
  --select pk_id,UniqueConsumerId,Latitude,Longitude,InArea,InCluster,inTradingArea,InClusterId,DistanceGodown,DistanceAgency from @consumerDtlstbl
	
	Begin    --  Update Existing   
		UPDATE sds.tblConsumerDetails   
		SET AreaRefNo = t1.AreaRefNo,  
			AreaName = t1.AreaName,  
			Latitude = t1.Latitude,  
			Longitude = t1.Longitude,  
			InArea = t1.InArea,  
			InCluster = t1.InCluster,  
			ClusterId = t1.InClusterId,  
			InTradingArea = t1.InTradingArea,  
			LastUpdatedDatetime = getdate(),  
			DistanceFromAgency=t1.DistanceAgency,  
			DistanceFromGodown=t1.DistanceGodown  
		FROM   sds.tblConsumerDetails t2 inner join   
		(  
			SELECT c.DistributorID, newc.UniqueConsumerId, c.AreaRefNo, ar.AreaName,newc.Latitude, newc.Longitude,  
				newc.InArea,newc.InCluster,newc.inTradingArea, newc.InClusterId, newc.DistanceAgency,newc.DistanceGodown  
			FROM @consumerDtlstbl newc   
				inner join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId  
				inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo   
			where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)  
				and newc.UniqueConsumerId in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID )  
		) t1 on t2.UniqueConsumerId=t1.UniqueConsumerId and t2.DistributorID=t1.DistributorID  
	End  
  
	Begin   -- Insert which are not added previosly (expecting zero records in this section  
		declare @RtnValue int =0  
		insert into sds.tblConsumerDetails(DistributorID,UniqueConsumerId,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,AreaName,  
		Latitude,Longitude,InArea,InCluster,inTradingArea,ClusterId,Source,MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime,  
		IsVerified,AddressConfirmed,AreaConfirmed,LocationConfirmed,DistanceFromAgency,DistanceFromGodown)  
  
		SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo,   
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,  
			newc.Latitude, newc.Longitude, newc.InArea, newc.InCluster, newc.inTradingArea ,InClusterId, 'AUTO', c.LastUpdateDateTime,   
			c.LastUpdateDateTime, c.LastUpdateDateTime, getdate(),  
			newc.InCluster,newc.InCluster,newc.InCluster,newc.InCluster,newc.DistanceAgency,newc.DistanceGodown  
		FROM @consumerDtlstbl newc   
			INNER join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId  
			inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo   
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)  
			and newc.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID)  
  
		set @RtnValue=@@ROWCOUNT  
	End  
	--Update Distance from Godown and Office

	declare @GLat varchar(50), @GLong  varchar(50), @officeLat  varchar(50), @OfficeLong varchar(50)
	select @GLat=Latitude, @GLong=Longitude from SDS.tblDistributorGodown 
	where DistributorId=@DistributorID and ActiveFlag='Y' and Latitude is not null and Longitude is not null order by GodownId desc
	select @officeLat=DLat, @OfficeLong=DLong from SDS.tblDistributorLocation where DistributorId=@DistributorID and DLat is not null and DLong is not null

	--WHEN Latitude BETWEEN -90 AND 90 AND Longitude BETWEEN -180 AND 180 THEN 'Valid'

	if(@GLat is not null and @GLong is not null and (convert(decimal(12,9),@GLat) between -90.0 and 90.0) and (convert(decimal(12,9),@GLong) between -180.0 and 180.0))
	Begin
		UPDATE sds.tblConsumerDetails   
		SET DistanceFromGodown=((geography:: Point(isnull(@GLat,0), isnull(@GLong,0),4326)).STDistance(geography::Point(isnull(newc.Latitude,0),isnull(newc.Longitude,0), 4326)))  
		FROM   sds.tblConsumerDetails t2 inner join  @consumerDtlstbl newc  on t2.UniqueConsumerId=newc.UniqueConsumerId 
		where DistributorId=@DistributorID and newc.Latitude is not null or newc.Longitude is not null
		and (convert(decimal(12,9),newc.Latitude) between -90.0 and 90.0) and (convert(decimal(12,9),newc.Longitude) between -180.0 and 180.0)
	End
	if(@officeLat is not null and @OfficeLong is not null and (convert(decimal(12,9),@officeLat) between -90.0 and 90.0) and (convert(decimal(12,9),@OfficeLong) between -180.0 and 180.0))
	Begin
		UPDATE sds.tblConsumerDetails   
		SET DistanceFromAgency=((geography:: Point(isnull(@officeLat,0), isnull(@OfficeLong,0),4326)).STDistance(geography::Point(isnull(newc.Latitude,0),isnull(newc.Longitude,0), 4326)))  
		FROM   sds.tblConsumerDetails t2 inner join  @consumerDtlstbl newc  on t2.UniqueConsumerId=newc.UniqueConsumerId 
		where DistributorId=@DistributorID and newc.Latitude is not null or newc.Longitude is not null
		and (convert(decimal(12,9),newc.Latitude) between -90.0 and 90.0) and (convert(decimal(12,9),newc.Longitude) between -180.0 and 180.0)
	End

END  
  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerDeviationRpt]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc  [SDS].[usp_ConsumerDeviationRpt]  
--DECLARE  
@FromDate datetime,     
@ToDate datetime,  
@ConsumerNo nvarchar(50),  
@DistributorID int,
@AreaRefNo nvarchar(25)
--set @FromDate='2024-01-20';set @ToDate='2024-01-31';set @ConsumerNo='615865'; set @DistributorID=14193  
As  
  
BEGIN  
	IF(@FromDate is null) set @FromDate=getdate()
	IF(@ToDate is null) set @ToDate=getdate()
	BEGIN  
		select cd.UniqueConsumerId, cd.DistributorID, cd.ConsumerNo,SDS.fn_CamelCase( cd.ConsumerName ) as ConsumerName, cd.MobileNo,  
			SDS.fn_CamelCase(cd.Address) as ConsumerAddress, cd.Pin, cd.AreaRefNo,SDS.fn_CamelCase( cd.AreaName ) as AreaName,  
			isnull(cd.Isverified,0) Isverified,cd.Latitude,cd.Longitude,cd.Source, 
			cl.VitranLatitude1,cl.VitranLongitude1,cl.VitranLastUpdateDateTime1,
			Convert(bigint,ROUND(cl.Distance, 0)) AS Deviation, ac.AreaClusterId AS ClusterId
		FROM sds.tblConsumerDetails cd  WITH (nolock)  
			LEFT OUTER JOIN  sds.tblConsumerLocationHistoryNew AS cl WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId   
			LEFT OUTER JOIN SDS.tblAreaClusterMapping ac WITH(NOLOCK) ON ac.AreaRefNo=cd.AreaRefNo  
		WHERE cd.DistributorID=@DistributorID and (cd.ConsumerNo=@ConsumerNo or isnull(@ConsumerNo,'')='') and
			(cd.AreaRefNo=@AreaRefNo or isnull(@AreaRefNo,'0')='0') and
			CAST(cl.VitranLastUpdateDateTime1 as date) between CAST(@FromDate as date) AND CAST(@ToDate as date)   
	END   
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerGCSequenceNoList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerGCSequenceNoList]
@DistributorId int,
@SourceName nvarchar(50),
@TripSequenceNo int,
@DisplaySequenceNo int,
@Flag nvarchar(10)
as
BEGIN
	IF(@Flag='SELECT')
	BEGIN
		SELECT GCSeqNoId, DistributorId, SourceName, TripSequenceNo, DisplaySequenceNo, lastUpdatedBy, LastUpdateDatetime
		FROM SDS.tblConsumerGCSequenceNo
		--WHERE DistributorId=@DistributorId
	END
	ELSE IF(@Flag='UPDATE')
	BEGIN
		UPDATE SDS.tblConsumerGCSequenceNo
		SET TripSequenceNo=@TripSequenceNo,DisplaySequenceNo=@DisplaySequenceNo,LastUpdateDatetime=GETDATE()
		WHERE SourceName=@SourceName --AND DistributorId=@DistributorId

		SELECT GCSeqNoId, DistributorId, SourceName, TripSequenceNo, DisplaySequenceNo, lastUpdatedBy, LastUpdateDatetime
		FROM SDS.tblConsumerGCSequenceNo
	END
END




GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumersForDistCal]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_ConsumersForDistCal]
--declare
@DistributorId bigint,
@TripId bigint
as
 --set @DistributorId= '14145'; set @TripId='27840'
BEGIN
select tp.TripId,tp.TripDate,tp.TripNo,tp.ClusterId,tp.GLatitude,tp.GLongitude,tp.StaffName,
tpd.UniqueConsumerId,
cd.Latitude,cd.Longitude
 from SDS.tblTripPlanning tp with(nolock) inner join sds.tblTripPlanningDetails tpd with(nolock) on tp.TripId=tpd.TripId
inner join sds.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId=tpd.UniqueConsumerId
WHERE tp.DistributorId=@DistributorId  and tp.TripId=@TripId order by tpd.SequenceNo asc
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerVerificationStatusDataUpdate]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ConsumerVerificationStatusDataUpdate] 
--declare
@DeliveryDate datetime
--set @DeliveryDate='2020-11-30'

as

BEGIN
SET FMTONLY OFF

--select * from sds.tblConsumerVerificationStatusPendingBooking

	declare @tblDistributor table (id int identity, DistributorId int)
	insert into @tblDistributor select DistributorId from sds.tblOnBoardingCompleted where  IsOnBoardingStage1=2  --- DistributorId in (14193,14145,15139)
	
	declare @DId int, @c int, @c1 int, @GroupCode VARCHAR(3)='', @strquery varchar(max)=''
	select @c1=isnull(max(id),0) from @tblDistributor
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0; set @GroupCode=''; set @strquery=''
		select @DId=DistributorId from @tblDistributor where id=@c
				
		SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DId
		if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

		if not exists(select 1 from sds.tblConsumerVerificationStatusPendingBooking where DistributorId=@DId and cast(StatusDate as date)=cast(getdate() as date))
		Begin
			set @strquery=( '
			insert into sds.tblConsumerVerificationStatusPendingBooking (DistributorId, StatusDate, TotalCount, InC_Opening,InC_Closing,OC_Opening,OC_Done,OC_Closing,OT_Opening,OT_Done,OT_Closing,LastUpdatedOn)

			select c.DistributorId, getdate(), count(o.UniqueConsumerId) Total,
			sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 1 else 0 end) InCluster, 0,
			sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 0 else 1 end) OutCluster, 0,0,
			sum(case when (isnull(cd.inTradingArea,0)=1) then 0 else 1 end) OutTradingArea,0,0,getdate()
			from sds.tblClusterMaster c WITH (NOLOCK) left outer join SDS.tblAreaClusterMapping acm with(nolock) on c.ClusterId=acm.AreaClusterId
			left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on acm.AreaRefNo=o.AreaRefNo
			INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode 
			INNER JOIN sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
			left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId
			where c.IsActive=''Y'' and cd.ConsumerStatus=''Active'' AND (o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN''))
			and c.DistributorId= '+convert(nvarchar(25),@DId)+'  
			group by c.DistributorId ' )

			print @strquery
			exec (@strquery)
		End
		else
		Begin
			set @strquery=( ' update sds.tblConsumerVerificationStatusPendingBooking set InC_Closing=o.InCluster, OC_Closing=o.OutCluster, OT_Closing=o.OutTradingArea, LastUpdatedOn=getdate()
				from sds.tblConsumerVerificationStatusPendingBooking t1 inner join 
				(select c.DistributorId, count(o.UniqueConsumerId) Total,
				sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 1 else 0 end) InCluster, 
				sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 0 else 1 end) OutCluster, 
				sum(case when (isnull(cd.inTradingArea,0)=1) then 0 else 1 end) OutTradingArea
				from sds.tblClusterMaster c WITH (NOLOCK) left outer join SDS.tblAreaClusterMapping acm with(nolock) on c.ClusterId=acm.AreaClusterId
				left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on acm.AreaRefNo=o.AreaRefNo
				INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode 
				INNER JOIN sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
				left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId
				where c.IsActive=''Y'' and cd.ConsumerStatus=''Active'' AND (o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN''))
				and c.DistributorId= '+convert(nvarchar(25),@DId)+' group by c.DistributorId 
				) o on t1.DistributorId=o.DistributorId  
				where t1.DistributorId= '+convert(nvarchar(25),@DId)+' and cast(StatusDate as date)=cast(getdate() as date)
				' )

			print @strquery
			exec (@strquery)

			update sds.tblConsumerVerificationStatusPendingBooking 
			set	OC_Done= OC_Opening-OC_Closing, 
				OT_Done=OT_Opening-OT_Closing
			where DistributorId= @DId and cast(StatusDate as date)=cast(getdate() as date)

		End

		--  select * from sds.tblConsumerVerificationStatusLastDelivered

		if not exists(select 1 from sds.tblConsumerVerificationStatusLastDelivered where DistributorId=@DId and cast(StatusDate as date)=cast(getdate() as date))
		Begin
			insert into sds.tblConsumerVerificationStatusLastDelivered(DistributorId,StatusDate,TotalCount,InC_Opening,InC_Closing,OC_Opening,OC_Done,OC_Closing,OT_Opening,OT_Done,OT_Closing,LastUpdatedOn)
			select cm.DistributorId, getdate(), count(cm.UniqueConsumerId) Total,
			sum(case when (isnull(cd.InCluster,0)=1) then 1 else 0 end) InCluster, 0,
			sum(case when (isnull(cd.InCluster,0)=1) then 0 else 1 end) OutCluster,0,0, 
			sum(case when (isnull(cd.inTradingArea,0)=1) then 0 else 1 end) OutTradingArea,0,0, getdate()			
			from DCMS.tblDeliveryBoyRefillOrder cm with (nolock) 
			left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = cm.UniqueConsumerId
			where cd.ConsumerStatus='Active' and cm.DistributorId= @DId and cast(cm.ActualDeliveryDate as date) = cast(@DeliveryDate as date)
			group by cm.DistributorId

		End
		else
		Begin
			 update sds.tblConsumerVerificationStatusLastDelivered set InC_Closing=o.InCluster, OC_Closing=o.OutCluster, OT_Closing=o.OutTradingArea, LastUpdatedOn=getdate()
				from sds.tblConsumerVerificationStatusPendingBooking t1 inner join 
				(select cm.DistributorId, count(cm.UniqueConsumerId) Total,
					sum(case when (isnull(cd.InCluster,0)=1) then 1 else 0 end) InCluster, 
					sum(case when (isnull(cd.InCluster,0)=1) then 0 else 1 end) OutCluster, 
					sum(case when (isnull(cd.inTradingArea,0)=1) then 0 else 1 end) OutTradingArea			
					from DCMS.tblDeliveryBoyRefillOrder cm with (nolock) 
					left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = cm.UniqueConsumerId
					where cd.ConsumerStatus='Active' and cm.DistributorId= @DId and cast(cm.ActualDeliveryDate as date) = cast(@DeliveryDate as date)
					group by cm.DistributorId 
				) o on t1.DistributorId=o.DistributorId  
				where t1.DistributorId= @DId and cast(t1.StatusDate as date)=cast(getdate() as date)
			
			update sds.tblConsumerVerificationStatusLastDelivered 
			set	OC_Done= OC_Opening-OC_Closing, 
				OT_Done=OT_Opening-OT_Closing
			where DistributorId= @DId and cast(StatusDate as date)=cast(getdate() as date)

		End


	set @c=@c+1
	End

END


GO
/****** Object:  StoredProcedure [SDS].[usp_ConsumerVerificationStatusSchedulerData]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_ConsumerVerificationStatusSchedulerData]
as
BEGIN
	     SELECT pb.DistributorId, d.DistributorName, pb.StatusDate PBStatusDate,
	     ISNULL(pb.TotalCount,0) PBTotalCount, ISNULL(pb.InC_Opening,0) PBInC_Opening, 
	     ISNULL(pb.InC_Closing,0) PBInC_Closing, ISNULL(pb.OC_Opening,0) PBOC_Opening, 
		 ISNULL(pb.OC_Done,0) PBOC_Done, ISNULL(pb.OC_Closing,0) PBOC_Closing,
		 ISNULL(pb.OT_Opening,0) PBOT_Opening, ISNULL(pb.OT_Done,0) PBOT_Done,  
		 ISNULL(pb.OT_Closing,0) PBOT_Closing, pb.LastUpdatedOn PBLastUpdatedOn,
		 yd.StatusDate YDStatusDate, ISNULL(yd.TotalCount,0) YDTotalCount, 
		 ISNULL(yd.InC_Opening,0) YDInC_Opening, ISNULL(yd.InC_Closing,0) YDInC_Closing, 
		 ISNULL(yd.OC_Opening,0) YDOC_Opening, ISNULL(yd.OC_Done,0) YDOC_Done,
		 ISNULL(yd.OC_Closing,0) YDOC_Closing, 	ISNULL(yd.OT_Opening,0) YDOT_Opening,
		 ISNULL(yd.OT_Done,0) YDOT_Done, ISNULL(yd.OT_Closing,0) YDOT_Closing,
		 yd.LastUpdatedOn YDLastUpdatedOn,0 CummulativeVerified
	     FROM  SDS.tblConsumerVerificationStatusPendingBooking AS pb INNER JOIN DCMS.tblDistributorMaster AS d ON pb.DistributorId = d.DistributorId
	     left outer join (
		SELECT DistributorId, StatusDate, TotalCount, InC_Opening, InC_Closing, OC_Opening, OC_Done, OC_Closing, OT_Opening, OT_Done, OT_Closing, LastUpdatedOn
		FROM  SDS.tblConsumerVerificationStatusLastDelivered where cast(StatusDate as date)= cast(getdate() as date)
	    ) yd on pb.DistributorId=yd.DistributorId and cast(pb.StatusDate as date)=cast(yd.StatusDate as date)

	   where cast(pb.StatusDate as date)=cast(getdate() as date)
END


GO
/****** Object:  StoredProcedure [SDS].[usp_CreateLogin]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_CreateLogin]
@Username nvarchar(50),
@Password nvarchar(500),
@EncryptedPassword nvarchar(500),
@RoleId int,
@RefNo bigint,
@DisplayName nvarchar(500),
@Status char(1),
@FlagIds nvarchar(50),
@FlagValues nvarchar(50),
@Operation varchar(20),
@RtnResult bigint output

as		
BEGIN	
SET FMTONLY OFF
	SET @RtnResult=0;
	if(@Operation ='ADD')
	BEGIN
		IF NOT EXISTS(SELECT 1 FROM SDS.tblUser WITH(NOLOCK) WHERE RefNo= @RefNo and UserName =@Username and Status = 'Y')
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM SDS.tblUser WITH(NOLOCK) WHERE RefNo= @RefNo and UserName =@Username)
			BEGIN
				Insert Into SDS.tblUser(RoleId,RefNo,DisplayName,UserName,Password,EncryptPassword,Status)
				values (@RoleId,@RefNo,@DisplayName,@Username,@Password,@EncryptedPassword,'Y') 
				set @RtnResult = SCOPE_IDENTITY();
			END
			ELSE
			BEGIN
				UPDATE SDS.tblUser SET Status = 'Y', LastUpdatedDate =GETDATE() where RefNo =@RefNo
				SET @RtnResult = @@ROWCOUNT
			END

			---- Add flags for Distributors
			if(@RtnResult>0 and @RoleId = 3)
			Begin
				IF OBJECT_ID('tempdb..#tbl1') IS NOT NULL DROP TABLE #tbl1
				IF OBJECT_ID('tempdb..#tbl2') IS NOT NULL DROP TABLE #tbl2
				create table #tbl1 (id int identity, keyid nvarchar(20))
				create table #tbl2 (id int identity, keyvalue nvarchar(10))

				insert into #tbl1(keyid) select VALUE from sds.fn_StringSplit(@FlagIds,',')
				insert into #tbl2(keyvalue) select  VALUE from sds.fn_StringSplit(@FlagValues,',')

				if exists(select 1 from sds.tblDistributorConfigSetup where DistributorId=@RefNo ) 
					Delete from sds.tblDistributorConfigSetup where DistributorId=@RefNo 

				insert into sds.tblDistributorConfigSetup(DistributorId,ConfigId,ConfigValue)
				select @RefNo,keyid,keyvalue from #tbl1 inner join #tbl2 on #tbl1.id=#tbl2.id

				drop table #tbl1;	drop table #tbl2
			End

			---- Add On Boarding table entry for check
			if(@RtnResult>0 and @RoleId = 3)
			Begin
				if not exists(select 1 from sds.tblOnBoardingCompleted where DistributorId=@RefNo)
					insert into sds.tblOnBoardingCompleted(DistributorId,UserId,step1, step2,step3,step4,step5,step6,step7,step8,
						IsOnBoardingStage1,IsOnBoardingStage2,Remark1,ActivatedOn,LastUpdatedOn) 
					values(@RefNo, @RtnResult, 0,0,0,0,0,0,0,0,0,0,'',Getdate(),Getdate())
				else
					update sds.tblOnBoardingCompleted set step1=0, step2=0,step3=0,step4=0,step5=0,step6=0,step7=0,step8=0,IsOnBoardingStage1=0, LastUpdatedOn=getdate() 
					where DistributorId=@RefNo
			End
		END	
		ELSE
		BEGIN
			SET @RtnResult =-2;
		END
	END
	ELSE if(@Operation ='EDIT')
	BEGIN
		UPDATE SDS.tblUser SET Status = 'Y', LastUpdatedDate =GETDATE() where RefNo =@RefNo
		SET @RtnResult = @@ROWCOUNT
		---- change flags for Distributors
		if(@RtnResult>0 and @RoleId = 3)
		Begin
			IF OBJECT_ID('tempdb..#tbl11') IS NOT NULL DROP TABLE #tbl11
			IF OBJECT_ID('tempdb..#tbl22') IS NOT NULL DROP TABLE #tbl22
			create table #tbl11 (id int identity, keyid nvarchar(20))
			create table #tbl22 (id int identity, keyvalue nvarchar(10))

			insert into #tbl11(keyid) select VALUE from sds.fn_StringSplit(@FlagIds,',')
			insert into #tbl22(keyvalue) select  VALUE from sds.fn_StringSplit(@FlagValues,',')

			if exists(select 1 from sds.tblDistributorConfigSetup where DistributorId=@RefNo ) 
				Delete from sds.tblDistributorConfigSetup where DistributorId=@RefNo 

			insert into sds.tblDistributorConfigSetup(DistributorId,ConfigId,ConfigValue)
			select @RefNo,keyid,keyvalue from #tbl11 inner join #tbl22 on #tbl11.id=#tbl22.id

			drop table #tbl11;	drop table #tbl22
		End


	END
	ELSE if(@Operation ='DELETE')
	BEGIN
		UPDATE SDS.tblUser SET Status = 'N', LastUpdatedDate =GETDATE() where RefNo =@RefNo
		SET @RtnResult = @RefNo

		if(@RtnResult>0 and @RoleId = 3)
		Begin
		if exists(select 1 from sds.tblDistributorConfigSetup where DistributorId=@RefNo ) 
			Delete from sds.tblDistributorConfigSetup where DistributorId=@RefNo 
		End
	END
END





GO
/****** Object:  StoredProcedure [SDS].[usp_CreateLoginforSDSIssueTracker]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_CreateLoginforSDSIssueTracker]  
@DistributorId nvarchar(50),  
@DistributorCode nvarchar(50), 
@DistributorName nvarchar(50),  
@SACode nvarchar(20),  
@EmailId nvarchar(50)
as    
BEGIN
	Declare @result int = 0;

	SET FMTONLY OFF  
	IF NOT EXISTS(SELECT * FROM [CRMDBAWS].CRMSDS.tblSDSDistributorMaster WITH(NOLOCK) WHERE DistributorCode= @DistributorCode and DistributorId =@DistributorId and IsDistributorLive='Y')  
	BEGIN
		Insert Into [CRMDBAWS].CRMSDS.tblSDSDistributorMaster(DistributorId,DistributorCode,DistributorName,SACode,TypeName,ContactNo,EmailId,CreatedBy,
		CreateDate,UpdatedBy,IsDistributorLive,LastUpdatedDatetime)  
		values (@DistributorId,@DistributorCode,@DistributorName,@SACode,NULL,NULL,@EmailId,NULL,getdate(),NULL,'Y',getdate())
		--set @RtnResult = SCOPE_IDENTITY();
		--print  @RtnResult;
		if EXISTS(SELECT * FROM [CRMDBAWS].CRMSDS.tblSDSDistributorMaster WITH(NOLOCK) WHERE DistributorCode= @DistributorCode and DistributorId =@DistributorId and IsDistributorLive='Y')
		BEGIN
			IF NOT EXISTS(SELECT * FROM [CRMDBAWS].CRMSDS.tblUserLogin WITH(NOLOCK) WHERE RefNo = @DistributorId)  
			BEGIN
				Declare @Password int = 12345;
				Declare @EncryptPassword nvarchar(50) ='Wj7VoVOy/+7ytLNAvim/Yw==';
				Insert Into [CRMDBAWS].CRMSDS.tblUserLogin(RoleId, RefNo, DisplayName,UserName,Password,EncryptPassword,Status,LastUpdatedDate)  
				values ('3',@DistributorId,@DistributorName,@DistributorCode,@Password,@EncryptPassword,'Y',getdate())
				set @result = SCOPE_IDENTITY();
				--select @result as result;

			END 	
		END 	
	END 
	Else
	Begin
		SELECT @result=UserId FROM [CRMDBAWS].CRMSDS.tblUserLogin WITH(NOLOCK) WHERE RefNo = @DistributorId

	End

	select @result as result;
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_CreateLogs]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_CreateLogs]
@Source varchar(20),
@Method varchar(10),
@ExecutionType varchar(100),
@ControllerActionName varchar(100),
@URL varchar(MAX),
@DisplayName varchar(50),
@RefNo varchar(50),
@RoleId varchar(10),
@Parameters varchar(MAX),
@LogStatus varchar(50),
@Exception varchar(MAX),
@LogDateTime datetime,
@RtnValue bigint output
As

Begin

	Begin Try
		insert into SDS.tblLogs
					(Source,Method,ExecutionType,ControllerActionName,
					URL,DisplayName,RefNo,RoleId,
					Parameters,LogStatus,Exception,LogDateTime)
					values
					(@Source,@Method,@ExecutionType,@ControllerActionName,@URL,
					@DisplayName,@RefNo,@RoleId,@Parameters,
					@LogStatus,@Exception,@LogDateTime)
			set @RtnValue=SCOPE_IDENTITY()
	End Try

	Begin Catch
	set @RtnValue= -1
	End Catch
End



GO
/****** Object:  StoredProcedure [SDS].[usp_DailySchedulerDataCheck]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DailySchedulerDataCheck]

as
BEGIN
SET FMTONLY OFF

	if exists(select 'DCMS.tblRefillOrderDtls$'+g.GroupCode from DCMS.tblDistributorGroupDetails g inner join DCMS.tblDistributorMaster d on g.DistributorId=d.DistributorId
	where 'DCMS.tblRefillOrderDtls$'+g.GroupCode not in (select TableName from sds.tblSchedulerTableList))
	Begin
		INSERT INTO SDS.tblSchedulerTableList(TableName,FreqTime,RecCount,IsActive) select 'DCMS.tblRefillOrderDtls$'+g.GroupCode,'D',0,1 
		from dcms.tblDistributorGroupDetails g inner join DCMS.tblDistributorMaster d on g.DistributorId=d.DistributorId
		where 'DCMS.tblRefillOrderDtls$'+g.GroupCode not in (select TableName from sds.tblSchedulerTableList)
	End

	declare @tbl nvarchar(500), @str1 varchar(max), @str2 varchar(max), @c int=0, @c1 int=0, @tblExists int=0
	select @c1=max(pkid) from sds.tblSchedulerTableList where isactive=1

	while (@c<=@c1)
	Begin
		set @tbl=''; select @tbl=tablename from sds.tblSchedulerTableList where pkId=@c and isactive=1

		if exists(select 1 from sys.objects where type='u' and name=replace(@tbl,'dcms.','')) set @tblExists=1 else set @tblExists=0
		print @tbl+'    '+ convert(nvarchar(10),@tblExists)
		if (isnull(@tbl,'')<>'' and @tblExists=1)
		Begin
			set @str1= (' update sds.tblSchedulerTableList set RecCount =(select count(1) from '+@tbl+') where tablename = '''+@tbl+'''')
			exec (@str1);

			print @str1
			exec (@str1);

			set @str2= ('  IF COL_LENGTH('''+@tbl+''', ''SchDataInsertedOn'') IS NOT NULL 
				update sds.tblSchedulerTableList set SchDataInsertedOn =(select max(SchDataInsertedOn) from '+@tbl+') where tablename = '''+@tbl+'''') 
			exec (@str2);
		End
	set @c=@c+1
	End

	SELECT  TableName as Query, SchDataInsertedOn LastUpdatedDate,
	(case	when (upper(FreqTime)='M' and cast(SchDataInsertedOn as date)>=cast(dateadd(m,-1,getdate()) as date)) then 'YES' 
			when (upper(FreqTime)='M' and cast(SchDataInsertedOn as date)<cast(dateadd(m,-1,getdate()) as date)) then 'NO'
			when (upper(FreqTime)='D' and cast(SchDataInsertedOn as date)=cast(getdate() as date)) then 'YES' 
			when (upper(FreqTime)='D' and cast(SchDataInsertedOn as date)<>cast(getdate() as date)) then 'NO'  
			else '' end) TodayStatus,
	(case when upper(FreqTime)='M' then 'MONTHLY' when upper(FreqTime)='D' then 'DAILY' else '' end) Frequency
	FROM SDS.tblSchedulerTableList 	where IsActive=1
	order by TodayStatus

END

GO
/****** Object:  StoredProcedure [SDS].[usp_DefectiveByGodownAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_DefectiveByGodownAddEdit]
@pkDefectiveId	bigint,
@DistributorId	int,
@ItemId	int,
@PriceCode	int,
@DefectiveQty	int,
@LastUpdatedBy	numeric(17, 0),
@RtnValue bigint output

as
BEGIN
	if (isnull(@pkDefectiveId,0)=0)
	Begin
		insert into sds.tblDefectiveByGodown(DistributorId,EntryDate,ItemId,PriceCode,DefectiveQty,LastUpdatedBy,LastUpdatedOn)
		values(@DistributorId,getdate(),@ItemId,@PriceCode,@DefectiveQty,@LastUpdatedBy,getdate())

		set @RtnValue=SCOPE_IDENTITY()

		if(isnull(@PriceCode,0)>0)
		begin
			-- Distributor System Stock Update
			declare @FilledQtyS int
			set @FilledQtyS=(-1)*@DefectiveQty
			exec sds.usp_DistributorSystemStockUpdate  @DistributorId,@PriceCode,@FilledQtyS,@DefectiveQty,@LastUpdatedBy,0
		End
		--  Godown Stock Update
		declare @FilledQty int
		set @FilledQty=(-1)*@DefectiveQty
		exec sds.usp_DistributorStockUpdate @DistributorId,@ItemId,@FilledQty,0,@DefectiveQty,@LastUpdatedBy,0
	End
	else
	Begin
		declare @FilledQtyPrev int, @DefectiveQtyPrev int 
		select @DefectiveQtyPrev=DefectiveQty from sds.tblDefectiveByGodown Where pkDefectiveId=@pkDefectiveId

		update sds.tblDefectiveByGodown
		set DefectiveQty=@DefectiveQty,
			PriceCode=@PriceCode,
			LastUpdatedBy=@LastUpdatedBy,
			LastUpdatedOn=getdate()
		Where pkDefectiveId=@pkDefectiveId

		set @RtnValue=@pkDefectiveId

		if(isnull(@PriceCode,0)>0)
		begin
			-- Distributor System Stock Update
			declare @EFilledQtyS int, @EDefectiveQtyS int
			set @EDefectiveQtyS=@DefectiveQty-@DefectiveQtyPrev
			set @EFilledQtyS=(@EDefectiveQtyS)*(-1)			

			exec sds.usp_DistributorSystemStockUpdate  @DistributorId,@PriceCode,@EFilledQtyS,@EDefectiveQtyS,@LastUpdatedBy,0
		End
		--  Godown Stock Update
		declare @EFilledQty int, @EDefectiveQty int
		set @EDefectiveQty=@DefectiveQty-@DefectiveQtyPrev
		set @EFilledQty=(@EDefectiveQty)*(-1)

		exec sds.usp_DistributorStockUpdate @DistributorId,@ItemId,@EFilledQty,0,@EDefectiveQty,@LastUpdatedBy,0
	End
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DefectiveByGodownList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DefectiveByGodownList]
@DistributorId int,
@FromDate Datetime,
@ToDate Datetime

as

SELECT d.pkDefectiveId,d.EntryDate, d.DistributorId, d.ItemId, d.PriceCode, d.DefectiveQty, d.LastUpdatedBy, d.LastUpdatedOn,SDS.fn_CamelCase( i.ItemDescription ) as ItemDescription,SDS.fn_CamelCase( i.ItemShortDescription ) as ItemShortDescription 
FROM SDS.tblDefectiveByGodown AS d INNER JOIN SDS.tblItemCodeMaster i ON d.ItemId = i.ItemId 
where d.DistributorId=@DistributorId 
and (cast(d.EntryDate as date) >=cast(@FromDate as date) or @FromDate is null)
and (cast(d.EntryDate as date) <=cast(@ToDate as date) or @ToDate is null)
order by d.EntryDate



GO
/****** Object:  StoredProcedure [SDS].[usp_DelBoyConsumerRecorrectionCount]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DelBoyConsumerRecorrectionCount]  
--declare  
@DistributorId int  
  
--set @DistributorId=14145;   
as  
  
BEGIN  
	set fmtonly off  
	DECLARE @GroupCode VARCHAR(3)=''  
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
	if(ISNULL(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  
  
	IF OBJECT_ID('tempdb..#tblPendingOrders') IS NOT NULL DROP TABLE #tblpendingOdr  
	CREATE TABLE #tblPendingOrders (DistributorId int,UniqueConsumerId numeric(17, 0),AreaRefNo numeric(17,0))  
  
	DECLARE @Str VARCHAR(MAX)= '  
		INSERT INTO #tblPendingOrders(DistributorId,UniqueConsumerId,AreaRefNo)  
		SELECT DistributorId,UniqueConsumerId,AreaRefNo FROM DCMS.tblRefillOrderDtls'+ @GroupCode +' ro  WITH (NOLOCK)  
		WHERE ro.DistributorId='+ CAST(@DistributorId AS varchar)+''  
	EXEC (@Str)  
  
	SELECT r.DistributorId,ds.StaffRefNo,ds.StaffName,COUNT(r.UniqueConsumerId) AS TotalConsumers,  
		SUM(CASE WHEN cm.IsVerified=1 THEN 1 ELSE 0 END) AS Verified,  
		SUM(CASE WHEN cm.Source='AUTO'  and isnull(cm.Isverified,0)=0 THEN 1 ELSE 0 END) AS TobeVerify,  
		SUM(CASE WHEN cm.InCluster=1 AND cm.ClusterId=AC.AreaClusterId THEN 1 ELSE 0 END) AS InsideCluster,  
		SUM(CASE WHEN IsNULL(cm.ClusterId,0)<>ISNULL(ac.AreaClusterId,0) THEN 1 ELSE 0 END) AS OutsideCluster,  
		SUM(CASE WHEN cm.inTradingArea=0 and cm.Latitude is not null AND cm.Latitude <>'' THEN 1 ELSE 0 END) AS OutsideTA,  
		SUM(CASE WHEN cm.Latitude is null OR cm.Latitude ='' THEN 1 ELSE 0 END) AS NotFound,  
		AC.AreaClusterId as ClusterId  
	FROM #tblPendingOrders r LEFT OUTER JOIN  
		[SDS].[tblConsumerDetails] cm ON cm.UniqueConsumerId=r.UniqueConsumerId LEFT OUTER JOIN  
		[SDS].[tblAreaClusterMapping] ac ON ac.AreaRefNo = r.AreaRefNo LEFT OUTER JOIN  
		[SDS].[tblDeliveryBoyClusterMapping] dcm ON dcm.ClusterId=ac.AreaClusterId LEFT OUTER JOIN  
		[DCMS].[tblDistributorStaffDetails] ds ON ds.StaffRefNo=dcm.StaffRefNo  
	WHERE r.DistributorId=@DistributorId AND cm.ConsumerName IS NOT NULL AND ds.StaffName IS NOT NULL  
	GROUP BY r.DistributorId,ds.StaffRefNo,ds.StaffName,AC.AreaClusterId  
  
	DROP TABLE #tblPendingOrders  
  
END  
  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DelBoyDeliveryCountDatewise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DelBoyDeliveryCountDatewise]
--declare
@DeliveryBoyRefNo numeric(17,0),
@DistributorId Bigint,
@Tdate datetime 

--set @DeliveryBoyRefNo=12311419300000009 set @DistributorId=14193; set @Tdate=GETDATE()
AS

BEGIN
	set fmtonly off
	declare @TotalOrder int, @CompletedOrder int, @PendingOrder int
	declare @DeliveredOrder int,@DeniedOrder int,@NotAvailableOrder int,@SkipOrder int

	select @TotalOrder= count(*),
	@PendingOrder=sum(case when (d.OrderStatus = '0' or d.OrderStatus = 'OPEN' or d.OrderStatus = 'APRN' or d.OrderStatus = 'AGEN' ) then 1 else 0 end),
	@CompletedOrder=SUM(case when d.OrderStatus IN('DLVD','Denied','NotAvailable') then 1 else 0 end),
	@DeliveredOrder=sum(CASE WHEN d.OrderStatus='DLVD' THEN 1 ELSE 0 END),
	@DeniedOrder=sum(CASE WHEN d.OrderStatus='DLVD' THEN 1 ELSE 0 END),
	@NotAvailableOrder=sum(CASE WHEN d.OrderStatus='NotAvailable' THEN 1 ELSE 0 END),
	@SkipOrder=sum(CASE WHEN d.OrderStatus='SKIP' THEN 1 ELSE 0 END)

	FROM SDS.tblTripPlanning AS t with (nolock) left outer join sds.tblTripPlanningDetails d with (nolock) on t.TripId =d.TripId
	where t.DistributorId=@DistributorId and t.StaffRefNo=@DeliveryBoyRefNo and cast(t.tripdate as date)=cast(ISNULL(@Tdate,GETDATE()) as date)
	group by DistributorId,StaffRefNo

	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max), @OldBkgCnt int, @TodayBkgCnt int, @TotalBkgCnt int 
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode 
	IF OBJECT_ID('tempdb..#tblOdrs') IS NOT NULL DROP TABLE #tblOdrs  
	CREATE TABLE #tblOdrs(id int identity,DistributorID int,StaffRefNo numeric(17,0), TotalOrder int, OldOrders int, TodaysOrder int)

	set @strquery=( '  
		insert into #tblOdrs (DistributorID,StaffRefNo, TotalOrder, OldOrders, TodaysOrder)  
			
		Select o.DistributorID, dc.StaffRefNo, count(o.OrderRefNo) TotalCnt,
			sum(case when cast(o.OrderDate as date)<cast(getdate() as date) then 1 else 0 end) OldCnt,
			sum(case when cast(o.OrderDate as date)=cast(getdate() as date) then 1 else 0 end) TodayCnt
		From DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK)
			INNER JOIN SDS.tblAreaClusterMapping ac on o.AreaRefNo=ac.AreaRefNo
			INNER join SDS.tblDeliveryBoyClusterMapping dc on ac.AreaClusterId=dc.ClusterId
			Left outer Join 
			(	select t.DistributorId, t.TripId, td.OrderRefNo
				from SDS.tblTripPlanningDetails td with (nolock)  
				INNER JOIN SDS.tblTripPlanning AS t WITH (nolock) ON td.TripId = t.TripId 
				Where t.DistributorId='+convert(nvarchar(25),@DistributorId)+' and CAST(t.TripDate as date)=CAST(getdate() as date) 
			) td on td.OrderRefNo=o.OrderRefNo and td.DistributorId=o.DistributorId
		where o.DistributorID='+convert(nvarchar(25),@DistributorId)+' and dc.StaffRefNo='+convert(nvarchar(25),@DeliveryBoyRefNo)+' 
			and o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') and td.OrderRefNo is null
			group by o.DistributorID, dc.StaffRefNo
		' )  

	print @strquery  
	exec (@strquery) 
	--select * from #tblOdrs
	Select @OldBkgCnt=OldOrders, @TodayBkgCnt =TodaysOrder, @TotalBkgCnt= TotalOrder from #tblOdrs

	select convert(int,@DistributorId) DistributorId, @DeliveryBoyRefNo as DeliveryBoyRefNo, 
	isnull(@TotalOrder,0) TodayOrder,isnull(@PendingOrder,0) PendingOrder,
	isnull(@CompletedOrder,0) CompletedOrder,ISNULL(@DeliveredOrder,0) DeliveredOrder,
	ISNULL(@DeniedOrder,0) DeniedOrder,ISNULL(@NotAvailableOrder,0) NotAvailableOrder,ISNULL(@SkipOrder,0) SkipOrder,
	isnull(@OldBkgCnt,0)OldBkgCnt , isnull(@TodayBkgCnt,0)TodayBkgCnt,isnull(@TotalBkgCnt,0)TotalBkgCnt

	drop table #tblOdrs
END
GO
/****** Object:  StoredProcedure [SDS].[usp_DelBoyWiseUnVerifiedConsumerLst]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
    
CREATE proc [SDS].[usp_DelBoyWiseUnVerifiedConsumerLst]--14145,0,'All'    
--declare    
@DistributorId int,    
@StaffRefNo numeric(17,0),    
@RecordFor nvarchar(20)    
--set @StaffRefNo=0 set @DistributorId=14193;  set @RecordFor=''    
as    
    
BEGIN    
    
set fmtonly off    
 DECLARE @GroupCode VARCHAR(3)=''    
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId    
 if(ISNULL(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode    
     
 IF OBJECT_ID('tempdb..#tblPendingOrders') IS NOT NULL DROP TABLE #tblpendingOdr    
 CREATE TABLE #tblPendingOrders (DistributorId int,UniqueConsumerId numeric(17, 0),AreaRefNo numeric(17,0))    
     
 DECLARE @Str VARCHAR(MAX)= '  INSERT INTO #tblPendingOrders(DistributorId,UniqueConsumerId,AreaRefNo)    
  SELECT DistributorId,UniqueConsumerId,AreaRefNo FROM DCMS.tblRefillOrderDtls'+ @GroupCode +' ro  WITH (NOLOCK)    
  WHERE ro.DistributorId='+ CAST(@DistributorId AS varchar)+''    
 EXEC (@Str)    
    
--  case when ((isnull(sds.fn_1ConsumerLatitude(r.UniqueConsumerId,'D'),'') ='' or isnull(sds.fn_1ConsumerLongitude(r.UniqueConsumerId,'D'),'')='') and isnull(cm.Source,'AUTO')='AUTO') then 'Locate & Confirm'     
--when ((isnull(cm.Latitude,'') <>'' and isnull(sds.fn_1ConsumerLongitude(r.UniqueConsumerId,'D'),'')<>'') and isnull(cm.Source,'AUTO')='AUTO') then 'View & Confirm' else 'View' End Locateflag,   
  
 IF(@RecordFor='All')    
 BEGIN    
  SELECT ds.StaffName,ds.StaffRefNo,r.UniqueConsumerId, ISNULL(cm.DistributorID,0) DistributorID,cm.ConsumerNo,  
   SDS.fn_CamelCase(cm.ConsumerName) as ConsumerName,cm.MobileNo, SDS.fn_CamelCase(cm.Address)as ConsumerAddress,cm.Pin,cm.AreaRefNo,  
   SDS.fn_CamelCase(cm.AreaName)AreaName, cm.PlaceId,isnull(cm.Latitude,'') as Latitude, isnull(cm.Longitude,'')as Longitude,cm.LastUpdatedDatetime,cm.TripGCDate,       
   cm.Source, cm.ConsumerStatus,isnull(cm.InArea,0) as InArea,isnull(cm.InCluster,0) as InCluster,isnull(cm.inTradingArea,-2) as InTradingArea,  
   isnull(cm.Isverified,0) Isverified,IsVerifiedUpdated, cast(cm.MobileNo as nvarchar(50)) as RegMobileNo,  
   ISNULL(cm.AddressConfirmed,0) as AddressConfirmed,ISNULL(cm.AreaConfirmed,0) as AreaConfirmed,ISNULL(cm.LocationConfirmed,0) as LocationConfirmed,   
   ISNULL(ac.AreaClusterId,0) as ClusterId,IsNULL(cm.ClusterId,0) as ConsumerClusterId,  
   cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,        
   cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,        
   cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,        
   cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime,	cl.VitranLatitudeSAFE ,cl.VitranLongitudeSAFE,cl.VitranLastUpdateDateTimeSAFE  
  FROM #tblPendingOrders r LEFT OUTER JOIN    
   SDS.tblConsumerDetails cm ON cm.UniqueConsumerId=r.UniqueConsumerId LEFT OUTER JOIN    
   SDS.tblConsumerLocationHistoryNew cl on cm.UniqueConsumerId = cl.UniqueConsumerId LEFT OUTER JOIN    
   SDS.tblAreaClusterMapping ac ON ac.AreaRefNo = r.AreaRefNo LEFT OUTER JOIN    
   SDS.tblDeliveryBoyClusterMapping dcm ON dcm.ClusterId=ac.AreaClusterId LEFT OUTER JOIN    
   DCMS.tblDistributorStaffDetails ds ON ds.StaffRefNo=dcm.StaffRefNo    
  WHERE r.DistributorId=@DistributorId AND (ds.StaffRefNo=@StaffRefNo or @StaffRefNo = 0) AND ds.StaffRefNo IS NOT NULL --and isnull(cm.Isverified,0)=0    
   AND cm.ConsumerName IS NOT NULL    
 END     
 ELSE     
 BEGIN    
  SELECT ds.StaffName,ds.StaffRefNo,r.UniqueConsumerId, ISNULL(cm.DistributorID,0) DistributorID,cm.ConsumerNo,  
   SDS.fn_CamelCase(cm.ConsumerName) as ConsumerName, cm.MobileNo,SDS.fn_CamelCase(cm.Address)as ConsumerAddress,cm.Pin,    
   cm.AreaRefNo,SDS.fn_CamelCase(cm.AreaName)AreaName,cm.PlaceId,isnull(cm.Latitude,'') as Latitude,   
   isnull(cm.Longitude,'')as Longitude,cm.LastUpdatedDatetime,cm.TripGCDate, cm.Source, cm.ConsumerStatus,isnull(cm.InArea,0) as InArea,  
   isnull(cm.InCluster,0) as InCluster,isnull(cm.inTradingArea,-2) as InTradingArea,isnull(cm.Isverified,0) Isverified,IsVerifiedUpdated,    
   cast(cm.MobileNo as nvarchar(50)) as RegMobileNo,ISNULL(cm.AddressConfirmed,0) as AddressConfirmed,  
   ISNULL(cm.AreaConfirmed,0) as AreaConfirmed,ISNULL(cm.LocationConfirmed,0) as LocationConfirmed,    
   ISNULL(ac.AreaClusterId,0) as ClusterId,IsNULL(cm.ClusterId,0) as ConsumerClusterId,    
   cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,        
   cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,        
   cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,        
   cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime,
   	cl.VitranLatitudeSAFE ,cl.VitranLongitudeSAFE,cl.VitranLastUpdateDateTimeSAFE     
  FROM #tblPendingOrders r LEFT OUTER JOIN    
   SDS.tblConsumerDetails cm ON cm.UniqueConsumerId=r.UniqueConsumerId LEFT OUTER JOIN    
   SDS.tblConsumerLocationHistoryNew cl on cm.UniqueConsumerId = cl.UniqueConsumerId LEFT OUTER JOIN    
   SDS.tblAreaClusterMapping ac ON ac.AreaRefNo = r.AreaRefNo LEFT OUTER JOIN    
   SDS.tblDeliveryBoyClusterMapping dcm ON dcm.ClusterId=ac.AreaClusterId LEFT OUTER JOIN    
   DCMS.tblDistributorStaffDetails ds ON ds.StaffRefNo=dcm.StaffRefNo    
  WHERE r.DistributorId=@DistributorId AND (ds.StaffRefNo=@StaffRefNo or @StaffRefNo = 0) AND ds.StaffRefNo IS NOT NULL and isnull(cm.Isverified,0)=0    
   AND cm.ConsumerName IS NOT NULL    
      
 END    
    
DROP TABLE #tblPendingOrders    
    
END    
    
    
    
    
GO
/****** Object:  StoredProcedure [SDS].[usp_DeleteClusterMaster]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_DeleteClusterMaster]
@DistributorId int, 
@ClusterId int,
@ResultId int output

AS
BEGIN
	
	set @ResultId=0;

	IF EXISTS(SELECT 1 FROM sds.tblClusterMaster WHERE DistributorId=@DistributorId AND clusterid=@ClusterId)
	BEGIN
		if not exists(select * from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId)
		Begin
			delete  from sds.tblDeliveryBoyClusterMapping where clusterid =@ClusterId
			delete  from sds.tblDensityDataClusterwise where DistributorId=@DistributorId and clusterid=@ClusterId
			delete  from sds.tblDistributorClusterwiseBacklog where DistributorId=@DistributorId and clusterid=@ClusterId
			delete  from sds.tblAreaClusterMapping where DistributorId=@DistributorId and AreaClusterId=@ClusterId
			delete  from sds.tblDistributorClusterMajorAreaMapping where DistributorId=@DistributorId and clusterid=@ClusterId
			
			update sds.tblConsumerDetails set InCluster=0, ClusterId=0, AreaConfirmed=0,AddressConfirmed=0,LocationConfirmed=0,IsVerified=0 where ClusterId=@ClusterId

			delete  from sds.tblClusterMaster where DistributorId=@DistributorId and clusterid=@ClusterId
				
			set @ResultId=@@ROWCOUNT
		End
		else
		Begin
			set  @ResultId=-2;
		End
	END
	ELSE 
	BEGIN
		set @ResultId=-1;
	END
	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_DeleteClusterMaster_ACL]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_DeleteClusterMaster_ACL]                
--DECLARE            
@DistributorId INT,               
@ClusterId INT  
            
--SET @DistributorId=;            
--SET @ClusterId=;            
--SET @ResultId=;            
                
AS            
                
BEGIN  
  
  DELETE FROM sds.tblDistributorClusterCoordinates WHERE DistributorId=@DistributorId and AreaClusterId = @ClusterId                     
  DELETE FROM sds.tblDistributorClusterMajorAreaMapping WHERE DistributorId=@DistributorId and clusterid = @ClusterId                   
  DELETE FROM sds.tblClusterAreaFensing WHERE DistributorId=@DistributorId and clusterid = @ClusterId                
  DELETE FROM sds.tblClusterMaster WHERE DistributorId=@DistributorId and clusterid = @ClusterId

  SELECT 1 AS ResultId, @ClusterId AS ClusterId;  
      
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_DeleteClusterMaster_ACL_1]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [SDS].[usp_DeleteClusterMaster_ACL_1] 
@DistributorId int,   
@ClusterId int,  
@ResultId int output  

--set @DistributorId=14193; set @ClusterId=162
  
AS  
BEGIN  
   
 set @ResultId=0;  
  delete from sds.tblDistributorClusterCoordinates where DistributorId=@DistributorId and AreaClusterId = @ClusterId  
  --set @ResultId=isnull(@ResultId,0)+isnull(@@ROWCOUNT,0)  
  delete from sds.tblDistributorClusterMajorAreaMapping where DistributorId=@DistributorId and clusterid = @ClusterId  
  --set @ResultId=isnull(@ResultId,0)+isnull(@@ROWCOUNT,0)  
  delete from sds.tblClusterAreaFensing where DistributorId=@DistributorId and clusterid = @ClusterId  
  --set @ResultId=isnull(@ResultId,0)+isnull(@@ROWCOUNT,0)  
  set @ResultId=1;
  select @ResultId
END  
   
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DeleteVehicleFromDist]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_DeleteVehicleFromDist] 
--declare
@DistributorId int,
@VehicleId bigint,
@RetValue int output
--set @DistributorId=88888; set @VehicleId=10124
AS
BEGIN
	set @RetValue=0
	if	not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and VehicleId=@VehicleId) 
		and not exists(select 1 from sds.tblStockAllotment where DistributorId=@DistributorId and VehicleId=@VehicleId)
		and not exists(select 1 from sds.tblBreakDown where DistributorId=@DistributorId and VehicleId=@VehicleId)
		and not exists(select 1 from sds.tblStockTransfer where DistributorId=@DistributorId and VehicleId=@VehicleId) 
	Begin
		delete from sds.tblVehicleDeliveryBoyMapping  where DistributorId=@DistributorId and VehicleId=@VehicleId
		delete FROM sds.tblVehicleMaster where DistributorId=@DistributorId and VehicleId=@VehicleId

		set @RetValue=1
	End
	else
	Begin
		set @RetValue=-1
	End

	--select @ResultId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DeliveryBoyAreaDeviation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Santosh
-- Create date: 30-12-2019
-- Description:	To Get Delivery Boy Deviation
-- =============================================
CREATE PROCEDURE [SDS].[usp_DeliveryBoyAreaDeviation] 
	@DistributorId int,
	@FromDate datetime,
	@ToDate datetime,
	@StaffRefNo numeric(17,0)=0
AS
BEGIN
	 -- SELECT ro.ActualDeliveryDate as DeliveryDate,ds.StaffName, da.AreaName
  --FROM HPCLDCMS.[DCMS].[tblRefillOrderDtls] ro with(nolock) LEFT OUTER JOIN
		--DCMS.tblCashMemoDtls cm with(nolock) on cm.OrderRefNo = ro.OrderRefNo INNER JOIN
		--DCMS.tblDistributorStaffDetails ds with(nolock) on ds.StaffRefNo = cm.StaffRefNo LEFT OUTER JOIN
		--DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = ro.AreaRefNo AND da.DistributorId = ro.DistributorId
  --where ro.DistributorID=14193 AND CAST(ro.ActualDeliveryDate as date) BETWEEN CAST('2019-12-06' as date) AND CAST('2019-12-06' as date)
  --ORDER BY ds.StaffName
    
select DISTINCT a.DeliveryDate, sds.fn_CamelCase( a.StaffName) StaffName, sds.fn_CamelCase(a.AreaName)AreaName
from
(
(
  SELECT ro.ActualDeliveryDate as DeliveryDate,ds.StaffName, da.AreaName
  FROM HPCLDCMS.[DCMS].[tblRefillOrderDtls] ro with(nolock) LEFT OUTER JOIN
		DCMS.tblCashMemoDtls cm with(nolock) on cm.OrderRefNo = ro.OrderRefNo INNER JOIN
		DCMS.tblDistributorStaffDetails ds with(nolock) on ds.StaffRefNo = cm.StaffRefNo LEFT OUTER JOIN
		DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = ro.AreaRefNo AND da.DistributorId = ro.DistributorId
  where ro.DistributorID=@DistributorId AND CAST(ro.ActualDeliveryDate as date) BETWEEN CAST(@FromDate as date) AND CAST(@ToDate as date)
 	and (cm.StaffRefNo=@StaffRefNo or @StaffRefNo=0) and ro.PriceCode in (select priceCode from sds.tblactiveitems where isnull(Active,'N')='Y')

 ) as a LEFT OUTER JOIN
  (
  SELECT DISTINCT CAST(tp.TripDate as Date) as TripDate, ds.StaffName, da.AreaName
from	SDS.tblTripPlanning tp with(nolock) LEFT OUTER JOIN
		DCMS.tblDistributorStaffDetails ds with(nolock) on tp.StaffRefNo = ds.StaffRefNo LEFT OUTER JOIN
		SDS.tblTripPlanningDetails tpd with(nolock) on tpd.TripId = tpd.TripId LEFT OUTER JOIN
		DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = tpd.AreaRefNo
WHERE	tp.DistributorId = @DistributorId AND CAST(tp.TripDate as Date) BETWEEN CAST(@FromDate as date) AND CAST(@ToDate as date)
	and (tp.StaffRefNo=@StaffRefNo or @StaffRefNo=0)

) as b on a.StaffName <> b.StaffName AND a.AreaName <> b.AreaName AND CAST(a.DeliveryDate as DATE)= CAST(b.TripDate as date))
END


GO
/****** Object:  StoredProcedure [SDS].[usp_DeliveryBoyDeliveryDeviation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----			sds.usp_DeliveryBoyDeliveryDeviation 14193,0,'2019-12-01','2020-01-08'

CREATE proc [SDS].[usp_DeliveryBoyDeliveryDeviation]
--declare 
@DistributorId int, 
@StaffRefNo numeric(17,0), 
@FromDate datetime, 
@ToDate datetime
--set @DistributorId=14193; set @StaffRefNo=11811419300000018; set @FromDate='2019-12-1'; set @ToDate='2019-12-31'
as

BEGIN
set FMTONLY OFF


declare @retData table (id int identity, DelDate datetime, StaffRefNo nvarchar(20), Staffname nvarchar(200), Attended int, Scheduled int, MaxPossDel int, VehId bigint)

insert into @retData(DelDate, StaffRefNo, Staffname, Attended, Scheduled, MaxPossDel,VehId)
select cast(o.ActualDeliveryDate as date) DelDate, isnull(cm.staffrefno,0) staffrefno,'', count(o.orderrefno) Attened, 0, 0 ,0
from DCMS.tblRefillOrderDtls o left outer join DCMS.tblCashMemoDtls cm on o.OrderRefNo=cm.OrderRefNo
where o.DistributorId = @DistributorId and (cast(o.ActualDeliveryDate as date) between cast(@FromDate as date)and  cast(@ToDate as date))
and (cm.staffRefNo=@StaffRefNo or isnull(@StaffRefNo,0)=0) and o.PriceCode in (select priceCode from sds.tblactiveitems where isnull(Active,'N')='Y')
group by cast(o.ActualDeliveryDate as date), isnull(cm.staffrefno,0)

update @retData  set Scheduled=isnull(tr.Scheduled,0), VehId=isnull(tr.VehicleId,0) from @retData a inner join (
select cast(t.TripDate as date) TripDate,count(d.OrderRefNo) Scheduled, t.StaffRefNo, t.VehicleId 
from SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
where t.DistributorId=@DistributorId and (cast(t.TripDate as date) between cast(@FromDate as date)and  cast(@ToDate as date))
and (t.staffRefNo=@StaffRefNo or isnull(@StaffRefNo,0)=0)
group by cast(t.TripDate as date), t.StaffRefNo, t.VehicleId 
) tr on cast(a.DelDate as date)=cast(tr.TripDate as date) and isnull(a.StaffRefNo,0)=isnull(tr.StaffRefNo,0)

insert into @retData(DelDate, StaffRefNo, Staffname, Attended, Scheduled, MaxPossDel,VehId)
select cast(t.TripDate as date) TripDate, t.StaffRefNo,'', 0, count(d.OrderRefNo) Scheduled, 0, t.VehicleId 
from SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
where t.DistributorId=@DistributorId and (cast(t.TripDate as date) between cast(@FromDate as date)and  cast(@ToDate as date))
and (t.staffRefNo=@StaffRefNo or isnull(@StaffRefNo,0)=0) 
and (cast(t.TripDate as date) not in (select deldate from @retData) and isnull(staffRefNo,0) not in (select staffRefNo from @retData))
group by cast(t.TripDate as date), t.StaffRefNo, t.VehicleId

update @retData  set MaxPossDel=isnull(v.MaxPosDel,0) from @retData a 
left outer join (
SELECT vd.DeliveryBoyId, v.VehicleId, isnull(vc.NoOfTrip,0) * isnull(v.RTOCapacity,0) MaxPosDel
FROM SDS.tblVehicleDeliveryBoyMapping AS vd INNER JOIN SDS.tblVehicleMaster AS v ON vd.VehicleId = v.VehicleId 
INNER JOIN SDS.tblDeliveryBoyClusterMapping AS vc ON vd.DeliveryBoyId = vc.StaffRefNo
where vd.DistributorId=@DistributorId and (vd.DeliveryBoyId=@StaffRefNo or isnull(@StaffRefNo,0)=0)
) v on a.StaffRefNo=v.DeliveryBoyId and a.VehId=v.VehicleId


update @retData set a.StaffName=d.StaffName from @retData a inner join DCMS.tblDistributorStaffDetails d on a.StaffRefNo=d.StaffRefNo

select * from @retData order by DelDate, StaffRefNo

END


GO
/****** Object:  StoredProcedure [SDS].[usp_DeliveryBoyMappedVehicleTrips]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	get delivery boy wise vehicle, cluster  for trip
--		SDS.usp_DeliveryBoyMappedVehicleTrips 14193

CREATE proc [SDS].[usp_DeliveryBoyMappedVehicleTrips]
--declare
@DistributorId bigint
--set @DistributorId=14193
As
BEGIN

	SELECT s.DistributorId, s.StaffRefNo,SDS.fn_CamelCase(s.StaffName)as StaffName, vd.VehDelboyId, vd.VehicleId, v.VehicleNo, v.RTOCapacity,SDS.fn_CamelCase(  v.VehicleType) as VehicleType, dc.MappingId, 
		dc.ClusterId,SDS.fn_CamelCase( c.AreaClusterName)as AreaClusterName, dc.NoOfTrip,dc.NoOfTrip * v.RTOCapacity AS PerDayCapacity
	FROM DCMS.tblDistributorStaffDetails AS s WITH (nolock) INNER JOIN
		SDS.tblVehicleDeliveryBoyMapping AS vd WITH (nolock) ON vd.DeliveryBoyId = s.StaffRefNo AND vd.Active = 'Y' LEFT OUTER JOIN
		SDS.tblVehicleMaster AS v WITH (nolock) ON v.VehicleId = vd.VehicleId INNER JOIN
		SDS.tblDeliveryBoyClusterMapping AS dc WITH (nolock) ON dc.StaffRefNo = s.StaffRefNo LEFT OUTER JOIN
		SDS.tblClusterMaster AS c WITH (nolock) ON c.ClusterId = dc.ClusterId							
	where s.DistributorId=@DistributorId and (v.Active='Y' or isnull(v.active,'')='')
		and s.StaffStatusCode='Active' and s.WhetherDeliveryBoy='Y'
	order by s.StaffName
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DeliveryBoyOverheadLessOrders]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----			sds.usp_DeliveryBoyOverheadLessOrders 14193,11811419300000018,'2019-12-1','2019-12-31'

CREATE proc [SDS].[usp_DeliveryBoyOverheadLessOrders]
--declare 
@DistributorId int, 
@StaffRefNo numeric(17,0), 
@FromDate datetime, 
@ToDate datetime
--set @DistributorId=14193; set @StaffRefNo=11811419300000018; set @FromDate='2019-12-1'; set @ToDate='2019-12-31'
as

BEGIN
set FMTONLY OFF

declare @Result table (Id int identity, TripDate date,StaffRefNo numeric(17,0), StaffName nvarchar(200), CanDoMax int, scheduled int, Attented int, Remark nvarchar(500))

insert into @Result(StaffRefNo,StaffName,TripDate,CanDoMax,scheduled,Attented,Remark)

select dt.StaffRefNo, dt.StaffName, md.ALDate,isnull(CanDoMax,0),isnull(Schduled,0),isnull(Attended,0),'' from sds.fn_GetTotalDateInMonth(@fromDate,@Todate) MD
left outer join(
	select dl.StaffRefNo, dl.StaffName, cast(o.ActualDeliveryDate as date) DelDate, count(o.OrderRefNo) Attended
	from DCMS.tblRefillOrderDtls o left outer join DCMS.tblCashMemoDtls cm on o.OrderRefNo=cm.OrderRefNo
	left outer join DCMS.tblDistributorStaffDetails dl on dl.StaffRefNo=cm.StaffRefNo
	where o.DistributorId = @DistributorId and (dl.StaffRefNo=@StaffRefNo or isnull(@StaffRefNo,0)=0)
	group by dl.StaffRefNo, dl.StaffName, cast(o.ActualDeliveryDate as date) 
) dt on cast(MD.ALDate as date)=cast(dt.DelDate as date)
left outer join(
	SELECT t.StaffRefNo, cast(t.TripDate as date) TripDate, count(d.OrderRefNo) Schduled
	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
	where t.DistributorId=@DistributorId and (t.StaffRefNo=@StaffRefNo or isnull(@StaffRefNo,0)=0)
	group BY t.StaffRefNo, t.TripDate
) trp on cast(trp.TripDate as date)=cast(MD.ALDate as date)
left outer join (

SELECT vd.DistributorId, vd.DeliveryBoyId, isnull(vc.NoOfTrip,0) * isnull(v.RTOCapacity,0) CanDoMax
FROM SDS.tblVehicleDeliveryBoyMapping AS vd INNER JOIN SDS.tblVehicleMaster AS v ON vd.VehicleId = v.VehicleId 
INNER JOIN SDS.tblDeliveryBoyClusterMapping AS vc ON vd.DeliveryBoyId = vc.StaffRefNo
where (vd.DeliveryBoyId=@StaffRefNo or isnull(@StaffRefNo,0)=0) and vd.DistributorId=@DistributorId
) cap on trp.StaffRefNo=cap.DeliveryBoyId

select * from @Result where isnull(StaffRefNo,0)<> 0

END


GO
/****** Object:  StoredProcedure [SDS].[usp_DeliveryBoyPendingAcceptStock]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_DeliveryBoyPendingAcceptStock]
@DistributorId int,
@DeliveryBoyId numeric(17,0)

AS
BEGIN
	
	select tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
	tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo as vehicleNumber,
	sum(ISNULL(tsad.Quantity,0)+ISNULL(tsad.EmptyQty,0))  as Quantity,tsa.AllotmentBy,s.StaffName as GodownkeeperName	 
	from sds.tblStockAllotment tsa	 with (nolock)
	left outer join sds.tblVehicleMaster vm with (nolock) on tsa.VehicleId=vm.VehicleId
	left outer join DCMS.tblDistributorStaffDetails s with (nolock) on s.StaffRefNo=tsa.GodownKeeperId
	left outer join sds.tblStockAllotmentDetails tsad with (nolock)  on tsad.StockAllotmentId=tsa.StockAllotmentId
	where tsa.DistributorId=@DistributorId and tsa.DeliveryBoyId=@DeliveryBoyId and tsa.IsAccepted is null 
	group by  tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
	tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo,	
	tsa.AllotmentBy,s.StaffName
	order by AllotmentDate desc
	 
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DeliveryBoyStockUpdate]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DeliveryBoyStockUpdate @DeliveryBoyId,@ItemId,@FilledQuantity,@EmptyQuantity,@LastUpdatedBy,@RtnValue

CREATE proc [SDS].[usp_DeliveryBoyStockUpdate]
@DeliveryBoyId	numeric(17, 0),
@ItemId	int,
@FilledQuantity	int,
@EmptyQuantity	int,
@LastUpdatedBy	varchar(50),
@RtnValue bigint output

as

BEGIN
	if not exists(select 1 from sds.tblDeliveryBoyStock with (nolock) where DeliveryBoyId=@DeliveryBoyId and ItemId=@ItemId)
	Begin
		insert into sds.tblDeliveryBoyStock(DeliveryBoyId,ItemId,FilledQuantity,EmptyQuantity,LastUpdatedBy,LastUpdatedDate)
		values(@DeliveryBoyId,@ItemId,@FilledQuantity,@EmptyQuantity,@LastUpdatedBy,getdate())

		set @RtnValue=scope_identity()
	End
	Else
	Begin
		Update sds.tblDeliveryBoyStock
		set FilledQuantity=isnull(FilledQuantity,0)+isnull(@FilledQuantity,0),
			EmptyQuantity=isnull(EmptyQuantity,0)+ isnull(@EmptyQuantity,0),
			LastUpdatedBy=@LastUpdatedBy,
			LastUpdatedDate=getdate()
		where DeliveryBoyId=@DeliveryBoyId and ItemID=@ItemID

		set @RtnValue=@@rowcount
	End

END



GO
/****** Object:  StoredProcedure [SDS].[usp_DensityAnalysisAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_DensityAnalysisAdd]
--declare
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForDensity readonly,
@TripId bigint output

as
--begin
--	set @ClusterId=74; set @CaseNo='DA'; set @TripDate='2021-05-06'; set @DistributorId=14193; set @StaffRefNo=11414193000000072; set @VehicleId=10111; set @TripStatus='0'; set @CreatedBy=1;

--	insert into @OrderNotbl values (0,	1,	1,	1181419300000003, 1201419300028955,	1151013800000359,	1, 11,	0,null)	
--	insert into @OrderNotbl values (1,	1,	2,	1181419300000003,	5201419300031176, 1140819100001010,	1,	0,	0,null)	
--	insert into @OrderNotbl values (2,	1,	3,	1181419300000003,	5201419300029702, 9110842900035045,	2,	0,	0,'')	
--	insert into @OrderNotbl values (3,	1,	4,	1181419300000003,	5201419300030354, 1131005600000733,	2,	0,	0,'')

--end

BEGIN
	-- case No  DA - Density then ageing (density groups)
	--			AD - Ageing then density (density from oldest booking)
	--			FIFO - Ageing (pick old bookings and create shortest route)

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	select @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
--select @VehCapacity, @NoOfTrips

	select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			--select @cnt
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblDensityAnalysis(CaseNo,TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TripStatus,CreatedDate,AddiStaffRefNo,AddiStaffName,GodownId,GLatitude,GLongitude)
			VALUES(@CaseNo,'0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
				---- Insert Trip Details for included orders
				insert into sds.tblDensityAnalysisDetails(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				KM_Air,KM_Road,DelTripSequenceNo,DelTripSequenceNo_OD,DensityFrom)
				select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
			 	(select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,
			 	(select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad,
				0,nt.DelTripSequenceNo, isnull(nullif(ltrim(rtrim(nt.DensityFrom)),''),0)
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblDensityAnalysisDetails d inner join sds.tblDensityAnalysis t on d.tripId=t.tripId 
				where CaseNo=@CaseNo and cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update sds.tblDensityAnalysisDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode				
				from sds.tblDensityAnalysisDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
				and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End		

		set @cnt=@cnt+1
		End
	
		set @cnt=1
		if exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
		Begin	
			while (@cnt<=@NoOfTrips)
			Begin
				SELECT @TodayCount = COUNT(1) FROM sds.tblDensityAnalysis with(nolock) 
				WHERE DistributorId = @DistributorId and CaseNo=@CaseNo AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
				SET @TodayCount = @TodayCount+1
	
				SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
				print @TripNo

				update sds.tblDensityAnalysis set TripNo=@TripNo 
				where TripId=(select top 1 t.tripid from sds.tblDensityAnalysisDetails d inner join sds.tblDensityAnalysis t on t.TripId=d.TripId 
						where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

			set @cnt=@cnt+1
			End
		End		
		else
		Begin
			set @TripId=-2
		End
	
		-- Assign Delivery Sequence for Case 1 Density and Ageing...
		if exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
		Begin
			IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups
			create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int, 
			OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)

			insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
				OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)
			SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, 
				dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,
				Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo
			FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
			where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)
				and (isnull(da.CaseNo,'')=@CaseNo)
			GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo
			
			declare @OldBkgDt datetime, @NoofTrips1 int, @MaxBkg10 int=0,@MaxBkg5 int=0,@MaxBkg2 int=0,@MaxBkg int=0, @c int =1
			select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId
			--select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
		
			While (@c<=@NoofTrips1)
			Begin
				select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
				if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)>1)
				Begin
				---- Older than 10 days
					set @MaxBkg10 =0; select @MaxBkg10=max(OlderThan10Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
		
					if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0)=1)
					Begin
						--select @MaxBkg10, ' older then 10 days'
						update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0
					End
					Else
					Begin
					---- Older than 5 days
						set @MaxBkg5 =0; select @MaxBkg5=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
								and OlderThan10Days=@MaxBkg10 and isnull(DelTripSequenceNo,0)=0
						if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0)=1)
						Begin
						--select @MaxBkg5,' older then 5 days'
							update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0
						End
						else
						Begin
						---- Older than 2 days
							set @MaxBkg2 =0; select @MaxBkg2=max(OlderThan2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and isnull(DelTripSequenceNo,0)=0
							if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0)=1)
							Begin
								--select @MaxBkg2, ' older then 2 days'
								update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
											and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0
							End
							else
							Begin
							---- Upto 2 days 
								set @MaxBkg =0; select @MaxBkg=max(Upto2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
											and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and isnull(DelTripSequenceNo,0)=0
								if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
								and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and Upto2Days=@MaxBkg and Upto2Days>0)=1)
								Begin
									--select @MaxBkg, 'upto 2 days'
									update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
									and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg and Upto2Days>0
								End
								else
								Begin
									--select 'Last '
									update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo=
										(select top 1 DensityGroupNo from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
										and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg order by KM_Air)
								End
							End
						End
					End
				End 
				else 
				Begin
					--select @OldBkgDt
					update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
				End
			set @c=@c+1
			End  

			update sds.tblDensityAnalysisDetails set DelTripSequenceNo =o.DelTripSequenceNo
				from sds.tblDensityAnalysisDetails t1 inner join sds.tblDensityAnalysis da on t1.TripId=da.tripid
				inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date) 
				and o.DensityGroupNo=t1.DensityGroupNo
				WHERE	o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)
		End
	
	End
	select @TripId
END






GO
/****** Object:  StoredProcedure [SDS].[usp_DensityAnalysisAdd_RtSeq]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DensityAnalysisAdd_RtSeq]
--declare
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForDensity readonly,
@TripId bigint output

as
--begin
--	set @ClusterId=74; set @CaseNo='DA'; set @TripDate='2021-05-06'; set @DistributorId=14193; set @StaffRefNo=11414193000000072; set @VehicleId=10111; set @TripStatus='0'; set @CreatedBy=1;

--	insert into @OrderNotbl values (0,	1,	1,	1181419300000003, 1201419300028955,	1151013800000359,	1, 11,	0,null)	
--	insert into @OrderNotbl values (1,	1,	2,	1181419300000003,	5201419300031176, 1140819100001010,	1,	0,	0,null)	
--	insert into @OrderNotbl values (2,	1,	3,	1181419300000003,	5201419300029702, 9110842900035045,	2,	0,	0,'')	
--	insert into @OrderNotbl values (3,	1,	4,	1181419300000003,	5201419300030354, 1131005600000733,	2,	0,	0,'')

--end

BEGIN
	--select * from sds.tblDensityAnalysis
	--select * from sds.tblDensityAnalysisDetails

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	select @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
--select @VehCapacity, @NoOfTrips

	select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	if not exists(select 1 from sds.tblDensityAnalysis_RtSeq where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			--select @cnt
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblDensityAnalysis_RtSeq(CaseNo,TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TripStatus,CreatedDate,AddiStaffRefNo,AddiStaffName,GodownId,GLatitude,GLongitude)
			VALUES(@CaseNo,'0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
				---- Insert Trip Details for included orders
				insert into sds.tblDensityAnalysisDetails_RtSeq(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				KM_Air,KM_Road,DelTripSequenceNo,DelTripSequenceNo_OD,DensityFrom)
				select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
			 	(select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,
			 	(select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad,
				nt.DelTripSequenceNo,0, isnull(nullif(ltrim(rtrim(nt.DensityFrom)),''),0)
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblDensityAnalysisDetails_RtSeq d inner join sds.tblDensityAnalysis_RtSeq t on d.tripId=t.tripId 
				where CaseNo=@CaseNo and cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update sds.tblDensityAnalysisDetails_RtSeq set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode				
				from sds.tblDensityAnalysisDetails_RtSeq t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
				and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End		

		set @cnt=@cnt+1
		End
	
		set @cnt=1
		if exists(select 1 from sds.tblDensityAnalysis_RtSeq where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
		Begin	
			while (@cnt<=@NoOfTrips)
			Begin
				SELECT @TodayCount = COUNT(1) FROM sds.tblDensityAnalysis_RtSeq with(nolock) 
				WHERE DistributorId = @DistributorId and CaseNo=@CaseNo AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
				SET @TodayCount = @TodayCount+1
	
				SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
				print @TripNo

				update sds.tblDensityAnalysis_RtSeq set TripNo=@TripNo 
				where TripId=(select top 1 t.tripid from sds.tblDensityAnalysisDetails_RtSeq d inner join sds.tblDensityAnalysis_RtSeq t on t.TripId=d.TripId 
						where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

			set @cnt=@cnt+1
			End
		End		
		else
		Begin
			set @TripId=-2
		End
	End
	select @TripId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DensityAnalysisAddForCaseAD]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [SDS].[usp_DensityAnalysisAddForCaseAD]
--declare
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForDensity readonly,
@TripId bigint output

as
--set @ClusterId=115; set @CaseNo='OD'; set @TripDate='2021-09-20'; set @DistributorId=14145; set @StaffRefNo=11811419300000010; set @VehicleId=10090; set @TripStatus='0'; set @CreatedBy=1;

--insert into @OrderNotbl values (0,1,0,1141419300000004,5201419300030143,9110828800003801,0,0,0,0)
--insert into @OrderNotbl values (1,1,0,1141419300000004,1201419300030200,1161419300000275,0,0,0,0)
--insert into @OrderNotbl values (2,1,0,1141419300000004,5201419300030309,9100912800053415,0,0,0,0)
--insert into @OrderNotbl values (3,1,0,1141419300000004,5201419300030641,1130828800000456,0,0,0,0)
--insert into @OrderNotbl values (4,1,0,1141419300000004,5201419300030985,1110995400030768,0,0,0,0)
--insert into @OrderNotbl values (5,1,0,1141419300000004,5201419300030974,9111008400067288,0,0,0,0)

BEGIN
	-- Case Ageing Density -- Pick old booking and find shortest path

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	select @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
--select @VehCapacity, @NoOfTrips

	select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			--select @cnt
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblDensityAnalysis(CaseNo,TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TripStatus,CreatedDate,AddiStaffRefNo,AddiStaffName,GodownId,GLatitude,GLongitude)
			VALUES(@CaseNo,'0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
				---- Insert Trip Details for included orders
				insert into sds.tblDensityAnalysisDetails(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				KM_Air,KM_Road,DelTripSequenceNo,DelTripSequenceNo_OD,DensityFrom)
				select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
			 	(select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,
			 	(select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad,
				0,nt.DelTripSequenceNo, isnull(nullif(ltrim(rtrim(nt.DensityFrom)),''),0)
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblDensityAnalysisDetails d inner join sds.tblDensityAnalysis t on d.tripId=t.tripId 
				where CaseNo=@CaseNo and cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update sds.tblDensityAnalysisDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode				
				from sds.tblDensityAnalysisDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
				and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End		

		set @cnt=@cnt+1
		End
	
		set @cnt=1
		if exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
		Begin	
			while (@cnt<=@NoOfTrips)
			Begin
				SELECT @TodayCount = COUNT(1) FROM sds.tblDensityAnalysis with(nolock) 
				WHERE DistributorId = @DistributorId and CaseNo=@CaseNo AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
				SET @TodayCount = @TodayCount+1
	
				SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
				print @TripNo

				update sds.tblDensityAnalysis set TripNo=@TripNo 
				where TripId=(select top 1 t.tripid from sds.tblDensityAnalysisDetails d inner join sds.tblDensityAnalysis t on t.TripId=d.TripId 
						where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

			set @cnt=@cnt+1
			End
		End		
		else
		Begin
			set @TripId=-2
		End
	
		-- Assign Delivery Sequence for Case 3 Ageing and Density
		if exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
		Begin
			IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups
			create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int, 
			OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)

			insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
				OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)
			SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, 
				dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,
				Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo
			FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
			where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)
				and (isnull(da.CaseNo,'')=@CaseNo)
			GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo
			
			declare @OldBkgDt datetime, @NoofTrips1 int, @c int =1, @MinDensity int,@10DaysOld int = 0,@5DaysOld int = 0, @2DaysOld int = 0,@Upto2Days int =0;
			select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId
			--select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
		
			if(@CaseNo = 'AD')
			begin
				While (@c<=@NoofTrips1)
				Begin
				select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
					if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)>1 )
					BEGIN
						-- Check older than 10 days
						set @10DaysOld =0; 
						select @10DaysOld=max(OlderThan10Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
						IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and isnull(DelTripSequenceNo,0)=0)>1))
							BEGIN
								-- Check older than 5 days
								set @5DaysOld =0; 
								select @5DaysOld=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) AND OlderThan10Days = @10DaysOld 
								and isnull(DelTripSequenceNo,0)=0
								IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld and isnull(DelTripSequenceNo,0)=0)>1))
								BEGIN
									-- Check older than 2 days
									set @2DaysOld =0; 
									select @2DaysOld=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) AND OlderThan10Days = @10DaysOld 
									AND OlderThan5Days = @5DaysOld and isnull(DelTripSequenceNo,0)=0
									IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld 
									and  isnull(DelTripSequenceNo,0)=0)>1))
									BEGIN
										-- Check upto 2 days
										set @2DaysOld =0; 
										select @2DaysOld=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) AND OlderThan10Days = @10DaysOld 
										AND OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld and isnull(DelTripSequenceNo,0)=0
										IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld 
										and Upto2Days = @Upto2Days and isnull(DelTripSequenceNo,0)=0)>1))
										BEGIN
											--Check density
											set @MinDensity=0;
											select @MinDensity = (select min(KM_Air) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld 
											and OlderThan2Days = @2DaysOld and Upto2Days = @Upto2Days and isnull(DelTripSequenceNo,0)=0)
											if((select count(DensityGroupNo) from @OrderNotbl where KMAir = @MinDensity)>1)
											BEGIN
												update #DensityGroups set DelTripSequenceNo=@c where  isnull(DelTripSequenceNo,0)=0 AND 
												DensityGroupNo = (select TOP 1 DensityGroupNo from @OrderNotbl where KMAir = @MinDensity)
											END
											ELSE
											BEGIN
												update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
												cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
												and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld and Upto2Days = @Upto2Days and isnull(DelTripSequenceNo,0)=0)
											END
										END
										ELSE
										BEGIN
											update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
												cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
												and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld and isnull(DelTripSequenceNo,0)=0)
										END
									END
									ELSE
									BEGIN
										update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
												cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
												and OlderThan5Days = @5DaysOld and isnull(DelTripSequenceNo,0)=0)
									END
								END
								ELSE
								BEGIN
									update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
												cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
												and isnull(DelTripSequenceNo,0)=0)
								END
							END
							ELSE
							BEGIN
								update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
												cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)
							END
						--UPDATE #DensityGroups SET DelTripSequenceNo=@c WHERE DensityGroupNo = @c AND CAST(OldestBookingDate AS DATE) = CAST(@OldBkgDt AS DATE) AND ISNULL(DelTripSequenceNo,0)=0 
					END
					else 
					Begin
						--select @OldBkgDt
						update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
					End
					set @c=@c+1
				End 
				update sds.tblDensityAnalysisDetails set DelTripSequenceNo_AD =o.DelTripSequenceNo
				from sds.tblDensityAnalysisDetails t1 inner join sds.tblDensityAnalysis da on t1.TripId=da.tripid
				inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId 
				and cast(o.TripDate as date)=cast(da.TripDate as date) 
				and o.DensityGroupNo=t1.DensityGroupNo
				WHERE	o.CaseNo=@CaseNo and o.DistributorId=@DistributorId and o.ClusterId=@ClusterId 
				and cast(o.TripDate as date)=cast(@TripDate as date)
			end
			else if(@CaseNo = 'OD')
			begin
				While (@c<=@NoofTrips1)
				Begin
				--select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
					if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull   (DelTripSequenceNo,0)=0)>1 )
					BEGIN
						UPDATE #DensityGroups SET DelTripSequenceNo=@c WHERE DensityGroupNo = @c AND CAST(OldestBookingDate AS DATE) = CAST(@OldBkgDt    AS DATE) AND ISNULL(DelTripSequenceNo,0)=0 
					END
					else 
					Begin
						--select @OldBkgDt
						update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull (DelTripSequenceNo,0)=0
					End
					set @c=@c+1
				End 
				update sds.tblDensityAnalysisDetails set DelTripSequenceNo_OD =o.DelTripSequenceNo
				from sds.tblDensityAnalysisDetails t1 inner join sds.tblDensityAnalysis da on t1.TripId=da.tripid
				inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date) 
				and o.DensityGroupNo=t1.DensityGroupNo
				WHERE	o.CaseNo=@CaseNo and o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)
			end
		End
	End
	select @TripId
END





GO
/****** Object:  StoredProcedure [SDS].[usp_DensityDataClusterwiseAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DensityDataClusterwiseAdd]
--declare
@DistributorId	int,
@TripDate	datetime,
@tblDensityData SDS.DensityData readonly,
@RetValue int output

as

--begin    --- Assign Data
--set @DistributorId=14193; set @TripDate='2020-11-21';
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (70,	11711419300000004,	10095,24,2,1,	'2020-03-13 01:00:00.000',	1201419300028202,	1140842900002640,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (70,	11711419300000004,	10095,24,2,1,	'2020-03-16 17:46:54.447',	5201419300029944,	1130828800000467,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (70,	11711419300000004,	10095,24,2,1,	'2020-03-19 01:00:00.000',	5201419300030971,	1170831400001141,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (70,	11711419300000004,	10095,24,2,1,	'2020-03-19 05:47:35.283',	5201419300031049,	1171419300001683,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (70,	11711419300000004,	10095,24,2,1,	'2020-03-19 09:15:47.507',	5201419300031123,	9110828800022821,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (70,	11711419300000004,	10095,24,2,1,	'2020-03-17 10:03:36.817',	5201419300030232,	1191419300000903,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (71,	1151419300000001,	10094,20,2,1,	'2020-03-19 01:00:00.000',	5201419300031020,	9111005600036852,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (71,	1151419300000001,	10094,20,2,1,	'2020-03-19 09:13:04.763',	5201419300031122,	9111005600034920,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (71,	1151419300000001,	10094,20,2,1,	'2020-03-19 11:31:33.047',	5201419300031210,	1120995400001038,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (71,	1151419300000001,	10094,20,2,1,	'2020-03-11 01:00:00.000',	1201419300027325,	9110901300045581,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (71,	1151419300000001,	10094,20,2,1,	'2020-03-13 12:20:33.140',	1201419300028489,	9111005600030689,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (72,	11811419300000010,	10090,24,1,1,	'2020-03-10 12:56:09.937',	1201419300027171,	1191419300002167,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (72,	11811419300000010,	10090,24,1,1,	'2020-03-12 08:57:38.053',	1201419300027839,	1171217400002188,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (72,	11811419300000010,	10090,24,1,1,	'2020-03-12 15:09:06.570',	1201419300028022,	1181419300000462,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (72,	11811419300000010,	10090,24,1,1,	'2020-03-13 18:30:39.240',	1201419300028637,	1191419300001528,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (72,	11811419300000010,	10090,24,1,1,	'2020-03-14 01:00:00.000',	1201419300028717,	9110828800018446,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (72,	11811419300000010,	10090,24,1,1,	'2020-03-16 00:00:00.000',	1201419300029753,	1180811300000114,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (77,	11811419300000012,	10092,7,3,1,	'2020-03-15 11:27:07.550',	6201419300029354,	1141005600000603,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (77,	11811419300000012,	10092,7,3,1,	'2020-03-15 11:28:53.117',	6201419300029359,	1111005600041898,0)	
--insert into @tblDensityData(ClusterId,DeliveryBoyId,VehicleId,VehicleCapacity,NoOfTrips,DensityGroupNo,BookingDate,OrderRefNo,UniqueConsumerId,BookingCount)	values (77,	11811419300000012,	10092,7,3,1,	'2020-03-17 19:36:37.980',	6201419300030528,	1121005600001265,0)

--end

BEGIN
	set @RetValue=0
	
	if exists (select * from SDS.tblDensityDataClusterwise where DistributorId=@DistributorId and cast(TripDate as date)= cast(@TripDate as date) and ClusterId in (select ClusterId from @tblDensityData)
	and DensityGroupNo in (select DensityGroupNo from @tblDensityData))
		Delete from  SDS.tblDensityDataClusterwise where DistributorId=@DistributorId and cast(TripDate as date)= cast(@TripDate as date) and ClusterId in (select ClusterId from @tblDensityData)
	and DensityGroupNo in (select DensityGroupNo from @tblDensityData)
			
	insert into SDS.tblDensityDataClusterwise(DistributorId, TripDate, ClusterId, ClusterName, DeliveryBoyId, VehicleId, VehicleNo, VehicleCapacity, NoOfTrips, 
		DensityGroupNo, BookingDate, OrderRefNo, UniqueConsumerId, BookingCount, CreatedOn)
	select @DistributorId,@TripDate,d.ClusterId,c.AreaClusterName,d.DeliveryBoyId,d.VehicleId,v.VehicleNo,d.VehicleCapacity,NoOfTrips, 
		d.DensityGroupNo,convert(datetime, d.BookingDate, 101) ,d.OrderRefNo,d.UniqueConsumerId,(select count(orderrefno) from  @tblDensityData where ClusterId=d.clusterId and DensityGroupNo=d.DensityGroupNo),getdate() 
	from @tblDensityData d left outer join sds.tblClusterMaster c on d.clusterid=c.clusterId
		left outer join sds.tblVehicleMaster v on d.VehicleId=v.VehicleId

	set @RetValue=@@ROWCOUNT

	return @RetValue
END
	

GO
/****** Object:  StoredProcedure [SDS].[usp_DensityDataClusterwiseForMapView]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_DensityDataClusterwiseForMapView]
@DistributorId int,
@ClusterId bigint,
@TripDate datetime

as
BEGIN
	SELECT  d.id, d.DistributorId, d.TripDate, d.ClusterId, d.ClusterName, d.DeliveryBoyId, d.VehicleId, d.VehicleNo, d.VehicleCapacity, 
		d.NoOfTrips, d.DensityGroupNo, d.BookingDate, d.OrderRefNo, d.UniqueConsumerId, d.BookingCount, d.CreatedOn, c.ConsumerNo, 
		c.ConsumerName, c.Address, c.MobileNo, c.Latitude, c.Longitude
	FROM SDS.tblDensityDataClusterwise d WITH (nolock) INNER JOIN SDS.tblConsumerDetails c  WITH (nolock) ON d.UniqueConsumerId = c.UniqueConsumerId
	WHERE (d.DistributorId = @DistributorId) AND (d.ClusterId = @ClusterId) and (cast(d.TripDate as date)=cast(@TripDate as date))
	order by  d.DensityGroupNo
END
GO
/****** Object:  StoredProcedure [SDS].[usp_DistClusterCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistClusterCoordinates]
@DistributorId	int,
@AreaClusterId	int

as

BEGIN
	SELECT DistributorId, AreaClusterId, AreaJSON, ActiveStatus, LastUpdateDateTime 
	FROM sds.tblDistributorClusterCoordinates 
	WHERE DistributorId=@DistributorId and (AreaClusterId=@AreaClusterId OR @AreaClusterId=0)
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistrDelBoyListForClusterMapping]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistrDelBoyListForClusterMapping]
--declare
@DistributorId bigint,
@ClusterId bigint
--set @DistributorId=14193 set @ClusterId=0
as

SELECT        s.DistributorId, s.StaffRefNo, s.StaffInitials,SDS.fn_CamelCase(s.StaffName) as StaffName, m.ClusterId, vd.vehicleId
FROM            DCMS.tblDistributorStaffDetails s with (nolock) inner join sds.tblVehicleDeliveryBoyMapping vd on s.StaffRefNo=vd.DeliveryBoyId
left outer join sds.tblDeliveryBoyClusterMapping m with (nolock) on s.StaffRefNo=m.StaffRefNo
where (s.DistributorID=@DistributorId or @DistributorId=0) and (s.StaffStatusCode='Active') and (s.WhetherDeliveryBoy='Y')  AND (s.StaffName NOT LIKE 'DCMS%')
and s.StaffRefNo not in (select StaffRefNo from sds.tblDeliveryBoyClusterMapping where ClusterId<>@ClusterId and IsActive='Y')



GO
/****** Object:  StoredProcedure [SDS].[Usp_DistributorAreaCoordinatesList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.Usp_DistributorAreaCoordinatesList 88888

CREATE proc [SDS].[Usp_DistributorAreaCoordinatesList]
--declare
@DistributorId int
--set @DistributorId=88888
as
BEGIN
	SELECT Id, DistributorId, AreaRefNo, AreaJSON FROM SDS.tblDistributorAreaGeoCoordinates
	WHERE DistributorId = @DistributorId and ActiveStatus=1
END


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorAreaList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--			sds.usp_DistributorAreaList 88888,'ALL'

CREATE proc [SDS].[usp_DistributorAreaList] --9128,'ALL'
@DistributorId bigint,			-- '0' for All
@IsActive nvarchar(15)			--	Y-Active, N for Inactive, ALL for Both

as
BEGIN

	SELECT dam.AreaRefNo,SDS.fn_CamelCase(ltrim(dam.AreaName)) as AreaName, dam.DistributorID,dam.StatusFlag
	FROM  DCMS.tblDistributorAreaMaster dam with (nolock) 
	WHERE (dam.DistributorID=@DistributorId or @DistributorId=0) and (dam.StatusFlag=@IsActive or @IsActive='ALL') 
	order by ltrim(dam.AreaName)

END


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorAreaListByCluster]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,Tejas>
-- Create date: <Create Date,14-11-2019,>
-- Description:	<Description,to get Area List from Table against respective Cluster and Distributor,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_DistributorAreaListByCluster]
	-- Add the parameters for the stored procedure here
	@DistributorId int	,
	@AreaClusterId int
AS
BEGIN
    
	 SELECT a.AreaRefNo,a.AreaName 
	 FROM DCMS.tblDistributorAreaMaster a with (nolock) inner join sds.tblAreaClusterMapping ac ON ac.DistributorId = @DistributorId and ac.AreaClusterId= @AreaClusterId 
	 WHERE a.AreaRefNo=ac.AreaRefNo
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorAreaListForClusterMapping]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		SDS.usp_DistributorAreaListForClusterMapping 88888, 0

CREATE proc [SDS].[usp_DistributorAreaListForClusterMapping]
--declare
@DistributorId bigint,
@ClusterId bigint
--set @ClusterId=0 set @DistributorId=88888	
as

BEGIN
set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--print @GroupCode; 	print @Days

	IF OBJECT_ID('tempdb..#AvgOdr') IS NOT NULL DROP TABLE #AvgOdr create table #AvgOdr(AreaRefNo numeric(17, 0), OrderCount int, AvgOrders float,SaleCount int, AvgSale float)
	
	declare @Str varchar(max)= 'insert into #AvgOdr
		select r1.AreaRefNo,count(r1.OrderRefNo) + isnull(OrdCnt,0), 
		round((count(r1.OrderRefNo)+ isnull(r2.OrdCnt,0))/(select top 1 convert(float,NoOfDaysForOrderAvg) from SDS.tblAppConfigData),2),
		isnull(s2.saleCnt,0), round((isnull(s2.SaleCnt,0))/(select top 1 convert(float,NoOfDaysForOrderAvg) from SDS.tblAppConfigData),2)
		from DCMS.tblRefillOrderDtls'+@GroupCode+' r1  WITH (NOLOCK)
		left outer join 
		(
			select DistributorId, AreaRefNo, count(OrderRefNo) OrdCnt from DCMS.tblRefillOrderDtls WITH (NOLOCK)
			where (DistributorId='+convert(nvarchar(20),@DistributorId) +' or '+convert(nvarchar(20),@DistributorId) +'=0) 
			and (OrderStatusCode <> ''CNCL'') and PriceCode in (select priceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
			and cast(orderdate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForOrderAvg from SDS.tblAppConfigData),getdate())
			group by DistributorId,arearefno
		) r2 on r1.DistributorId=r2.DistributorId and r1.AreaRefNo=r2.AreaRefNo
		left outer join 
		(
			select DistributorId, AreaRefNo, count(OrderRefNo) saleCnt from DCMS.tblRefillOrderDtls WITH (NOLOCK)
			where (DistributorId='+convert(nvarchar(20),@DistributorId) +' or '+convert(nvarchar(20),@DistributorId) +'=0) 
			and PriceCode in (select priceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
			and cast(ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForOrderAvg from SDS.tblAppConfigData),getdate())
			group by DistributorId,arearefno
		) s2 on r1.DistributorId=s2.DistributorId and r1.AreaRefNo=s2.AreaRefNo		
		
		where (r1.DistributorId='+convert(nvarchar(20),@DistributorId) +' or '+convert(nvarchar(20),@DistributorId) +'=0) 
		and (r1.OrderStatusCode <> ''CNCL'') and r1.PriceCode in (select priceCode from sds.tblactiveitems where isnull(Active,''N'')=''Y'')
		and cast(r1.orderdate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForOrderAvg from SDS.tblAppConfigData),getdate())
		group by r1.arearefno,OrdCnt,s2.saleCnt'
		print (@Str)
	exec (@Str)

	SELECT a.AreaRefNo, a.AreaCode,SDS.fn_CamelCase( a.AreaName ) as AreaName, a.DistributorID,isnull(m.AreaClusterId,0) AreaClusterId, 
	vg.OrderCount as TotalLastMonthOrder, vg.AvgOrders as AvgPerDayOrder, ltrim(rtrim(isnull(pod.DeliveryType,'HD'))) DeliveryType, 
	vg.SaleCount as TotalLast30DaysSale, vg.AvgSale as AvgPerDaySale
	FROM DCMS.tblDistributorAreaMaster a with (nolock) left outer join sds.tblAreaClusterMapping m with (nolock) on a.AreaRefNo=m.areaRefNo
	left outer join sds.tblCDCMSAreaPODDetails pod on a.AreaRefNo=pod.AreaRefNo
	left outer join #AvgOdr vg on a.AreaRefNo=vg.AreaRefNo
	where (a.DistributorID=@DistributorId or @DistributorId=0) and (a.StatusFlag='Y') 
	and a.AreaRefNo not in (select areaRefNo from sds.tblAreaClusterMapping with (nolock) where AreaClusterId<>@ClusterId and IsActive='Y')
	--and a.AreaRefNo in (select AreaRefNo from sds.tblDistributorAreaMapping where  (DistributorID=@DistributorId or @DistributorId=0)) 	-- and (nullif(areaCode,'') is not null)

	drop table #AvgOdr
END

--select  * from DCMS.tblDistributorAreaMaster where DistributorID=15139
--select * from sds.tblDistributorAreaMapping where DistributorID=15139


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorAreaPODList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--			sds.usp_DistributorAreaPODList 88888

CREATE proc [SDS].[usp_DistributorAreaPODList]
@DistributorId int

as

SELECT       CONVERT(nvarchar(50), da.AreaRefNo) AreaRefNo, da.DistributorID, da.AreaCode DBLinkAreaCode, SDS.fn_CamelCase(da.AreaName) AS AreaName, da.AreaCode, 
isnull(UPPER(LTRIM(RTRIM(pod.DeliveryType))),'HD') DeliveryType, pod.Latitute, pod.Longitute, 
isnull((STUFF((select ',' + convert(nvarchar(50),a.Weekdays) from sds.tblPODWeekdaysDetails a  WITH(NOLOCK) where a.PODId=pod.AreaPodId FOR XML PATH('')),1,1,'')),'') as Weekdays
FROM            DCMS.tblDistributorAreaMaster AS da WITH (nolock) LEFT OUTER JOIN SDS.tblCDCMSAreaPODDetails AS pod ON da.AreaRefNo = pod.AreaRefNo
WHERE        da.DistributorID = @DistributorId
ORDER BY AreaName



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorBacklogAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorBacklogAdd 15139

CREATE proc [SDS].[usp_DistributorBacklogAdd]
--declare 
@DistributorID int
--  set @DistributorID=14193
As

BEGIN
	set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	
	IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr create table #TotOdr(DistributorId int, PendingOrders int,TotalSale int, AvgDailySale int)
	
	declare @Str varchar(max)= 'insert into #TotOdr(DistributorId, PendingOrders, TotalSale, AvgDailySale)

	select r1.DistributorId, sum(case when OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'') then 1 else 0 end) Pending,
	((sum(case when OrderStatusCode =''DLVD'' then 1 else 0 end) )+ ht.TSale) totalSale,
	((sum(case when OrderStatusCode =''DLVD'' then 1 else 0 end) )+ ht.TSale)/(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData)
	from DCMS.tblRefillOrderDtls'+@GroupCode+' r1 WITH (NOLOCK) inner join sds.tblactiveitems ai with (nolock) on r1.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
	left outer join(
	select b.DistributorId, count(b.OrderRefNo) TSale
	from DCMS.tblRefillOrderDtls b WITH (NOLOCK) inner join sds.tblactiveitems ai with (nolock) on b.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
	where (b.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (b.OrderStatusCode in ( ''DLVD'')) 
	and cast(b.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate()) 
	group by b.DistributorId) ht on r1.DistributorID=ht.DistributorId
	where (r1.DistributorId='+convert(nvarchar(20),@DistributorId) +')
	group by r1.DistributorId , ht.TSale'

	exec (@Str)	

	if exists(select 1 from sds.tblDistributorWiseBacklog where DistributorId=@DistributorId and BackLogOf='D' and cast(entrydate as date)=cast(getdate() as date))
	Begin		
		declare @POdrs int, @AvgS decimal(17,5) 
		select @POdrs=isnull(PendingOrders,0), @AvgS=isnull(AvgDailySale,0) from #TotOdr where DistributorId=@DistributorID
		
		update sds.tblDistributorWiseBacklog set TotalPendingOrder=isnull(@POdrs,0), EntryDate=getdate(), AvgSale=isnull(@AvgS,0), BackLog=(isnull(@POdrs,0)/isnull(nullif(@AvgS,0),1))
		where DistributorId=@DistributorID and cast(EntryDate as date) =cast(getdate() as date)		
				
		--set @RtnValue=@DistributorId
	End
	else
	Begin
		insert into sds.tblDistributorWiseBacklog(DistributorId,BackLogOf,EntryDate,TotalPendingOrder,AvgSale,BackLog)
		select DistributorId,'D',getdate(), isnull(PendingOrders,0),isnull(AvgDailySale,0),isnull(PendingOrders,0)/isnull(nullif(AvgDailySale,0),1)
		from #TotOdr
		where DistributorId=@DistributorID
		--set @RtnValue=SCOPE_IDENTITY()
	End

	update SDS.tblDistributorWiseBacklog set TotalPendingOrder= 0 where TotalPendingOrder is null
	update SDS.tblDistributorWiseBacklog set AvgSale= 0 where AvgSale is null
	update SDS.tblDistributorWiseBacklog set BackLog= 0 where BackLog is null


	drop table #TotOdr

	 --return @RtnValue;
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorBacklogAddNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorBacklogAddNew 14193

CREATE proc [SDS].[usp_DistributorBacklogAddNew]
--declare 
@DistributorID int
  --set @DistributorID=14193
As

BEGIN
	set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)='', @bkDays int=0
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	set @bkDays=(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData)
	
	IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr create table #TotOdr(DistributorId int, PendingOrders int,TotalSale int, AvgDailySale int)
	declare @TSale int=0
	select @TSale= count(b.OrderRefNo)
	from DCMS.tblRefillOrderDtls b WITH (NOLOCK) inner join sds.tblactiveitems ai with (nolock) on b.pricecode=ai.pricecode and isnull(ai.Active,'N')='Y'
	where (b.DistributorId=@DistributorId) and (b.OrderStatusCode in ( 'DLVD')) 
	and cast(b.ActualDeliveryDate as date)>=DATEadd(dd,-(@bkDays),getdate()) 
	group by b.DistributorId

	declare @Str varchar(max)= 'insert into #TotOdr(DistributorId, PendingOrders, TotalSale, AvgDailySale)

	select r1.DistributorId, sum(case when OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'') then 1 else 0 end) Pending,
	((sum(case when OrderStatusCode =''DLVD'' then 1 else 0 end) )+ '+convert(nvarchar(5),@TSale) +') totalSale,
	((sum(case when OrderStatusCode =''DLVD'' then 1 else 0 end) )+ '+convert(nvarchar(5),@TSale) +')/('+convert(nvarchar(5),@bkDays) +')
	from DCMS.tblRefillOrderDtls'+@GroupCode+' r1 WITH (NOLOCK) inner join sds.tblactiveitems ai with (nolock) on r1.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
	where (r1.DistributorId='+convert(nvarchar(20),@DistributorId) +')
	group by r1.DistributorId'

	exec (@Str)	

	if exists(select 1 from sds.tblDistributorWiseBacklog where DistributorId=@DistributorId and BackLogOf='D' and cast(entrydate as date)=cast(getdate() as date))
	Begin		
		declare @POdrs int, @AvgS decimal(17,5) 
		select @POdrs=isnull(PendingOrders,0), @AvgS=isnull(AvgDailySale,0) from #TotOdr where DistributorId=@DistributorID
		
		update sds.tblDistributorWiseBacklog set TotalPendingOrder=isnull(@POdrs,0), EntryDate=getdate(), AvgSale=isnull(@AvgS,0), BackLog=(isnull(@POdrs,0)/isnull(nullif(@AvgS,0),1))
		where DistributorId=@DistributorID and cast(EntryDate as date) =cast(getdate() as date)		
				
		--set @RtnValue=@DistributorId
	End
	else
	Begin
		insert into sds.tblDistributorWiseBacklog(DistributorId,BackLogOf,EntryDate,TotalPendingOrder,AvgSale,BackLog)
		select DistributorId,'D',getdate(), isnull(PendingOrders,0),isnull(AvgDailySale,0),isnull(PendingOrders,0)/isnull(nullif(AvgDailySale,0),1)
		from #TotOdr
		where DistributorId=@DistributorID
		--set @RtnValue=SCOPE_IDENTITY()
	End

	update SDS.tblDistributorWiseBacklog set TotalPendingOrder= 0 where TotalPendingOrder is null
	update SDS.tblDistributorWiseBacklog set AvgSale= 0 where AvgSale is null
	update SDS.tblDistributorWiseBacklog set BackLog= 0 where BackLog is null

	drop table #TotOdr

	 --return @RtnValue;
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorBacklogHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorBacklogHistory 14193, '2019-12-01', '2020-01-07'

create proc [SDS].[usp_DistributorBacklogHistory]
--declare
@DistributorId int,
@FromDate datetime,
@ToDate datetime

--set @DistributorId=14193; set @FromDate='2019-12-01'; set @ToDate='2020-01-07'
as

BEGIN
	SELECT distinct bk.DistributorId, d.JDEDistributorCode, sds.fn_CamelCase(d.DistributorName) DistributorName,cast(bk.EntryDate as smalldatetime) EntryDate, 
		isnull(bk.TotalPendingOrder,0) TotalPendingOrder,round(isnull(bk.AvgSale,0),0) AvgSale, round(isnull(bk.BackLog,0),1) BackLogDays
	FROM SDS.tblDistributorWiseBacklog AS bk INNER JOIN DCMS.tblDistributorMaster AS d ON bk.DistributorId = d.DistributorId
	where bk.DistributorId=@DistributorId 
		and (cast(bk.EntryDate as date) between cast(isnull(@fromDate,getdate()) as date) and cast(isnull(@ToDate,getdate()) as date))
		Order by cast(bk.EntryDate as smalldatetime) desc
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorClusterAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorClusterAdd]
@DistributorId	int,
@ClusterId	int=0,
@ClusterName nvarchar(50),
@ActiveStatus	char(1),
@Action nvarchar(25),
@RtnValue bigint output
as	

BEGIN

	set @RtnValue=0; declare @ClusterIdNew bigint=0
	If (upper(@Action)='ADD')
	Begin		-- Check Duplicate Cluster Name under same Distributor
		IF NOT EXISTS (SELECT 1 FROM SDS.tblClusterMaster with(nolock) WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(AreaClusterName))) = ltrim(rtrim(lower(@ClusterName))))
		Begin
			INSERT INTO SDS.tblClusterMaster(DistributorId,AreaClusterName,LastUpdatedDatetime,IsActive) 
			Values(@DistributorId, @ClusterName,getdate(),'Y')	

			SET @RtnValue = SCOPE_IDENTITY()
			set @ClusterIdNew=@RtnValue
		End
		else
			SET @RtnValue = -1	
	End
	Else If (upper(@Action)='EDIT')
	Begin
		IF NOT EXISTS (SELECT 1 FROM SDS.tblClusterMaster with(nolock) WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(AreaClusterName))) = ltrim(rtrim(lower(@ClusterName))) and ClusterId<>@ClusterId)
		Begin
			UPDATE	SDS.tblClusterMaster SET AreaClusterName= @ClusterName,IsActive= @ActiveStatus, LastUpdatedDatetime= Getdate() where ClusterId= @ClusterId 
			
			SET @RtnValue =@ClusterId
			set @ClusterIdNew=@RtnValue
		End
		else
			SET @RtnValue = -1
	End

		

		
END




GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorClusterCoordinatesAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorClusterCoordinatesAdd]
@DistributorId	int,
@ClusterId	int=0,
@AreaClusterName varchar(100),
@AreaJSON	nvarchar(MAX),
@ActiveStatus	char(1),
@MajorAreaCode	nvarchar(max),
@RtnValue bigint output

as	

BEGIN

	---Save cluster Coodinates
		If not exists(select 1 from sds.tblDistributorClusterCoordinates WITH(NOLOCK) where DistributorId=@DistributorId and AreaClusterId=@ClusterId)
		Begin
			insert into sds.tblDistributorClusterCoordinates(DistributorId,AreaClusterId,AreaJSON,ActiveStatus,LastUpdateDateTime)
			values(@DistributorId,@ClusterId,@AreaJSON,'Y',getdate())

			set @RtnValue=scope_identity()
		End
		else
		Begin
			update sds.tblDistributorClusterCoordinates set AreaJSON=@AreaJSON,ActiveStatus=@ActiveStatus,LastUpdateDateTime=getdate()
			where DistributorId=@DistributorId and AreaClusterId=@ClusterId
			set @RtnValue=@ClusterId
		End

		BEGIN	-- Add Cluster Master Data for Names---Start -- Added BY Rajendra G
			If not exists(select 1 from sds.tblClusterMaster WITH(NOLOCK) where DistributorId=@DistributorId and ClusterId=@ClusterId)
			Begin
				insert into sds.tblClusterMaster(ClusterId,DistributorId,AreaClusterName,IsActive,LastUpdatedDatetime)
				values(@ClusterId,@DistributorId,@AreaClusterName,'Y',getdate())
			End
			else
			Begin
				update sds.tblClusterMaster set AreaClusterName=@AreaClusterName,IsActive=@ActiveStatus,LastUpdatedDatetime=getdate()
				where DistributorId=@DistributorId and ClusterId=@ClusterId
			End
		END

		If (isnull(@RtnValue,0)>0 and isnull(@MajorAreaCode,'')<>'')
		Begin
			declare @tblMajorAreaCode table(id int, MajorAreaCode nvarchar(100))
			insert into @tblMajorAreaCode select id,value from sds.fn_StringSplit(@MajorAreaCode,',')
			delete from sds.tblDistributorClusterMajorAreaMapping where DistributorId=@DistributorId and ClusterId=@ClusterId			-- delete old records then add new records
			
			insert into sds.tblDistributorClusterMajorAreaMapping(DistributorId, ClusterId,	MajorAreaCode,	LastUpdatedDatetime,IsActive)
			select @DistributorId, @ClusterId, MajorAreaCode, getdate(),'Y' from @tblMajorAreaCode
		End
	return @RtnValue
END


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorClusterCoordinatesAdd_New]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorClusterCoordinatesAdd_New]
@DistributorId	int,
@AreaClusterId	int,
@AreaJSON	nvarchar(MAX),
@ActiveStatus	char(1),
@MajorAreaCode	nvarchar(max),
@RtnValue bigint output
as	

BEGIN

	

	If not exists(select 1 from sds.tblDistributorClusterCoordinates_New WITH(NOLOCK) where DistributorId=@DistributorId and AreaClusterId=@AreaClusterId)
	Begin
		insert into sds.tblDistributorClusterCoordinates_New(DistributorId,AreaClusterId,AreaJSON,ActiveStatus,LastUpdateDateTime)
		values(@DistributorId,@AreaClusterId,@AreaJSON,@ActiveStatus,getdate())

		set @RtnValue=scope_identity()
	End
	else
	Begin
		update sds.tblDistributorClusterCoordinates_New
		set AreaJSON=@AreaJSON,
			ActiveStatus=@ActiveStatus,
			LastUpdateDateTime=getdate()
			where DistributorId=@DistributorId and AreaClusterId=@AreaClusterId

			--set @RtnValue=@AreaClusterId
			set @RtnValue = 1
	End

	If (isnull(@RtnValue,0)>0)
	Begin
		declare @tblMajorAreaCode table(id int, MajorAreaCode nvarchar(100))
		insert into @tblMajorAreaCode select id,value from sds.fn_StringSplit(@MajorAreaCode,',')
		delete from sds.tblDistributorClusterMajorAreaMapping_New where DistributorId=@DistributorId and ClusterId=@AreaClusterId			-- delete old records then add new records
			
		insert into tblDistributorClusterMajorAreaMapping_New(DistributorId, ClusterId,	MajorAreaCode,	LastUpdatedDatetime,IsActive)
		select @DistributorId, @AreaClusterId, MajorAreaCode, getdate(),'Y' from @tblMajorAreaCode
	End

END


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorClusterCoordinatesById]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_DistributorClusterCoordinatesById]
@DistributorId	int,
@AreaClusterId	int
as
BEGIN

	--OLD SP
	--select DistributorId, AreaClusterId, AreaJSON, ActiveStatus, LastUpdateDateTime 
	--from sds.tblDistributorClusterCoordinates 
	--where DistributorId=@DistributorId and (AreaClusterId=@AreaClusterId or @AreaClusterId = 0) AND AreaJSON IS NOT NULL

	--To Get AreaClusterName
	select dc.DistributorId, dc.AreaClusterId, dc.AreaJSON, dc.ActiveStatus, dc.LastUpdateDateTime, sds.fn_CamelCase(cm.AreaClusterName) AS AreaClusterName,cm.ClusterId
	from sds.tblDistributorClusterCoordinates as dc inner join [SDS].[tblClusterMaster] cm on cm.ClusterId = dc.AreaClusterId
	where dc.DistributorId=@DistributorId and (dc.AreaClusterId=@AreaClusterId or @AreaClusterId = 0) AND dc.AreaJSON IS NOT NULL
	
END



GO
/****** Object:  StoredProcedure [SDS].[Usp_DistributorClusterCoordinatesList_New]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[Usp_DistributorClusterCoordinatesList_New]
--declare
@DistributorId int,
@ClusterId bigint
--set @DistributorId=14193
--set @ClusterId=0
as
Begin
	declare @Table TABLE(ClusterId int, DistributorId int, ClusterName nvarchar(50), AreaJSON nvarchar(max), LastUpdatedDatetime DateTime, 
	IsActive nchar(3), AreaCount int, SelectArea nvarchar(max))
	insert into @Table
	SELECT AreaClusterId as ClusterId, DistributorId, 'Trading Area' as AreaClusterName, AreaJSON, LastUpdateDateTime, 'Y' as IsActive, 0 as AreaCount,'' as SelectArea 
	from SDS.tblDistributorClusterCoordinates_New where DistributorId = @DistributorId and AreaClusterId = 0 and @ClusterId = 0

	insert into @Table
	SELECT cc.AreaClusterId as ClusterId,cc.DistributorId, 
	(CASE WHEN(@ClusterId=1) THEN 'Trading Area' ELSE  SDS.fn_CamelCase(c.AreaClusterName) END) as ClusterName,cc.AreaJSON, c.LastUpdatedDatetime,c.IsActive, 
	(select count(MajorAreaCode) from sds.tblDistributorClusterMajorAreaMapping_New where AreaClusterId=c.ClusterId and DistributorId=@DistributorId) AreaCount,
	
	isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(ac.majorAreaCode,'')) 
	from sds.tblDistributorClusterMajorAreaMapping_New ac left outer join sds.tblAreaMaster a  WITH(NOLOCK) on a.AreaCode=ac.MajorAreaCode --ac.ClusterId=c.clusterId 
	where DistributorId=@DistributorId and clusterid=cc.AreaClusterId and ac.ClusterId=cc.AreaClusterId FOR XML PATH('')),1,1,'')),'') AS SelectArea
	FROM            SDS.tblDistributorClusterCoordinates_New cc left outer join 
	SDS.tblClusterMaster AS c WITH(NOLOCK) ON cc.AreaClusterId = c.ClusterId 

	where cc.DistributorId=@DistributorId and (cc.AreaClusterId=isnull(@ClusterId,0) or isnull(@ClusterId,0)=0)

	Select * from @Table
End


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorClusterMaster]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorClusterMaster 8131

Create  proc [SDS].[usp_DistributorClusterMaster]
--declare
@DistributorId int

as
BEGIN
	
	Select [ClusterId],[Regionid],[DistributorId],[AreaClusterName],[PickupLocation],[GodownId],[Latitude],[Longitude],
		[IsActive]

	From [SDS].[tblClusterMaster]
	Where DistributorId=@DistributorId
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorConsumerDtlsForGeocoding]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorConsumerDtlsForGeocoding]-- 0,'A'
@SACode nvarchar(max),	 -- '0' for All
@IsActive nvarchar(15)	 --	A-Active, I for Inactive, ALL for Both

as
BEGIN

SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName
,COUNT(c.UniqueConsumerId) as TotalConsumer
,COUNT(cl.UniqueConsumerId) as LocationFound
,COUNT(cd.UniqueConsumerId) as SavedInSDS
FROM DCMS.tblDistributorMaster AS d  with (nolock)
LEFT OUTER JOIN SDS.tblSAMaster AS s with (nolock) ON d.SACode COLLATE SQL_Latin1_General_CP1_CI_AS = s.SACode
Left outer join [DCMS].[tblConsumerMaster] c with (nolock) on c.DistributorID=d.DistributorId
Left outer join [DCMS].[tblConsumerLocation] cl with (nolock) on cl.UniqueConsumerId=c.UniqueConsumerId
Left outer join [SDS].[tblConsumerDetails] cd with (nolock) on cd.UniqueConsumerId=cl.UniqueConsumerId

where 
(d.SACode in (select value from sds.fn_StringSplit(@SACode,',')) or @SACode='0') and (d.StatusCode=@IsActive or @IsActive='ALL') 
and 
isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
GROUP BY d.DistributorID,d.JDEDistributorCode,d.DistributorName


END

GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorDashboardCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_DistributorDashboardCounts]  
--declare   
@DistributorId int  
--set @DistributorId=14145;   
  
as  
  
BEGIN  
 set FMTONLY OFF 
    
 DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)=''  
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
 if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  
  
 IF OBJECT_ID('tempdb..#DashboadCounts') IS NOT NULL DROP TABLE #DashboadCounts   
 create table #DashboadCounts(DistributorId int, PendingOrders int, TodaysTrips int, TodayScheduledOrders int, TodayDelivered int,  
 AllotedTrips int, NotAllotedTrips int, StockInHand int, BackLog decimal(18,2), BreakDownVehicle int,TodayPendingBreakdown int,
 NotInCludedInTrip int,CntConsumer int,AreaCount int)  
  
 insert into #DashboadCounts(DistributorId,PendingOrders,BackLog)  select @DistributorId,0,0  
  
 update #DashboadCounts set PendingOrders =   
 (select top 1 TotalPendingOrder from sds.tblDistributorWiseBacklog where DistributorId=@DistributorId and cast(EntryDate as date) =cast(getdate() as date) order by EntryDate desc)  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set BackLog =     
 (select top 1 case when (CAST(Backlog as DECIMAL(10,1))-convert(int,CAST(Backlog as DECIMAL(10,1))))=0.0 then convert(varchar(10), CAST(Backlog as int) )
 else convert(varchar(10), CAST(Backlog as DECIMAL(10,1)))  end Backlog  from sds.tblDistributorWiseBacklog where DistributorId=@DistributorId and cast(EntryDate as date) =cast(getdate() as date) order by EntryDate desc)  
 Where DistributorId=@DistributorId   
   
 update #DashboadCounts set TodaysTrips =   
 (select count(TripId) TodaysTrips from sds.tblTripPlanning where DistributorId=@DistributorId AND cast(TripDate as date) = cast(getdate() as date) group by DistributorId)  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set AllotedTrips =   
 (select count(TripId) AllotedTrips from sds.tblTripPlanning where DistributorId=@DistributorId AND cast(TripDate as date) = cast(getdate() as date)   
 and isnull(TripStatus,'0') not in('0','BREAKDOWN') group by DistributorId)  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set NotAllotedTrips =   
 (select count(TripId) AllotedTrips from sds.tblTripPlanning where DistributorId=@DistributorId AND cast(TripDate as date) = cast(getdate() as date)   
 and isnull(TripStatus,'0') in('0','BREAKDOWN') group by DistributorId)  
 Where DistributorId=@DistributorId  
    
 update #DashboadCounts set TodayScheduledOrders =   
 (select count(d.TripPlanningDetId) TodaysSchOrders from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on t.TripId=d.TripId   
 where cast(t.TripDate as date) = cast(getdate() as date) and DistributorId=@DistributorId group by DistributorId)  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set TodayDelivered =   
 (select count(OrderRefNo) from sds.tblTripPlanningDetails d inner join sds.tbltripplanning t on d.TripId=t.TripId   
 where t.DistributorId=@DistributorId and OrderStatus in ('Deliver','DLVD') and cast(ActualDeliveryDate as date)=cast(getdate() as date))  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set StockInHand =   
 (select sum(CurrentGoodStock) from sds.tblDistributorSystemStock where distributorId=@DistributorId and ItemID in (select ItemId from sds.tblItemCodeMaster))  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set BreakDownVehicle = (select count(vehicleId) from sds.tblBreakDown   
 where DistributorId=@DistributorId and isnull(IsRepaired,'N')='N' group by DistributorId)  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set TodayPendingBreakdown = (select count(vehicleId) from sds.tblBreakDown   
 where DistributorId=@DistributorId and isnull(IsConfirm,'N')='N' and cast(BreakDownDateTime as date)=cast(getdate() as date) group by DistributorId)  
 Where DistributorId=@DistributorId  
  
 update #DashboadCounts set NotInCludedInTrip =(select count(cd.UniqueConsumerId) from SDS.tblConsumerDetails cd with(nolock)  
 inner join sds.tblTripPlanningNotIncluded td on cd.UniqueConsumerId = td.UniqueConsumerId and cast(td.TripDate as date) = cast(GETDATE() as date)  
 where cd.DistributorID = @DistributorId and cd.ConsumerStatus='Active')  
  
 update #DashboadCounts set CntConsumer =cnt.CntConsumer, AreaCount =cnt.AreaCount
 from #DashboadCounts r1 inner join (
	SELECT da.DistributorId,  count(distinct da.AreaRefNo) AreaCount, COUNT(distinct c.UniqueConsumerId) AS CntConsumer
	FROM DCMS.tblDistributorAreaMaster AS da
	Left outer join SDS.tblConsumerDetails c ON da.AreaRefNo = c.AreaRefNo and upper(isnull(ConsumerStatus,''))='ACTIVE'
	left outer join SDS.tblAreaClusterMapping AS ac  on da.AreaRefNo=ac.AreaRefNo
	WHERE da.DistributorId=@DistributorId and  ac.AreaRefNo is null 
	GROUP BY da.DistributorId) cnt on r1.DistributorId=cnt.DistributorID

 select DistributorId, isnull(PendingOrders,0) PendingOrders, isnull(TodaysTrips,0) TodaysTrips,   
 isnull(TodayScheduledOrders,0) TodayScheduledOrders, isnull(TodayDelivered,0) TodayDelivered,  
 isnull(AllotedTrips,0) AllotedTrips,isnull(NotAllotedTrips,0) NotAllotedTrips, isnull(StockInHand,0) StockInHand,  
 isnull(BackLog,0) BackLog, isnull(BreakDownVehicle,0) BreakDownVehicle, isnull(TodayPendingBreakdown,0) TodayPendingBreakdown,  
 isnull(NotInCludedInTrip,0) NotInCludedInTrip,isnull(CntConsumer,0)CntConsumer,isnull(AreaCount,0)AreaCount  
  from #DashboadCounts  
  
  
 drop table #DashboadCounts  
END  
  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorDelBoyList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorDelBoyList 15139,'ALL'

CREATE proc [SDS].[usp_DistributorDelBoyList]
--declare
@DistributorId bigint,
@ActiveFlag nvarchar(20)
--set @DistributorId=15139 set @ActiveFlag='ALL'
as

SELECT distinct ds.StaffRefNo, ds.StaffInitials, SDS.fn_CamelCase(ds.StaffName) AS StaffName, ds.StaffStatusCode, ds.DistributorId, '' AS StaffAddress, 
	ds.ContactPhone1, ds.ContactPhone2, au.RoleId AS UserTypeId, r.RoleName, vdbm.VehicleId, v.VehicleNo, ds.WhetherDeliveryBoy, ds.IsGodownKeeper
FROM   DCMS.tblDistributorStaffDetails AS ds WITH (nolock) LEFT OUTER JOIN SDS.tblActiveUsers AS au WITH (nolock) ON au.StaffRefNo = ds.StaffRefNo
    left OUTER JOIN SDS.tblRoleMaster AS r WITH (nolock) ON au.RoleId = r.RoleId 
    LEFT OUTER JOIN SDS.tblVehicleDeliveryBoyMapping AS vdbm WITH (nolock) ON ds.StaffRefNo = vdbm.DeliveryBoyId 
	left OUTER JOIN SDS.tblVehicleMaster AS v WITH (nolock) ON v.VehicleId = vdbm.VehicleId
where ds.DistributorId=@DistributorId and (ds.StaffStatusCode=@ActiveFlag or isnull(@ActiveFlag,'')='ALL') 
and (ds.WhetherDeliveryBoy ='Y' or ds.WhetherDeliveryBoyND ='Y')   AND (ds.StaffName NOT LIKE 'DCMS%')
order by StaffName





GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorGodownAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	Distributor Godown Add Edit. Created: Rajendra G. Dtd: 07-06-2019

CREATE proc [SDS].[usp_DistributorGodownAddEdit]
@GodownId	numeric(18, 0),
@DistributorId	int,
@GodownNo	varchar(15),
@GodownAddress	varchar(255),
@Latitude	nvarchar(50),
@Longitude	nvarchar(50),
@ActiveFlag	char(1),
@GodownKeeperId	numeric(17, 0),	
@Action nvarchar(10),
@RtnValue bigint output

as

BEGIN
	set @RtnValue=0
	If (upper(@Action)='UPDATE')
	Begin		-- Check Duplicate Godown No under same Distributor
		IF NOT EXISTS (SELECT 1 FROM SDS.tblDistributorGodown with(nolock) WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(GodownNo))) = ltrim(rtrim(lower(@GodownNo))))
		Begin
			INSERT INTO SDS.tblDistributorGodown(GodownId,DistributorId,GodownNo,GodownAddress,Latitude,Longitude,ActiveFlag,LastUpdateDateTime)
			Values(@GodownId,@DistributorId,@GodownNo,@GodownAddress,@Latitude,@Longitude,'Y',getdate())
		
			SET @RtnValue = @GodownId
		End
		Else
		Begin
			UPDATE	SDS.tblDistributorGodown
			SET GodownNo= @GodownNo,
				GodownAddress= @GodownAddress,
				Latitude=@Latitude,
				Longitude=@Longitude,
				LastUpdateDateTime= Getdate()
			where GodownId= @GodownId and DistributorId=@DistributorId
			SET @RtnValue = @GodownId
		End

		IF(@RtnValue>0)		--- Add Mapping of godown keeper in seperate table
		BEGIN
			if not exists(select 1 from sds.tblDistributorGodownStaffMapping where GodownId=@GodownId)
			Begin
				insert into sds.tblDistributorGodownStaffMapping(GodownId,GodownKeeperId,LastUpdatedOn)
				select @GodownId,@GodownKeeperId,GETDATE()	
			End
			Else
			Begin
				update 	sds.tblDistributorGodownStaffMapping set GodownKeeperId=@GodownKeeperId, LastUpdatedOn=getdate() where GodownId=@GodownId
			End
			----	Update pickup location of cluster
			update sds.tblclusterMaster set Latitude=@Latitude, Longitude=@Longitude where DistributorId=@DistributorId and upper(isnull(PickupLocation,'G'))='G'
		END
	
	End
	Else If (upper(@Action)='DELETE')
	Begin
		UPDATE	SDS.tblDistributorGodown SET ActiveFlag= @ActiveFlag, LastUpdateDateTime= Getdate() where GodownId= @GodownId	

		SET @RtnValue = @GodownId
	End
END


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorGodownList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	if @distributorid =0 it will give all Godown. 
--	Activeflag=ALL for both active and inactive records
--		sds.usp_DistributorGodownList 15139, 0, 'ALL'

CREATE PROCEDURE [SDS].[usp_DistributorGodownList]
--declare
@DistributorId int,
@GodownId numeric(18,0),
@Flag varchar(10)
--set @DistributorId=0; set @GodownId=0; set @Flag='Y';
AS

BEGIN

	SELECT   dg.GoDownId, dg.DistributorId, dg.GodownNo, SDS.fn_CamelCase(dg.GoDownAddress) AS GodownAddress, isnull(dg.Capacity,0) Capacity, 
	dg.GodownValidFrom, dg.GodownValidTill, SDS.fn_CamelCase(dg.GoDownOwnerName) as GodownOwnerName, dg.AgreementType, 
	dg.AgreementValidFrom, dg.AgreementValidTill, lg.LastUpdateDateTime, isnull(lg.GodownKeeperId,0) GodownKeeperId, dst.StaffName AS GodownKeeper,
	isnull(dg.Latitude,lg.Latitude) AS Latitude, isnull(dg.Longitude,lg.Longitude) AS Longitude, ISNULL(lg.ActiveFlag,'Y') ActiveFlag, isnull(gk.GodownKeeperId,0) AS StaffRefNo
	FROM            DCMS.tblDistributorGodown AS dg LEFT OUTER JOIN
	SDS.tblDistributorGodown AS lg ON dg.GoDownId = lg.GodownId LEFT OUTER JOIN
	SDS.tblDistributorGodownStaffMapping AS gk WITH (nolock) ON lg.GodownId = gk.GodownId
	LEFT OUTER JOIN DCMS.tblDistributorStaffDetails dst WITH (nolock) ON  gk.GodownKeeperId=dst.StaffRefNo
	where (dg.DistributorId = @DistributorId or @DistributorId=0) and (lg.ActiveFlag = @Flag or @Flag='ALL') and (dg.GodownId =@GodownId or isnull(@GodownId,0)=0)
	and dg.ActiveFlag='Y'
END


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorGodownUpdateStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		Update DistributorGodown status/Flag
create PROCEDURE [SDS].[usp_DistributorGodownUpdateStatus]
@GodownId int,
@ActiveFlag char(1),			-- while delete status will be set to N
@UpdatedRow int output

AS
BEGIN
		UPDATE	SDS.tblDistributorGodown SET ActiveFlag = @ActiveFlag, LastUpdateDateTime=GETDATE() WHERE	GodownId = @GodownId  

		SET @UpdatedRow = @@ROWCOUNT
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorList]--0,'A'  
@SACode nvarchar(max),  -- '0' for All  
@IsActive nvarchar(15)  -- A-Active, I for Inactive, ALL for Both  
  
as  
BEGIN  
  
		SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName,SDS.fn_CamelCase( d.AddressLine1 ) as AddressLine1, 
		d.IsDistributorLive, SDS.fn_CamelCase( d.AddressLine2 ) as AddressLine2, SDS.fn_CamelCase( d.AddressLine3 ) as AddressLine3, d.DistrictCode,
		dt.DistrictName, d.TalukaCode, tk.TalukaName,d.CityCode, ct.CityName, d.StateCode,SDS.fn_CamelCase(st.StateName) as StateName, d.Pin, d.PhoneNo, 
		d.MobileNo,  d.Email, d.StatusCode, d.SACode,SDS.fn_CamelCase( s.SAName) as SAName,isnull(u.UserId,0) UserId,u.Status,  
		isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(dc.ConfigId,'')) from sds.tblDistributorConfigSetup dc where dc.DistributorId=d.DistributorId order by pkId FOR XML PATH('')),1,1,'')),'') AS Keydata,  
		isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(dc.ConfigValue,'')) from sds.tblDistributorConfigSetup dc where dc.DistributorId=d.DistributorId order by pkId FOR XML PATH('')),1,1,'')),'') AS ValueData  
		FROM DCMS.tblDistributorMaster AS d  with (nolock)  
		LEFT OUTER JOIN SDS.tblSAMaster AS s with (nolock) ON d.SACode COLLATE SQL_Latin1_General_CP1_CI_AS = s.SACode  
		Left outer join DCMS.tblStateMaster st with (nolock) on d.StateCode  =st.StateCode  
		Left outer join DCMS.tblCityMaster ct with (nolock) on ct.CityCode  =st.StateCode  
		Left outer join DCMS.tblTalukaMaster tk with (nolock) on tk.TalukaCode  =st.StateCode  
		Left outer join DCMS.tblDistrictMaster dt with (nolock) on dt.DistrictCode  =st.StateCode  
		Left outer join sds.tblUser u with (nolock) on d.DistributorId=u.RefNo and RoleId=3 
		where (d.SACode in (select value from sds.fn_StringSplit(@SACode,',')) or @SACode='0') and (d.StatusCode=@IsActive or @IsActive='ALL')   
		and isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
		and d.DistributorId in (select DistributorId from sds.tblDistributorItemPrice where isnull(ActiveFlag,'N')='Y')
		order by d.DistributorName  
  
END  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorList4Json]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorList4Json]
    
as    
BEGIN    
    
  SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName,  
  d.IsDistributorLive, d.MobileNo,  d.Email, d.StatusCode
  FROM DCMS.tblDistributorMaster AS d  with (nolock) inner join HPCLDCMS.INTERFACE.tblSDSDealers sd on d.DistributorId=sd.DistributorId
  where isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
  order by d.DistributorName

END    




GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorListForGC]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [SDS].[usp_DistributorListForGC] 14193
CREATE proc [SDS].[usp_DistributorListForGC]
@DistributorId int
as
BEGIN    
	SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName,
	d.IsDistributorLive, d.TalukaCode, d.MobileNo,  d.Email, d.StatusCode   
	FROM DCMS.tblDistributorMaster AS d  with (nolock)  
	where d.StatusCode='A' and isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
	and (d.DistributorId=@DistributorId or @DistributorId=0)
	order by d.DistributorName    
END  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorListForTrip]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_DistributorListForTrip] --'0','A'  
--declare
@SACode nvarchar(max),  
@IsActive nvarchar(15)  
  
as  
BEGIN  
  
		SELECT d.DistributorId, d.JDEDistributorCode, d.DistributorName,d.IsDistributorLive, d.PhoneNo, 
		d.MobileNo,  d.StatusCode, d.SACode,isnull(u.UserId,0) UserId,u.Status
		FROM DCMS.tblDistributorMaster AS d  with (nolock)  
		inner join SDS.tblOnBoardingCompleted ob with (nolock) on d.DistributorId=ob.DistributorId
		Left outer join sds.tblUser u with (nolock) on d.DistributorId=u.RefNo and RoleId=3 
		inner join SDS.tblTripDistributors td with(nolock) on d.DistributorId=td.DistributorId
		where (d.SACode in (select value from sds.fn_StringSplit(@SACode,',')) or @SACode='0') and (d.StatusCode=@IsActive or @IsActive='ALL')   
		and isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
		and d.DistributorId in (select DistributorId from sds.tblDistributorItemPrice where isnull(ActiveFlag,'N')='Y')
		and ob.IsOnBoardingStage1=2  --- Get list of stage2 distributor only for trip
		and d.DistributorId not in (select distinct DistributorId from SDS.tblTripPlanning with (nolock) where CAST(TripDate as date)=cast(getdate() as date))
		order by d.DistributorName  
  
END  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorListForTripsNewPara]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [SDS].[usp_DistributorListForTripsNewPara] --'0','A'  
--declare
@SACode nvarchar(max),  -- '0' for All  
@IsActive nvarchar(15)  -- A-Active, I for Inactive, ALL for Both  
  
as  
BEGIN  
  
		SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName,d.IsDistributorLive, d.PhoneNo, 
		d.MobileNo,  d.StatusCode, d.SACode,isnull(u.UserId,0) UserId,u.Status
		FROM DCMS.tblDistributorMaster AS d  with (nolock)  
		inner join SDS.tblOnBoardingCompleted ob with (nolock) on d.DistributorId=ob.DistributorId
		Left outer join sds.tblUser u with (nolock) on d.DistributorId=u.RefNo and RoleId=3 
		where (d.SACode in (select value from sds.fn_StringSplit(@SACode,',')) or @SACode='0') and (d.StatusCode=@IsActive or @IsActive='ALL')   
		and isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
		and d.DistributorId in (select DistributorId from sds.tblDistributorItemPrice where isnull(ActiveFlag,'N')='Y')
		and ob.IsOnBoardingStage1=2 and d.DistributorId in (14193,14145,9128,8118,15139,6659,6676)  --- Get list of stage2 distributor only for trip
		--and d.DistributorId not in (select distinct DistributorId from SDS.tblTripPlanning with (nolock) where CAST(TripDate as date)=cast(getdate() as date))
		order by d.DistributorName  
  
END  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorLocationAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorLocationAddEdit]
@DistributorId int,
@DLat nvarchar(50),
@DLong nvarchar(50),
@RetValue int output

as

BEGIN
	if not exists(select 1 from sds.tblDistributorLocation where DistributorId=@DistributorId)
	Begin
		Insert into sds.tblDistributorLocation(DistributorId, DLat, DLong) values(@DistributorId, @DLat, @DLong)
		set @RetValue=SCOPE_IDENTITY()

		if(@Dlat is not null and @DLong is not null) 
			update sds.tblDistributorLocation set Location=geography:: Point(@DLat, @DLong,4326) where DistributorId=@DistributorId
	End	
	else
	Begin
		update sds.tblDistributorLocation set DLat=@DLat, DLong=@DLong where DistributorId=@DistributorId
		
		if(@Dlat is not null and @DLong is not null) 
			update sds.tblDistributorLocation set Location=geography:: Point(@DLat, @DLong,4326) where DistributorId=@DistributorId

		set @RetValue=@@rowcount
	End
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorStaffList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorStaffList 14193,'ALL'

create proc [SDS].[usp_DistributorStaffList]
@DistributorId bigint,
@ActiveFlag nvarchar(20)

as
SELECT       ds.StaffRefNo, ds.StaffInitials, SDS.fn_CamelCase(ds.StaffName) as StaffName, ds.DistributorId, ds.StaffStatusCode, ds.ContactPhone1, 
	ds.ContactPhone2, 0 as Id, au.MobileNo, au.RoleId as UserTypeId, au.VersionNo, au.LastSeen, ds.Rolecode,
	case when WhetherDeliveryBoy='Y' then 'Delivery Boy' 
		 when WhetherEmployee='Y' then 'Employee'
		 when WhetherMechanic='Y' then 'Mechanic'
		 when WhetherOther='Y' then 'Other'
		 when WhetherESCMechanic='Y' then 'ESC Mechanic'
		 when WhetherDeliveryBoyND='Y' then 'Delivery Boy ND'
		 when IsGodownKeeper='Y' then 'Godown Keeper' 
		 else '' end as RoleName
FROM DCMS.tblDistributorStaffDetails AS ds with (nolock) left outer join sds.tblActiveUsers au with (nolock) on ds.StaffRefNo=au.StaffRefNo
where (ds.DistributorId=@DistributorId or ds.DistributorId=0)  and (ds.StaffStatusCode=@ActiveFlag or isnull(@ActiveFlag,'')='ALL') 
		AND (ds.StaffName NOT LIKE 'DCMS%')
order by ds.StaffName


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorStaffListForGodownMapping]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		 SDS.usp_DistributorStaffListForGodownMapping 0,15139


CREATE proc [SDS].[usp_DistributorStaffListForGodownMapping] --0,14193
--declare 
@GodownId bigint,
@DistributorId bigint

--set @GodownId=1048 set @DistributorId=15139

as

SELECT StaffRefNo, StaffInitials,SDS.fn_CamelCase( StaffName) as StaffName, StaffStatusCode, DistributorId, ''as StaffAddress, ContactPhone1, 
ContactPhone2, WhetherDeliveryBoy, WhetherEmployee, WhetherMechanic, WhetherOther, WhetherESCMechanic, 
WhetherDeliveryBoyND, IsGodownKeeper,  Rolecode
FROM DCMS.tblDistributorStaffDetails AS ds  with (nolock)
where DistributorId=@DistributorId and ds.StaffStatusCode='Active' AND (ds.StaffName NOT LIKE 'DCMS%')
and ds.StaffRefNo not in (select isnull(GodownKeeperId,0) from sds.tblDistributorGodownStaffMapping where isnull(GodownId,0) <> 0)
order by StaffName


GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorStockUpdate]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_DistributorStockUpdate @DistributorId,@ItemID,@FilledQuantity,@EmptyQuantity,@DefectiveQuantity,@LastUpdatedBy,@RtnValue

CREATE proc [SDS].[usp_DistributorStockUpdate]
@DistributorId	int,
@ItemID	int,
@FilledQuantity	int,
@EmptyQuantity	int,
@DefectiveQuantity	int,
@LastUpdatedBy	varchar(50),
@RtnValue bigint output

as

BEGIN
	if not exists(select 1 from sds.tblDistributorstock with (nolock) where DistributorId=@DistributorId and ItemID=@ItemID)
	Begin
		insert into sds.tblDistributorstock(DistributorId,ItemID,FilledQuantity,EmptyQuantity,DefectiveQuantity,LastUpdatedBy,LatsUpdatedDate)
		values(@DistributorId,@ItemID,@FilledQuantity,@EmptyQuantity,@DefectiveQuantity,@LastUpdatedBy,getdate())

		set @RtnValue=scope_identity()
	End
	Else
	Begin
		Update sds.tblDistributorstock
		set FilledQuantity=isnull(FilledQuantity,0)+isnull(@FilledQuantity,0),
			EmptyQuantity=isnull(EmptyQuantity,0)+ isnull(@EmptyQuantity,0),
			DefectiveQuantity=isnull(DefectiveQuantity,0)+isnull(@DefectiveQuantity,0),
			LastUpdatedBy=@LastUpdatedBy,
			LatsUpdatedDate=getdate()
		where DistributorId=@DistributorId and ItemID=@ItemID

		set @RtnValue=@@rowcount
	End

END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorStockUpdateDCMS_Sch]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorStockUpdateDCMS_Sch] 
--declare   
@DistributorId int  =0
--set @DistributorId=14145;   
as    
BEGIN  
    if exists(select 1 from sds.tblDistributorSystemStock  where (DistributorID=@DistributorId or @DistributorId=0))
		delete from sds.tblDistributorSystemStock where (DistributorID=@DistributorId or @DistributorId=0)    

	insert into sds.tblDistributorSystemStock (DistributorID,PriceCode,ItemId,PackageCode,ItemCategory,CurrentGoodStock,CurrentDefectiveStock,    
	ActiveFlag,LastUpdateDateTime,LastUpdateBy)    
 
	SELECT st.DistributorID, st.PriceCode, i.ItemCode, i.PackageCode, i.ItemCategory, st.CurrentGoodStock, st.CurrentDefectiveStock,     
	st.ActiveFlag, st.LastUpdateDateTime,'Admin'    
	FROM DCMS.tblDistributorSystemStock AS st INNER JOIN DCMS.tblItemPriceCodeMap AS i ON i.PriceCode = st.PriceCode and ItemCode in (1,2) 
	--inner join [HPGASDRDB1\MSSQLHPGASDR1,1530].[HPGASDB].INTERFACE.tblSDSDealers d on st.DistributorID=d.DistributorID  
	inner join HPCLDCMS.INTERFACE.tblSDSDealers d on st.DistributorID=d.DistributorID  
	where (st.DistributorID=@DistributorId or @DistributorId=0)    

	if exists(select 1 from sds.tblDistributorStock where (DistributorID=@DistributorId or @DistributorId=0))
		delete from sds.tblDistributorStock  where (DistributorID=@DistributorId or @DistributorId=0)    

	insert into sds.tblDistributorStock (DistributorId,ItemID,FilledQuantity,EmptyQuantity,DefectiveQuantity,LastUpdatedBy,LatsUpdatedDate)    
	select DistributorID,2, 
	sum(case when itemId=2 then isnull(CurrentGoodStock,0) else 0 end) FilledStk,
	sum(case when itemId=1 then isnull(CurrentGoodStock,0) else 0 end) EmptyStk,
	sum(case when itemId in (1,2) then isnull(CurrentDefectiveStock,0) else 0 end) DefStk,
	'Admin',getdate()
	from sds.tblDistributorSystemStock 
	where (DistributorID=@DistributorId or @DistributorId=0)    
	group by DistributorID

END  
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorStockUpdateFromDCMS]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE proc [SDS].[usp_DistributorStockUpdateFromDCMS]  
--declare   
@DistributorID int,  
@LastUpdateBy nvarchar(20)  
--set @DistributorID=15139  
  
as  
BEGIN
	if exists(select 1 from sds.tblDistributorSystemStock where DistributorID=@DistributorID)  
		delete from sds.tblDistributorSystemStock where DistributorID=@DistributorID  
  
	insert into sds.tblDistributorSystemStock(DistributorID,PriceCode,ItemId,PackageCode,ItemCategory,CurrentGoodStock,CurrentDefectiveStock,  
	ActiveFlag,LastUpdateDateTime,LastUpdateBy)  
  
	SELECT sstk.DistributorID, sstk.PriceCode, i.ItemCode, i.PackageCode, i.ItemCategory, sstk.CurrentGoodStock, sstk.CurrentDefectiveStock,   
	sstk.ActiveFlag, sstk.LastUpdateDateTime,isnull(@LastUpdateBy,'Admin')  
	FROM DCMS.tblDistributorSystemStock AS sstk INNER JOIN DCMS.tblItemPriceCodeMap AS i ON i.PriceCode = sstk.PriceCode  
	WHERE (sstk.DistributorID = @DistributorID)  
  
	declare @Filled int, @empty int, @Defective int  
	select @Filled=sum(isnull(CurrentGoodStock,0)) from sds.tblDistributorSystemStock where DistributorID=@DistributorID and itemId=2  
	select @empty=sum(isnull(CurrentGoodStock,0)) from sds.tblDistributorSystemStock where DistributorID=@DistributorID and itemId=1    
	select @Defective=sum(isnull(CurrentDefectiveStock,0)) from sds.tblDistributorSystemStock where DistributorID=@DistributorID and itemId in (1,2)  
  
	if exists(select 1 from sds.tblDistributorStock where DistributorId=@DistributorID)  
		delete from sds.tblDistributorStock where DistributorId=@DistributorID  
  
	insert into sds.tblDistributorStock(DistributorId,ItemID,FilledQuantity,EmptyQuantity,DefectiveQuantity,LastUpdatedBy,LatsUpdatedDate)  
	values (@DistributorID, 2, isnull(@Filled,0), ISNULL(@empty,0), @Defective,'ADMIN',getdate())  
  
END
GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorSystemStockUpdate]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_DistributorSystemStockUpdate  DistributorID,PriceCode,AddGoodQty,AddDefectiveQty,LastUpdateBy,RtnValue

CREATE proc [SDS].[usp_DistributorSystemStockUpdate]
@DistributorID	int,
@PriceCode	int,
@AddGoodQty	int,
@AddDefectiveQty	int,
@LastUpdateBy	varchar(20),
@RtnValue int output
	

as

declare @ItemId int, @PackageCode nvarchar(10), @ItemCategory nvarchar(10), @ActiveFlag char(1)

if not exists (select 1 from sds.tblDistributorSystemStock with (nolock) where DistributorID=@DistributorID and PriceCode=@PriceCode)
Begin
	select @ItemId=ItemCode, @PackageCode=PackageCode, @ItemCategory=ItemCategory, @ActiveFlag=ActiveFlag from DCMS.tblItemPriceCodeMap with (nolock) where PriceCode=@PriceCode
	insert into sds.tblDistributorSystemStock(DistributorID,PriceCode,ItemId,PackageCode,ItemCategory,CurrentGoodStock,
			CurrentDefectiveStock,ActiveFlag,LastUpdateBy,LastUpdateDateTime)
	values(@DistributorID,@PriceCode,@ItemId,@PackageCode,@ItemCategory,@AddGoodQty,@AddDefectiveQty,@ActiveFlag,@LastUpdateBy,getdate())

	set @RtnValue=SCOPE_IDENTITY()
End
else
Begin
	Update sds.tblDistributorSystemStock 
	set CurrentGoodStock=isnull(CurrentGoodStock,0)+isnull(@AddGoodQty,0),
		CurrentDefectiveStock=isnull(CurrentDefectiveStock,0)+isnull(@AddDefectiveQty,0),
		LastUpdateBy=@LastUpdateBy,
		LastUpdateDateTime=getdate()
	Where DistributorID=@DistributorID and PriceCode=@PriceCode

	set @RtnValue=@@ROWCOUNT
End

 


GO
/****** Object:  StoredProcedure [SDS].[Usp_DistributorTradingAreaCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.Usp_DistributorTradingAreaCoordinates 88888

CREATE proc [SDS].[Usp_DistributorTradingAreaCoordinates]
--declare
@DistributorId int
--set @DistributorId=88888
as
Begin
	set FMTONLY OFF

	declare @Table TABLE(TradingAreaId int, DistributorId int, ClusterName nvarchar(50), AreaJSON nvarchar(max), LastUpdatedDatetime DateTime, 
	IsActive nchar(3), AreaCount int, SelectArea nvarchar(max), ClusterArea nvarchar(max))
	
	insert into @Table
	SELECT cc.Id,cc.DistributorId, 'Trading Area',cc.AreaJSON, cc.LastUpdateDateTime,cc.ActiveStatus, 
	(select count(AreaRefNo) from sds.tblDistributorAreaGeoCoordinates where DistributorId=@DistributorId and ActiveStatus=1) AreaCount,
	
	isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(ac.AreaRefNo,'')) from sds.tblDistributorAreaGeoCoordinates ac 
	left outer join sds.tblAreaMaster a  WITH(NOLOCK) on a.AreaCode=ac.AreaRefNo 
	where DistributorId=@DistributorId FOR XML PATH('')),1,1,'')),'') AS SelectArea,

	isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(dc.MajorAreaCode,'')) from sds.tblDistributorClusterMajorAreaMapping dc 
	where DistributorId=@DistributorId FOR XML PATH('')),1,1,'')),'') AS ClusterArea
	
	FROM SDS.tblDistributorTradingAreaCoordinates cc 
	where cc.DistributorId=@DistributorId 

	Select * from @Table
End



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorTradingAreaCoordinatesAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorTradingAreaCoordinatesAdd]
--declare
@DistributorId	int,
@AreaJSON	nvarchar(MAX),
@ActiveStatus	char(1),
@MajorAreaCode	nvarchar(max),
@RtnValue bigint output
as
--set @DistributorId=6591; set @AreaJSON=''; 
--set @ActiveStatus='Y'; set @MajorAreaCode=''

BEGIN

	If not exists(select 1 from sds.tblDistributorTradingAreaCoordinates WITH(NOLOCK) where DistributorId=@DistributorId)
	Begin
		insert into sds.tblDistributorTradingAreaCoordinates(DistributorId,AreaJSON,ActiveStatus,LastUpdateDateTime) 
		values(@DistributorId,@AreaJSON,@ActiveStatus,getdate())

		set @RtnValue=scope_identity()
	End
	else
	Begin
		update sds.tblDistributorTradingAreaCoordinates set AreaJSON=@AreaJSON, ActiveStatus=@ActiveStatus, LastUpdateDateTime=getdate() where DistributorId=@DistributorId
		
		set @RtnValue = (select isnull(id,0) from sds.tblDistributorTradingAreaCoordinates where DistributorId=@DistributorId)
	End

	If (isnull(@RtnValue,0)>0 and isnull(@MajorAreaCode,'')<>'')
	Begin
		declare @tblMajorAreaCode table(id int, MajorAreaCode nvarchar(100))
		insert into @tblMajorAreaCode select id,value from sds.fn_StringSplit(@MajorAreaCode,',')
		
		delete from sds.tblDistributorTradingAreaMajorAreaMapping where DistributorId=@DistributorId and MajorAreaCode not in (select MajorAreaCode from @tblMajorAreaCode)
		print 1	
		insert into sds.tblDistributorTradingAreaMajorAreaMapping(DistributorId, TradingAreaId, MajorAreaCode, LastUpdatedDatetime,IsActive)
		select @DistributorId, @RtnValue, MajorAreaCode, getdate(),'Y' from @tblMajorAreaCode
		where MajorAreaCode not in (select MajorAreaCode from sds.tblDistributorTradingAreaMajorAreaMapping where DistributorID=@DistributorId)

		delete from sds.tblDistributorAreaGeoCoordinates where DistributorId=@DistributorId and AreaRefNo not in (select MajorAreaCode from @tblMajorAreaCode)
		insert into SDS.tblDistributorAreaGeoCoordinates( DistributorId, AreaRefNo, AreaJSON, ActiveStatus, LastUpdateDateTime)
		select @DistributorId, MajorAreaCode,c.AreaJSON,1, getdate() from @tblMajorAreaCode m inner join sds.tblGeoCoordinateMaster c on m.MajorAreaCode=c.AreaCode
		where MajorAreaCode not in (select AreaRefNo from sds.tblDistributorAreaGeoCoordinates where DistributorID=@DistributorId)
	End            
END

GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorTradingAreaCoordinatesDrawEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorTradingAreaCoordinatesDrawEdit]
--declare
@DistributorId	int,
@MajorAreaCode	nvarchar(200),
@AreaJSON	nvarchar(MAX),
@NewAreaJSON	nvarchar(MAX),
@TradingAreaJSON nvarchar(MAX),
@RtnValue bigint output 
as
--set @DistributorId=88888; set @AreaJSON=''; set @TradingAreaJSON='Y'; set @MajorAreaCode=''

BEGIN

	IF (isnull(@TradingAreaJSON,'')<>'')		--(ISJSON(@TradingAreaJSON) > 0)
	Begin
		update sds.tblDistributorTradingAreaCoordinates set AreaJSON=@TradingAreaJSON, LastUpdateDateTime=getdate() where DistributorId=@DistributorId
		set @RtnValue = (select isnull(id,0) from sds.tblDistributorTradingAreaCoordinates where DistributorId=@DistributorId)
	End

	-- update new edited JSOn with same MajorAreaCode.
	update SDS.tblDistributorAreaGeoCoordinates set AreaJSON=@AreaJSON where DistributorId=@DistributorId and AreaRefNo=@MajorAreaCode
	
	if (isnull(@NewAreaJSON,'')<>'')		--- create new area if divided in 2 parts.
	Begin
		-- add new created area fencing 
		declare @NewMajorAreaCode nvarchar(100); 
		set @NewMajorAreaCode= convert(nvarchar(15),@DistributorId)+convert(nvarchar(15),IDENT_CURRENT('sds.tblDistributorAreaGeoCoordinates') + IDENT_INCR('sds.tblDistributorAreaGeoCoordinates'))+'_'+@MajorAreaCode

		insert into SDS.tblDistributorAreaGeoCoordinates(DistributorId, AreaRefNo, AreaJSON, ActiveStatus, LastUpdateDateTime)
		values (@DistributorId, @NewMajorAreaCode,@NewAreaJSON,1, getdate())
	End

	return @RtnValue
END



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorTradingAreaMappingAddEdit]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	sds.usp_DistributorTradingAreaMappingAddEdit 338,14193,'123,456,789,8131', 0

create Proc [SDS].[usp_DistributorTradingAreaMappingAddEdit]
@SAId	int,
@DistributorId	int,
@AdjDistributorId	nvarchar(500),
@RetValue bigint output

as

BEGIN
	declare @Distributors table(id int, DistributorId int)

	insert into @Distributors select id,value from sds.fn_StringSplit(@AdjDistributorId,',')

	delete from sds.tblDistributorTradingAreaMapping where DistributorId=@DistributorId			-- delete old records then add new records

	insert into sds.tblDistributorTradingAreaMapping(SAId,DistributorId,AdjDistributorId,IsActive,LastUpdatedDatetime)
	select @SAId, @DistributorId, ar.DistributorId, 'Y', getdate() from @Distributors ar

		set @RetValue=SCOPE_IDENTITY()
	
END




GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorTripBatchStatusAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [SDS].[usp_DistributorTripBatchStatusAdd]
--declare
@DistributorId int,
--@TripBatchStatus sds.TripBatchStatus readonly
@TripBatchStatus sds.TripBatchStatus readonly

as

Begin
	declare @RetValue int ; set @RetValue=0

	insert into sds.tblDistributorTripBatchStatus(DistributorId,TripBatchDate,TripBatchId,TripBatchStatus,LastUpdatedOn)
	select distinct DistributorId,TripBatchDate,TripBatchId,TripBatchStatus, GETDATE() 
	from @TripBatchStatus where (DistributorId=@DistributorId or @DistributorId=0)

	set @RetValue=@@ROWCOUNT

	return @RetValue
End



GO
/****** Object:  StoredProcedure [SDS].[usp_DistributorwiseCosumerCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_DistributorwiseCosumerCounts]
--declare 
@DistributorID int,
@AreaRefNo numeric(17, 0)

--set @DistributorID=15139 set @AreaRefNo=0

as

BEGIN
		SELECT c.DistributorID,
		count(distinct c.UniqueConsumerId) TotalConsumers,
		sum(case when cd.UniqueConsumerId is not null then 1 else 0 end) RevGeoDoneConsumers,
		--count(distinct c.UniqueConsumerId) - sum(case when cd.UniqueConsumerId is not null then 1 else 0 end) 
		0 as PendingRevGeoConsumers
		FROM DCMS.tblConsumerMaster AS c WITH (nolock)
		inner join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo
		left outer join sds.tblConsumerDetails cd on c.UniqueConsumerId=cd.UniqueConsumerId
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo = 0)
		group by c.DistributorID
END


GO
/****** Object:  StoredProcedure [SDS].[usp_EmailConfigurationAdd]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_EmailConfigurationAdd]
--declare
@EmailForId	int,
@EmpNo	varchar(max),
@CCId varchar(max),
@RetValue int output

--set @EmailForId=2; set @EmpNo='30037800,30044370'; set @CCId='2,3'

As
Begin
	set @RetValue=0
	if exists (select 1 from sds.tblEmailConfiguration where EmailForId=@EmailForId) 
	Begin 
		delete from sds.tblEmailConfiguration where EmailForId=@EmailForId 
	end

	insert into sds.tblEmailConfiguration(OfficerRole,EmailForId,EmpNo,EmpEmail,LastUpdatedDate)
	select f.OfficerRole,@EmailForId,a.value,f.Email,getdate() from sds.fn_StringSplit(@EmpNo,',') a inner join sds.tblOfficerDetails f on a.value=f.EmployeeNo 

	insert into sds.tblEmailConfiguration(OfficerRole,EmailForId,EmpNo,EmpEmail,LastUpdatedDate)
	select 'ADMIN',@EmailForId,a.value,e.Email,getdate() from sds.fn_StringSplit(@CCId,',') a inner join sds.tblEmailCCPerson e on a.value=e.EmailCCPersonId
	
	set @RetValue=scope_identity()
	select @RetValue
End

	


GO
/****** Object:  StoredProcedure [SDS].[usp_EmailForLowestInCompleteStepCountSchedulerList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_EmailForLowestInCompleteStepCountSchedulerList]   
--declare
@Role varchar(50),@EmailFor int
as  
--set @Role = 'ADMIN'; set @EmailFor = 1;
BEGIN  
    IF(@Role = 'ADMIN')  
 BEGIN  
 SELECT   
    [EmpNo] as ID  
      ,[OfficerRole] as Role  
      ,[EmpEmail] as Email  
	  ,es.[LastUpdatedDate] as LastUpdatedDate
  FROM [SDS].[tblEmailConfiguration] ec
  inner join [SDS].[tblEmailForStage] es ON ec.EmailForId = es.EmailForId
   WHERE OfficerRole ='ADMIN' and ec.EmailForId=@EmailFor    
  END  
  ELSE   
  BEGIN  
  SELECT   
     [EmpNo] as ID  
      ,[OfficerRole] as Role  
      ,[EmpEmail] as Email  
	  ,es.[LastUpdatedDate] as LastUpdatedDate
  FROM [SDS].[tblEmailConfiguration] ec
  inner join [SDS].[tblEmailForStage] es ON ec.EmailForId = es.EmailForId
   WHERE OfficerRole !='ADMIN' and ec.EmailForId=@EmailFor    
  END  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_EmailForSchedulerList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
  
  
CREATE proc [SDS].[usp_EmailForSchedulerList]   
@Role varchar(50)  
  
as  
BEGIN  
    IF(@Role = 'ALL')  
 BEGIN  
 SELECT  [ID]  
      ,[Role]  
      ,[RefCode]  
      ,[Name]  
      ,[Email]  
      ,[ActiveFlag]  
      ,[LastUpdateBy]  
      ,[LastUpdateDateTime]  
  FROM [SDS].[tblSchedulerEmails] WHERE  ActiveFlag=1  
  END  
  ELSE  
  BEGIN  
  SELECT  [ID]  
      ,[Role]  
      ,[RefCode]  
      ,[Name]  
      ,[Email]  
      ,[ActiveFlag]  
      ,[LastUpdateBy]  
      ,[LastUpdateDateTime]  
  FROM [SDS].[tblSchedulerEmails] WHERE Role=@Role and ActiveFlag=1  
  END  
  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GCDataForAnandSir]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Proc [SDS].[usp_GCDataForAnandSir]

as

exec('select d.JDEDistributorCode,d.DistributorName, cl.Source, count(cl.UniqueConsumerId) ConsumerCount 
from [HPGASDRDB1\MSSQLHPGASDR1,1530].[HPGASDB].ESV.tblConsumerLocation cl inner join DCMS.tblConsumerMaster c on cl.UniqueConsumerId=c.UniqueConsumerId
inner join DCMS.tblDistributorMaster d on c.DistributorID=d.DistributorId
where cl.UpdatedDate>=''2024-02-01''
group by d.JDEDistributorCode,d.DistributorName, cl.Source
order by d.DistributorName, cl.Source')


GO
/****** Object:  StoredProcedure [SDS].[usp_GenerateTripsForClusters]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [SDS].[usp_GenerateTripsForClusters]
--declare
@DistributorId int
--set @DistributorId=14145

as

BEGIN
SET FMTONLY OFF
----------------- Get Cluster wise order count to pick for trip planning
	declare  @clusterwiseOrderCnt table(id int identity,clusterId bigint,ClusterName nvarchar(200),NoOfTrips int, vehicleId bigint, VehCapacity int, 
	orderCnt int, FromDistributorId int, FromClusterId bigint)
	
	insert into @clusterwiseOrderCnt	
	SELECT   c.clusterid, c.AreaClusterName, isnull(dc.NoOfTrip,0),v.VehicleId, isnull(v.RTOCapacity,0),isnull(dc.NoOfTrip,0)* isnull(v.RTOCapacity,0), 
	tb.FromDistributorId, tb.FromClusterId
	FROM sds.tblClusterMaster c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId
	left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
	left outer join SDS.tblVehicleMaster AS v ON v.VehicleId = dv.VehicleId	
	left outer join sds.tblTransferBooking tb on tb.ToDistributorId=@DistributorId and tb.ToClusterId=c.ClusterId
	and IsTransfer='Y' and cast(getdate() as date) between cast(tb.FromDate as date) and cast(isnull(tb.ToDate, cast(getdate() as date)) as date)
	where c.IsActive='Y' and dc.IsActive='Y' and dv.Active='Y' and v.Active='Y' and c.distributorId=@DistributorId
	
	--select * from @clusterwiseOrderCnt
-----------------------------------------------------------------------------------
	
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

	CREATE TABLE #tblpendingOdr(id int identity, BackLogdays int,ClusterId bigint,VehicleId bigint, StaffRefNo numeric(17, 0),DistributorID int,
	AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),ConsumerNo int,ConsumerName varchar(100),
	AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),PlaceId nvarchar(500),ConMobileNo numeric(10,0),ConAddress nvarchar(500),
	NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money, 
	Source nvarchar(50),InCluster bit, InTraidingArea bit, IsVerified bit, FromDistributorID int, FromClusterId bigint)

	declare @c int, @c1 int, @OrderCnt int, @ClusterId bigint, @strquery varchar(max), @VehicleId bigint, @OrderPickBuffer int
	declare @ClusterIdFrom bigint, @DistributorIdFrom int, @GroupCode2 VARCHAR(3)='', @strquery2 varchar(max), @DelBoyNo numeric(17, 0)
	select @c1=max(id) from @clusterwiseOrderCnt

	set @c=1

	While (@c<=@c1)
	Begin
		set @OrderCnt=0; set @ClusterId=0; set @strquery=''; set @VehicleId=0;
		select @OrderCnt=orderCnt, @ClusterId=clusterId,@VehicleId=VehicleId, @ClusterIdFrom=isnull(FromClusterId,0), @DistributorIdFrom=isnull(FromDistributorId,0) 
		from @clusterwiseOrderCnt where id=@c
		set @OrderPickBuffer=(select top 1 isnull(OrderPickBuffer,0) from sds.tblAppConfigData)
		set @OrderCnt=@OrderCnt+(@OrderCnt*@OrderPickBuffer/100)
	
		set @strquery=( '
			insert into #tblpendingOdr (BackLogdays,ClusterId,VehicleId, StaffRefNo,DistributorID,AreaRefNo,OrderRefNo,OrderNo,
				OrderDate,UniqueConsumerId,ConsumerNo,ConsumerName,	AreaName,Latitude,Longitude,PlaceId,ConMobileNo,ConAddress,NatureCode, 
				PriceCode,ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,Source, InCluster, InTraidingArea, 
				IsVerified,FromDistributorID, FromClusterId)
		
			select top '+convert(nvarchar(5),@OrderCnt)+' o.*  from (
			SELECT datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId,'+convert(nvarchar(15),@VehicleId)+' VehicleId, dc.StaffRefNo, 
				o.DistributorID, o.AreaRefNo, o.OrderRefNo, o.OrderNo,o.OrderDate, o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, 
				c.Latitude, c.Longitude,c.PlaceId, c.MobileNo, c.Address, o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,
				o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP, c.Source,isnull(c.InCluster,0) InCluster,
				isnull(c.inTradingArea,0) inTradingArea,isnull(c.IsVerified,0) IsVerified, 0 FromDistributorID, 0 FromClusterId
			FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) INNER JOIN 
				SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
				DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
				sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
				SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
				SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
				DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
				sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId  LEFT OUTER JOIN
				(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
					on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)
				) t on t.OrderRefNo = o.OrderRefNo		
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' 
				AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND dc.ClusterId = '+convert(nvarchar(20),@ClusterId)+'  
				and c.inCluster=1 and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+') 
				AND t.OrderRefNo IS NULL and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
			' )

		set @strquery2=''; set @DelBoyNo=0;
		if (@ClusterIdFrom>0 and @DistributorIdFrom>0)
		Begin
			SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorIdFrom
			if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2
			select @DelBoyNo=staffrefNo from SDS.tblDeliveryBoyClusterMapping with(nolock) where ClusterId=@ClusterId
			set @strquery2=( '
			UNION

			SELECT datediff(d,o.OrderDate,getdate()) DaysDelay, '+convert(nvarchar(20),@ClusterId)+','+convert(nvarchar(15),@VehicleId)+' 
				VehicleId, '+convert(nvarchar(25),@DelBoyNo)+', '+convert(nvarchar(25),@DistributorId)+', o.AreaRefNo, o.OrderRefNo, o.OrderNo,o.OrderDate,
				o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName,c.Latitude, c.Longitude, c.PlaceId, c.MobileNo, c.Address,
				o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP, c.Source, 
				isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,isnull(c.IsVerified,0) IsVerified, 
				o.DistributorID FromDistributorID, dc.ClusterId FromClusterId
			FROM DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) inner JOIN 
				SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
				DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
				sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
				SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
				SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
				DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
				sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId  LEFT OUTER JOIN
				(	select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
					on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)
				) t on t.OrderRefNo = o.OrderRefNo		
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorIdFrom)+' 
				AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND dc.ClusterId = '+convert(nvarchar(25),@ClusterIdFrom)+'  and (c.inCluster=1)
				and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorIdFrom)+') 
				AND t.OrderRefNo IS NULL and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
			) o 	order by o.OrderDate, o.orderrefno' )
		End
		else
		Begin
			set @strquery2=( ' ) o  order by o.OrderDate, o.orderrefno')
		End

		set @strquery=@strquery +' '+@strquery2
		print @strquery
		exec (@strquery)

	set @c=@c+1
	End

-- commented for new SP changes as now location is already Verified.	
--if exists(select 1 from #tblpendingOdr where ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))
--Begin
--print 1
--	select 0 As IsLocated, po.BackLogdays,po.ClusterId, po.VehicleId,po.StaffRefNo,po.DistributorID,po.AreaRefNo,po.OrderRefNo,po.OrderNo,po.OrderDate,
--	po.UniqueConsumerId,c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName ,SDS.fn_CamelCase( po.AreaName ) as AreaName ,po.Latitude,po.Longitude,po.PlaceId,c.MobileNo ConMobileNo,
--	c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress, cast(c.pin as numeric(6,0)) as pin, po.NatureCode,po.PriceCode,
--	SDS.fn_CamelCase( po.ItemDescription ) as ItemDescription,po.OrderQuantity,po.OrderStatusCode,po.ExpectedDeliveryDate,po.RSP,ISNULL(SDS.fn_CamelCase( po.Source),'-') as Source,
--	po.FromDistributorID, po.FromClusterId
--	from #tblpendingOdr po left outer join DCMS.tblConsumerMaster AS c WITH (NOLOCK) on po.UniqueConsumerId=c.UniqueConsumerId
--	inner join DCMS.tblDistributorAreaMaster AS ar WITH (NOLOCK) on c.AreaRefNo=ar.AreaRefNo
--	where c.ConsumerStatus='Active' and (isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%') 
--	order by c.ConsumerName
--End
--else
--Begin
--print 2

	select BackLogdays,ClusterId, VehicleId, StaffRefNo, DistributorID, AreaRefNo, OrderRefNo, OrderNo, OrderDate,
	UniqueConsumerId,ConsumerNo,SDS.fn_CamelCase( ConsumerName ) as ConsumerName,SDS.fn_CamelCase(AreaName) as AreaName,Latitude,Longitude,PlaceId,ConMobileNo,
	ConAddress ConsumerAddress,cast(0 as numeric(6,0)) as pin,NatureCode,PriceCode, InCluster, InTraidingArea, IsVerified,
	SDS.fn_CamelCase( ItemDescription ) as ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,ISNULL(SDS.fn_CamelCase(Source),'-') as Source,
	FromDistributorID, FromClusterId
	from #tblpendingOdr 
	where not( ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))
	order by clusterId, OrderDate

drop table #tblpendingOdr
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GenerateTripsForClustersDefaultCase]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GenerateTripsForClustersDefaultCase 14145
CREATE proc [SDS].[usp_GenerateTripsForClustersDefaultCase]
--declare
@DistributorId int
--set @DistributorId=14193

as

BEGIN
SET FMTONLY OFF

	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max),@FromDid int, @GroupCode2 nvarchar(5), @SameClusterFlag nvarchar(10), @StrCond nvarchar(1000)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode	

	select @SameClusterFlag=isnull([Value],'Y') from sds.tblAppConfiguration where [key]='Trip-InSameCluster' 
	if (@SameClusterFlag='Y') set @StrCond='  and dc.ClusterId = c.ClusterId '  else set  @StrCond=' '

	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr
	CREATE TABLE #tblpendingOdr(id int identity,DistributorID int, BackLogdays int,ClusterId bigint, VehicleId bigint, VehicleNo nvarchar(50), 
	StaffRefNo numeric(17, 0),AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),ConsumerNo int,
	ConsumerName varchar(100),AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),ConMobileNo numeric(10,0),ConAddress nvarchar(500),
	NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money, 
	Source nvarchar(50),InCluster bit, InTraidingArea bit, IsVerified bit, FromDistributorID int, FromClusterId bigint, VehCapacity int, NoOfTrips int )
	
	--declare @Sourcestr nvarchar(1000)='', @Sourcestr2 nvarchar(1000)=''
	--Begin  ---for trip only
	--	set @Sourcestr= (select isnull((STUFF((select ', ' + case when lower(SourceName)= 'hppay' then 'nullif(HPPayLatitude,'''')' 
	--	when lower(SourceName)= 'vitaran' then 'nullif(VitaranLatitude,'''')'	when lower(SourceName)= 'miapp' then 'nullif(MILatitude,'''')'
	--	when lower(SourceName)= 'auto' then 'nullif(AutoLatitude,'''')'	when lower(SourceName)= 'manual' then 'nullif(ManualLatitude,'''')'
	--	when lower(SourceName)= 'ezygas' then 'nullif(EzygasLatitude,'''')' end	from sds.tblConsumerGCSequenceNo 
	--	where DistributorId=0 order by TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)

	--	set @Sourcestr2= (select isnull((STUFF((select ', ' + case when lower(SourceName)= 'hppay' then 'nullif(HPPayLongitude,'''')' 
	--	when lower(SourceName)= 'vitaran' then 'nullif(VitaranLongitude,'''')'	when lower(SourceName)= 'miapp' then 'nullif(MILongitude,'''')'
	--	when lower(SourceName)= 'auto' then 'nullif(AutoLongitude,'''')'	when lower(SourceName)= 'manual' then 'nullif(ManualLongitude,'''')'
	--	when lower(SourceName)= 'ezygas' then 'nullif(EzygasLongitude,'''')' end	from sds.tblConsumerGCSequenceNo 
	--	where DistributorId=0 order by TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)
	--	--select @Sourcestr,@Sourcestr2
	--End

	set @strquery=( '
		insert into #tblpendingOdr (DistributorID,BackLogdays,ClusterId,VehicleId,VehicleNo,StaffRefNo,AreaRefNo,OrderRefNo,OrderNo,OrderDate,
			UniqueConsumerId,ConsumerNo,ConsumerName,AreaName,Latitude,Longitude,ConMobileNo,ConAddress,NatureCode,PriceCode,ItemDescription, 
			OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,Source,InCluster,InTraidingArea,IsVerified,FromDistributorID,FromClusterId,VehCapacity,NoOfTrips)
				
		SELECT o.DistributorID,datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId,vd.VehicleId, v.VehicleNo, dc.StaffRefNo, o.AreaRefNo,
			o.OrderRefNo,o.OrderNo,o.OrderDate,	o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, 
			c.Latitude, c.Longitude, c.MobileNo, c.Address,o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,
			o.ExpectedDeliveryDate,0 RSP,c.Source, isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,
			isnull(c.IsVerified,0) IsVerified, 0 FromDistributorID, 0 FromClusterId,v.RTOCapacity,dc.NoOfTrip
		FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) INNER JOIN 
			SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
			DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
			sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
			SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
			SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
			sds.tblVehicleDeliveryBoyMapping vd with (NOLOCK) on dc.StaffRefNo=vd.DeliveryBoyId inner join
			sds.tblVehicleMaster v with (NOLOCK) on v.VehicleId=vd.VehicleId INNER JOIN
			DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
			sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId 	
		WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' 
			AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND (c.inCluster=1)
			and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
			AND o.OrderRefNo not in (select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join 
			SDS.tblTripPlanningDetails d with(nolock) on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)	)
			and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''	
		' )

		set @strquery=@strquery + @StrCond
		print @strquery
		exec (@strquery)
		
		select @FromDid=isnull(FromDistributorId,0) from sds.tblTransferBooking where ToDistributorId=@DistributorId

		--select @FromDid ; select * from sds.tblTransferBooking where ToDistributorId=@DistributorId
		
		set @strquery=''

		if (@FromDid>0)
		Begin
			SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDid
			if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

			set @strquery=( '
			insert into #tblpendingOdr (DistributorID,BackLogdays,ClusterId,VehicleId,VehicleNo,StaffRefNo,AreaRefNo,OrderRefNo,OrderNo,OrderDate,
			UniqueConsumerId, ConsumerNo,ConsumerName,AreaName,Latitude,Longitude,ConMobileNo,ConAddress, NatureCode, PriceCode, ItemDescription, 
			OrderQuantity, OrderStatusCode, ExpectedDeliveryDate,RSP, Source, InCluster, InTraidingArea,IsVerified,FromDistributorID,
			FromClusterId,VehCapacity,NoOfTrips)
		
			SELECT tb.ToDistributorId, datediff(d,o.OrderDate,getdate()) DaysDelay, tb.ToClusterId, vd.VehicleId,v.VehicleNo, toDB.StaffRefNo,
				o.AreaRefNo, o.OrderRefNo,o.OrderNo,o.OrderDate, o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, 
				c.Latitude, c.Longitude, c.MobileNo, c.Address,o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity, 
				o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP,c.Source, isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,
				isnull(c.IsVerified,0) IsVerified,tb.FromDistributorId, tb.FromClusterId,v.RTOCapacity,toDB.NoOfTrip
			FROM DCMS.tblRefillOrderDtls'+@GroupCode2 +' AS o WITH (NOLOCK) 
				INNER JOIN SDS.tblConsumerDetails AS c WITH (nolock) ON c.UniqueConsumerId = o.UniqueConsumerId
				INNER JOIN DCMS.tblItemPriceCodeMap AS i WITH (NOLOCK) ON o.PriceCode = i.PriceCode
				INNER JOIN SDS.tblActiveItems AS ai WITH (nolock) ON o.PriceCode = ai.PriceCode AND ISNULL(ai.Active, ''N'') = ''Y''
				inner join DCMS.tblDistributorAreaMaster AS da WITH (nolock) ON da.AreaRefNo = o.AreaRefNo
				INNER JOIN SDS.tblAreaClusterMapping AS acm WITH (nolock) ON acm.AreaRefNo = o.AreaRefNo
				inner join SDS.tblTransferBooking AS tb WITH (NOLOCK) ON tb.FromClusterId=acm.AreaClusterId 
				and tb.ToDistributorId = '+convert(nvarchar(25),@DistributorId)+'
				LEFT OUTER JOIN SDS.tblCDCMSAreaPODDetails AS pod ON o.AreaRefNo = pod.AreaRefNo AND o.DistributorID = pod.DistributorId                         
				inner join SDS.tblAreaClusterMapping AS toacm with (nolock) on tb.ToClusterId=toacm.AreaClusterId
				inner join SDS.tblDeliveryBoyClusterMapping toDB with (NOLOCK) on toacm.AreaClusterId=toDB.ClusterId
				INNER JOIN SDS.tblVehicleDeliveryBoyMapping AS vd WITH (NOLOCK) on toDB.StaffRefNo=vd.DeliveryBoyId
				left outer join SDS.tblVehicleMaster AS v WITH (NOLOCK) ON v.VehicleId = vd.VehicleId 
			WHERE c.ConsumerStatus = ''Active'' AND o.DistributorID = '+convert(nvarchar(25),@FromDid)+' 
				AND o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN'') and (c.InCluster = 1) and tb.ToDistributorId='+convert(nvarchar(25),@DistributorId)+' 
				and tb.IsTransfer=''Y'' AND o.OrderRefNo not in (select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) 
				inner join SDS.tblTripPlanningDetails d with(nolock) on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)	)
				and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
			' )
		 
			print @strquery
			exec (@strquery)
		End

		SELECT id, DistributorID, BackLogdays, ClusterId, VehicleId, VehicleNo, StaffRefNo, AreaRefNo, OrderRefNo, OrderNo, OrderDate, UniqueConsumerId,
			ConsumerNo, ConsumerName, AreaName, Latitude, Longitude, ConMobileNo, ConAddress, NatureCode, PriceCode, ItemDescription, OrderQuantity,
			OrderStatusCode, ExpectedDeliveryDate, RSP, Source, InCluster, InTraidingArea, IsVerified, FromDistributorID, FromClusterId, VehCapacity, NoOfTrips
		FROM #tblpendingOdr
		where not( ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))

Drop table #tblpendingOdr

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GenerateTripsForClustersFIFOCase]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GenerateTripsForClustersFIFOCase]
--declare
@DistributorId int
--set @DistributorId=14145
as
BEGIN
SET FMTONLY OFF
	----------------- Get Cluster wise order count to pick for trip planning
	declare  @clusterwiseOrderCnt table(id int identity,clusterId bigint,ClusterName nvarchar(200),NoOfTrips int, vehicleId bigint, 
		VehCapacity int, VehNo nvarchar(50),orderCnt int)
	
	insert into @clusterwiseOrderCnt	
	SELECT   c.clusterid, c.AreaClusterName, isnull(dc.NoOfTrip,0),v.VehicleId, isnull(v.RTOCapacity,0), v.VehicleNo, isnull(dc.NoOfTrip,0)* isnull(v.RTOCapacity,0)
	FROM sds.tblClusterMaster c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId
	left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
	left outer join SDS.tblVehicleMaster AS v ON v.VehicleId = dv.VehicleId	
	where c.IsActive='Y' and dc.IsActive='Y' and dv.Active='Y' and v.Active='Y' and c.distributorId=@DistributorId
	------and c.clusterid=115
	------select * from @clusterwiseOrderCnt
	-----------------------------------------------------------------------------------
	
	DECLARE @GroupCode VARCHAR(3)='', @SameClusterFlag nvarchar(10), @StrCond nvarchar(1000)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	select @SameClusterFlag=isnull([Value],'Y') from sds.tblAppConfiguration where [key]='Trip-InSameCluster' 
	if (@SameClusterFlag='Y') set @StrCond='  and dc.ClusterId = c.ClusterId '  else set  @StrCond=' '

	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

	CREATE TABLE #tblpendingOdr(id int identity, ClusterId bigint,VehicleId bigint, VehicleNo nvarchar(50), VehCapacity int, NoofTrips int, 
		StaffRefNo numeric(17, 0),DistributorID int,AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,
		UniqueConsumerId numeric(17, 0),ConsumerNo int,ConsumerName varchar(100),AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),
		PlaceId nvarchar(500),ConMobileNo numeric(10,0),ConAddress nvarchar(500),NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),
		OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money, Source nvarchar(50),
		InCluster bit, InTraidingArea bit, IsVerified bit)

	declare @c int, @c1 int, @OrderCnt int, @ClusterId bigint, @strquery varchar(max), @VehicleId bigint, @OrderPickBuffer int
	declare @DelBoyNo numeric(17, 0), @VehNo nvarchar(50), @NoOfTrips int, @VehCapacity int
	select @c1=max(id) from @clusterwiseOrderCnt

	set @c=1

	While (@c<=@c1)
	Begin
		set @OrderCnt=0; set @ClusterId=0; set @strquery=''; set @VehicleId=0;
		select @OrderCnt=orderCnt, @ClusterId=clusterId,@VehicleId=VehicleId, @VehNo=VehNo, @NoOfTrips=NoOfTrips, @VehCapacity=VehCapacity 
		from @clusterwiseOrderCnt where id=@c
		set @OrderPickBuffer=(select top 1 isnull(OrderPickBuffer,0) from sds.tblAppConfigData)
		set @OrderCnt=@OrderCnt+(@OrderCnt*@OrderPickBuffer/100)
	
		set @strquery=( '
		insert into #tblpendingOdr (ClusterId,VehicleId, VehicleNo, VehCapacity, StaffRefNo, DistributorID, AreaRefNo, OrderRefNo, OrderNo,
		OrderDate,UniqueConsumerId,ConsumerNo,ConsumerName, AreaName,Latitude,Longitude,PlaceId,ConMobileNo,ConAddress,NatureCode, PriceCode,
		ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,Source,InCluster, InTraidingArea, IsVerified, NoOfTrips)
		
		SELECT top '+convert(nvarchar(5),@OrderCnt)+'  dc.ClusterId,'+convert(nvarchar(15),@VehicleId)+' VehicleId, '''+@VehNo +''' VehicleNo, 
			'+convert(nvarchar(10),@VehCapacity)+' , dc.StaffRefNo, o.DistributorID, o.AreaRefNo, o.OrderRefNo, o.OrderNo,o.OrderDate, 
			o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, c.Latitude, c.Longitude,c.PlaceId, c.MobileNo, c.Address,
			o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP, c.Source,
			isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,isnull(c.IsVerified,0) IsVerified, '+convert(nvarchar(10),@NoOfTrips)+'
		FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) INNER JOIN 
			SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
			DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
			sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
			SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
			SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
			DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
			sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId  LEFT OUTER JOIN
			(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
				on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)
			) t on t.OrderRefNo = o.OrderRefNo		
		WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' 
			AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND dc.ClusterId = '+convert(nvarchar(20),@ClusterId)+'  
			and (c.inCluster=1) and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+') 
			AND t.OrderRefNo IS NULL and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''  '+@StrCond+' 
		order by o.OrderDate, o.orderrefno ' )
		
	set @strquery=@strquery  
	print @strquery
	exec (@strquery)

	set @c=@c+1
	End

	--select   cast(0 as numeric(6,0)) as pin,
	--from #tblpendingOdr 

	SELECT id, DistributorID, ClusterId, VehicleId, VehicleNo, StaffRefNo, AreaRefNo, OrderRefNo, OrderNo, OrderDate, UniqueConsumerId,
		ConsumerNo, SDS.fn_CamelCase( ConsumerName ) ConsumerName, SDS.fn_CamelCase(AreaName) AreaName, Latitude, Longitude, ConMobileNo, ConAddress, 
		NatureCode, PriceCode, SDS.fn_CamelCase( ItemDescription ) ItemDescription, OrderQuantity, OrderStatusCode, ExpectedDeliveryDate, 
		RSP, ISNULL(SDS.fn_CamelCase(Source),'-') Source, InCluster, InTraidingArea, IsVerified, VehCapacity, NoofTrips
	FROM #tblpendingOdr
	where not( ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))
	order by clusterId, OrderDate

drop table #tblpendingOdr
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GenerateTripsForClustersParameterwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GenerateTripsForClustersParameterwise]   
--declare  
@DistributorId int,  
@ClusterId int,  
@ParameterFlag varchar(50)  
--set @DistributorId=13118;set @ClusterId = 158;  
  
as  
  
BEGIN  
SET FMTONLY OFF  
  
	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max),@FromDid int, @GroupCode2 nvarchar(5), @SameClusterFlag nvarchar(10), @StrCond nvarchar(1000)  
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode   
  
	-- Added For Parameter wise Bkgs for Single Value  
	Declare @ParaId int, @ParaValue varchar(50), @StrCond2 varchar(max)=''  
	select @ParaId =ParameterId, @ParaValue=ParameterValue from SDS.tblTripCaseDetails where DistributorId=@DistributorId and ClusterId=@ClusterId and ParameterValueText=@ParameterFlag Order by [Sequence]  
  
	if (@ParaId=1)  -- Type of Connection SBC/DBC  
		set @StrCond2 = ' and o.SingleDouble='''+@ParaValue+''''  
	Else if (@ParaId=2 and @ParaValue='16')  -- Type of Consumer PMUY  
		set @StrCond2 = ' and o.NatureCode='''+@ParaValue+''''
	Else if (@ParaId=2 and @ParaValue='0')  -- Type of Consumer Non-PMUY  
		set @StrCond2 = ' and o.NatureCode<>16'
	Else if (@ParaId=2)  -- Type of Consumer PMUY  
		set @StrCond2 = ' and o.NatureCode='''+@ParaValue+''''
	Else if (@ParaId=3)  -- Type of Bookings PSV/RFL/LR  
		set @StrCond2 = '  and o.OrderTypeCode='''+@ParaValue+''''  
	Else if (@ParaId=4)  -- Booking Source ECOMM, IVRS etc  
		set @StrCond2 = ' and o.OrderSourceCode='''+@ParaValue+''''  
	Else if (@ParaId=5)  -- Nature Of Delivery Home, Instant etc  
		set @StrCond2 = ' and o.DeliveryMode='''+@ParaValue+''''  
	Else if (@ParaId=7)  -- Prepaid   
		set @StrCond2 = ' and o.Prepaid='''+@ParaValue+'''' 
  
	IF OBJECT_ID('tempdb..#tblpendingOdrNew') IS NOT NULL DROP TABLE #tblpendingOdrNew  
	CREATE TABLE #tblpendingOdrNew(id int identity,DistributorID int, BackLogdays int,ClusterId bigint, VehicleId bigint, VehicleNo nvarchar(50),   
	StaffRefNo numeric(17, 0),AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),ConsumerNo int,  
	ConsumerName varchar(100),AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),ConMobileNo numeric(10,0),ConAddress nvarchar(500),  
	NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money,   
	Source nvarchar(50),InCluster bit, InTraidingArea bit, IsVerified bit, FromDistributorID int, FromClusterId bigint, VehCapacity int, NoOfTrips int)  
   
	set @strquery=( '  
		insert into #tblpendingOdrNew (DistributorID,BackLogdays,ClusterId,VehicleId,VehicleNo,StaffRefNo,AreaRefNo,OrderRefNo,OrderNo,OrderDate,  
		UniqueConsumerId,ConsumerNo,ConsumerName,AreaName,Latitude,Longitude,ConMobileNo,ConAddress,NatureCode,PriceCode,ItemDescription,OrderQuantity,  
		OrderStatusCode,ExpectedDeliveryDate,RSP,Source,InCluster,InTraidingArea,IsVerified,FromDistributorID,FromClusterId,VehCapacity,NoOfTrips)  
      
		SELECT o.DistributorID,datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId,vd.VehicleId, v.VehicleNo, dc.StaffRefNo, o.AreaRefNo,  
		o.OrderRefNo,o.OrderNo,o.OrderDate, o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName,   
		c.Latitude, c.Longitude, c.MobileNo, c.Address,o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,  
		o.ExpectedDeliveryDate,0 RSP,c.Source, isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,  
		isnull(c.IsVerified,0) IsVerified, 0 FromDistributorID, 0 FromClusterId,v.RTOCapacity,dc.NoOfTrip  
		FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) INNER JOIN   
		SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN  
		DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN  
		SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN  
		SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN  
		sds.tblVehicleDeliveryBoyMapping vd with (NOLOCK) on dc.StaffRefNo=vd.DeliveryBoyId inner join  
		sds.tblVehicleMaster v with (NOLOCK) on v.VehicleId=vd.VehicleId INNER JOIN  
		DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN  
		sds.tblCDCMSAreaPODDetails pod with(nolock) on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId    
		WHERE c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+'   
		AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND (c.inCluster=1) and acm.AreaClusterId = c.ClusterId 
		and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD'' and acm.AreaClusterId='+convert(nvarchar(25),@ClusterId)+'	' )  

	set @strquery=@strquery +  @StrCond2  
	print @strquery  
	exec (@strquery)  
    
	SELECT id, DistributorID, BackLogdays, ClusterId, VehicleId, VehicleNo, StaffRefNo, AreaRefNo, OrderRefNo, OrderNo, OrderDate, UniqueConsumerId,  
	ConsumerNo, ConsumerName, AreaName, Latitude, Longitude, ConMobileNo, ConAddress, NatureCode, PriceCode, ItemDescription, OrderQuantity,  
	OrderStatusCode, ExpectedDeliveryDate, RSP, Source, InCluster, InTraidingArea, IsVerified, FromDistributorID, FromClusterId, VehCapacity, NoOfTrips  
	FROM #tblpendingOdrNew  
	where not( ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))  
  
Drop table #tblpendingOdrNew  
  
END  
  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GenTripsForClDefaultCaseNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_GenTripsForClDefaultCaseNew] 
--declare
@DistributorId int,
@ClusterId int
--set @DistributorId=14193;set @ClusterId = 72;

as

BEGIN
SET FMTONLY OFF

	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max),@FromDid int, @GroupCode2 nvarchar(5), @SameClusterFlag nvarchar(10), @StrCond nvarchar(1000)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode	

	select @SameClusterFlag=isnull([Value],'Y') from sds.tblAppConfiguration where [key]='Trip-InSameCluster' 
	if (@SameClusterFlag='Y') set @StrCond='  and dc.ClusterId = c.ClusterId '  else set  @StrCond=' '

	IF OBJECT_ID('tempdb..#tblpendingOdrNew') IS NOT NULL DROP TABLE #tblpendingOdrNew
	CREATE TABLE #tblpendingOdrNew(id int identity,DistributorID int, BackLogdays int,ClusterId bigint, VehicleId bigint, VehicleNo nvarchar(50), 
	StaffRefNo numeric(17, 0),AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),ConsumerNo int,
	ConsumerName varchar(100),AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),ConMobileNo numeric(10,0),ConAddress nvarchar(500),
	NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money, 
	Source nvarchar(50),InCluster bit, InTraidingArea bit, IsVerified bit, FromDistributorID int, FromClusterId bigint, VehCapacity int, NoOfTrips int)
	
	set @strquery=( '
		insert into #tblpendingOdrNew (DistributorID,BackLogdays,ClusterId,VehicleId,VehicleNo,StaffRefNo,AreaRefNo,OrderRefNo,OrderNo,OrderDate,
			UniqueConsumerId,ConsumerNo,ConsumerName,AreaName,Latitude,Longitude,ConMobileNo,ConAddress,NatureCode,PriceCode,ItemDescription, 
			OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,Source,InCluster,InTraidingArea,IsVerified,FromDistributorID,FromClusterId,VehCapacity,NoOfTrips)
				
		SELECT o.DistributorID,datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId,vd.VehicleId, v.VehicleNo, dc.StaffRefNo, o.AreaRefNo,
			o.OrderRefNo,o.OrderNo,o.OrderDate,	o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, 
			c.Latitude, c.Longitude, c.MobileNo, c.Address,o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,
			o.ExpectedDeliveryDate,0 RSP,c.Source, isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,
			isnull(c.IsVerified,0) IsVerified, 0 FromDistributorID, 0 FromClusterId,v.RTOCapacity,dc.NoOfTrip
		FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) INNER JOIN 
			SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
			DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
			sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
			SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
			SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
			sds.tblVehicleDeliveryBoyMapping vd with (NOLOCK) on dc.StaffRefNo=vd.DeliveryBoyId inner join
			sds.tblVehicleMaster v with (NOLOCK) on v.VehicleId=vd.VehicleId INNER JOIN
			DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
			sds.tblCDCMSAreaPODDetails pod with(nolock) on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId 	
		WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' 
			AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND (c.inCluster=1)
			and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice with(nolock) where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
			AND o.OrderRefNo not in (select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join 
			SDS.tblTripPlanningDetails d with(nolock) on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)	)
			and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''	and acm.AreaClusterId='+convert(nvarchar(25),@ClusterId)+'
		' )

		set @strquery=@strquery + @StrCond
		print @strquery
		exec (@strquery)
		
		select @FromDid=isnull(FromDistributorId,0) from sds.tblTransferBooking where ToDistributorId=@DistributorId

		--select @FromDid ; select * from sds.tblTransferBooking where ToDistributorId=@DistributorId
		
		set @strquery=''

		if (@FromDid>0)
		Begin
			SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDid
			if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

			set @strquery=( '
			insert into #tblpendingOdrNew (DistributorID,BackLogdays,ClusterId,VehicleId,VehicleNo,StaffRefNo,AreaRefNo,OrderRefNo,OrderNo,OrderDate,
			UniqueConsumerId, ConsumerNo,ConsumerName,AreaName,Latitude,Longitude,ConMobileNo,ConAddress, NatureCode, PriceCode, ItemDescription, 
			OrderQuantity, OrderStatusCode, ExpectedDeliveryDate,RSP, Source, InCluster, InTraidingArea,IsVerified,FromDistributorID,
			FromClusterId,VehCapacity,NoOfTrips)
		
			SELECT tb.ToDistributorId, datediff(d,o.OrderDate,getdate()) DaysDelay, tb.ToClusterId, vd.VehicleId,v.VehicleNo, toDB.StaffRefNo,
				o.AreaRefNo, o.OrderRefNo,o.OrderNo,o.OrderDate, o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, 
				c.Latitude, c.Longitude, c.MobileNo, c.Address,o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity, 
				o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP,c.Source, isnull(c.InCluster,0) InCluster,isnull(c.inTradingArea,0) inTradingArea,
				isnull(c.IsVerified,0) IsVerified,tb.FromDistributorId, tb.FromClusterId,v.RTOCapacity,toDB.NoOfTrip
			FROM DCMS.tblRefillOrderDtls'+@GroupCode2 +' AS o WITH (NOLOCK) 
				INNER JOIN SDS.tblConsumerDetails AS c WITH (nolock) ON c.UniqueConsumerId = o.UniqueConsumerId
				INNER JOIN DCMS.tblItemPriceCodeMap AS i WITH (NOLOCK) ON o.PriceCode = i.PriceCode
				INNER JOIN SDS.tblActiveItems AS ai WITH (nolock) ON o.PriceCode = ai.PriceCode AND ISNULL(ai.Active, ''N'') = ''Y''
				inner join DCMS.tblDistributorAreaMaster AS da WITH (nolock) ON da.AreaRefNo = o.AreaRefNo
				INNER JOIN SDS.tblAreaClusterMapping AS acm WITH (nolock) ON acm.AreaRefNo = o.AreaRefNo
				inner join SDS.tblTransferBooking AS tb WITH (NOLOCK) ON tb.FromClusterId=acm.AreaClusterId 
				and tb.ToDistributorId = '+convert(nvarchar(25),@DistributorId)+'
				LEFT OUTER JOIN SDS.tblCDCMSAreaPODDetails AS pod ON o.AreaRefNo = pod.AreaRefNo AND o.DistributorID = pod.DistributorId                         
				inner join SDS.tblAreaClusterMapping AS toacm with (nolock) on tb.ToClusterId=toacm.AreaClusterId
				inner join SDS.tblDeliveryBoyClusterMapping toDB with (NOLOCK) on toacm.AreaClusterId=toDB.ClusterId
				INNER JOIN SDS.tblVehicleDeliveryBoyMapping AS vd WITH (NOLOCK) on toDB.StaffRefNo=vd.DeliveryBoyId
				left outer join SDS.tblVehicleMaster AS v WITH (NOLOCK) ON v.VehicleId = vd.VehicleId 
			WHERE c.ConsumerStatus = ''Active'' AND o.DistributorID = '+convert(nvarchar(25),@FromDid)+' 
				AND o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN'') and (c.InCluster = 1) and tb.ToDistributorId='+convert(nvarchar(25),@DistributorId)+' 
				and tb.IsTransfer=''Y'' AND o.OrderRefNo not in (select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) 
				inner join SDS.tblTripPlanningDetails d with(nolock) on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)	)
				and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD'' and acm.AreaClusterId='+convert(nvarchar(25),@ClusterId)+'
			' )
		 
			print @strquery
			exec (@strquery)
		End

		SELECT id, DistributorID, BackLogdays, ClusterId, VehicleId, VehicleNo, StaffRefNo, AreaRefNo, OrderRefNo, OrderNo, OrderDate, UniqueConsumerId,
			ConsumerNo, ConsumerName, AreaName, Latitude, Longitude, ConMobileNo, ConAddress, NatureCode, PriceCode, ItemDescription, OrderQuantity,
			OrderStatusCode, ExpectedDeliveryDate, RSP, Source, InCluster, InTraidingArea, IsVerified, FromDistributorID, FromClusterId, VehCapacity, NoOfTrips
		FROM #tblpendingOdrNew
		where not( ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))

Drop table #tblpendingOdrNew

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetAdjacentDistributorList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	sds.usp_GetAdjacentDistributorList 14193

CREATE proc [SDS].[usp_GetAdjacentDistributorList]
--declare
@DistributorId int
--set @DistributorId=8158
as


SELECT b.DistributorId, d.DistributorName, d.JDEDistributorCode, b.BackLogOf, b.EntryDate, b.TotalPendingOrder, b.AvgSale, b.BackLog, b.pk_BacklogId
FROM SDS.tblDistributorTradingAreaMapping AS ata INNER JOIN
SDS.tblDistributorWiseBacklog AS b ON ata.AdjDistributorId = b.DistributorId
inner join DCMS.tblDistributorMaster d with(nolock) on d.DistributorId= b.DistributorId
where ata.DistributorId=@DistributorId and upper(ata.IsActive)='Y'  
and b.EntryDate=(select max(entrydate) from SDS.tblDistributorWiseBacklog where DistributorId=b.DistributorId)




GO
/****** Object:  StoredProcedure [SDS].[usp_GetAdminDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetAdminDetails] 
@EmailFor int
as
     Begin
      SELECT (case when isnull(e.EmpNo,0)>0  then 1 else 0 end) as IsSelect, cast(o.EmailCCPersonId as int ) as PersonId ,o.Name as PersonName ,
	  o.EMAIL FROM [SDS].[tblEmailCCPerson] o left outer join sds.tblEmailConfiguration e
	   on cast(o.EmailCCPersonId as int) = e.EmpNo  and e.EmailForId =@EmailFor
     End 

GO
/****** Object:  StoredProcedure [SDS].[usp_GetAllotedStockDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetAllotedStockDetails] 
--declare
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@FromDate datetime,
@ToDate datetime
--set @DistributorId=14193 set @DeliveryBoyId=11711419300000008 
AS
BEGIN
	select tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
		tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo as vehicleNumber,
		tsa.AllotmentBy,tdsm.StaffName as GodownkeeperName, sad.ItemId,sad.Quantity,sad.EmptyQty,i.ItemShortDescription as ItemName
	from SDS.tblStockAllotment tsa with(nolock) 
		left outer join SDS.tblStockAllotmentDetails sad with(nolock) on sad.StockAllotmentId=tsa.StockAllotmentId
		left outer join SDS.tblVehicleMaster vm with(nolock)  on vm.VehicleId=tsa.VehicleId
		left outer join DCMS.tblDistributorStaffDetails tdsm with(nolock)  on tdsm.StaffRefNo=tsa.GodownKeeperId
		left outer join SDS.tblItemCodeMaster i with(nolock)  on i.ItemID=sad.ItemId
	where tsa.DistributorId=@DistributorId and tsa.DeliveryBoyId=@DeliveryBoyId
		and ((CAST(tsa.AllotmentDate as DATE) >= cast(@FromDate as date)) or (isnull(@FromDate,'')=''))
		and ((CAST(tsa.AllotmentDate as DATE) <= cast(@ToDate as date)) or (isnull(@ToDate,'')=''))

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetAllStockAllotmentByDeliveryBoy]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		[SDS].[usp_GetAllStockAllotmentByDeliveryBoy] 14193, 11711419300000005,null,null
--usp_GetAllStockAllotmentByDeliveryBoy

CREATE PROCEDURE [SDS].[usp_GetAllStockAllotmentByDeliveryBoy]

@DistributorId int,
@DeliveryBoyId numeric(17,0),
@FromDate datetime,
@ToDate datetime
AS
BEGIN
	--Select tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
	--	tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo as vehicleNumber,
	--	sum(ISNULL(tsad.Quantity,0)+ISNULL(tsad.EmptyQty,0)) as Quantity,tsa.AllotmentBy,tdsm.StaffName as GodownkeeperName
	--From sds.tblStockAllotment tsa left outer join sds.tblVehicleMaster vm on tsa.VehicleId=vm.VehicleId
	--	left outer join sds.tblStockAllotmentDetails tsad on tsad.StockAllotmentId=tsa.StockAllotmentId
	--	left outer join DCMS.tblDistributorStaffDetails tdsm WITH (NOLOCK) on tdsm.StaffRefNo=tsa.GodownKeeperId
	--Where tsa.DistributorId=@DistributorId and tsa.DeliveryBoyId=@DeliveryBoyId
	--	and ((CAST(tsa.AllotmentDate as DATE) >= cast(@FromDate as date)) or (isnull(@FromDate,'')=''))
	--	and ((CAST(tsa.AllotmentDate as DATE) <= cast(@ToDate as date)) or (isnull(@ToDate,'')=''))
	--Group by tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
	--	tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo,
	--	tsa.AllotmentBy,tdsm.StaffName	
	
	Select tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
		tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo as vehicleNumber,
		icm.ItemID,icm.ItemDescription,icm.ItemShortDescription,
		sum(ISNULL(tsad.Quantity,0)) as FilledQuantity,sum(ISNULL(tsad.EmptyQty,0)) as EmptyQuantity,
		sum(ISNULL(tsad.Quantity,0)+ISNULL(tsad.EmptyQty,0)) as TotalQuantity,tsa.AllotmentBy,tdsm.StaffName as GodownkeeperName
	From sds.tblStockAllotment tsa left outer join sds.tblVehicleMaster vm on tsa.VehicleId=vm.VehicleId
		left outer join sds.tblStockAllotmentDetails tsad on tsad.StockAllotmentId=tsa.StockAllotmentId
		left outer join DCMS.tblDistributorStaffDetails tdsm WITH (NOLOCK) on tdsm.StaffRefNo=tsa.GodownKeeperId
		left outer join SDS.tblItemCodeMaster icm on icm.ItemID = tsad.ItemID
	Where   tsa.DistributorId=@DistributorId and tsa.DeliveryBoyId=@DeliveryBoyId  and (tsa.IsAccepted<>'Y'OR tsa.IsAccepted is null)
		and ((CAST(tsa.AllotmentDate as DATE) >= cast(@FromDate as date)) or (isnull(@FromDate,'')=''))
		and ((CAST(tsa.AllotmentDate as DATE) <= cast(@ToDate as date)) or (isnull(@ToDate,'')=''))
	Group by tsa.StockAllotmentId,tsa.DistributorId,tsa.DeliveryBoyId,tsa.GodownKeeperId,tsa.AllotmentDate,tsa.VehicleId,
		tsa.IsAccepted,tsa.AcceptedBy,tsa.AcceptedDatetime,tsa.LastUpdatedBy,tsa.LastUpdateDate,vm.VehicleNo,
		tsa.AllotmentBy,tdsm.StaffName,icm.ItemID,icm.ItemDescription,icm.ItemShortDescription	 
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetAllTranferStockByDeliveryBoy]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetAllTranferStockByDeliveryBoy 14193, 11711419300000005, null, null

CREATE PROCEDURE [SDS].[usp_GetAllTranferStockByDeliveryBoy]
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@FromDate datetime,
@ToDate datetime

AS

BEGIN	
	select st.StockTransferId,st.BreakdownId,st.StockTransferNo,st.DistributorId,st.DeliveryBoyId,st.TransferDate,vm.VehicleNo,st.AcceptedBy,st.IsAccepted,st.AcceptedDatetime,
		st.TransferedTo,st.TransferedDeliveryBoyID,st.LastUpdatedBy,st.LastUpdateDate,dsm.StaffName as godownkeeperName,
		SUM(isnull(std.FilledQty,0)) FilledQty, SUM(isnull(std.EmptyQty,0)) EmptyQty,SUM(isnull(std.[DefectiveQty],0))as DefectiveQty
		 ,SUM(isnull(std.FilledQty,0)) + SUM(isnull(std.EmptyQty,0))+SUM(isnull(std.[DefectiveQty],0))  Total		
	from sds.tblStockTransfer st left outer join sds.tblVehicleMaster vm on st.VehicleId=vm.VehicleId
		left outer join DCMS.tblDistributorStaffDetails dsm WITH (NOLOCK) on dsm.StaffRefNo=st.TransferedDeliveryBoyID
		left outer join sds.tblStockTransferDetails stD on stD.StockTransferId=st.StockTransferId
	where st.DeliveryBoyId=@DeliveryBoyId and st.DistributorId=@DistributorId
		and ((CAST(st.TransferDate as DATE) >= cast(@FromDate as date)) or (isnull(@FromDate,'')=''))
	and ((CAST(st.TransferDate as DATE) <= cast(@ToDate as date)) or (isnull(@ToDate,'')=''))
	group by st.StockTransferId,st.BreakdownId,st.DistributorId,st.DeliveryBoyId,st.TransferDate,vm.VehicleNo,st.AcceptedBy,st.IsAccepted,st.AcceptedDatetime,
	st.TransferedTo,st.TransferedDeliveryBoyID,st.LastUpdatedBy,st.LastUpdateDate,dsm.StaffName,st.StockTransferNo
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetAppConfiguration]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_GetAppConfiguration]
--	Description		:	Get Application configuuration details

--	Author			:	Prasanna	02-May-2020

--	Date Modified		Modified By	     Modifications
--	02-May-2020		Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetAppConfiguration]
@Key varchar(50)
AS
BEGIN

    IF(@Key='IsIntroJs')
	BEGIN
		SELECT [Id],[Key],[Value],[Info],[LastUpdatedOn]
		FROM [SDS].[tblAppConfiguration]
		WHERE [Key]='DisplayTour' or [Key]='DisplayOneTimeTour'
	END
	ELSE IF(@Key<>'')
	BEGIN
		SELECT [Id],[Key],[Value],[Info],[LastUpdatedOn]
		FROM [SDS].[tblAppConfiguration]
		WHERE [Key]=@Key
	END
	ELSE
	BEGIN
		SELECT [Id],[Key],[Value],[Info],[LastUpdatedOn]
		FROM [SDS].[tblAppConfiguration]
	END
		
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetAppconfigurationDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		SDS.usp_GetAppconfigurationDetails '2019-09-27'
--      RAHUL G

CREATE PROCEDURE [SDS].[usp_GetAppconfigurationDetails]
@PkId int
as

Begin

	SELECT PkId,DeviationDistanceMtr,NoOfDaysForOrderAvg,NoOfDaysForBacklog,OrderPickBuffer,AddedBy,AddedOn,LastUpdatedOn
	FROM SDS.tblAppConfigData

End



GO
/****** Object:  StoredProcedure [SDS].[usp_GetAreaClusterCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetAreaClusterCoordinates
--	Description		:	get area, cluster and trading area co ordinates

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	14-April-2020		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetAreaClusterCoordinates] 

@DistributorId int
AS
BEGIN
	DECLARE @result TABLE(Code nvarchar(100), Coordinates nvarchar(MAX), Flag nvarchar(5),SelectMajorArea nvarchar(max))
		INSERT INTO @result 
		SELECT AreaRefNo,AreaJSON,'DA',''
		FROM SDS.tblDistributorAreaGeoCoordinates WITH(NOLOCK) 
		WHERE DistributorId=@DistributorId and AreaJSON IS NOT NULL

		INSERT INTO @result 
		SELECT AreaClusterId,AreaJSON,'DC',
			isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(mac.majorAreaCode,'')) from sds.tblDistributorClusterMajorAreaMapping mac
			where mac.DistributorId=@DistributorId and mac.ClusterId=AreaClusterId  FOR XML PATH('')),1,1,'')),'') AS SelectMajorArea

		FROM [SDS].[tblDistributorClusterCoordinates] WITH(NOLOCK) 
		WHERE DistributorId=@DistributorId and AreaJSON IS NOT NULL

		INSERT INTO @result 
		SELECT 0,AreaJSON,'TA',''
		FROM [SDS].[tblDistributorTradingAreaCoordinates] WITH(NOLOCK) 
		WHERE DistributorId=@DistributorId and AreaJSON IS NOT NULL

	SELECT * FROM @result
	ORDER BY Flag
END




GO
/****** Object:  StoredProcedure [SDS].[usp_GetAreaDetailsForMissingArea]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetAreaDetailsForMissingArea]
@StateCode NVARCHAR(50),
@DistrictCode NVARCHAR(50),
@Lat NVARCHAR(50),
@Lng NVARCHAR(50)
AS
BEGIN
	--DECLARE @StateCode NVARCHAR(25) = 'DD', @DistrictCode = 'Dddelhicitydt', @Lat NVARCHAR(50)='28.647881844097434',@Lng NVARCHAR(50)='77.09372360644832'
	
	DECLARE @StateName NVARCHAR(100),@DistrictName NVARCHAR(100),@TalukaCode NVARCHAR(50), @TalukaName NVARCHAR(100),
	@AreaName NVARCHAR(100),@AreaCode NVARCHAR(50),@AreaCodeCount INT=0,@AreaNameCount INT=0,@TempAreaCode NVARCHAR(100)=NULL,@TempAreaName NVARCHAR(50)=NULL
	 SELECT @TempAreaCode = convert(varchar, getdate(), 12) + REPLACE(convert(varchar, getdate(), 14),':','') + LEFT(sm.StateCode, 2) + 'V',
		@TempAreaName = sm.StateCode + '_' + dm.DistrictName+ '_' + tm.TalukaName +'_'+ 'V',
		@StateName=StateName,@DistrictCode=dm.DistrictCode,@DistrictName=dm.DistrictName,@TalukaCode=tm.TalukaCode,@TalukaName=tm.TalukaName,@AreaName=am.AreaName,@AreaCode=am.AreaCode
	FROM [SDS].[tblGeoCoordinateMaster] gm INNER JOIN
		[SDS].[tblAreaMaster] am ON am.AreaCode=gm.AreaCode INNER JOIN
		[SDS].[tblTalukaMaster] tm ON tm.TalukaCode=am.TalukaCode INNER JOIN
		[SDS].[tblDistrictMaster] dm ON dm.DistrictCode=tm.DistrictCode INNER JOIN
		[SDS].[tblStateMaster] sm ON sm.StateCode=dm.StateCode
	WHERE dm.StateCode =@StateCode and dm.DistrictCode = @DistrictCode AND gm.AreaJSON LIKE ('%'+ @Lat +',"lng":'+ @Lng +'%')
	
	IF(@TempAreaCode IS NOT NULL AND @TempAreaCode <> '')
	BEGIN
		--SELECT TOP 1 @AreaCodeCount = CAST(REPLACE(AreaCode,@TempAreaCode,'') AS INT)
		--FROM SDS.tblAreaMasterTemp1
		--WHERE AreaCode LIKE '%'+@TempAreaCode+'%'
		--ORDER BY AreaCode DESC
	
		--SET @AreaCodeCount=@AreaCodeCount+1;

		SELECT TOP 1 @AreaNameCount = CAST(REPLACE(AreaName,@TempAreaName,'') AS INT)
		FROM SDS.tblAreaMaster
		WHERE AreaName LIKE '%'+@TempAreaName+'%'
		ORDER BY LastUpdateTime DESC
	
		SET @AreaNameCount=@AreaNameCount+1;
	END

	SELECT @StateCode AS StateCode, @StateName AS StateName, @DistrictCode AS DistrictCode,@DistrictName AS DistrictName,@TalukaCode AS TalukaCode, @TalukaName AS TalukaName,
	UPPER(@TempAreaCode + CAST(@AreaNameCount AS NVARCHAR)) AS AreaCode,UPPER(@TempAreaName + CAST(@AreaNameCount AS NVARCHAR)) AS AreaName
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetAreaGeoCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_GetAreaGeoCoordinates]
--	Description		:	Get Distributors item Price details

--	Author			:	Prasanna	31-March-2018

--	Date Modified		Modified By	     Modifications
--	31-March-2018		Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetAreaGeoCoordinates]
@AreaCode varchar(100),
@DistributorId int,
@AreaRefNo varchar(20)
AS
BEGIN
	IF(@AreaCode<>'')
	BEGIN
		SELECT gc.AreaJSON AS AreaCoordinates,@AreaCode as AreaCode
		FROM [SDS].[tblGeoCoordinateMaster] gc WITH(NOLOCK)
		WHERE gc.AreaCode =@AreaCode 
	END
	ELSE
	BEGIN
		SELECT da.AreaJSON AS AreaCoordinates,@AreaRefNo as AreaCode
		FROM SDS.tblDistributorAreaGeoCoordinates da WITH(NOLOCK)
		WHERE da.DistributorId=@DistributorId AND da.AreaRefNo=@AreaRefNo
	END
		
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetAreaTalukaDistrictMaster]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/**************************************************************											
--	Stored Procedure Name	: usp_GetAreaTalukaDistrictMaster
--	Description		:	Get area, District and taluka details

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	07-Nov-2020			Prasanna			Created
**************************************************************/

create PROCEDURE [SDS].[usp_GetAreaTalukaDistrictMaster] 
@Code NVARCHAR(30),
@Flag NVARCHAR(10)
AS
BEGIN
	
	IF(@Flag='STATE')
	BEGIN
		SELECT StateCode AS Code, RTRIM(LTRIM(StateName)) AS Name
		FROM [DCMS].[tblStateMaster]
		WHERE ActiveFlag='Y'
		ORDER BY StateName
	END
	ELSE IF(@Flag='DISTRICT')
	BEGIN
		SELECT DistrictCode AS Code, RTRIM(LTRIM(DistrictName)) AS Name
		FROM [DCMS].[tblDistrictMaster]
		WHERE ActiveFlag='Y' AND StateCode=@Code 
		ORDER BY DistrictName
	END
	ELSE IF(@Flag='CITY')
	BEGIN
		SELECT CityCode AS Code, RTRIM(LTRIM(CityName)) AS Name
		FROM [DCMS].[tblCityMaster] 
		WHERE ActiveFlag='Y' AND DistrictCode = @Code 
		ORDER BY CityName
	END
	ELSE IF(@Flag='TALUKA')
	BEGIN
		SELECT TalukaCode AS Code, RTRIM(LTRIM(TalukaName)) AS Name
		FROM [DCMS].[tblTalukaMaster]
		WHERE ActiveFlag='Y' AND DistrictCode = @Code
		ORDER BY TalukaName
	END

END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetAreawiseBacklog]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetAreawiseBacklog 14193,0

CREATE proc [SDS].[usp_GetAreawiseBacklog]
--declare
@DistributorID int,
@AreaRefNo numeric(17,0)
--set @DistributorID=14193; set @AreaRefNo=0

as
BEGIN
set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--print @GroupCode; 	print @Days

	--IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr
	--create table #TotOdr(AreaRefNo numeric(17, 0), PendingOrders int)
	--IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale
	--create table #TotSale(AreaRefNo numeric(17, 0), TotalSale int, AvgDailySale int)
	
	--declare @Str varchar(max)= 'insert into #TotOdr
	--	select o.AreaRefNo, count(distinct o.OrderRefNo)   from DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) inner join
	--	 sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
	--	where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	--	and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (o.AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
	--	group by o.AreaRefNo'  
	--	print (@Str)
	--exec (@Str)

	--	declare @Str1 varchar(max)= 'insert into #TotSale
	--	select r1.AreaRefNo, count(r1.OrderRefNo)+ isnull(TrpCnt,0),(count(r1.OrderRefNo)+ isnull(TrpCnt,0))/(select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData) 
	--	from DCMS.tblRefillOrderDtls'+@GroupCode+' r1  WITH (NOLOCK) inner join
	--	 sds.tblactiveitems ai with (nolock) on r1.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
	--	inner join (
	--			select DistributorId,AreaRefNo, count(OrderRefNo) as TrpCnt 
	--			from DCMS.tblRefillOrderDtls o WITH (NOLOCK) inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--			where (DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	--			and (OrderStatusCode in ( ''DLVD'')) and (AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
	--			and cast(ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	--			group by DistributorId,AreaRefNo
	--	) r2 on r1.DistributorId=r2.DistributorId and r1.AreaRefNo=r2.AreaRefNo 
	--	where (r1.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	--	and (r1.OrderStatusCode in ( ''DLVD'')) and (r1.AreaRefNo='+convert(nvarchar(20),@AreaRefNo) +' or '+convert(nvarchar(20),@AreaRefNo) +'=0)
	--	and cast(r1.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	--	group by r1.AreaRefNo,TrpCnt'
	--	print (@Str1)
	--exec (@Str1)
	
	--select o.AreaRefNo,isnull(o.PendingOrders,0) PendingOrders, isnull(s.TotalSale,0) TotalSale,isnull(s.AvgDailySale,0) AvgDailySale,
	--o.PendingOrders/isnull(nullif(s.AvgDailySale,0),1) BackLog  from #TotOdr o left outer join #TotSale s on o.AreaRefNo=s.AreaRefNo

	Select CAST(AreaRefNo as nvarchar(50)) AreaRefNo,isnull(TotalPendingOrder,0) PendingOrders,SUM(isnull(AvgSale,0)) TotalSale,isnull(AvgSale,0) AvgDailySale,BackLog 
	FROM [SDS].[tblDistributorAreawiseBacklog] 
	where DistributorId=@DistributorID and CAST(AreaRefNo as nvarchar(50)) =convert(nvarchar(50),@AreaRefNo) or convert(nvarchar(50),@AreaRefNo) =0 
	and CAST(EntryDate as Date)=CAST(GETDATE() as Date)
	GROUP BY CAST(AreaRefNo as nvarchar(50)) ,TotalPendingOrder,BackLog,AvgSale
	 
	  
--drop table #TotOdr
--drop table #TotSale
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetAssignOrderForAddiDelBoy]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_GetAssignOrderForAddiDelBoy 15139, 12011513900000006,'2020-07-04','H'
CREATE PROCEDURE [SDS].[usp_GetAssignOrderForAddiDelBoy]
@DistributorId int,
@AdditionalStaffRefNo numeric(17,0),
@TripDate datetime,
@Flag char(1)

--set @DistributorId =14193 set @DeliveryBoyId =11711419300000005 set @TripDate ='2019-09-21' --set @FromDate ='2019-09-20' set @ToDate ='2019-09-20'

AS
BEGIN	
	if(@Flag='P')
	Begin
		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,TPD.UniqueConsumerId,
			 CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice, TPD.ExpectedDeliveryDate, 
			(CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,
			'work on it' AS PaymentType, CD.AreaRefNo, cd.Latitude, cd.Longitude,ISNULL(CD.MobileNo,0)as MobileNo, TP.StaffRefNo, TP.StaffName,
			TP.AddiStaffRefNo,TP.AddiStaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate,TPD.ReturnQty,
			 TPD.ActualDeliveryDate, 0 as RSP, 0 as SVAT, 0 as VAT
		FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
			SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId INNER JOIN
			SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
		WHERE	TP.DistributorId=@DistributorId and  TPD.AssignedTo=isnull(@AdditionalStaffRefNo,0) 
			and (TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN')
			and CAST(TP.TripDate as date)=CAST(ISNULL(@TripDate,TP.TripDate) as date)
	End
	else
	Begin
		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,
			TPD.UniqueConsumerId, CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice,
			TPD.ExpectedDeliveryDate,
			(CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,
			'work on it' AS PaymentType, CD.AreaRefNo, cd.Latitude, cd.Longitude,ISNULL(CD.MobileNo,0)as MobileNo,TP.StaffRefNo,TP.StaffName,
			TP.AddiStaffRefNo,TP.AddiStaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate,TPD.ReturnQty,
			 TPD.ActualDeliveryDate, 0 as RSP, 0 as SVAT, 0 as VAT   
		FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
			SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId INNER JOIN
			SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
		WHERE	TP.DistributorId=@DistributorId and  TPD.DeliveredBy=isnull(@AdditionalStaffRefNo,0) 
			and CAST(TP.TripDate as date)=CAST(ISNULL(@TripDate,TP.TripDate) as date) and OrderStatus NOT IN('0','APRN','OPEN','AGEN')
	End
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetAuditLogDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		SDS.usp_GetLogDetails '2019-06-21','2019-06-21','','Fail','',''

create PROCEDURE [SDS].[usp_GetAuditLogDetails]
@FromOnDate datetime,
@ToDate datetime,
@MethodType varchar(20),
@LogStatus varchar(20),
@RefNo varchar(20),
@RoleId varchar(20)
as

Begin

	SELECT ServiceId,DistributorId,GodownkeeperId,DeliveryBoyId,LogFor,LogData,LogStatus,LogDateTime,LogException
	FROM SDS.tblAuditLog
	where cast(LogDateTime as date) between cast(convert(datetime, @FromOnDate,101) as date) and cast(convert(datetime, @ToDate,101) as date)

	and (LogStatus=@LogStatus or isnull(@LogStatus,'')='')


End



GO
/****** Object:  StoredProcedure [SDS].[usp_GetBookingDetailsForDensityTrip]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		SDS.usp_GetBookingDetailsForDensityTrip 14193

CREATE proc [SDS].[usp_GetBookingDetailsForDensityTrip]
--declare 
@DistributorId int
--set @DistributorId=14145

as

BEGIN
SET FMTONLY OFF

	DECLARE @strquery varchar(max), @OrderPickBuffer int, @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr
	CREATE TABLE #tblpendingOdr(id int identity, DistributorID int not null,ClusterId bigint not null,ClusterName nvarchar(100),
		UniqueConsumerId numeric(17, 0) not null, ConsumerNo int, ConsumerName nvarchar(200),ConMobileNo numeric(10,0),ConAddress nvarchar(500),
		ConPin nvarchar(25), AreaRefNo numeric(17,0), AreaName nvarchar(100), ConLatitude nvarchar(50), ConLongitude  nvarchar(50), 
		OrderRefNo numeric(17,0), OrderDate datetime, GodownId  nvarchar(20), GLatitude  nvarchar(50), GLongitude  nvarchar(50), 
		DeliveryBoyId numeric(17,0),AdditionalDelBoyId numeric(17,0),NoOfTrip int, VehicleId bigint, VehicleNo nvarchar(50), 
		RTOCapacity int, RSP money,InCluster bit, InTraidingArea bit, IsVerified bit)

	set @strquery=( '
		insert into #tblpendingOdr (DistributorID,ClusterId,ClusterName,UniqueConsumerId, ConsumerNo, ConsumerName,ConMobileNo,ConAddress,ConPin, 
		AreaRefNo, AreaName, ConLatitude, ConLongitude, OrderRefNo, OrderDate, GodownId, GLatitude, GLongitude, DeliveryBoyId,AdditionalDelBoyId,
		NoOfTrip, VehicleId, VehicleNo, RTOCapacity, RSP,InCluster, InTraidingArea, IsVerified)

		select o.DistributorID,ct.ClusterId, ct.AreaClusterName, c.UniqueConsumerId, c.ConsumerNo, c.ConsumerName,c.MobileNo,c.Address,c.Pin,o.AreaRefNo, 
			da.AreaName, c.Latitude CLatitude, c.Longitude CLongitude, o.OrderRefNo, o.OrderDate, ct.GodownId, ct.Latitude GLatitude, ct.Longitude GLongitude, 
			dc.StaffRefNo DelBoyId, dc.AdditionalStaffRefNo, dc.NoOfTrip, vd.VehicleId, v.VehicleNo, v.RTOCapacity, 0 RSP, c.InCluster, c.InTradingArea, c.IsVerified
		from DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) inner join sds.tblConsumerDetails c WITH (NOLOCK) on o.UniqueConsumerId=c.UniqueConsumerId
			INNER JOIN DCMS.tblDistributorAreaMaster da WITH (NOLOCK) on o.AreaRefNo=da.AreaRefNo 
			INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode 
			INNER JOIN sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
			INNER JOIN SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo
			inner join sds.tblClusterMaster ct with (nolock) on acm.AreaClusterId=ct.ClusterId
			INNER JOIN SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId
			INNER JOIN SDS.tblVehicleDeliveryBoyMapping vd with (nolock) on dc.StaffRefNo=vd.DeliveryBoyId
			INNER JOIN SDS.tblVehicleMaster v with (nolock) on vd.VehicleId=v.VehicleId
			LEFT OUTER JOIN sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId
			LEFT OUTER JOIN 
			(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
				on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)
			) t on t.OrderRefNo = o.OrderRefNo		
		WHERE	c.ConsumerStatus=''Active'' and o.DistributorID='+convert(nvarchar(25),@DistributorId)+' 
			AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') and c.inTradingArea=1 
			and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+') 
			AND t.OrderRefNo IS NULL and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
		' )

	print @strquery
	exec (@strquery)

	select DistributorID,ClusterId,ClusterName,UniqueConsumerId, ConsumerNo, ConsumerName,ConMobileNo,ConAddress,ConPin, AreaRefNo, AreaName, ConLatitude, 
		ConLongitude, OrderRefNo, OrderDate, GodownId, GLatitude, GLongitude, DeliveryBoyId,NoOfTrip, VehicleId, VehicleNo, RTOCapacity, InTraidingArea 
	from #tblpendingOdr
	--WHERE UniqueConsumerId=1141005600001478

	drop table #tblpendingOdr

END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetBreakDownHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [SDS].[usp_GetBreakDownHistory]
@DistributorId int,
@DeliveryBoyId numeric(18,0),
@FromDate Datetime,
@ToDate Datetime
--set @DistributorId =14193 set @DeliveryBoyId=11711419300000005 set @FromDate='2019-09-27 03:44:00.000' set @@ToDate='2019-09-27 03:44:00.000' 
AS
BEGIN

	SELECT BD.BreakdownId, BD.DistributorId, BD.DeliveryBoyId, BD.TripId, BD.BreakDownDateTime, BD.Latitude, BD.Longitude,
	BD.PlaceId,SDS.fn_CamelCase( DSD.StaffName) AS DeliveryBoyName, BD.VehicleId, BD.VehicleNo, BD.BreakDownReason, 
	BD.ExpectResolve,BD.StockTransferTo, BD.IsConfirm,BD.IsRepaired,
	STUFF((SELECT ', ' + CAST(dsd2.StaffName AS VARCHAR(max)) [text()]
	from SDS.fn_ConvCommaSeparated(BD.StockTransferTo,',') CS 
	inner join DCMS.tblDistributorStaffDetails DSD2 WITH (NOLOCK)  on CS.String=DSD2.StaffRefNo
	FOR XML PATH(''), TYPE)
	.value('.','NVARCHAR(MAX)'),1,2,' ')as StockTransferToDB,
	BD.IsAllStock
	FROM SDS.tblBreakDown AS BD INNER JOIN
	DCMS.tblDistributorStaffDetails AS DSD WITH (NOLOCK) ON BD.DistributorId = DSD.DistributorId and DSD.StaffRefNo=BD.DeliveryBoyId 
	WHERE ((BD.DistributorId = @DistributorId) OR(@DistributorId = 0)) and  (BD.DeliveryBoyId=@DeliveryBoyId  OR(@DeliveryBoyId = 0))
	AND cast(BD.BreakDownDateTime as date) Between CAST(ISNULL(@FromDate,BD.BreakDownDateTime)as date) and  CAST(ISNULL(@ToDate,BD.BreakDownDateTime)as date)
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetBreakDownRequest]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [SDS].[usp_GetBreakDownRequest]
@DistributorId int,
@DeliveryBoyId numeric(18,0),
@BreakDownDate Datetime,
@BreakDownCount int OUTPUT

--set @DistributorId =14193 set @DeliveryBoyId=11711419300000005 set @BreakDownDate='2019-09-27 03:44:00.000' 
AS
BEGIN
set @BreakDownCount=0
	
	select @BreakDownCount=count(BD.BreakdownId)
	FROM SDS.tblBreakDown AS BD 
	WHERE (BD.DeliveryBoyId=@DeliveryBoyId) and BD.IsConfirm is null
	AND cast(BD.BreakDownDateTime as date)=CAST(ISNULL(@BreakDownDate,BD.BreakDownDateTime)as date)

	SELECT BD.BreakdownId, BD.DistributorId, BD.DeliveryBoyId, BD.TripId, BD.BreakDownDateTime, BD.Latitude, BD.Longitude,
	BD.PlaceId,SDS.fn_CamelCase( DSD.StaffName) AS DeliveryBoyName, BD.VehicleId, BD.VehicleNo, BD.BreakDownReason, 
	BD.ExpectResolve,BD.StockTransferTo, BD.IsConfirm,
	STUFF((SELECT ', ' + CAST(dsd2.StaffName AS VARCHAR(max)) [text()]
	from SDS.fn_ConvCommaSeparated(BD.StockTransferTo,',') CS 
	inner join DCMS.tblDistributorStaffDetails DSD2  WITH (NOLOCK) on CS.String=DSD2.StaffRefNo
	FOR XML PATH(''), TYPE)
	.value('.','NVARCHAR(MAX)'),1,2,' ')as StockTransferToDB,
	BD.IsAllStock

	FROM SDS.tblBreakDown AS BD INNER JOIN
	DCMS.tblDistributorStaffDetails AS DSD WITH (NOLOCK) ON BD.DistributorId = DSD.DistributorId and DSD.StaffRefNo=BD.DeliveryBoyId 

	WHERE ((BD.DistributorId = @DistributorId) OR(@DistributorId = 0)) and  (BD.DeliveryBoyId=@DeliveryBoyId  OR(@DeliveryBoyId = 0))
	AND cast(BD.BreakDownDateTime as date)=CAST(ISNULL(@BreakDownDate,BD.BreakDownDateTime)as date)
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetcDCMSAndSDSSchedulerExecutedFlag]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_GetcDCMSAndSDSSchedulerExecutedFlag]
--DECLARE
@SchedulerName nvarchar(100),
@Status nvarchar(100),
@FlagFor nvarchar(50)
AS
--SET @SchedulerName='ConsumerLocation'; SET @Status='';SET @FlagFor='';
BEGIN
	Declare @RetValue int;
	set @RetValue=0;
	if exists(select 1 from SDS.tblSchedulerStatusSummary where SchedulerName=@SchedulerName 
		and cast(StartDate as date)=CAST(GETDATE() AS DATE) and cast(EndDate as date)=CAST(GETDATE() AS DATE))
	Begin
		select @RetValue =1
	End
	Else
	Begin	
		select @RetValue =-1
	End
	select @RetValue as RetValue
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetCDCMSConsumerLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetCDCMSConsumerLocation 15139

CREATE proc [SDS].[usp_GetCDCMSConsumerLocation]
@DistributorId int

as
BEGIN
	SELECT cl.[UniqueConsumerId],cl.[Latitude],cl.[Longitude],[UpdatedDate],[UpdatedBy],cl.[Source] as NewSource,
	ISNULL(sn.DisplaySequenceNo,100) AS NewDisplaySequenceNo,cd.Source as OldSource,ISNULL((SELECT DisplaySequenceNo FROM [SDS].[tblConsumerGCSequenceNo] sqn		
	WHERE UPPER(sqn.SourceName)=UPPER(cd.Source)),100) AS OldDisplaySequenceNo, -- 100 For low priority or if null value
	(CASE WHEN sn.DisplaySequenceNo <= ISNULL((SELECT DisplaySequenceNo FROM [SDS].[tblConsumerGCSequenceNo] sqn		
	WHERE UPPER(sqn.SourceName)=UPPER(cd.Source)),100) THEN 1 ELSE 0 END) AS UpdateStatus,
	ISNULL(cm.AreaRefNo,0) AS AreaRefNo,ISNULL(acm.AreaClusterId,0) AS ClusterId
	FROM HPCLDCMS.[ESV].[tblConsumerLocation] cl INNER JOIN
	[DCMS].[tblConsumerMaster] cm ON cm.UniqueConsumerId=cl.UniqueConsumerId LEFT OUTER JOIN
	[SDS].[tblConsumerDetails] cd WITH(NOLOCK) ON cd.UniqueConsumerId=cl.UniqueConsumerId LEFT OUTER JOIN
	[SDS].[tblConsumerGCSequenceNo] sn WITH(NOLOCK) ON UPPER(sn.SourceName)=UPPER(cl.Source) LEFT OUTER JOIN
	[SDS].[tblAreaClusterMapping] acm WITH(NOLOCK) ON acm.AreaRefNo=cm.AreaRefNo
	WHERE cm.DistributorID=@DistributorId AND CAST(cl.UpdatedDate AS DATE)=CAST(GETDATE() AS DATE)
	order by  cl.[UniqueConsumerId]
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetCDCMSConsumerLocation_RG]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.RGusp_GetCDCMSConsumerLocationNew 14545
create Proc [SDS].[usp_GetCDCMSConsumerLocation_RG]
as

Declare 
@DistributorId int=14193

BEGIN		-------- GetCDCMSConsumerLocation
	SELECT cm.DistributorID,cl.UniqueConsumerId,cl.Latitude,cl.Longitude,UpdatedDate,UpdatedBy,cl.Source as NewSource--,ISNULL(cm.AreaRefNo,0) AS AreaRefNo,ISNULL(acm.AreaClusterId,0) AS ClusterId, 0 IsV1Received
	into #tbl
	FROM HPCLDCMS.ESV.tblConsumerLocation cl INNER JOIN
	DCMS.tblConsumerMaster cm ON cm.UniqueConsumerId=cl.UniqueConsumerId --LEFT OUTER JOIN SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cm.AreaRefNo
	WHERE cm.DistributorID=@DistributorId AND CAST(cl.UpdatedDate AS DATE)>=CAST('2024-02-01' AS DATE)
	order by  cl.UniqueConsumerId
END
--declare @NewGC table(did int, uniId numeric(17,0), Lat nvarchar(30), Long nvarchar(30), udate datetime, GCSource nvarchar(30))
--declare @NewVit1 table(did int, uniId numeric(17,0), Lat nvarchar(30), Long nvarchar(30), udate datetime, GCSource nvarchar(30))
--declare @NewVit2 table(did int, uniId numeric(17,0), Lat nvarchar(30), Long nvarchar(30),  udate datetime, GCSource nvarchar(30))

-- Other than Vitran source - existing update 
update SDS.tblConsumerLocationHistoryNew 
set MILatitude=dt.Latitude,
	MILongitude=dt.Longitude,
	MILastUpdateDateTime=dt.UpdatedDate
from SDS.tblConsumerLocationHistoryNew a inner join #tbl dt on dt.UniqueConsumerId=cl.UniqueConsumerId
where NewSource='MI'

update SDS.tblConsumerLocationHistoryNew 
set HPPayLatitude=dt.Latitude,
	HPPayLongitude=dt.Longitude,
	HPPayLastUpdateDateTime=dt.UpdatedDate
from SDS.tblConsumerLocationHistoryNew a inner join #tbl dt on dt.UniqueConsumerId=cl.UniqueConsumerId
where NewSource='HPPAY'

---		Update New repeated Vitran GC Received
update SDS.tblConsumerLocationHistoryNew 
set VitranLatitude1=dt.Latitude,
	VitranLongitude1=dt.Longitude,
	VitranLastUpdateDateTime1=dt.UpdatedDate
from SDS.tblConsumerLocationHistoryNew a inner join #tbl dt on dt.UniqueConsumerId=cl.UniqueConsumerId
where NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')<>''

-- Other than Vitran GC received for new consumer Insert
insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, MILatitude, MILongitude, MILastUpdateDateTime, LastUpdatedDatetime)
Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate()
from #tbl g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
where h.UniqueConsumerId is null and NewSource='MI'

insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, HPPayLatitude, HPPayLongitude, HPPayLastUpdateDateTime, LastUpdatedDatetime)
Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate()
from #tbl g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
where h.UniqueConsumerId is null and NewSource='HPPAY'

update #tbl set IsV1Received=1 from #tbl g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
where isnull(h.VitranLatitude,'')='' and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')

--- First Vitran GC Received 
update SDS.tblConsumerLocationHistoryNew 
set VitranLatitude=dt.Latitude,
	VitranLongitude=dt.Longitude,
	VitranLastUpdateDateTime=dt.UpdatedDate
from SDS.tblConsumerLocationHistoryNew a inner join #tbl dt on dt.UniqueConsumerId=cl.UniqueConsumerId
where NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')=''

insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, HPPayLatitude, HPPayLongitude, HPPayLastUpdateDateTime, LastUpdatedDatetime)
Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate()
from #tbl g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
where h.UniqueConsumerId is null and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')



--update SDS.tblConsumerLocationHistoryNew
--	set case 
--			when dt.NewSource ='MI' then MILatitude=dt.Latitude,
--			when dt.NewSource ='MI' then MILongitude=dt.Longitude,
--			when dt.NewSource ='MI' then MILastUpdateDateTime=dt.UpdatedDate,
--			when dt.NewSource ='HPPay' then HPPayLatitude=dt.Latitude,
--			when dt.NewSource ='HPPay' then HPPayLongitude=dt.Longitude,
--			when dt.NewSource ='HPPay' then HPPayLastUpdateDateTime=dt.UpdatedDate
--		End
--from SDS.tblConsumerLocationHistoryNew a inner join #tbl dt on dt.UniqueConsumerId=cl.UniqueConsumerId
--where NewSource not in ('VITRANDC','VITRANCAP','VITRANSAFE')


---- New Consumers
--insert into @NewGC(did, uniId, Lat, Long, udate,GCSource)
--select g.DistributorID,g.UniqueConsumerId,g.Latitude,g.Longitude,g.UpdatedDate,g.NewSource 
--from #tbl g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
--where h.UniqueConsumerId is null

---- Existing Consumer with First vitran GC 
--insert into @NewVit1(did, uniId, Lat, Long, udate,GCSource)
--select g.DistributorID,g.UniqueConsumerId,g.Latitude,g.Longitude,g.UpdatedDate,g.NewSource 
--from #tbl g inner join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId where h.VitranLatitude is null

---- Existing Consumer with New vitran GC 
--insert into @NewVit2(did, uniId, Lat, Long, udate,GCSource)
--select g.DistributorID,g.UniqueConsumerId,g.Latitude,g.Longitude,g.UpdatedDate,g.NewSource 
--from #tbl g inner join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId where h.VitranLatitude is null

--select * from @NewGC 
--select * from @NewVit1
--select * from @NewVit2

--insert into SDS.tblConsumerLocationHistoryNew()


--update SDS.tblConsumerLocationHistoryNew 
--set VitranLatitude=,
--	VitranLongitude,
--	VitranLastUpdateDateTime
--from #tbl g left outer join SDS.tblConsumerLocationHistoryNew h on g.DistributorID=h.DistributorID where h.vitranLongitude is null 




--select * from SDS.tblConsumerLocationHistoryNew



drop table #tbl

GO
/****** Object:  StoredProcedure [SDS].[usp_GetCDCMSConsumerLocationNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [SDS].[usp_GetCDCMSConsumerLocationNew]      
--Declare       
@DistributorId int--=14145      
      
as      
      
BEGIN      
SET FMTONLY OFF      
      
	IF OBJECT_ID('tempdb..#tbldt') IS NOT NULL DROP TABLE #tbldt      
	declare @GCDays int;      
	select @GCDays= [Value] from SDS.tblAppConfiguration where [Key]='GCDays'      
	-------- GetCDCMSConsumerLocation      
	SELECT cm.DistributorID,cl.UniqueConsumerId,cl.Latitude,cl.Longitude,UpdatedDate,UpdatedBy,cl.Source as NewSource, 0 as IsV1Received      
	into #tbldt       
	FROM HPCLDCMS.ESV.tblConsumerLocation cl with(nolock) INNER JOIN DCMS.tblConsumerMaster cm with(nolock) ON cm.UniqueConsumerId=cl.UniqueConsumerId       
	WHERE cm.distributorId=@DistributorId and convert(date,cl.UpdatedDate,120) = convert(date,getdate()-@GCDays,120)      
      
	----select * from #tbldt      
      
	update SDS.tblConsumerLocationHistoryNew       
	set MILatitude= case when NewSource='MIAPP' then dt.Latitude End,      
	MILongitude=case when NewSource='MIAPP' then dt.Longitude End,      
	MILastUpdateDateTime=case when NewSource='MIAPP' then dt.UpdatedDate End,      
      
	HPPayLatitude=case when NewSource='HPPAY' then dt.Latitude End,      
	HPPayLongitude=case when NewSource='HPPAY' then dt.Longitude End,      
	HPPayLastUpdateDateTime=case when NewSource='HPPAY' then dt.UpdatedDate End,  
 
	-- Added for Safety Check GC to save seperately.
	VitranLatitudeSAFE=case when NewSource='VITRANSAFE' then dt.Latitude End,      
	VitranLongitudeSAFE=case when NewSource='VITRANSAFE' then dt.Longitude End,      
	VitranLastUpdateDateTimeSAFE=case when NewSource='VITRANSAFE' then dt.UpdatedDate End,    
        
	VitranLatitude1=case when NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')<>'' then dt.Latitude End,      
	VitranLongitude1=case when NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')<>'' then dt.Longitude End,      
	VitranLastUpdateDateTime1=case when NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')<>'' then dt.UpdatedDate End,      
        
	Distance=case when NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'') not in ('','0')     
	and isnull(cd.Latitude,'') not in ('','0') and isnull(cd.Longitude,'') not in ('','0') and isnull(cl.VitranLatitude1,'') not in ('','0')     
	and isnull(cl.VitranLongitude1,'') not in ('','0') then       
	((geography:: Point(isnull(cd.Latitude,0), isnull(cd.Longitude,0),4326)).STDistance(geography::Point(isnull(dt.Latitude,0),isnull(dt.Longitude,0), 4326))) End,      
	LastUpdatedDatetime=getdate()      
	from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cl.UniqueConsumerId      
	inner join SDS.tblConsumerDetails cd with (nolock) on cl.UniqueConsumerId=cd.UniqueConsumerId      
	and (dt.Latitude between -90.0 and 90.0) and  (dt.Longitude between -180.0 and 180.0)  
  
	---Logs/footprint      
	INSERT INTO SDS.tblConsumerLocationHistoryLogs(UniqueConsumerId,DistributorID,Latitude, Longitude,[Source],Distance,[Action],AddedBy,AddedOn,LastUpdatedDate)      
	select dt.UniqueConsumerId,dt.DistributorID,dt.Latitude,dt.Longitude,dt.[NewSource],0,'Scheduler',0,GETDATE(),dt.UpdatedDate       
	from #tbldt dt where dt.NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')      
       
	-- Other than Vitran GC received for new consumer Insert      
	insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, MILatitude, MILongitude, MILastUpdateDateTime,       
	HPPayLatitude, HPPayLongitude, HPPayLastUpdateDateTime, LastUpdatedDatetime)      
	Select g.UniqueConsumerId,g.DistributorID,       
	case when NewSource='MIAPP' then g.Latitude End, case when NewSource='MIAPP' then g.Longitude End, case when NewSource='MIAPP' then g.UpdatedDate End,      
	case when NewSource='HPPAY' then g.Latitude End, case when NewSource='HPPAY' then g.Longitude End, case when NewSource='HPPAY' then g.UpdatedDate End,      
	getdate()      
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId       
	where h.UniqueConsumerId is null and g.NewSource in('MIAPP','HPPAY')      
      
	-- Mark New Records to process for few more actions Vitran GC First time      
	update #tbldt set IsV1Received=1       
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId       
	where isnull(h.VitranLatitude,'')='' and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')      
      
	--- First Vitran GC Received for existing Consumers (Having MI/HPPay GC)      
	update SDS.tblConsumerLocationHistoryNew       
	set VitranLatitude=dt.Latitude,      
	VitranLongitude=dt.Longitude,      
	VitranLastUpdateDateTime=dt.UpdatedDate,      
	LastUpdatedDatetime=getdate()      
	from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cl.UniqueConsumerId      
	where NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')='' and IsV1Received=1      
      
	-- First Vitran GC Received for New Consumer      
	insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, VitranLatitude, VitranLongitude, VitranLastUpdateDateTime, 
	LastUpdatedDatetime, VitranLatitudeSAFE, VitranLongitudeSAFE, VitranLastUpdateDateTimeSAFE)
	Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate(),
	case when NewSource ='VITRANSAFE' then g.Latitude else null end LatSafe,
	case when NewSource ='VITRANSAFE' then g.Longitude else null end LongiSafe,
	case when NewSource ='VITRANSAFE' then g.UpdatedDate else null end GCDateSafe
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId       
	where h.UniqueConsumerId is null and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and IsV1Received=1      
       
	-- Update First Vitran GC as TripGC      
	update SDS.tblConsumerDetails       
	set Latitude=dt.Latitude,      
	Longitude=dt.Longitude,      
	Source=dt.NewSource,      
	LastUpdatedDatetime=getdate()      
	from SDS.tblConsumerDetails cd inner join #tbldt dt on dt.UniqueConsumerId=cd.UniqueConsumerId      
	where cd.DistributorID=@DistributorId and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')  and IsV1Received=1      
      
	Select cd.UniqueConsumerId, cd.Source, cd.Latitude, cd.Longitude, dt.UpdatedDate, cd.AreaRefNo, acm.AreaClusterId as ClusterId, 0 as Distance      
	from SDS.tblConsumerDetails cd inner join #tbldt dt on dt.UniqueConsumerId=cd.UniqueConsumerId      
	LEFT OUTER JOIN SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cd.AreaRefNo      
	where cd.DistributorID=@DistributorId and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')  and IsV1Received=1      
       
drop table #tbldt      
      
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetCDCMSConsumerLocationNew_20Mar]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----sds.usp_GetCDCMSConsumerLocationNew 14145

create Proc [SDS].[usp_GetCDCMSConsumerLocationNew_20Mar]
--Declare 
@DistributorId int--=14145

as

BEGIN
	SET FMTONLY OFF

	IF OBJECT_ID('tempdb..#tbldt') IS NOT NULL DROP TABLE #tbldt

	-------- GetCDCMSConsumerLocation
	SELECT cm.DistributorID,cl.UniqueConsumerId,cl.Latitude,cl.Longitude,UpdatedDate,UpdatedBy,cl.Source as NewSource, 0 as IsV1Received
	into #tbldt 
	FROM HPCLDCMS.ESV.tblConsumerLocation cl with(nolock) INNER JOIN DCMS.tblConsumerMaster cm with(nolock) ON cm.UniqueConsumerId=cl.UniqueConsumerId 
	WHERE cm.distributorId=@DistributorId and convert(date,cl.UpdatedDate,120) = convert(date,getdate()-1,120)

	--select * from #tbldt
	-- Other than Vitran source - existing update 
	update SDS.tblConsumerLocationHistoryNew 
	set MILatitude=dt.Latitude,
		MILongitude=dt.Longitude,
		MILastUpdateDateTime=dt.UpdatedDate,
		LastUpdatedDatetime=getdate()
	from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cl.UniqueConsumerId
	where NewSource='MIAPP'

	--Save Consumer Location History
	INSERT INTO SDS.tblConsumerLocationHistoryLogs(UniqueConsumerId,DistributorID,Latitude,
	Longitude,[Source],Distance,[Action],AddedBy,AddedOn,LastUpdatedDate)
	select dt.UniqueConsumerId,dt.DistributorID,dt.Latitude,dt.Longitude,dt.[NewSource],0,
	'Scheduler',0,GETDATE(),dt.UpdatedDate from #tbldt dt where dt.[NewSource]='MIAPP'

	update SDS.tblConsumerLocationHistoryNew 
	set HPPayLatitude=dt.Latitude,
		HPPayLongitude=dt.Longitude,
		HPPayLastUpdateDateTime=dt.UpdatedDate,
		LastUpdatedDatetime=getdate()
	from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cl.UniqueConsumerId
	where NewSource='HPPAY'




	--Save Consumer Location History
	INSERT INTO SDS.tblConsumerLocationHistoryLogs(UniqueConsumerId,DistributorID,Latitude,
	Longitude,[Source],Distance,[Action],AddedBy,AddedOn,LastUpdatedDate)
	select dt.UniqueConsumerId,dt.DistributorID,dt.Latitude,dt.Longitude,dt.[NewSource],0,
	'Scheduler',0,GETDATE(),dt.UpdatedDate from #tbldt dt where dt.[NewSource]='HPPAY'


	---	Update New repeated Vitran GC Received --RG--Additional ?
	update SDS.tblConsumerLocationHistoryNew 
	set VitranLatitude1=dt.Latitude,
		VitranLongitude1=dt.Longitude,
		VitranLastUpdateDateTime1=dt.UpdatedDate,
		LastUpdatedDatetime=getdate(),
		Distance=((geography:: Point(cd.Latitude, cd.Longitude,4326)).STDistance(geography::Point(isnull(cl.VitranLatitude1,0),isnull(cl.VitranLongitude1,0), 4326))) 
	from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cl.UniqueConsumerId
		inner join SDS.tblConsumerDetails cd with (nolock) on cl.UniqueConsumerId=cd.UniqueConsumerId
	where NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')<>''

	--Save Consumer Location History
	INSERT INTO SDS.tblConsumerLocationHistoryLogs(UniqueConsumerId,DistributorID,Latitude,
	Longitude,[Source],Distance,[Action],AddedBy,AddedOn,LastUpdatedDate)
	select dt.UniqueConsumerId,dt.DistributorID,dt.Latitude,dt.Longitude,dt.[NewSource],0,
	'Scheduler',0,GETDATE(),dt.UpdatedDate from #tbldt dt where dt.NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')
	
	-- Other than Vitran GC received for new consumer Insert
	insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, MILatitude, MILongitude, MILastUpdateDateTime, LastUpdatedDatetime)
	Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate()
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
	where h.UniqueConsumerId is null and g.NewSource='MIAPP'

	insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, HPPayLatitude, HPPayLongitude, HPPayLastUpdateDateTime, LastUpdatedDatetime)
	Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate()
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
	where h.UniqueConsumerId is null and NewSource='HPPAY'

	-- Mark New Records to process for few more actions Vitran GC First time
	update #tbldt set IsV1Received=1 
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
	where isnull(h.VitranLatitude,'')='' and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')

	--- First Vitran GC Received for existing Consumers (Having MI/HPPay GC)
	update SDS.tblConsumerLocationHistoryNew 
	set VitranLatitude=dt.Latitude,
		VitranLongitude=dt.Longitude,
		VitranLastUpdateDateTime=dt.UpdatedDate,
		LastUpdatedDatetime=getdate()
	from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cl.UniqueConsumerId
	where NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and isnull(cl.VitranLatitude,'')='' and IsV1Received=1

	-- First Vitran GC Received for New Consumer
	insert into SDS.tblConsumerLocationHistoryNew(UniqueConsumerId,DistributorID, VitranLatitude, VitranLongitude, VitranLastUpdateDateTime, LastUpdatedDatetime)
	Select g.UniqueConsumerId,g.DistributorID, g.Latitude,g.Longitude,g.UpdatedDate,getdate()
	from #tbldt g left outer join SDS.tblConsumerLocationHistoryNew h on g.UniqueConsumerId=h.UniqueConsumerId 
	where h.UniqueConsumerId is null and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE') and IsV1Received=1
	
	-- Update First Vitran GC as TripGC
	update SDS.tblConsumerDetails 
	set	Latitude=dt.Latitude,
		Longitude=dt.Longitude,
		Source=dt.NewSource,
		LastUpdatedDatetime=getdate()
	from SDS.tblConsumerDetails cd inner join #tbldt dt on dt.UniqueConsumerId=cd.UniqueConsumerId
	where cd.DistributorID=@DistributorId and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')  and IsV1Received=1
	

	Select cd.UniqueConsumerId, cd.Source, cd.Latitude, cd.Longitude, dt.UpdatedDate, cd.AreaRefNo, 
		acm.AreaClusterId as ClusterId, 0 as Distance
	from SDS.tblConsumerDetails cd inner join #tbldt dt on dt.UniqueConsumerId=cd.UniqueConsumerId
	LEFT OUTER JOIN SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cd.AreaRefNo
	where cd.DistributorID=@DistributorId and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')  and IsV1Received=1
	
drop table #tbldt


END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterAreaCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetClusterAreaCoordinates]
@DistributorId int

AS
BEGIN
	
	SELECT SDS.fn_CamelCase(dm.DistributorName) DistributorName, ISNULL(dm.DistributorId,0) as DistributorId, dtc.ClusterJSON as AreaJSON,dm.SACode, dtc.clusterId as AreaClusterId
	FROM SDS.tblClusterAreaFensing dtc INNER JOIN 
		[HPCLDCMS].[DCMS].[tblDistributorMaster] dm on dtc.DistributorId = dm.DistributorId 
	WHERE dtc.DistributorId = @DistributorId and (dm.DistributorName not like 'INACTIVE%') and (dm.DistributorName not like 'ND%')	 
	ORDER BY dm.DistributorName

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterAreaListByAreaRefNo]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_GetClusterAreaListByAreaRefNo 14193, 1141419300000014

create proc [SDS].[usp_GetClusterAreaListByAreaRefNo]
@DistributorId int,
@AreaRefNo numeric(17,0)

as

SELECT ac.DistributorId, ac.AreaClusterId, ac.AreaRefNo, da.AreaJSON
FROM SDS.tblAreaClusterMapping AS ac INNER JOIN SDS.tblDistributorAreaGeoCoordinates AS da ON ac.AreaRefNo = da.AreaRefNo
where AreaClusterId=(select AreaClusterId from sds.tblAreaClusterMapping where AreaRefNo=@AreaRefNo and DistributorId=@DistributorId)
and ac.IsActive='Y' and  da.ActiveStatus=1



GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterCoordinatesById]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [SDS].[usp_GetClusterCoordinatesById] 14193, 0
CREATE PROCEDURE [SDS].[usp_GetClusterCoordinatesById]
--declare
@DistributorId int,
@ClusterId bigint
AS
BEGIN

	-- set @DistributorId= 14193 set @ClusterId=0

	DECLARE @result TABLE(Code nvarchar(100), Coordinates nvarchar(MAX), Flag nvarchar(5),SelectMajorArea nvarchar(max), AreaClusterName nvarchar(50))

		--INSERT INTO @result 
		--SELECT AreaRefNo,AreaJSON,'DA',''
		--FROM SDS.tblDistributorAreaGeoCoordinates WITH(NOLOCK) 
		--WHERE DistributorId=@DistributorId and AreaJSON IS NOT NULL

		INSERT INTO @result 
		
		SELECT AreaClusterId,AreaJSON,'DC',
			isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(mac.majorAreaCode,''))
			from sds.tblDistributorClusterMajorAreaMapping mac with(nolock)
			where mac.DistributorId=@DistributorId and mac.ClusterId=AreaClusterId  FOR XML PATH('')),1,1,'')),'') AS SelectMajorArea,
		sds.fn_CamelCase(cm.AreaClusterName) as AreaClusterName
		FROM [SDS].[tblDistributorClusterCoordinates] dcc WITH(NOLOCK) 
		inner join [SDS].[tblClusterMaster] cm WITH (NOLOCK) on cm.[ClusterId] = dcc.AreaClusterId
		WHERE dcc.DistributorId=@DistributorId and AreaJSON IS NOT NULL and (AreaClusterId=@ClusterId or @ClusterId=0)

		--INSERT INTO @result 
		--SELECT 0,AreaJSON,'TA',''
		--FROM [SDS].[tblDistributorTradingAreaCoordinates] WITH(NOLOCK) 
		--WHERE DistributorId=@DistributorId and AreaJSON IS NOT NULL

	SELECT * FROM @result
	ORDER BY Flag

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterDeliveryBoyList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetClusterDeliveryBoyList]
--declare        
@DistributorId bigint,        
@ClusterId int        
--set @DistributorId=14193 ; set @ClusterId=0  
  
as  
  
BEGIN  
	SET FMTONLY OFF 
	SELECT c.DistributorId, c.ClusterId,SDS.fn_CamelCase( c.AreaClusterName )as AreaClusterName, dc.StaffRefNo,      
	SDS.fn_CamelCase( db.StaffName ) as StaffName, dc.NoOfTrip      
	FROM SDS.tblClusterMaster AS c  INNER JOIN SDS.tblDeliveryBoyClusterMapping AS dc ON dc.ClusterId = c.ClusterId INNER JOIN      
	DCMS.tblDistributorStaffDetails AS db WITH (NOLOCK) ON dc.StaffRefNo = db.StaffRefNo  
	where  c.IsActive='Y' and c.DistributorId=@DistributorId and (c.clusterid=@ClusterId or @ClusterId=0) 
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterMappingAndDeliveryBoymapping]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetClusterMappingAndDeliveryBoymapping] 
	-- Add the parameters for the stored procedure here

@VehicleId bigint,
@RetValue int output

AS
BEGIN

set @RetValue=0
  
  if EXISTS ( SELECT 1 FROM  [SDS].[tblVehicleDeliveryBoyMapping] d where d.VehicleId  = @VehicleId)
     begin 
	 SET @RetValue = 1
     end
  else
	SET @RetValue = 0	
	
END

GO
/****** Object:  StoredProcedure [SDS].[Usp_GetClusterNAreawiseConsumerCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[Usp_GetClusterNAreawiseConsumerCounts] 
--declare       
@DistributorId int,      
@ClusterId int,      
@AreaRefNo numeric(17,0)      
--set @DistributorId=14193 set @ClusterId=0; set @AreaRefNo=0 
as
BEGIN      
SET FMTONLY OFF      

	declare @tbl Table(DistributorId int,ClusterId int,ClusterName nvarchar(100),AreaClusterId int,AreaRefNo numeric(17,0),AreaCode varchar(10),  
	AreaName varchar(100),AllConsumers int, Active int,InActive int, PrimVitranL int,LatestVitranL int,HPPayL int,MIAppL int,ManualL int, NotAvailable int,
	SourceTotal int, InsideCluster int, OutSideCluster int,Verified int,NotVerified int,NotVerifiedPercent decimal(10,2))      
      
	insert into @tbl(DistributorId,ClusterId,ClusterName,AllConsumers, Active,InActive,PrimVitranL,LatestVitranL,HPPayL,
	MIAppL,ManualL, InsideCluster, OutSideCluster, NotAvailable)      
 
	SELECT c.DistributorId, ct.ClusterId, SDS.fn_CamelCase(ct.AreaClusterName), COUNT(c.UniqueConsumerId) AS AllConsumer,      
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' then 1 else 0 end) as Active,      
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' then 0 else 1 end) as NotActive,    
		sum(case when isnull(ltrim(RTRIM(c.VitranLatitude)),'')<>'' then 1 else 0 end) PrimVitranL,
		sum(case when c.IsTripGCChanged=1 then 1 else 0 end) LatestVitranL,
		sum(case when isnull(ltrim(RTRIM(c.HPPayLatitude)),'')<>'' then 1 else 0 end) HPPayL,
		sum(case when isnull(ltrim(RTRIM(c.MILatitude)),'')<>'' then 1 else 0 end) MIAppL,
		sum(case when isnull(ltrim(RTRIM(c.ManualLatitude)),'')<>'' then 1 else 0 end) ManualL,
		sum(case when (c.Latitude is not null and c.InCluster=1 and c.ClusterId=ac.AreaClusterId and upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) InsideCluster, 
		sum(case when (c.Latitude is not null and (c.InCluster=0 or c.ClusterId<>ac.AreaClusterId) and upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) as OutSideCluster,
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' and isnull(ltrim(RTRIM(c.Latitude)),'')='' then 1 else 0 end) NotAvailable
		--sum(case when (isnull(isverified,0)=1 and upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) as Verified,      
		--(sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' then 1 else 0 end)-sum(case when (isnull(isverified,0)=1 and 
		--upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end)) as NotVerified 
	FROM SDS.tblAreaClusterMapping AS ac INNER JOIN       
		(	select cd.DistributorId,cd.UniqueConsumerId, cd.AreaRefNo,cd.ConsumerStatus,cd.isverified,cd.InCluster,cd.ClusterId, cd.source,
			cd.Latitude, cd.IsTripGCChanged, cd.TripGCChangeDate,   
			cl.VitranLatitude,cl.VitranLatitude1,cl.MILatitude,cl.HPPayLatitude,cl.ManualLatitude
			from SDS.tblConsumerDetails cd left outer join SDS.tblConsumerLocationHistoryNew cl 
			on cd.DistributorID=cl.DistributorID and cd.UniqueConsumerId=cl.UniqueConsumerId
			where cd.DistributorId=@DistributorId  
		) AS c ON ac.AreaRefNo = c.AreaRefNo RIGHT OUTER JOIN      
		SDS.tblClusterMaster AS ct ON ac.AreaClusterId = ct.ClusterId AND ct.DistributorId=@DistributorId 
	WHERE ISNULL(ct.IsActive, N'N') = 'Y' AND ISNULL(ac.IsActive, N'N') = 'Y' AND c.DistributorId=@DistributorId      
		and (ct.ClusterId=@ClusterId or @ClusterId=0) and @AreaRefNo=0      
	GROUP BY c.DistributorId, ct.ClusterId, ct.AreaClusterName      
	ORDER BY ct.AreaClusterName      
    
	insert into @tbl(DistributorId,AreaClusterId,AreaRefNo,AreaCode,AreaName,AllConsumers, Active,InActive,PrimVitranL,LatestVitranL,HPPayL,
	MIAppL,ManualL,InsideCluster, OutSideCluster, NotAvailable,ClusterId)    
 
	SELECT c.DistributorId, ac.AreaClusterId, da.AreaRefNo, da.AreaCode, SDS.fn_CamelCase(da.AreaName),
		COUNT(c.UniqueConsumerId) AS AllConsumer,      
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' then 1 else 0 end) as Active,      
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' then 0 else 1 end) as NotActive, 
		sum(case when isnull(ltrim(RTRIM(c.VitranLatitude)),'')<>'' then 1 else 0 end) PrimVitranL,
		sum(case when c.IsTripGCChanged=1 then 1 else 0 end) LatestVitranL,
		sum(case when isnull(ltrim(RTRIM(c.HPPayLatitude)),'')<>'' then 1 else 0 end) HPPayL,
		sum(case when isnull(ltrim(RTRIM(c.MILatitude)),'')<>'' then 1 else 0 end) MIAppL,
		sum(case when isnull(ltrim(RTRIM(c.ManualLatitude)),'')<>'' then 1 else 0 end) ManualL,
		sum(case when (c.Latitude is not null and c.InCluster=1 and c.ClusterId=ac.AreaClusterId and upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) InsideCluster, 
		sum(case when (c.Latitude is not null and (c.InCluster=0 or c.ClusterId<>ac.AreaClusterId) and upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) as OutSideCluster,
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' and isnull(ltrim(RTRIM(c.Latitude)),'')='' then 1 else 0 end) NotAvailable,0 as ClusterId 
		--sum(case when (isnull(isverified,0)=1 and upper(isnull(ConsumerStatus,''))='ACTIVE')  then 1 else 0 end) as Verified,      
		--(sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' then 1 else 0 end)-sum(case when (isnull(isverified,0)=1 and 
		--upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end)) as NotVerified,  		     
	FROM SDS.tblAreaClusterMapping AS ac INNER JOIN      
		(	select cd.DistributorId, cd.UniqueConsumerId, cd.AreaRefNo,cd.ConsumerStatus,cd.isverified,cd.InCluster,cd.ClusterId, cd.source ,   
			cd.Latitude, cd.IsTripGCChanged, cd.TripGCChangeDate,   
			cl.VitranLatitude,cl.VitranLatitude1,cl.MILatitude,cl.HPPayLatitude,cl.ManualLatitude
			from SDS.tblConsumerDetails cd left outer join SDS.tblConsumerLocationHistoryNew cl on cd.DistributorID=cl.DistributorID 
			and cd.UniqueConsumerId=cl.UniqueConsumerId where cd.DistributorId=@DistributorId  
		) AS c ON ac.AreaRefNo = c.AreaRefNo   
		INNER JOIN DCMS.tblDistributorAreaMaster AS da ON ac.AreaRefNo = da.AreaRefNo  AND da.DistributorId=@DistributorId
	WHERE c.DistributorId=@DistributorId and ISNULL(ac.IsActive, N'N') = 'Y' and isnull(StatusFlag,'N')='Y'      
		and (ac.AreaClusterId=@ClusterId or @ClusterId=0) and (da.AreaRefNo=@AreaRefNo or @AreaRefNo=0)      
	GROUP BY c.DistributorId, ac.AreaClusterId, da.AreaRefNo, da.AreaCode, da.AreaName      
	Order by da.AreaName      
      
	update @tbl set NotVerifiedPercent= (convert(decimal(10,2), round( NotVerified*100.00/isnull(nullif(Active,0),1),2)))      
	Update @tbl set SourceTotal=isnull(PrimVitranL,0)+isnull(LatestVitranL,0)

	select DistributorId, ClusterId, ClusterName, AreaClusterId, AreaRefNo, AreaCode, AreaName,AllConsumers, Active,InActive, 
		PrimVitranL,LatestVitranL,SourceTotal,HPPayL,MIAppL, ManualL, InsideCluster, OutSideCluster, Verified, NotVerified, 
		NotVerifiedPercent, NotAvailable   
	from @tbl 
	order by isnull(ClusterName,'Zzz'),isnull(AreaName,'zzz')      
      
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterOverlappByCLId]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetClusterOverlappByCLId]
--declare
@DistributorId int,
@ClusterId int
as
BEGIN

	SELECT ol.SourceDistributorId,ol.SourceClusterId,ol.DestDistributorId,ol.DestClusterId,count(InsideCount) AS AvailableCnt,
	(count(InsideCount)-isnull((tb.TransferedCount),0)) as InsideCount,isnull((tb.TransferedCount),0)as TransferedCount,cl.AreaClusterName
	from SDS.tblOverLappClusterDtls ol WITH (NOLOCK) 
	left outer join SDS.tblClusterMaster cl WITH (NOLOCK) on ol.DestClusterId=cl.ClusterId 
	left outer join
	(	
		select SourceDistributorId,DestClusterId,SourceClusterId, 
		count(TransferId) TransferedCount from SDS.tblTransferBookingNew WITH (NOLOCK)
		where CAST(LastUpdatedDate as date)=cast(getdate()as date)
		group by SourceDistributorId,DestClusterId,SourceClusterId
	) tb on ol.SourceDistributorId=tb.SourceDistributorId 
	and ol.DestClusterId=tb.DestClusterId and ol.SourceClusterId=tb.SourceClusterId
	where ol.SourceDistributorId=@DistributorId and ol.SourceClusterId=@ClusterId 
	and cast(ol.LastUpdatedDate as date)=CAST(getdate() as date)	
	group by ol.SourceDistributorId,ol.SourceClusterId,ol.DestDistributorId,ol.DestClusterId,
	cl.AreaClusterName,tb.TransferedCount
	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_getClusterPickuplocations]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_getClusterPickuplocations]
@DistributorId int

as

SELECT ClusterId, AreaClusterName, PickupLocation, Latitude, Longitude FROM SDS.tblClusterMaster where DistributorId=@DistributorId and isnull(Pickuplocation,'G')='O'


GO
/****** Object:  StoredProcedure [SDS].[usp_GetClustersInOutCntWithMappAreaList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetClustersInOutCntWithMappAreaList] --14193
--declare       
@DistributorId int 
--set @DistributorId=14193 set @ClusterId=0;
AS
BEGIN      
SET FMTONLY OFF      

	declare @tblCluster Table(DistributorId int,ClusterId int,ClusterName nvarchar(100),AreaClusterId int,AreaRefNo numeric(17,0),
	AreaCode varchar(10),AreaName varchar(100),AllConsumers int,InsideCluster int, OutSideCluster int,NotAvailable int)          
	insert into @tblCluster(DistributorId,ClusterId,ClusterName,AllConsumers,InsideCluster, OutSideCluster, NotAvailable)      
 
	SELECT c.DistributorId, ct.ClusterId, SDS.fn_CamelCase(ct.AreaClusterName), 
		COUNT(c.UniqueConsumerId) AS AllConsumer,    		
		sum(case when (c.Latitude is not null and c.InCluster=1 and c.ClusterId=ac.AreaClusterId and 
		upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) InsideCluster, 
		sum(case when (c.Latitude is not null and (c.InCluster=0 or c.ClusterId<>ac.AreaClusterId) and 
		upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) as OutSideCluster,
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' and isnull(ltrim(RTRIM(c.Latitude)),'')='' then 1 else 0 end) NotAvailable
	FROM SDS.tblAreaClusterMapping AS ac INNER JOIN       
		(	select cd.DistributorId,cd.UniqueConsumerId,cd.AreaRefNo,cd.ConsumerStatus,cd.InCluster,cd.ClusterId, cd.source,
			cd.Latitude, cd.IsTripGCChanged, cd.TripGCChangeDate
			from SDS.tblConsumerDetails cd
			where cd.DistributorId=@DistributorId and cd.ConsumerStatus='ACTIVE'
		) AS c ON ac.AreaRefNo = c.AreaRefNo RIGHT OUTER JOIN      
		SDS.tblClusterMaster AS ct ON ac.AreaClusterId = ct.ClusterId and ct.DistributorId=@DistributorId
	WHERE ISNULL(ct.IsActive, N'N') = 'Y' AND ISNULL(ac.IsActive, N'N') = 'Y' AND c.DistributorId=@DistributorId
		--and (ct.ClusterId=@ClusterId or @ClusterId=0)     
	GROUP BY c.DistributorId, ct.ClusterId, ct.AreaClusterName      
	ORDER BY ct.AreaClusterName      
    
	insert into @tblCluster(DistributorId,AreaClusterId,AreaRefNo,AreaCode,AreaName,AllConsumers,InsideCluster,OutSideCluster,NotAvailable,ClusterId)    
 
	SELECT c.DistributorId, ac.AreaClusterId, da.AreaRefNo, da.AreaCode, SDS.fn_CamelCase(da.AreaName),
		COUNT(c.UniqueConsumerId) AS AllConsumer,  
		sum(case when (c.Latitude is not null and c.InCluster=1 and c.ClusterId=ac.AreaClusterId and 
		upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) InsideCluster, 
		sum(case when (c.Latitude is not null and (c.InCluster=0 or c.ClusterId<>ac.AreaClusterId) and 
		upper(isnull(ConsumerStatus,''))='ACTIVE') then 1 else 0 end) as OutSideCluster,
		sum(case when upper(isnull(ConsumerStatus,''))='ACTIVE' and isnull(ltrim(RTRIM(c.Latitude)),'')='' then 1 else 0 end) NotAvailable,
		0 as ClusterId 		     
	FROM SDS.tblAreaClusterMapping AS ac INNER JOIN      
		(	select cd.DistributorId,cd.UniqueConsumerId,cd.AreaRefNo,cd.ConsumerStatus,cd.InCluster,cd.ClusterId, cd.source ,   
			cd.Latitude, cd.IsTripGCChanged, cd.TripGCChangeDate
			from SDS.tblConsumerDetails cd 
			where cd.DistributorId=@DistributorId and cd.ConsumerStatus='ACTIVE'
		) AS c ON ac.AreaRefNo = c.AreaRefNo   
		INNER JOIN DCMS.tblDistributorAreaMaster AS da ON ac.AreaRefNo = da.AreaRefNo      
	WHERE c.DistributorId=@DistributorId and ISNULL(ac.IsActive, N'N') = 'Y' and isnull(StatusFlag,'N')='Y'
		--and (ac.AreaClusterId=@ClusterId or @ClusterId=0)    
	GROUP BY c.DistributorId, ac.AreaClusterId, da.AreaRefNo, da.AreaCode, da.AreaName      
	Order by da.AreaName      

	select DistributorId, isnull(ClusterId,0)ClusterId, ClusterName, AreaClusterId, AreaRefNo, AreaCode, AreaName,AllConsumers,InsideCluster, OutSideCluster, 
		NotAvailable   
	from @tblCluster --WHERE AllConsumers <>0 AND InsideCluster <> 0
	order by isnull(ClusterName,'Zzz'),isnull(AreaName,'zzz')            
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterwiseBacklog]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetClusterwiseBacklog 14193,0

CREATE proc [SDS].[usp_GetClusterwiseBacklog]
--declare
@DistributorID int,
@ClusterId int
--set @DistributorID=15139; set @ClusterId=0; 

as

set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

--	IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr create table #TotOdr(ClusterId int, PendingOrders int)
--	IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale create table #TotSale(ClusterId int, TotalSale int, AvgDailySale int)
	
--	declare @Str varchar(max)= 'insert into #TotOdr
--	select ac.areaclusterId, count(OrderRefNo) PendingOrders  
--	from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo
--	inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
--	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
--	and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
--	group by ac.areaclusterId'
--	print (@Str)
--	exec (@Str)
	
--	declare @Str1 varchar(max)= 'insert into #TotSale
--	select ac.areaclusterId, count(o.OrderRefNo)+isnull(TrpSale,0) TotalSale,
--	round((count(o.OrderRefNo)+ isnull(TrpSale,0))/(select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),2) AvgSale
--	from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls  o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo --'+@GroupCode+'
--	inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
--	left outer join (
--		select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) TrpSale
--		from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
--		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
--		where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
--		and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
--		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
--		group by ac.DistributorId, ac.areaclusterId
--	) r2 on o.DistributorId=r2.DistributorId and ac.areaclusterId=r2.areaclusterId
	
--	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
--	and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
--	and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
--	group by ac.areaclusterId,TrpSale'
--	print (@Str1)
--	exec (@Str1)

--	select c.ClusterId, sds.fn_CamelCase(c.AreaClusterName) AreaClusterName, isnull(o.PendingOrders,0) PendingOrders, 
--	isnull(s.TotalSale,0) TotalSale, isnull(s.AvgDailySale,0) AvgDailySale,round(Isnull(isnull(o.PendingOrders,0)/isnull(nullif(s.AvgDailySale,0),1),0),2) BackLog  
--	from sds.tblClusterMaster c left outer join #TotOdr o on c.ClusterId=o.ClusterId 
--	left outer join #TotSale s on c.ClusterId=s.ClusterId
--	where c.DistributorId=@DistributorID and c.IsActive='Y'


	Select c.ClusterId, sds.fn_CamelCase(c.AreaClusterName) AreaClusterName,isnull(TotalPendingOrder,0) PendingOrders,SUM(isnull(AvgSale,0)) TotalSale,isnull(AvgSale,0) AvgDailySale,BackLog 
	FROM sds.tblClusterMaster c left outer join
	 [SDS].[tblDistributorClusterwiseBacklog] cb on c.ClusterId=cb.clusterId
	where cb.DistributorId=@DistributorID and 
	c.IsActive='Y'
	and CAST(EntryDate as Date)=CAST(GETDATE() as Date)
	GROUP BY c.ClusterId,c.AreaClusterName,TotalPendingOrder,BackLog,AvgSale

--drop table #TotOdr
--drop table #TotSale


GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterWiseLastDeliveryBookingCountsNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetClusterWiseLastDeliveryBookingCountsNew]
@DistributorId int,  
@ClusterId nvarchar(20),  
@DeliveryDate datetime  
as
BEGIN  
SET FMTONLY OFF
	declare @DevMtrs float;		select @DevMtrs=[Value] from SDS.tblAppConfiguration where [Key]= 'DeviationMtrs'  
	
	create table #tbl (id int identity, DistributorId int,ConsClusterId bigint, ConsClusterName varchar(200),
	ClusterDelBoyId numeric(17,0), ClusterDelBoyName varchar(500), DeliveredById numeric(17,0), DeliveredByName varchar(500),  
	  Total int,InCluster int,OutCluster int,OutTradingArea int,NotFound int,Deviation int)

	 --Insert Delivery Boy Total Counts
	insert into #tbl(DistributorId,ConsClusterId, ConsClusterName,ClusterDelBoyId, ClusterDelBoyName, DeliveredById,Total, InCluster,OutCluster,OutTradingArea,NotFound,Deviation)
	
	select o.DistributorId, ac.AreaClusterId, ct.AreaClusterName,dc.StaffRefNo,d.StaffName, 0,
		count(o.UniqueConsumerId) Total,
	    sum(case when (cl.VitranLatitude1 is not null and cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=isnull(ac.AreaClusterId,0)) then 1 else 0 end) InCluster,     
		sum(case when (cl.VitranLatitude1 is not null and (cl.VitranLat1InCluster=0 or cl.VitranLat1InClusterId<>isnull(ac.AreaClusterId,0))) then 1 else 0 end) as OutCluster,  
	    sum(case when cl.VitranLat1inTradingArea=0 and cl.VitranLatitude1 is not null and cl.VitranLatitude1 <>'' then 1 else 0 end) AS OutTradingArea,  
		sum(case when cl.VitranLatitude1 is null then 1 else 0 end) NotFound,  
		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)  
		Left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID
		Left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo
		Left outer join SDS.tblClusterMaster ct with (nolock) on isnull(ac.AreaClusterId,0)=ct.ClusterId
		Left outer join SDS.tblDeliveryBoyClusterMapping dc with (nolock) on ct.ClusterId=dc.ClusterId
		left outer join DCMS.tblDistributorStaffDetails d with(nolock) on dc.StaffRefNo=d.StaffRefNo  
		left outer join DCMS.tblDistributorStaffDetails dBy with(nolock) on o.StaffRefNo=dBy.StaffRefNo
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cl.DistributorID
	where o.DistributorId= @DistributorId   
		and (ct.ClusterId=convert(numeric(17,0), @ClusterId) or  isnull(convert(numeric(17,0),@ClusterId),0)=convert(numeric(17,0),0))  
		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
	group by o.DistributorId, ac.AreaClusterId, ct.AreaClusterName,dc.StaffRefNo,d.StaffName

	-- Insert Consumer Cluster Counts
	insert into #tbl(DistributorId,ConsClusterId, ConsClusterName,ClusterDelBoyId, ClusterDelBoyName, DeliveredById, DeliveredByName, Total,
		InCluster,OutCluster,OutTradingArea,NotFound,Deviation)
	select o.DistributorId, ac.AreaClusterId, ct.AreaClusterName,dc.StaffRefNo,d.StaffName,o.StaffRefNo,dBy.StaffName, 
		count(o.UniqueConsumerId) Total,
	    sum(case when (cl.VitranLatitude1 is not null and cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=isnull(ac.AreaClusterId,0)) then 1 else 0 end) InCluster,     
		sum(case when (cl.VitranLatitude1 is not null and (cl.VitranLat1InCluster=0 or cl.VitranLat1InClusterId<>isnull(ac.AreaClusterId,0))) then 1 else 0 end) as OutCluster,  
	    sum(case when cl.VitranLat1inTradingArea=0 and cl.VitranLatitude1 is not null and cl.VitranLatitude1 <>'' then 1 else 0 end) AS OutTradingArea,  
		sum(case when cl.VitranLatitude1 is null then 1 else 0 end) NotFound,  
		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)  
		Left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID
		Left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo
		Left outer join SDS.tblClusterMaster ct with (nolock) on isnull(ac.AreaClusterId,0)=ct.ClusterId
		Left outer join SDS.tblDeliveryBoyClusterMapping dc with (nolock) on ct.ClusterId=dc.ClusterId
		left outer join DCMS.tblDistributorStaffDetails d with(nolock) on dc.StaffRefNo=d.StaffRefNo  
		left outer join DCMS.tblDistributorStaffDetails dBy with(nolock) on o.StaffRefNo=dBy.StaffRefNo
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cl.DistributorID
	where  o.DistributorId= @DistributorId   
		and (ct.ClusterId=convert(numeric(17,0), @ClusterId) or  isnull(convert(numeric(17,0),@ClusterId),0)=convert(numeric(17,0),0))  
		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
	group by o.DistributorId, ac.AreaClusterId, ct.AreaClusterName,dc.StaffRefNo,d.StaffName,o.StaffRefNo,dBy.StaffName 

	select id, DistributorId,isnull(ConsClusterId,0) ConsClusterId, Isnull(ConsClusterName,'Not Mapped') ConsClusterName,
		ClusterDelBoyId, ClusterDelBoyName, DeliveredById, DeliveredByName, Total, InCluster,OutCluster,OutTradingArea,NotFound,Deviation
	from #tbl 

	drop table #tbl
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterWiseLastDeliveryBookingListNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetClusterWiseLastDeliveryBookingListNew]      
--declare      
@DistributorId int,      
@ClusterId int,      
@DeliveryDate datetime      
--set @DistributorId=14193; set @ClusterId=76; set @DeliveryDate='2024-01-24'  
as   
BEGIN      
	SET FMTONLY OFF      
      
	select o.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, o.UniqueConsumerId, cd.ConsumerNo, isnull(ac.AreaClusterId,0) AreaClusterId,  
		ct.AreaClusterName ConsClusterName, sds.fn_CamelCase(cd.ConsumerName) ConsumerName, cd.MobileNo, sds.fn_CamelCase(cd.Address) Address, cd.Pin,       
		cd.Latitude as TripLatitude, cd.Longitude TripLongitude, cd.Source TripSource,o.OrderRefNo,  o.OrderNo, cd.AreaRefNo,   
		sds.fn_CamelCase(cd.AreaName) AreaName, 0 IsUpdated, case when (isnull(cl.VitranLat1InCluster,0)=1 ) then 1 else 0 end InCluster,  
		isnull(cl.VitranLat1InClusterId,0) InClusterId, isnull(cl.VitranLat1inTradingArea,0) inTradingArea,isnull(cd.IsVerified,0) IsVerified, IsVerifiedUpdated,  
		isnull(cd.AddressConfirmed,0) AddressConfirmed, isnull(cd.AreaConfirmed,0) AreaConfirmed,   
		isnull(cd.LocationConfirmed,0) LocationConfirmed, o.ActualDeliveryDate, cd.TripGCDate,
		cl.VitranLastUpdateDateTime1 as LastUpdatedDatetime,
		(SELECT isnull(convert(nvarchar(20), mn.MobileNo) +', ','') +isnull( mn.Prm1 +', ','') +isnull( nullif(mn.Prm2,'') +', ','') +  
		isnull(mn.Prm3 +', ','')+isnull(mn.Prm4 +', ','') FROM DCMS.tblConsumerMaster mn WITH(NOLOCK) WHERE mn.UniqueConsumerId=cd.UniqueConsumerId) RegMobileNo,      
		Convert(bigint,ROUND(cl.Distance, 0)) AS Deviation, 		
		cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,        
		cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,        
		cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,        
		cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime ,
		cl.VitranLatitudeSAFE ,cl.VitranLongitudeSAFE,cl.VitranLastUpdateDateTimeSAFE         
	
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)       
		left outer join DCMS.tblDistributorStaffDetails d with (nolock) on o.StaffRefNo=d.StaffRefNo      
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID       
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with (nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cd.DistributorID       
		Left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo  
		left outer join SDS.tblClusterMaster ct on ac.AreaClusterId=ct.ClusterId
	where ct.IsActive='Y' and cd.ConsumerStatus='Active' and o.DistributorId= @DistributorId       
		and (ac.AreaClusterId=convert(numeric(17,0), @ClusterId) or  @ClusterId=convert(numeric(17,0),0))      
		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)		  
	order by cd.LastUpdatedDatetime      
END     
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterwisePendingBookingCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
----[SDS].[usp_GetClusterwisePendingBookingCounts] 14145,0    
CREATE proc [SDS].[usp_GetClusterwisePendingBookingCounts]      
--declare      
@DistributorId int,      
@ClusterId bigint      
--set @DistributorId=14145; set @ClusterId=0      
      
as      
      
BEGIN      
SET FMTONLY OFF      
      
 DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)=''      
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId      
 if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode      
      
 IF OBJECT_ID('tempdb..#clusterPendingBookings') IS NOT NULL DROP TABLE #clusterPendingBookings      
  create table #clusterPendingBookings(id int identity,DistributorId int, ClusterId bigint, ClusterName nvarchar(50), TotalBookings int, InCluster int,OutCluster int,OutTradingArea int,NotFound int,    
  NotInCludedInTrip int)      
      
 set @strquery=( '      
 insert into #clusterPendingBookings (DistributorId, ClusterId, ClusterName, TotalBookings, InCluster, OutCluster,OutTradingArea,NotFound,NotInCludedInTrip)      
      
 select c.DistributorId, c.ClusterId, c.AreaClusterName, count(o.UniqueConsumerId) TotalBookings,      
 sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 1 else 0 end) InCluster,       
 sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 0 else 1 end) OutCluster,       
 sum(case when (isnull(cd.inTradingArea,0)=1) then 0 else 1 end) OutTradingArea,      
 sum(case when (nullif(cd.Latitude,'''') is null) then 1 else 0 end) NotFound,    
 sum(case when (isnull(td.tripid,0)= 0) then 0 else 1 end) NotInCludedInTrip  
 from sds.tblClusterMaster c WITH (NOLOCK) left outer join SDS.tblAreaClusterMapping acm with(nolock) on c.ClusterId=acm.AreaClusterId      
 left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on acm.AreaRefNo=o.AreaRefNo      
 INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode       
 INNER JOIN sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''      
 left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId    
 left outer JOIN SDS.tblConsumerLocationHistoryNew cl on cd.UniqueConsumerId = cl.UniqueConsumerId  
 left outer join sds.tblTripPlanningNotIncluded td on cd.UniqueConsumerId = td.UniqueConsumerId and cast(td.TripDate as date) = cast(GETDATE() as date)    
 where c.IsActive=''Y'' and cd.ConsumerStatus=''Active'' AND (o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN''))      
 and c.DistributorId= '+convert(nvarchar(25),@DistributorId)+' and (c.ClusterId= '+convert(nvarchar(25),@ClusterId)+' or  '+convert(nvarchar(25),@ClusterId)+'=0)       
 group by c.DistributorId, c.ClusterId, c.AreaClusterName ' )      
      
 print @strquery      
 exec (@strquery)      
      
 select id, DistributorId, ClusterId, Clustername, isnull(InCluster,0) InCluster, isnull(outCluster,0) outCluster, isnull(OutTradingArea,0) outTradingArea,TotalBookings,NotFound,    
 isnull(NotInCludedInTrip,0) NotInCludedInTrip   
 from #clusterPendingBookings      
      
 DROP TABLE #clusterPendingBookings      
END      
      
      
GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterwisePendingBookingList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetClusterwisePendingBookingList] 
--declare
@DistributorId int,
@ClusterId bigint
--set @DistributorId=14145; set @ClusterId=0
as

BEGIN
	SET FMTONLY OFF

	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#clusterPendingBookings') IS NOT NULL DROP TABLE #clusterPendingBookings
	create table #clusterPendingBookings(id int identity,DistributorId int, ClusterId bigint, AreaClusterName nvarchar(200), 
		UniqueConsumerId nvarchar(20),ConsumerNo nvarchar(20), ConsumerName nvarchar(200), MobileNo nvarchar(200), Address nvarchar(1000), 
		Pin nvarchar(10),Latitude nvarchar(20), Longitude nvarchar(20), Source nvarchar(50),OrderRefNo nvarchar(20),  OrderNo nvarchar(20),  
		OrderDate datetime, AreaRefNo nvarchar(20), AreaName nvarchar(200), IsUpdated int, InCluster int, InClusterId bigint, 
		inTradingArea int, IsVerified int,NotInCludedInTrip int, AddressConfirmed int, AreaConfirmed int, LocationConfirmed int, 
		RegMobileNo nvarchar(100), Deviation bigint, LastUpdatedDt datetime,CLatitude nvarchar(20), CLongitude nvarchar(20),
		MILat nvarchar(20), MILong nvarchar(20), MIDt datetime,	HPPayLat nvarchar(20), HPPayLong nvarchar(20), HPPayDt datetime)

	set @strquery=( '
		insert into #clusterPendingBookings (DistributorId, ClusterId, AreaClusterName, UniqueConsumerId,ConsumerNo, ConsumerName, MobileNo, 
			Address, Pin,Latitude, Longitude, Source, OrderRefNo, OrderNo,  OrderDate, AreaRefNo, AreaName, IsUpdated, InCluster,InClusterId, 
			inTradingArea, IsVerified,NotInCludedInTrip,AddressConfirmed,AreaConfirmed,LocationConfirmed, RegMobileNo, Deviation, 
			LastUpdatedDt,CLatitude,CLongitude,MILat, MILong, MIDt, HPPayLat, HPPayLong, HPPayDt)

		select c.DistributorId, c.ClusterId, c.AreaClusterName, o.UniqueConsumerId,cd.ConsumerNo, cd.ConsumerName, cd.MobileNo, cd.Address, cd.Pin,
			nullif(cd.Latitude,'''') Lat, cd.Longitude Long, cd.Source, o.OrderRefNo,  o.OrderNo,  o.OrderDate, cd.AreaRefNo, 
			cd.AreaName, 0 IsUpdated, case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 1 else 0 end InCluster,cd.ClusterId, 
			isnull(cd.inTradingArea,0) inTA, isnull(cd.IsVerified,0) IsVerified,case when (isnull(td.tripid,0) = 0) then 0 else 1 end NotIncInTrip,
			cd.AddressConfirmed,cd.AreaConfirmed,cd.LocationConfirmed,
			(SELECT isnull( convert(nvarchar(20),mn.MobileNo) +'', '','''') +isnull( mn.Prm1 +'', '','''') +isnull( nullif(mn.Prm2,'''') +'', '','''') +isnull(mn.Prm3 +'', '','''')+isnull(mn.Prm4 +'', '','''') FROM DCMS.tblConsumerMaster mn WITH(NOLOCK) WHERE mn.UniqueConsumerId=cd.UniqueConsumerId) RegMobNo,
			ROUND(cl.Distance, 0) AS Devi, cd.LastUpdatedDatetime,cd.Latitude as CLat,cd.Longitude as CLong,
			cl.MILatitude MILat, cl.MILongitude MILong,cl.MILastUpdateDateTime MIdt, cl.HPPayLatitude HPPayLat, cl.HPPayLongitude HPPayLong, 
			cl.HPPayLastUpdateDateTime HPPaydt
		from sds.tblClusterMaster c WITH (NOLOCK) left outer join SDS.tblAreaClusterMapping acm with(nolock) on c.ClusterId=acm.AreaClusterId
			left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on acm.AreaRefNo=o.AreaRefNo
			INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode 
			INNER JOIN sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
			left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId
			left outer join sds.tblTripPlanningNotIncluded td on cd.UniqueConsumerId = td.UniqueConsumerId and cast(td.TripDate as date) = cast(GETDATE() as date)
			left outer JOIN SDS.tblConsumerLocationHistoryNew cl on o.UniqueConsumerId = cl.UniqueConsumerId
		where c.IsActive=''Y'' and cd.ConsumerStatus=''Active'' AND (o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN'')) 
			and c.DistributorId= '+convert(nvarchar(25),@DistributorId)+' 
			and (c.ClusterId= '+convert(nvarchar(25),@ClusterId)+' or  '+convert(nvarchar(25),@ClusterId)+'=0) ' )
		--select len(@strquery)
		print @strquery
		exec (@strquery)

		select id,DistributorId, ClusterId, sds.fn_CamelCase(AreaClusterName) AreaClusterName, UniqueConsumerId,ConsumerNo, 
			sds.fn_CamelCase(ConsumerName) ConsumerName, MobileNo, sds.fn_CamelCase(Address) Address, Pin,Latitude, Longitude, Source, Deviation, 
			OrderRefNo, OrderNo,OrderDate, AreaRefNo, sds.fn_CamelCase(AreaName) AreaName, isnull(IsUpdated,0) IsUpdated, 
			isnull(InCluster,0) InCluster, isnull(InClusterId,0) InClusterId, isnull(inTradingArea,0) inTradingArea, 
			isnull(IsVerified,0) IsVerified,ISNULL(NotInCludedInTrip,0) NotInCludedInTrip, isnull(AddressConfirmed,0) AddressConfirmed, 
			isnull(AreaConfirmed,0) AreaConfirmed, isnull(LocationConfirmed,0) LocationConfirmed, RegMobileNo, LastUpdatedDt, CLatitude, 
			CLongitude, MILat, MILong, MIDt, HPPayLat, HPPayLong, HPPayDt
		from #clusterPendingBookings
		order by LastUpdatedDt

	DROP TABLE #clusterPendingBookings
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetClusterwiseYestDLVDList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_GetClusterwiseYestDLVDList]--14193,75  
--declare  
@DistributorId int,  
@ClusterId bigint  
------@DeliveryDate datetime  
--set @DistributorId=14193; set @ClusterId=0; --set @DeliveryDate='2020-01-02'  
  
as  
  
BEGIN  
SET FMTONLY OFF  
  
	select c.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, o.UniqueConsumerId, cd.ConsumerNo,cd.Latitude AS CLatitude,  
		cd.Longitude AS CLongitude, sds.fn_CamelCase(cd.ConsumerName) ConsumerName, cd.MobileNo, sds.fn_CamelCase(cd.Address) Address, cd.Pin,  
		o.OrderRefNo,  o.OrderNo,cd.AreaRefNo, sds.fn_CamelCase(cd.AreaName) AreaName,0 IsUpdated,o.ActualDeliveryDate,  
		case when (isnull(cd.InCluster,0)=1 ) then 1 else 0 end InCluster,isnull(cd.ClusterId,0) ClusterId,   
		isnull(cd.inTradingArea,0) inTradingArea,isnull(cd.IsVerified,0) IsVerified,IsVerifiedUpdated,cd.LastUpdatedDatetime,cd.TripGCDate,  
		isnull(cd.AddressConfirmed,0) AddressConfirmed, isnull(cd.AreaConfirmed,0) AreaConfirmed, isnull(cd.LocationConfirmed,0) LocationConfirmed,  
		(SELECT isnull(convert(nvarchar(20), mn.MobileNo) +', ','') +isnull( mn.Prm1 +', ','') +isnull( nullif(mn.Prm2,'') +', ','')   
		+isnull(mn.Prm3 +', ','')+isnull(mn.Prm4 +', ','') FROM DCMS.tblConsumerMaster mn WITH(NOLOCK)
		WHERE mn.UniqueConsumerId=cd.UniqueConsumerId) RegMobileNo, Convert(bigint,ROUND(cl.Distance, 0)) AS Deviation,   
		cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,      
		cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,      
		cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,      
		cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime   
	from SDS.tblClusterMaster c Left outer Join SDS.tblDeliveryBoyClusterMapping dc on dc.ClusterId=c.ClusterId  
		left outer Join DCMS.tblDeliveryBoyRefillOrder o with (nolock) on dc.StaffRefNo=o.StaffRefNo  
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId  
		left outer join DCMS.tblDistributorStaffDetails d on o.StaffRefNo=d.StaffRefNo  
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl on o.UniqueConsumerId = cl.UniqueConsumerId  
	where c.DistributorId= @DistributorId and c.IsActive='Y' and (c.ClusterId=@ClusterId or @ClusterId=0)  
	and cd.ConsumerStatus='Active'and isnull(cd.IsVerified,0)=1 
--and isnull(IsVerifiedUpdated,0)=0  
order by cd.LastUpdatedDatetime  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsDetlsForTriptPlanningToInterface]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---		sds.usp_GetConsDetlsForTriptPlanningToInterface 14145, '2021-02-16'

CREATE proc [SDS].[usp_GetConsDetlsForTriptPlanningToInterface]
--declare 
@DistributorId int,
@TripDate datetime
--set @DistributorId=14145; set @TripDate='2021-01-30'; 

as

BEGIN

--[pk_id] [bigint],[DistributorId] [int],[TripId] [bigint],[TripDate] [datetime],[TripStartDate] [datetime],[TripEndDate] [datetime],
--[TripPlanningDetId] [nvarchar](20),[StaffRefNo] [nvarchar](20),[VehicleId] [bigint],[AreaRefNo] [nvarchar](20),[OrderRefNo] [nvarchar](20),
--[SequenceNo] [int],[clusterId] [bigint],[OrderStatus] [nvarchar](20),[FromDistributorId] [int],[FromClusterId] [bigint]

	select t.DistributorId, isnull(t.TripId,0) AS TripId, t.TripDate, isnull(t.TripStartDate,'1900-01-01 00:00') as TripStartDate,
		isnull(t.TripEndDate,'1900-01-01 00:00') AS TripEndDate, td.TripPlanningDetId,StaffRefNo, VehicleId, td.AreaRefNo, td.OrderRefNo, 
		td.SequenceNo, t.clusterId, td.OrderStatus, td.FromDistributorId,td.FromClusterId
	from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
	where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date)
END
	




GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsLocandDlvLocDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: sp_GetConsLocandDlvLocDetails
--	Description		:	get Consumer location and delivery location details for calculate deviation

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	24-July-2019		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetConsLocandDlvLocDetails]
@DistributorId int
AS
BEGIN
	SELECT tp.UniqueConsumerId,cd.Address as ConsumerAddress,cd.ConsumerName,cd.AreaName,cd.ConsumerNo,cd.MobileNo,tp.Latitude AS DlvLatitude,
	tp.Longitude AS DlvLongitude,tp.PlaceId AS DlvPlaceId,cd.Latitude, cd.Longitude,
	cd.PlaceId,dam.AreaCode,100 AS Deviation,cd.AreaRefNo,cd.Source
	FROM [SDS].[tblTripPlanningDetails] tp INNER JOIN
	[SDS].[tblConsumerDetails] cd ON cd.UniqueConsumerId=tp.UniqueConsumerId LEFT OUTER JOIN
	[DCMS].[tblDistributorAreaMaster] dam WITH(NOLOCK) ON dam.AreaRefNo=cd.AreaRefNo
	WHERE cd.DistributorID=@DistributorId
	order by cd.ConsumerName
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerAddressDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_GetConsumerAddressDetails 14193,1110041700000558

create proc [SDS].[usp_GetConsumerAddressDetails]
@DistributorID int,
@UniqueConsumerId numeric(17, 0)
as

BEGIN
	SELECT cm.DistributorID,cm.UniqueConsumerId,cm.ConsumerName,cm.ConsumerNo,cm.ConsumerStatus,cm.AddressLine1,cm.AddressLine2,cm.AddressLine3,
	cm.AreaRefNo,cm.Pin,dm.DistrictCode,dm.DistrictName,c.CityCode,c.CityName,cm.StateCode,s.StateName,c.TalukaCode,tm.TalukaName
	FROM [DCMS].[tblConsumerMaster] cm LEFT OUTER JOIN
		[DCMS].[tblStateMaster] s ON s.StateCode=cm.StateCode LEFT OUTER JOIN
		[DCMS].[tblDistrictMaster] dm ON dm.DistrictCode=cm.DistrictCode LEFT OUTER JOIN
		[DCMS].[tblCityMaster] c ON c.CityCode=cm.CityCode LEFT OUTER JOIN
		[DCMS].[tblTalukaMaster] tm ON tm.TalukaCode=c.TalukaCode
	WHERE cm.UniqueConsumerId=@UniqueConsumerId AND cm.DistributorID=@DistributorID
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerDeliveryDetailsByStaffRefNo]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetConsumerDeliveryDetailsByStaffRefNo]
--declare 
@DistributorId BIGINT,
@StaffRefNo nvarchar(50),
@FromDate datetime,
@ToDate datetime

as

BEGIN
set FMTONLY OFF


Select ConsumerNo, DistributorId, StaffRefNo, Lat, Lng,CONVERT(nvarchar, Format(cast(InsertedDatetime as datetime),'yyyy-MM-dd HH:mm:ss','en-us')) InsertedDatetime 

From SDS.tblConsumerDeliveryDetails where DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
and  Cast(InsertedDatetime as date) BETWEEN Cast(ISNULL(@FromDate,InsertedDatetime) as date) and  Cast(ISNULL(@ToDate,InsertedDatetime) as date)

ORDER BY InsertedDatetime DESC
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetConsumerDetails]    
--declare    
@DistributorId int,    
@ClusterId bigint,      
@TripDate datetime    
    
--set @DistributorId=14193; set @ClusterId=0; --set @CaseNo='DA'; 
--set @TripDate='2021-09-20'    
    
AS    
BEGIN    
 SELECT  da.TripId, da.CaseNo, da.TripNo, CONVERT(int, REPLACE(da.TripNo, 'TRP/', '')) AS TripIndexNo, da.TripDate, da.ClusterId,     
  da.StaffRefNo, da.StaffName, dad.DensityGroupNo, dad.SequenceNo, dad.OrderNo, dad.OrderDate, cd.UniqueConsumerId, cd.DistributorID,     
  cd.ConsumerNo, cd.ConsumerName, cd.ConsumerStatus, cd.MobileNo, cd.Address, cd.Pin, cd.AreaRefNo, cd.AreaName, cd.Latitude,     
  cd.Longitude, cd.DistanceFromAgency, cd.DistanceFromGodown,    
  --dad.DensityFrom    
  (case when (dad.UniqueConsumerId= dad.DensityFrom) then 1 else 0 end ) as DensityFrom    
 FROM SDS.tblDensityAnalysis AS da WITH (nolock) INNER JOIN    
  SDS.tblDensityAnalysisDetails AS dad WITH (nolock) ON da.TripId = dad.TripId INNER JOIN    
  SDS.tblConsumerDetails AS cd WITH (nolock) ON cd.UniqueConsumerId = dad.UniqueConsumerId    
 WHERE da.DistributorId=@DistributorId AND upper(da.CaseNo) in ('DA','AD','OA') and cast(da.TripDate as date) = cast(@TripDate as date)    
  and (da.ClusterId=@ClusterId or @ClusterId=0)    
END    

GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerDetailsById]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_GetConsumerDetailsById 14193,1100669600031442

CREATE proc [SDS].[usp_GetConsumerDetailsById]
@DistributorID int,
@UniqueConsumerId numeric(17, 0)
--set @DistributorID=14193 set @UniqueConsumerId=1110041700000558

as

BEGIN
	SELECT c.UniqueConsumerId, c.DistributorID, c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo, 
	SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3) as ConsumerAddress,  c.Pin, c.AreaRefNo,SDS.fn_CamelCase( ar.AreaName) as AreaName,
	cd.Latitude, cd.Longitude, cd.Source
	FROM DCMS.tblConsumerMaster AS c WITH (nolock) 
	inner join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo
	left outer join sds.tblConsumerDetails cd on c.UniqueConsumerId=cd.UniqueConsumerId
	where c.DistributorID=@DistributorID and c.UniqueConsumerId=@UniqueConsumerId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerListAreaWise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetConsumerListAreaWise]  
--declare   
@DistributorID int,  
@AreaRefNo numeric(17, 0),  
@Flag varchar(10)  
--set @DistributorID=14145 set @AreaRefNo=0; set @Flag='RGEO'  
  
as  
  
BEGIN  
	IF(@Flag='RGEO') -- Used for Reverse Geo Co-Ordinates  
	BEGIN  
		SELECT top 10 c.UniqueConsumerId, isnull(cd.UniqueConsumerId,0) as CDConsumerId, c.DistributorID, c.ConsumerNo,
			SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo,   
			SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 + ' '+ dm.DistrictName) as ConsumerAddress,    
			c.Pin, c.AreaRefNo,SDS.fn_CamelCase( ar.AreaName ) as AreaName,cd.PlaceId, cd.Latitude,	cd.Longitude, cd.Source,  
			c.ConsumerStatus,isnull(cd.InArea,0) as InArea,isnull(cd.InCluster,0) as InCluster,isnull(cd.inTradingArea,0) as InTradingArea,
			isnull(cd.Isverified,0) Isverified,  
			case when ((isnull(cd.Latitude,'') ='' or isnull(cd.Longitude,'')='') and isnull(cd.source,'AUTO')='AUTO') then 'Locate & Confirm'   
				 when ((isnull(cd.Latitude,'') <>'' and isnull(cd.Longitude,'')<>'') and isnull(cd.Source,'AUTO')='AUTO') then 'View & Confirm'   
				 else 'View' End Locateflag,  
			(isnull(convert(nvarchar(50), c.MobileNo) +', ','') +isnull( convert(nvarchar(50), c.Prm1) +', ','') +
			isnull( nullif(convert(nvarchar(50), c.Prm2),'') +', ','') +isnull(convert(nvarchar(50), c.Prm3) +', ','')+
			isnull(convert(nvarchar(50), c.Prm4) +', ','') ) RegMobileNo,dl.DLat as DLatitude, dl.DLong as DLongitude,gl.GLatitude, gl.GLongitude,
			isnull(cd.AddressConfirmed,0) AddressConfirmed, isnull(cd.AreaConfirmed,0) AreaConfirmed, isnull(cd.LocationConfirmed,0) LocationConfirmed,
			acp.AreaClusterId AS ClusterId  
		FROM DCMS.tblConsumerMaster AS c WITH (nolock)  
			left outer join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo  
			left outer join sds.tblConsumerDetails cd WITH(NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId   
			LEFT OUTER JOIN SDS.tblAreaClusterMapping acp WITH(NOLOCK) ON acp.AreaRefNo=c.AreaRefNo  
			left outer join sds.tbldistributorLocation dl WITH(NOLOCK) on cd.DistributorID=dl.DistributorID  
			LEFT OUTER JOIN [DCMS].[tblDistrictMaster] dm WITH(NOLOCK) ON dm.DistrictCode=c.DistrictCode  
			Left outer join (
				select top 1 Latitude as GLatitude, Longitude as GLongitude from sds.tblDistributorGodown   
				where DistributorID=@DistributorID and upper(ActiveFlag)='Y' and Latitude is not null and Longitude is not null
			) gl on dl.DistributorID=cd.DistributorID  
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo = 0) --AND upper(c.ConsumerStatus)='ACTIVE'  
			and (cd.UniqueConsumerId is null or (dl.Location.STDistance(geography::Point(isnull(cd.Latitude,0), isnull(cd.Longitude,0), 4326))) <= 100.0)  
		order by c.ConsumerName  
	END  
	ELSE  
	BEGIN  
		SELECT c.UniqueConsumerId, isnull(cd.UniqueConsumerId,0) as CDConsumerId, c.DistributorID, c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName,
			c.MobileNo,SDS.fn_CamelCase(cd.Address) as ConsumerAddress, c.Pin, cd.AreaRefNo,SDS.fn_CamelCase( cd.AreaName ) as AreaName,cd.PlaceId,  
			cd.Latitude, cd.Longitude, cd.Source, c.ConsumerStatus,isnull(cd.InArea,0) as InArea,isnull(cd.InCluster,0) as InCluster,
			isnull(cd.inTradingArea,0) as InTradingArea, isnull(cd.Isverified,0) Isverified, 
			case when ((isnull(cd.Latitude,'') ='' or isnull(cd.Longitude,'')='') and isnull(cd.Source,'AUTO')='AUTO') then 'Locate & Confirm'   
				 when ((isnull(cd.Latitude,'') <>'' and isnull(cd.Longitude,'')<>'') and isnull(cd.Source,'AUTO')='AUTO') then 'View & Confirm'   
				 else 'View' End Locateflag,  
			(isnull(convert(nvarchar(50), c.MobileNo) +', ','') +isnull( convert(nvarchar(50), c.Prm1) +', ','') 
			+isnull( nullif(convert(nvarchar(50), c.Prm2),'') +', ','') +isnull(convert(nvarchar(50), c.Prm3) +', ','')
			+isnull(convert(nvarchar(50), c.Prm4) +', ','') ) RegMobileNo,  
			dl.DLat as DLatitude, dl.DLong as DLongitude,gl.GLatitude, gl.GLongitude, isnull(cd.AddressConfirmed,0) AddressConfirmed, 
			isnull(cd.AreaConfirmed,0) AreaConfirmed, isnull(cd.LocationConfirmed,0) LocationConfirmed,acp.AreaClusterId AS ClusterId  
		FROM DCMS.tblConsumerMaster AS c WITH (nolock)  
			left outer join sds.tblConsumerDetails cd WITH(NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId   
			LEFT OUTER JOIN SDS.tblAreaClusterMapping acp WITH(NOLOCK) ON acp.AreaRefNo=c.AreaRefNo  
			left outer join sds.tbldistributorLocation dl WITH(NOLOCK) on cd.DistributorID=dl.DistributorID  
			Left outer join (
				select top 1 Latitude as GLatitude, Longitude as GLongitude from sds.tblDistributorGodown   
				where DistributorID=@DistributorID and upper(ActiveFlag)='Y' and Latitude is not null and Longitude is not null
			) gl on dl.DistributorID=cd.DistributorID  
		where c.DistributorID=@DistributorID and (cd.AreaRefNo=@AreaRefNo or @AreaRefNo = 0) and upper(c.ConsumerStatus)='ACTIVE' 
			and upper(cd.ConsumerStatus)='ACTIVE'  
		order by c.ConsumerName  
END  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerListAreaWiseVerification]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
      
CREATE proc [SDS].[usp_GetConsumerListAreaWiseVerification] --14193,0      
--declare       
@DistributorID int,      
@AreaRefNo numeric(17, 0)      
--set @DistributorID=14193 set @AreaRefNo=0      
as      
      
BEGIN      
 -- List       
 -- case when ((isnull(sds.fn_1ConsumerLatitude(cd.UniqueConsumerId,'D'),'') ='' or isnull(sds.fn_1ConsumerLongitude(cd.UniqueConsumerId,'D'),'')='') and isnull(sds.fn_1ConsumerGCSource(cd.UniqueConsumerId,'D'),'AUTO')='AUTO') then 'Locate & Confirm'       
 --  when ((isnull(sds.fn_1ConsumerLatitude(cd.UniqueConsumerId,'D'),'') <>'' and isnull(sds.fn_1ConsumerLongitude(cd.UniqueConsumerId,'D'),'')<>'') and isnull(sds.fn_1ConsumerGCSource(cd.UniqueConsumerId,'D'),'AUTO')='AUTO') then 'View & Confirm'       
 --else 'View' End Locateflag,    
    
 SELECT cd.UniqueConsumerId, cd.DistributorID, cd.ConsumerNo,SDS.fn_CamelCase( cd.ConsumerName ) as ConsumerName, cd.MobileNo,    
  SDS.fn_CamelCase(cd.Address) as ConsumerAddress, cd.Pin, cd.AreaRefNo,SDS.fn_CamelCase( cd.AreaName ) as AreaName,cd.PlaceId,IsVerifiedUpdated,      
  cd.Latitude as TripLatitude, cd.Longitude TripLongitude, cd.Source TripSource, cd.ConsumerStatus,isnull(cd.InArea,0) as InArea,     
  isnull(cd.InCluster,0) as InCluster,isnull(cd.inTradingArea,0) as InTradingArea,isnull(cd.Isverified,0) Isverified,        
  (isnull(convert(nvarchar(50), c.MobileNo) +', ','') +isnull( convert(nvarchar(50), c.Prm1) +', ','') +    
  isnull( nullif(convert(nvarchar(50), c.Prm2),'') +', ','') +isnull(convert(nvarchar(50), c.Prm3) +', ','')+    
  isnull(convert(nvarchar(50), c.Prm4) +', ','') ) RegMobileNo,      
  dl.DLat as DLatitude, dl.DLong as DLongitude,gl.GLatitude, gl.GLongitude, isnull(cd.AddressConfirmed,0) AddressConfirmed,     
  isnull(cd.AreaConfirmed,0) AreaConfirmed, isnull(cd.LocationConfirmed,0) LocationConfirmed,acp.AreaClusterId AS ClusterId,      
  cd.ClusterId as InClusterId, cd.LastUpdatedDatetime,cd.TripGCDate,      
  cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,      
  cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,      
  cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,      
  cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime,
  cl.VitranLatitudeSAFE ,cl.VitranLongitudeSAFE,cl.VitranLastUpdateDateTimeSAFE     
 FROM sds.tblConsumerDetails cd  WITH (nolock)      
  left outer join DCMS.tblConsumerMaster AS c WITH(NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId       
  left outer join sds.tblConsumerLocationHistoryNew as cl on cl.UniqueConsumerId = cd.UniqueConsumerId      
  LEFT OUTER JOIN SDS.tblAreaClusterMapping acp WITH(NOLOCK) ON acp.AreaRefNo=cd.AreaRefNo      
  left outer join sds.tbldistributorLocation dl WITH(NOLOCK) on cd.DistributorID=dl.DistributorID      
  Left outer join (    
   select top 1 Latitude as GLatitude, Longitude as GLongitude from sds.tblDistributorGodown       
   where DistributorID=@DistributorID and upper(ActiveFlag)='Y' and Latitude is not null and Longitude is not null    
  ) gl on dl.DistributorID=cd.DistributorID      
 where cd.DistributorID=@DistributorID and (cd.AreaRefNo=@AreaRefNo or @AreaRefNo = 0) and upper(cd.ConsumerStatus)='ACTIVE'      
 order by cd.LastUpdatedDatetime      
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerListBySource]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetConsumerListBySource 14193,'Not Found'

CREATE proc [SDS].[usp_GetConsumerListBySource]
--declare 
@DistributorID int,
@Source nvarchar(50),
@StaffRefNo nvarchar(50),
@SelDate DateTime
--set @DistributorID=14193 set @Source='Total'

as

BEGIN
    if(@Source <> 'Smart App')
	BEGIN
		SELECT   cast(0 as bigint) as TransId,cast(0 as int) as SequenceNo,c.UniqueConsumerId, c.DistributorID, 
			c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo,SDS.fn_CamelCase(c.Address) as ConsumerAddress, 
			c.AreaRefNo,SDS.fn_CamelCase( ar.AreaName ) as AreaName, C.LastUpdatedDatetime as InsertedDatetime,
			c.Latitude, c.Longitude,  c.Source	
		FROM sds.tblConsumerDetails c left outer join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo	
		where upper(isnull(c.ConsumerStatus,''))='ACTIVE' and c.DistributorID=@DistributorID 
			and (upper(isnull(c.Source,'NOT FOUND'))=upper(@Source) or upper(@Source)='TOTAL')
		order by c.ConsumerName
	END
	ELSE
	BEGIN
		--SELECT c.UniqueConsumerId, cd.DistributorID, Cast(cd.ConsumerNo as int)ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo, 
		--SDS.fn_CamelCase(c.Address) as ConsumerAddress, c.AreaRefNo,SDS.fn_CamelCase( ar.AreaName ) as AreaName,
		--cd.Lat Latitude, cd.Lng Longitude,  SDS.fn_CamelCase(c.Source) Source	
		--FROM sds.tblConsumerDetails c left outer join 
		--DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo inner join 
		--sds.tblConsumerDeliveryDetails AS cd  on cd.ConsumerNo=c.ConsumerNo	
		--where upper(isnull(c.ConsumerStatus,''))='ACTIVE' and cd.DistributorID=@DistributorID and cd.StaffRefNo=@StaffRefNo
		--	  AND cast(@SelDate AS DATE)=cast(InsertedDatetime AS DATE)
	--and (upper(isnull(c.Source,'NOT FOUND'))=upper(@Source) or upper(@Source)='TOTAL')
	-- order by c.ConsumerName

	SELECT cd.TransId,c.UniqueConsumerId,ISNULL(cd.SequenceNo,0)as SequenceNo, cd.DistributorID, Cast(cd.ConsumerNo as int) ConsumerNo,
		SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo, SDS.fn_CamelCase(c.Address) as ConsumerAddress, c.AreaRefNo,
		SDS.fn_CamelCase( ar.AreaName ) as AreaName, cd.InsertedDatetime, cd.Lat Latitude, cd.Lng Longitude,  SDS.fn_CamelCase(c.Source) Source	
		FROM 
		sds.tblConsumerDeliveryDetails AS cd inner join
		sds.tblConsumerDetails  AS c on cd.ConsumerNo=c.ConsumerNo and 	c.DistributorID=@DistributorID  left outer join 
		DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo 
		where upper(isnull(c.ConsumerStatus,''))='ACTIVE' and cd.DistributorID=@DistributorID and cd.StaffRefNo=@StaffRefNo
			  AND cast(@SelDate AS DATE)=cast(cd.InsertedDatetime AS DATE)
		ORDER BY cd.InsertedDatetime
	END
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerListClusterWise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetConsumerListClusterWise]
--declare
@DistributorID int,
@ClusterId int
--set @DistributorID=14145 set @ClusterId=0

as

BEGIN
	
	IF(@ClusterId <> 0)
	BEGIN
		SELECT c.UniqueConsumerId, c.DistributorID, c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo, 
			SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3) as ConsumerAddress,  c.Pin, c.AreaRefNo,AreaClusterId,
			SDS.fn_CamelCase( ar.AreaName ) as AreaName,cd.PlaceId, cd.Latitude, cd.Longitude, cd.Source,
			c.ConsumerStatus,isnull(cd.InArea,0) as InArea,isnull(cd.InCluster,0) as InCluster,isnull(cd.inTradingArea,0) as InTradingArea
		FROM DCMS.tblConsumerMaster AS c WITH (nolock)
		inner join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo
		left outer join sds.tblConsumerDetails cd on c.UniqueConsumerId=cd.UniqueConsumerId 
		INNER JOIN SDS.tblAreaClusterMapping acm ON acm.AreaRefNo=c.AreaRefNo
		where c.DistributorID=@DistributorID and acm.AreaClusterId=@ClusterId
		order by c.ConsumerName
	END
	ELSE IF(@ClusterId = 0)
	BEGIN
		SELECT c.UniqueConsumerId, c.DistributorID, c.ConsumerNo,SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo, 
			SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3) as ConsumerAddress,  c.Pin, c.AreaRefNo,AreaClusterId,
			SDS.fn_CamelCase( ar.AreaName ) as AreaName,cd.PlaceId, cd.Latitude, cd.Longitude, cd.Source,
			c.ConsumerStatus,isnull(cd.InArea,0) as InArea,isnull(cd.InCluster,0) as InCluster,isnull(cd.inTradingArea,0) as InTradingArea
		FROM DCMS.tblConsumerMaster AS c WITH (nolock)
		inner join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo
		left outer join sds.tblConsumerDetails cd on c.UniqueConsumerId=cd.UniqueConsumerId 
		INNER JOIN SDS.tblAreaClusterMapping acm ON acm.AreaRefNo=c.AreaRefNo
		where c.DistributorID=@DistributorID AND Latitude IS NOT NULL and (cast(Latitude as float))> 0 and (cast(Longitude as float))> 0
		and (cast(Latitude as float)) < 20 and (cast(Longitude as float)) < 75 and (cast(Latitude as float)) > 16 and (cast(Longitude as float)) > 70
		order by c.ConsumerName
	END
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerListInoutSide]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
--  sds.usp_GetConsumerListInoutSide 14193,0    
      
CREATE proc [SDS].[usp_GetConsumerListInoutSide]      
--declare       
@DistributorID int,      
@ClusterId bigint    
--set @DistributorID=14193 set @ClusterId=0;    
      
as      
      
BEGIN     
 --declare @Sourcestr nvarchar(1000)='', @Sourcestr2 nvarchar(1000)=''    
 --Begin  ---for trip only    
 -- set @Sourcestr= (select isnull((STUFF((select ', ' + case when lower(SourceName)= 'hppay' then 'nullif(HPPayLatitude,'''')'     
 -- when lower(SourceName)= 'vitaran' then 'nullif(VitaranLatitude,'''')' when lower(SourceName)= 'miapp' then 'nullif(MILatitude,'''')'    
 -- when lower(SourceName)= 'auto' then 'nullif(AutoLatitude,'''')' when lower(SourceName)= 'manual' then 'nullif(ManualLatitude,'''')'    
 -- when lower(SourceName)= 'ezygas' then 'nullif(EzygasLatitude,'''')' end from sds.tblConsumerGCSequenceNo     
 -- where DistributorId=0 order by TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)    
    
 -- set @Sourcestr2= (select isnull((STUFF((select ', ' + case when lower(SourceName)= 'hppay' then 'nullif(HPPayLongitude,'''')'     
 -- when lower(SourceName)= 'vitaran' then 'nullif(VitaranLongitude,'''')' when lower(SourceName)= 'miapp' then 'nullif(MILongitude,'''')'    
 -- when lower(SourceName)= 'auto' then 'nullif(AutoLongitude,'''')' when lower(SourceName)= 'manual' then 'nullif(ManualLongitude,'''')'    
 -- when lower(SourceName)= 'ezygas' then 'nullif(EzygasLongitude,'''')' end from sds.tblConsumerGCSequenceNo     
 -- where DistributorId=0 order by TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)    
 -- --select @Sourcestr,@Sourcestr2    
 --End    
    
 SELECT  c.UniqueConsumerId, isnull(cd.UniqueConsumerId,0) as CDConsumerId, c.DistributorID, c.ConsumerNo,    
 SDS.fn_CamelCase(cd.Address) as ConsumerAddress, c.Pin, cd.AreaRefNo, cd.Latitude, cd.Longitude, cd.Source,      
 c.ConsumerStatus,isnull(cd.InArea,0) as InArea,isnull(cd.InCluster,0) as InCluster,isnull(cd.inTradingArea,0) as InTradingArea,     
 isnull(cd.Isverified,0) Isverified,     
 isnull(cd.AddressConfirmed,0) AddressConfirmed, isnull(cd.AreaConfirmed,0) AreaConfirmed, isnull(cd.LocationConfirmed,0) LocationConfirmed,    
 acp.AreaClusterId AS ClusterId      
 FROM DCMS.tblConsumerMaster AS c WITH (nolock)      
 left outer join sds.tblConsumerDetails cd WITH(NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId       
 LEFT OUTER JOIN SDS.tblAreaClusterMapping acp WITH(NOLOCK) ON acp.AreaRefNo=c.AreaRefNo      
 where c.DistributorID=@DistributorID  and (acp.AreaClusterId=@ClusterId  or @ClusterId = 0) and upper(c.ConsumerStatus)='ACTIVE'     
 and upper(cd.ConsumerStatus)='ACTIVE'      
 order by c.ConsumerName     
END      
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerLocDtlsWithAreaCoOrdinares]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************             
-- Stored Procedure Name : usp_GetConsumerLocDtlsWithAreaCoOrdinares  
-- Description  : Get Consumer details with area,cluster and trading area co ordinates details of consumer   
-- Author   : Prasanna 07-March-2020    
-- Date Modified  Modified By      Modifications  
-- 07-March-2020  Prasanna          Created  
-- 16-Feb-2024  Rajendra          Modified  
**************************************************************/  
CREATE PROCEDURE [SDS].[usp_GetConsumerLocDtlsWithAreaCoOrdinares]  
@DistributorId int,  
@Code numeric(17,0),  
@Flag varchar(15)  
AS  
BEGIN  
	IF(@Flag='ALL')  
	BEGIN  
		SELECT cm.ConsumerNo, cm.ConsumerName,cm.UniqueConsumerId,cm.AreaRefNo, 
			cm.Latitude,cm.Longitude,cm.Source,ISNULL(acm.AreaClusterId,0) as ClusterId  
		FROM SDS.tblConsumerDetails cm LEFT OUTER JOIN SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cm.AreaRefNo  
		WHERE cm.DistributorID=@DistributorId --AND (cm.InArea IS NULL OR cm.InCluster IS NULL OR cm.inTradingArea IS NULL)  
		and (cm.Latitude is not null and cm.Longitude is not null and cm.Source is not Null)
	END  
	ELSE IF(@Flag='AREA')  
	BEGIN  
		SELECT cm.ConsumerNo, cm.ConsumerName,cm.UniqueConsumerId,cm.AreaRefNo,
			cm.Latitude,cm.Longitude,cm.Source, CAST(0 AS INT) as ClusterId  
		FROM SDS.tblConsumerDetails cm  
		WHERE cm.AreaRefNo=@Code AND cm.DistributorID=@DistributorId  
	END  
	ELSE IF(@Flag='CLUSTER')  
	BEGIN  
		SELECT cm.ConsumerNo, cm.ConsumerName,cm.UniqueConsumerId,cm.AreaRefNo,  
			cm.Latitude,cm.Longitude,cm.Source,CAST(0 AS INT) as ClusterId  
		FROM SDS.tblConsumerDetails cm INNER JOIN  SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cm.AreaRefNo  
		WHERE acm.AreaClusterId=@Code AND cm.DistributorID=@DistributorId  
	END  
	ELSE IF(@Flag='CONSUMER')  
	BEGIN  
		SELECT cm.ConsumerNo, cm.ConsumerName,cm.UniqueConsumerId,cm.AreaRefNo,  
			cm.Latitude,cm.Longitude,cm.Source, CAST(0 AS INT) as ClusterId  
		FROM SDS.tblConsumerDetails cm   
		WHERE cm.UniqueConsumerId=@Code AND cm.DistributorID=@DistributorId  
	END  
	ELSE IF(@Flag='TRADINGAREA')  
	BEGIN  
		SELECT cm.ConsumerNo, cm.ConsumerName,cm.UniqueConsumerId,cm.AreaRefNo,  
			cm.Latitude,cm.Longitude,cm.Source, acm.AreaClusterId as ClusterId  
		FROM SDS.tblConsumerDetails cm INNER JOIN  SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cm.AreaRefNo  
		WHERE acm.AreaClusterId=@Code AND cm.DistributorID=@DistributorId  
	END  
	ELSE IF(@Flag='DISTWISEALL')  
	BEGIN  
		SELECT cm.ConsumerNo, cm.ConsumerName,cm.UniqueConsumerId,cm.AreaRefNo,   
			cm.Latitude,cm.Longitude,cm.Source, ISNULL(acm.AreaClusterId,0) as ClusterId  
		FROM SDS.tblConsumerDetails cm LEFT OUTER JOIN  
		SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cm.AreaRefNo  
		WHERE cm.DistributorID=@DistributorId  
	END  
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerLocHistory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- [SDS].[usp_GetConsumerLocHistory] '','','615865',0,14193
CREATE PROC [SDS].[usp_GetConsumerLocHistory]
--DECLARE
@FromDate datetime,   
@ToDate datetime,
@ConsumerNo nvarchar(50),
@AreaClusterId int,
@DistributorID int

--set @FromDate='';set @ToDate='';set @ConsumerNo='';set @AreaClusterId=75;set @DistributorID=14193
AS
BEGIN
IF(@FromDate <> '' AND @ToDate <> '')    
	BEGIN
		select cl.UniqueConsumerId, cl.DistributorID, cd.ConsumerNo,SDS.fn_CamelCase( cd.ConsumerName ) as ConsumerName, cd.MobileNo,
		SDS.fn_CamelCase(cd.Address) as ConsumerAddress, cd.Pin, cd.AreaRefNo,SDS.fn_CamelCase( cd.AreaName ) as AreaName,
		cd.PlaceId,isnull(cd.Isverified,0) Isverified,cl.Latitude,cl.Longitude,cl.Source,
		acp.AreaClusterId AS ClusterId,cl.LastUpdatedDate
		FROM sds.tblConsumerLocationHistoryLogs  cl  WITH (nolock)
		LEFT OUTER JOIN  sds.tblConsumerDetails AS cd WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId and cd.DistributorID=cl.DistributorID
		LEFT OUTER JOIN SDS.tblAreaClusterMapping acp WITH(NOLOCK) ON acp.AreaRefNo=cd.AreaRefNo
		WHERE CAST(cl.LastUpdatedDate as date) between CAST(@FromDate as date) AND CAST(@ToDate as date) 
		AND ((cd.ConsumerNo=@ConsumerNo or @ConsumerNo='') AND cd.DistributorID=@DistributorID)	and ([acp].AreaClusterId=@AreaClusterId or @AreaClusterId=0)
	END 
ELSE
	 BEGIN
		select cl.UniqueConsumerId, cl.DistributorID, cd.ConsumerNo,SDS.fn_CamelCase( cd.ConsumerName ) as ConsumerName, cd.MobileNo,
		SDS.fn_CamelCase(cd.Address) as ConsumerAddress, cd.Pin, cd.AreaRefNo,SDS.fn_CamelCase( cd.AreaName ) as AreaName,
		cd.PlaceId,isnull(cd.Isverified,0) Isverified,cl.Latitude,cl.Longitude,cl.Source,
		acp.AreaClusterId AS ClusterId,cl.LastUpdatedDate
		FROM sds.tblConsumerLocationHistoryLogs  cl  WITH (nolock)
		LEFT OUTER JOIN  sds.tblConsumerDetails AS cd WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId and cd.DistributorID=cl.DistributorID
		LEFT OUTER JOIN SDS.tblAreaClusterMapping acp WITH(NOLOCK) ON [acp].AreaRefNo=cd.AreaRefNo
		WHERE ((cd.ConsumerNo=@ConsumerNo or @ConsumerNo='') AND cd.DistributorID=@DistributorID)	and ([acp].AreaClusterId=@AreaClusterId or @AreaClusterId=0)
	 END
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerPartDensity]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_ConsumerDensity]
--	Description		:	save consumer dencity data for R&D

--	Author			:	Prasanna	14-08-2020

--	Date Modified		Modified By	     Modifications
--	14-08-2020			Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetConsumerPartDensity]
AS
BEGIN
	
	SELECT cd.[UniqueConsumerId],cd.[DistributorID],cd.[ConsumerNo],cd.[ConsumerName]
      ,[0To250],[251To500] as To500,[501To750] To750,[751To1000] To1000,[1001To1500] To1500,
	  [1501To2000] To2000,[2001To2500] To2500,[2501To3000] To3000,[Above3000] Above3000,ISNULL(c.ClusterId,0) AS ClusterId
		FROM [SDS].[tblConsumersPartDensity] cd INNER JOIN
		SDS.tblConsumerDetails c ON c.UniqueConsumerId=cd.UniqueConsumerId
	
END





GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerPriorityWiseLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************             
-- Stored Procedure Name : [usp_GetConsumerPriorityWiseLocation]  
-- Description  : Get Consumer Priority Wise Location  
-- Author   : Prasanna 15- mar -2021  
-- Date Modified  Modified By      Modifications  
-- 15- mar -2021   Prasanna          Created  
**************************************************************/  
  
CREATE PROCEDURE [SDS].[usp_GetConsumerPriorityWiseLocation]  
@UniqueConsumerId nvarchar(100)  
AS  
BEGIN  
  
 SELECT    UniqueConsumerId, Latitude,Longitude,Source  
 From sds.tblConsumerDetails with (nolock) where UniqueConsumerId=@UniqueConsumerId
  
END  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumersDetailsForExtraTrip]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  sds.usp_GetConsumersDetailsForExtraTrip 70,14193,28,'2021-08-13','OD'

CREATE procedure [SDS].[usp_GetConsumersDetailsForExtraTrip] 
--DECLARE       
@ClusterId BIGINT,      
@DistributotId INT,      
@TripCapacity INT,      
@TripDate DATETIME,      
@CaseNo varchar(10)      
      
--set @ClusterId=70; set @DistributotId=14193;set @TripCapacity=28;set @TripDate='2021-08-13'; set @CaseNo = 'OD';      
      
as    
BEGIN    
SET FMTONLY OFF    
  
	DECLARE @DensityCapacity INT,  @GrpCnt INT,  @ExtraGroupRequred INT, @StartDensityGroupNo INT--, @TripDate123 date =getdate()   
	--set @TripDate123=cast(@TripDate as date) 
	DECLARE  @ConsumerDetails TABLE (id int IDENTITY,DensityGroupNo int, SequenceNo int,AreaRefNo numeric(17,0), OrderRefNo numeric(17,0), 
	UniqueConsumerId numeric(17,0),PriceCode INT, Latitude nvarchar(50), Longitude nvarchar(50),DelTripSequenceNo int,FromDistributorID int, FromClusterId bigint )     
    
	SET @DensityCapacity = (	SELECT v.RTOCapacity FROM SDS.tblDeliveryBoyClusterMapping dc      
		INNER JOIN SDS.tblVehicleDeliveryBoyMapping vd ON dc.StaffRefNo = vd.DeliveryBoyId      
		INNER JOIN SDS.tblVehicleMaster v ON vd.VehicleId = v.VehicleId      
		WHERE dc.ClusterId = @ClusterId  
		)      
    
	SET @GrpCnt = ceiling((convert(decimal(18,2),@TripCapacity) / convert(decimal(18,2),@DensityCapacity)))      
	--select @GrpCnt    
    
	insert into @ConsumerDetails(DensityGroupNo,SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,PriceCode,Latitude,Longitude,    
	DelTripSequenceNo,FromDistributorID,FromClusterId)    
    
	SELECT dad.DensityGroupNo,dad.SequenceNo,dad.AreaRefNo,dad.OrderRefNo,dad.UniqueConsumerId,dad.PriceCode,cd.Latitude, cd.Longitude,dad.DelTripSequenceNo,0,0       
	from sds.tblTripDensityHdr da inner join sds.tblTripDensityDtls dad on da.TripId = dad.TripId 
	Left outer Join SDS.tblConsumerDetails cd on dad.UniqueConsumerId=cd.UniqueConsumerId and da.DistributorId=cd.DistributorID      
	WHERE da.DistributorId=@DistributotId and da.ClusterId=@ClusterId AND cast(da.TripDate as date)=cast(@TripDate as date) and upper(da.CaseNo)=upper(@CaseNo)
	and dad.DensityGroupNo in ( select distinct top (@GrpCnt) DensityGroupNo     
	from sds.tblTripDensityHdr da inner join sds.tblTripDensityDtls dad on da.TripId = dad.TripId     
	WHERE da.DistributorId=@DistributotId and da.ClusterId=@ClusterId AND cast(da.TripDate as date)=cast(@TripDate as date) and upper(da.CaseNo)=upper(@CaseNo)    
	and dad.OrderRefNo not in (select td.OrderRefNo from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId = td.TripId     
	WHERE  t.ClusterId=@ClusterId AND cast(t.TripDate as date)=@TripDate ))    
	OPTION (OPTIMIZE FOR (@TripDate UNKNOWN))
  
    
	Select id,DensityGroupNo,SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,PriceCode,Latitude,Longitude,DelTripSequenceNo,FromDistributorID,FromClusterId     
	from @ConsumerDetails     
    
--Select 0 as id,0 as DensityGroupNo,0 as SequenceNo,125 as AreaRefNo,123 as OrderRefNo,1252412 as UniqueConsumerId,1 as PriceCode,'18.202' as Latitude,    
--'72.25' as Longitude,0 as DelTripSequenceNo,0 as FromDistributorID,0 as FromClusterId     
     
   
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerTotalDensity]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_ConsumerDensity]
--	Description		:	save consumer dencity data for R&D

--	Author			:	Prasanna	14-08-2020

--	Date Modified		Modified By	     Modifications
--	14-08-2020			Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetConsumerTotalDensity]
AS
BEGIN
	
	SELECT cd.[UniqueConsumerId],cd.[DistributorID],cd.[ConsumerNo],cd.[ConsumerName]
      ,[250],[500],[750],[1000],[1500],[2000],[2500],[3000],[Above3000],ISNULL(c.ClusterId,0) AS ClusterId
		FROM [SDS].[tblConsumersTotalDensity] cd INNER JOIN
		SDS.tblConsumerDetails c ON c.UniqueConsumerId=cd.UniqueConsumerId
	
END






GO
/****** Object:  StoredProcedure [SDS].[usp_GetConsumerVitranLatLong]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [SDS].[usp_GetConsumerUpdatedLocation] 1110812200033186, 14193
CREATE PROC [SDS].[usp_GetConsumerVitranLatLong]
--declare
@UniqueConsumerId NUMERIC(17,0),
@DistributorID INT
--set @UniqueConsumerId=1110812200033186; set @DistributorID=14193
AS
BEGIN
	SELECT UniqueConsumerId,DistributorID,Latitude AS CLatitude,Longitude AS CLongitude
	FROM sds.tblConsumerDetails 
	WHERE UniqueConsumerId=@UniqueConsumerId and DistributorID=@DistributorID
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetCounsumerCountsSourcewise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetCounsumerCountsSourcewise]    
--declare      
@DistributorID int      
--set @DistributorID =14193      
as      
      
BEGIN      
	SET FMTONLY OFF  
	declare @TotConsumer int       
	select @TotConsumer= count(UniqueConsumerId) from sds.tblConsumerDetails with (nolock) where DistributorID=@DistributorID   
	and upper(isnull(ConsumerStatus,''))='ACTIVE'  
       
	IF OBJECT_ID('tempdb..#tblresult') IS NOT NULL DROP TABLE #tblresult      
	create table #tblresult (sumflag int,DistributorID int, Source nvarchar(50),TotalConsumerCount int, ActiveConsumerCount int,  
	ConsumerPercent decimal(10,2), in100Mtr int, InClusterCnt int, InClusterPercent decimal(10,2),   
	OutClusterCnt int, OutClusterPercent decimal(10,2), SortId int)      
      
	insert into #tblresult(sumflag,DistributorID, Source,TotalConsumerCount, ActiveConsumerCount,ConsumerPercent,InClusterCnt, in100Mtr,SortId)      
       
	select 1 sumflag,c.DistributorID, SDS.fn_CamelCase(isnull(cc.NewSource,'Not Found')) Source, count(c.UniqueConsumerId) CCount,    
		sum(case when  upper(isnull(ConsumerStatus,''))='ACTIVE' then 1 else 0 end) ,    
		cast(round((count(c.UniqueConsumerId)*100.0/@TotConsumer),1) as decimal(4,1)) CPercent,  		
		sum(case when isnull(IsInCluster,0)=1 then 1 else 0 end) as InClusterCnt,
		SUM(CASE WHEN ((dl.Location.STDistance(geography::Point(isnull(c.Latitude,0),isnull(c.Longitude,0), 4326)))) <= 100.0 THEN 1 ELSE 0 END) as in100Mtr,      
		case lower(isnull(cc.NewSource,'Not Found')) when 'vitaran' then 1 when 'vitran' then 1 when 'vitrandc' then 1 when 'vitransafe' then 1   
		when 'vitrancap' then 1 when 'sarvekshan' then 1 when 'ezygas' then 1   
		when 'miapp' then 3 when 'auto' then 4 when 'manual' then 5 when 'not found' then 6 else 9 end Sortid      
	from 
		sds.tblConsumerDetails c left outer join sds.tbldistributorLocation dl on c.DistributorID=dl.DistributorId      
		inner join       
		(	select case when lower(isnull(cd.Source,'Not Found')) in ('sarvekshan','vitaran','vitran','ezygas','vitrandc','vitransafe','vitrancap')   
			then SDS.fn_CamelCase('vitran')  else SDS.fn_CamelCase(isnull(Source,'Not Found')) end As NewSource,  
			cd.DistributorID, cd.UniqueConsumerId ,
			case when isnull(cd.InCluster,0)=1 and isnull(cd.ClusterId,0)>0 and isnull(cd.ClusterId,0)=isnull(ac.AreaClusterId,0) then 1 else 0 end IsInCluster
			from sds.tblConsumerDetails cd left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo
			where cd.DistributorID=@DistributorID and upper(isnull(cd.ConsumerStatus,''))='ACTIVE'     
		) cc on c.DistributorID=cc.DistributorID and c.UniqueConsumerId=cc.UniqueConsumerId      
	where c.DistributorID=@DistributorID --and upper(isnull(c.ConsumerStatus,''))='ACTIVE'       
	group by cc.NewSource,c.DistributorID, dl.DLat, dl.DLong      
   
	update #tblresult set OutClusterCnt=ActiveConsumerCount-InClusterCnt      
	update #tblresult set InClusterPercent=(InClusterCnt*100.00/nullif(isnull(ActiveConsumerCount,0),1)), 
					  OutClusterPercent=(OutClusterCnt*100.00/nullif(isnull(ActiveConsumerCount,0),1))
      
	update #tblresult set Source='Vitran' where lower(isnull(Source,'Not Found')) in ('sarvekshan','ezygas','Vitaran','vitrandc','vitransafe','vitrancap')  
      
	select SortId, sumflag,DistributorID, Source,TotalConsumerCount, ActiveConsumerCount,ConsumerPercent,in100Mtr,      
	InClusterCnt, InClusterPercent, OutClusterCnt, OutClusterPercent from #tblresult order by SortId      
    
drop table #tblresult      
END      
GO
/****** Object:  StoredProcedure [SDS].[usp_getcreateNewAreadata]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [SDS].[usp_getcreateNewAreadata]
@DistributorId int
as

SELECT AreaRefNo AreaCode, areaname  AS AreaName, AreaJSON
	FROM  SDS.tblcreateNewArea


GO
/****** Object:  StoredProcedure [SDS].[usp_GetCSDeliveryRoute]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetCSDeliveryRoute
--	Description		:	To Get delivery boy coordinate to use in delivery

--	Author			:	Swapnil

--	Date Modified	Modified By	     Modifications
--	03-FEb-2020		Swapnil			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetCSDeliveryRoute]

@DistributorId int,
@StaffRefNo numeric(17,0),
@selDatetime DateTime
AS
BEGIN
	
	--select [Id],[DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime]
	
	--from  SDS.tblCSDeliveryRoute
	--where  DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
	--		AND  Cast(mobDatetime as Date)=CAST(ISNULL(@selDatetime,mobDatetime) as Date)

	--SELECT [Id],[DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime]
	--FROM
	--(
	--	SELECT TOP 1 Id, [DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime]	
	--	FROM  SDS.tblCSDeliveryRoute
	--	WHERE  DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
	--			AND  Cast(mobDatetime as Date)=CAST(ISNULL(@selDatetime,mobDatetime) as Date)
	--	ORDER BY [mobDatetime] DESC
	--) AS a UNION ALL
	--(
	--	SELECT 0 AS Id, [DistributorId],[StaffRefNo],[Lat],[Lng],NULL AS [mobDatetime],NULL AS [LastUpdatedDatetime]
	--	FROM  SDS.tblConsumerDeliveryDetails
	--	WHERE  DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
	--			AND  Cast([InsertedDatetime] as Date)=CAST(ISNULL(@selDatetime,[InsertedDatetime]) as Date)
	--)
	--SELECT [Id],[DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime]
	--FROM
	--(
	--	SELECT TOP 1 Id, [DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime]	
	--	FROM  SDS.tblCSDeliveryRoute
	--	WHERE  DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
	--			AND  Cast(mobDatetime as Date)=CAST(ISNULL(@selDatetime,mobDatetime) as Date)
	--	ORDER BY [mobDatetime] DESC
	--) AS a UNION ALL
	--(
	--	SELECT 0 AS Id, [DistributorId],[StaffRefNo],[Lat],[Lng],InsertedDatetime AS [mobDatetime],NULL AS [LastUpdatedDatetime]
	--	FROM  SDS.tblConsumerDeliveryDetails
	--	WHERE  DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
	--			AND  Cast([InsertedDatetime] as Date)=CAST(ISNULL(@selDatetime,[InsertedDatetime]) as Date)
		
	--)
	--order by mobDatetime

	SELECT   Id, [DistributorId],[StaffRefNo],[Lat],[Lng],[mobDatetime],[LastUpdatedDatetime]	
		FROM  SDS.tblCSDeliveryRoute
		WHERE  DistributorId=@DistributorId and StaffRefNo=@StaffRefNo 
				AND  Cast(mobDatetime as Date)=CAST(ISNULL(@selDatetime,mobDatetime) as Date)
		ORDER BY [mobDatetime] DESC


END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetCurrentLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetCurrentLocation
--	Description		:	To Insert delivery boy current location

--	Author			:	Prasanna	16-Oct-2019

--	Date Modified		Modified By	     Modifications
--	16-Oct-2019			Prasanna         Created
**************************************************************/

create PROCEDURE [SDS].[usp_GetCurrentLocation]
	@DistributorId int,
	@StaffRefNo numeric(18,0)
AS
BEGIN

		SELECT TOP 1 [Id],[DistributorId],[StaffRefNo],[Latitude],[Longitude],[LocationDateTime],[InsertedDateTime]
		FROM SDS.tblCurrentLocation
		WHERE StaffRefNo=@StaffRefNo AND DistributorId=@DistributorId
		ORDER BY Id DESC
END


GO
/****** Object:  StoredProcedure [SDS].[usp_getDealerNotification]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_getDealerNotification

--	Description		:	get Dealer Notification

--	Author			:	Swapnil	22-Oct-2019

-- use				: get Dealer Notification  By DistributorId

--	Date Modified	Modified By	     Modifications

--  22-Oct-2019		Swapnil	     Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_getDealerNotification]
@DistributorId int,
@NotiFor nvarchar(50),
@NotiDate datetime
AS
BEGIN	
	
SELECT        ND.NotiId, DM.JDEDistributorCode, SDS.fn_CamelCase(DM.DistributorName) AS DistributorName, ND.NotiFor, ND.NotiDate,  ND.NotiMessage, ND.CurrentValue, ND.ExpectedValue, 
              CAST(ISNULL(ND.ExpectedValue, 0) AS numeric) - CAST(ISNULL(ND.CurrentValue, 0) AS numeric) AS RemainingValue, ND.CreatedDate,
			  NIM.IconName,SDS.fn_CamelCase(ND.NotiMessage) as NotificationMassage,ND.MessageType

FROM           DCMS.tblDistributorMaster AS DM WITH (nolock) INNER JOIN
               SDS.tblNotificationDealer AS ND WITH (nolock) ON DM.DistributorId = ND.DistributorId INNER JOIN
			   [SDS].[tblNotificationIconMaster] NIM WITH (nolock) on NIM.[IconId]=ND.[IconId]
WHERE        (ND.DistributorId = @DistributorId) AND (ND.NotiFor = @NotiFor) OR
                         (ND.DistributorId = @DistributorId) AND (@NotiFor = '')
order by ND.NotiId desc
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDelBoyCurrentLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [SDS].[usp_GetDelBoyCurrentLocation]
@DistributorId int,
@StaffRefNo numeric(18,0)
AS
BEGIN

	SELECT TOP (1) DistributorId, TripId, StaffRefNo,[DateTime], Latitude, Longitude, datediff(MINUTE,[Datetime],getdate()) UpdateBeforeMin
	FROM SDS.tblDelBoyLocationSave
	WHERE StaffRefNo=@StaffRefNo AND DistributorId=@DistributorId
	ORDER BY [DateTime] DESC
END


GO
/****** Object:  StoredProcedure [SDS].[usp_getDelBoyLocationDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_getDelBoyLocationDetails]  
--declare     
@DistributorID int,  
@StaffRefNo nvarchar(50),  
@TripDate DateTime    
--set @DistributorID=14145; set @StaffRefNo =1151414500000003; set @TripDate='2021-12-27';  
  
as  
BEGIN  
 SELECT  dl.DistributorID, dl.StaffRefNo as DeliveryBoyId, ROW_NUMBER() over (order by dl.DateTime) as SequenceNo, cast(dl.datetime as date) LocDateTime,   
  dl.Latitude, dl.Longitude,isnull(dl.UniqueConsumerId,0) UniqueConsumerId,  c.ConsumerNo,   
  SDS.fn_CamelCase( c.ConsumerName ) as ConsumerName, c.MobileNo, SDS.fn_CamelCase(c.Address) as ConsumerAddress,   
  SDS.fn_CamelCase( ar.AreaName ) as AreaName    
 FROM sds.tbldelboylocationsave dl with (nolock)   
  left outer join sds.tblConsumerDetails c with (nolock) on dl.UniqueConsumerId=c.UniqueConsumerId  
  left outer join DCMS.tblDistributorAreaMaster AS ar WITH (nolock) on c.AreaRefNo=ar.AreaRefNo     
 where dl.DistributorID=@DistributorID and dl.StaffRefNo=@StaffRefNo and cast(dl.[datetime] as date)=cast(@TripDate as date)  
 order by SequenceNo,dl.datetime  
End  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDelBoyOrderCountsDash]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetDelBoyOrderCountsDash 11918888800000001,88888,'2020-02-08'

CREATE proc [SDS].[usp_GetDelBoyOrderCountsDash]
--declare
@DeliveryBoyRefNo numeric(17,0),
@DistributorId Bigint,
@Tdate datetime 

--set @DeliveryBoyRefNo=11711419300000005 set @DistributorId=15139; set @Tdate='2020-02-09'
as

BEGIN
	select t.DistributorId,t.StaffRefNo as DeliveryBoyRefNo,  count(*) total,
		sum(case when (d.OrderStatus = 'OPEN' or d.OrderStatus = 'APRN' or d.OrderStatus = 'AGEN' ) then 1 else 0 end) Pending
	FROM SDS.tblTripPlanning AS t with (nolock) left outer join sds.tblTripPlanningDetails d with (nolock) on t.TripId =d.TripId
	where t.DistributorId=@DistributorId and t.StaffRefNo=@DeliveryBoyRefNo and cast(t.tripdate as date)=cast(@Tdate as date)
	and cast(t.TripDate as date)=cast(@Tdate as date)
	group by DistributorId,StaffRefNo
END


GO
/****** Object:  StoredProcedure [SDS].[usp_getDelBoywiseDeliveryDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_getDelBoywiseDeliveryDetails]
--declare
@DistributorID int,
@Date nvarchar(50)
--set @DistributorID =15139; set @Date='2020-02-06'

as
BEGIN
	select b.distributorId, 'Smart APP' Source, b.StaffRefNo, s.StaffName, isnull(a.Today,0) Today,  
	count(distinct b.ConsumerNo) Total, count(distinct b.ConsumerNo) PrevDays 
	from sds.tblConsumerDeliveryDetails b left outer join DCMS.tblDistributorStaffDetails s on b.StaffRefNo=s.StaffRefNo and b.DistributorId=s.DistributorId
	inner join sds.tblConsumerDetails c on b.ConsumerNo=c.ConsumerNo and b.distributorId=c.distributorId
	left outer join 
	(
	select cd.distributorId, cd.StaffRefNo, count(distinct cd.ConsumerNo) Today from sds.tblConsumerDeliveryDetails cd
	inner join sds.tblConsumerDetails c on cd.ConsumerNo=c.ConsumerNo and cd.distributorId=c.distributorId
	where cd.DistributorId=@DistributorID and upper(isnull(c.ConsumerStatus,''))='ACTIVE' and isnull(cd.lat,'0')<>'0' and isnull(cd.lng,'0')<>'0' 
	and cast(cd.InsertedDatetime as date)=cast(@Date as date) 	group by cd.distributorId, cd.StaffRefNo
	) a on b.StaffRefNo=a.StaffRefNo and b.DistributorId=a.DistributorId

	where b.DistributorId=@DistributorID and upper(isnull(c.ConsumerStatus,''))='ACTIVE' and isnull(b.lat,'0')<>'0' and isnull(b.lng,'0')<>'0' 
	group by b.distributorId, b.StaffRefNo,s.StaffName,a.Today
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDelBoyWiseLastDeliveryBookingCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Updated SP from UAT (17-04-2024)
CREATE proc [SDS].[usp_GetDelBoyWiseLastDeliveryBookingCounts]  
--declare  
@DistributorId int,  
@DelBoyId nvarchar(20),  
@DeliveryDate datetime  
--set @DistributorId=14193; set @DelBoyId='0'; set @DeliveryDate='2024-03-19'   
as
BEGIN  
	declare @DevMtrs float  
	select @DevMtrs=[Value] from SDS.tblAppConfiguration where [Key]= 'DeviationMtrs'  
	
	select cm.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName,  
		count(cm.UniqueConsumerId) Total,
	    sum(case when (cd.Latitude is not null and cd.InCluster=1 and cd.ClusterId=ac.AreaClusterId) then 1 else 0 end) InCluster,     
		sum(case when (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId)) then 1 else 0 end) as OutCluster,  
	    sum(case when cd.inTradingArea=0 and cd.Latitude is not null and cd.Latitude <>'' then 1 else 0 end) AS OutTradingArea,  
		sum(case when cd.Latitude is null then 1 else 0 end) NotFound,  
		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
	from DCMS.tblDeliveryBoyRefillOrder cm with (nolock)  
	left outer join DCMS.tblDistributorStaffDetails d with(nolock) on cm.StaffRefNo=d.StaffRefNo  
	left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = cm.UniqueConsumerId and cm.DistributorId=cd.DistributorID  
	left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on cm.UniqueConsumerId = cl.UniqueConsumerId and cm.DistributorId=cl.DistributorID  
	Left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo
	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and cm.DistributorId= @DistributorId   
		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  isnull(convert(numeric(17,0),@DelBoyId),0)=convert(numeric(17,0),0))  
		and cast(cm.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
	group by cm.DistributorId, d.StaffRefNo, d.StaffName  
END  


-- Old SP (17-04-2024)
--ALTER proc [SDS].[usp_GetDelBoyWiseLastDeliveryBookingCounts]  
----as
----declare  
--@DistributorId int,  
--@DelBoyId nvarchar(20),  
--@DeliveryDate datetime  
----set @DistributorId=14193; set @DelBoyId='0'; set @DeliveryDate='2024-01-24'   
--as
--BEGIN  
--	declare @DevMtrs float  
--	select @DevMtrs=[Value] from SDS.tblAppConfiguration where [Key]= 'DeviationMtrs'  
	
--	create table #RG (id int identity, DistributorId int,StaffRefNo numeric(17,0), StaffName varchar(500), DelBoyClusterId bigint, 
--	DelBoyClusterName varchar(200), ConsClusterId bigint, ConsClusterName varchar(200), Total int,InCluster int,OutCluster int,
--	OutTradingArea int,NotFound int,Deviation int)

--	-- Insert Delivery Boy Total Counts
--	insert into #RG(DistributorId,StaffRefNo, StaffName, DelBoyClusterId,DelBoyClusterName, ConsClusterId, ConsClusterName, Total,
--		InCluster,OutCluster,OutTradingArea,NotFound,Deviation)
--	select o.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, dc.ClusterId as DelBoyClusterId, ct.AreaClusterName as DelBoyClusterName,  
--		0, '',
--		count(o.UniqueConsumerId) Total,
--	    sum(case when (cd.Latitude is not null and cd.InCluster=1 and cd.ClusterId=ac.AreaClusterId) then 1 else 0 end) InCluster,     
--		sum(case when (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId)) then 1 else 0 end) as OutCluster,  
--	    sum(case when cd.inTradingArea=0 and cd.Latitude is not null and cd.Latitude <>'' then 1 else 0 end) AS OutTradingArea,  
--		sum(case when cd.Latitude is null then 1 else 0 end) NotFound,  
--		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
--	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)  
--		left outer join DCMS.tblDistributorStaffDetails d with(nolock) on o.StaffRefNo=d.StaffRefNo  
--		Left outer join SDS.tblDeliveryBoyClusterMapping dc with (nolock) on o.StaffRefNo=dc.StaffRefNo 
--		Left outer join SDS.tblClusterMaster ct on dc.ClusterId=ct.ClusterId  
--		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID  
--		Left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo
--		Left outer join SDS.tblClusterMaster ConCt with (nolock) on ac.AreaClusterId=conct.ClusterId
--		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cl.DistributorID
--	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and o.DistributorId= @DistributorId   
--		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  isnull(convert(numeric(17,0),@DelBoyId),0)=convert(numeric(17,0),0))  
--		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
--	group by o.DistributorId, d.StaffRefNo, d.StaffName,dc.ClusterId,ct.AreaClusterName  



--	-- Insert Consumer Cluster Counts
--	insert into #RG(DistributorId,StaffRefNo, StaffName, DelBoyClusterId,DelBoyClusterName, ConsClusterId, ConsClusterName, Total,
--		InCluster,OutCluster,OutTradingArea,NotFound,Deviation)
--	select o.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, dc.ClusterId as DelBoyClusterId, ct.AreaClusterName as DelBoyClusterName,  
--		ac.AreaClusterId ConsClusterId, conCt.AreaClusterName ConsClusterName,
--		count(o.UniqueConsumerId) Total,
--	    sum(case when (cd.Latitude is not null and cd.InCluster=1 and cd.ClusterId=ac.AreaClusterId) then 1 else 0 end) InCluster,     
--		sum(case when (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId)) then 1 else 0 end) as OutCluster,  
--	    sum(case when cd.inTradingArea=0 and cd.Latitude is not null and cd.Latitude <>'' then 1 else 0 end) AS OutTradingArea,  
--		sum(case when cd.Latitude is null then 1 else 0 end) NotFound,  
--		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
--	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)  
--		left outer join DCMS.tblDistributorStaffDetails d with(nolock) on o.StaffRefNo=d.StaffRefNo  
--		Left outer join SDS.tblDeliveryBoyClusterMapping dc with (nolock) on o.StaffRefNo=dc.StaffRefNo 
--		Left outer join SDS.tblClusterMaster ct on dc.ClusterId=ct.ClusterId  
--		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID  
--		Left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo
--		Left outer join SDS.tblClusterMaster ConCt with (nolock) on ac.AreaClusterId=conct.ClusterId
--		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cl.DistributorID
--	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and o.DistributorId= @DistributorId   
--		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  isnull(convert(numeric(17,0),@DelBoyId),0)=convert(numeric(17,0),0))  
--		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
--	group by o.DistributorId, d.StaffRefNo, d.StaffName,dc.ClusterId,ct.AreaClusterName, ac.AreaClusterId, conCt.AreaClusterName  


--	select * from #RG

--	drop table #RG
--END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDelBoyWiseLastDeliveryBookingCountsNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		[SDS].[usp_GetDelBoyWiseLastDeliveryBookingCountsNew] 14193,0,'2024-04-17'
CREATE proc [SDS].[usp_GetDelBoyWiseLastDeliveryBookingCountsNew]
--declare  
@DistributorId int,  
@DelBoyId nvarchar(20),  
@DeliveryDate datetime  
--set @DistributorId=14193; set @DelBoyId='0'; set @DeliveryDate='2024-01-24'   
as
BEGIN  
SET FMTONLY OFF
	declare @DevMtrs float;		select @DevMtrs=[Value] from SDS.tblAppConfiguration where [Key]= 'DeviationMtrs'  
	
	create table #tbl (id int identity, DistributorId int,StaffRefNo numeric(17,0), StaffName varchar(500), DelBoyClusterId bigint, 
	DelBoyClusterName varchar(200), ConsClusterId bigint, ConsClusterName varchar(200), Total int,InCluster int,OutCluster int,
	OutTradingArea int,NotFound int,Deviation int)

	 --Insert Delivery Boy Total Counts
	insert into #tbl(DistributorId,StaffRefNo, StaffName, DelBoyClusterId,DelBoyClusterName, ConsClusterId, ConsClusterName, Total,
		InCluster,OutCluster,OutTradingArea,NotFound,Deviation)
	select o.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, dc.ClusterId as DelBoyClusterId, 
		case when dc.StaffRefNo is null then act.AreaClusterName+'(Add. DelBoy)' else ct.AreaClusterName End DelBoyClusterName, 0, '',
		count(o.UniqueConsumerId) Total,
	    sum(case when (cd.Latitude is not null and cd.InCluster=1 and cd.ClusterId=isnull(ac.AreaClusterId,0)) then 1 else 0 end) InCluster,     
		sum(case when (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>isnull(ac.AreaClusterId,0))) then 1 else 0 end) as OutCluster,  
	    sum(case when cd.inTradingArea=0 and cd.Latitude is not null and cd.Latitude <>'' then 1 else 0 end) AS OutTradingArea,  
		sum(case when cd.Latitude is null then 1 else 0 end) NotFound,  
		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)  
		left outer join DCMS.tblDistributorStaffDetails d with(nolock) on o.StaffRefNo=d.StaffRefNo  
		Left outer join SDS.tblDeliveryBoyClusterMapping dc with (nolock) on o.StaffRefNo=dc.StaffRefNo 
		Left outer join SDS.tblClusterMaster ct on dc.ClusterId=ct.ClusterId  
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID  
		Left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo
		Left outer join SDS.tblClusterMaster ConCt with (nolock) on isnull(ac.AreaClusterId,0)=conct.ClusterId
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cl.DistributorID
		Left outer join SDS.tblDeliveryBoyClusterMapping adc with (nolock) on o.StaffRefNo = adc.AdditionalStaffRefNo
		Left outer join sds.tblClusterMaster act with (nolock) on act.ClusterId= adc.ClusterId
	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and o.DistributorId= @DistributorId   
		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  isnull(convert(numeric(17,0),@DelBoyId),0)=convert(numeric(17,0),0))  
		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
	group by o.DistributorId, d.StaffRefNo, d.StaffName,dc.ClusterId,ct.AreaClusterName,act.AreaClusterName,dc.StaffRefNo  

	-- Insert Consumer Cluster Counts
	insert into #tbl(DistributorId,StaffRefNo, StaffName, DelBoyClusterId,DelBoyClusterName, ConsClusterId, ConsClusterName, Total,
		InCluster,OutCluster,OutTradingArea,NotFound,Deviation)
	select o.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, dc.ClusterId as DelBoyClusterId, ct.AreaClusterName as DelBoyClusterName,  
		isnull(ac.AreaClusterId,1) ConsClusterId, conCt.AreaClusterName ConsClusterName, -- Incase of Consumer Area null return 1 to avoid multiple records in del boy summary List
		count(o.UniqueConsumerId) Total,
	    sum(case when (cd.Latitude is not null and cd.InCluster=1 and cd.ClusterId=isnull(ac.AreaClusterId,0)) then 1 else 0 end) InCluster,     
		sum(case when (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>isnull(ac.AreaClusterId,0))) then 1 else 0 end) as OutCluster,  
	    sum(case when cd.inTradingArea=0 and cd.Latitude is not null and cd.Latitude <>'' then 1 else 0 end) AS OutTradingArea,  
		sum(case when cd.Latitude is null then 1 else 0 end) NotFound,  
		sum(case when (isnull(cl.Distance,0.0)>=isnull(@DevMtrs,200.0)) then 1 else 0 end) Deviation  
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)  
		left outer join DCMS.tblDistributorStaffDetails d with(nolock) on o.StaffRefNo=d.StaffRefNo  
		Left outer join SDS.tblDeliveryBoyClusterMapping dc with (nolock) on o.StaffRefNo=dc.StaffRefNo 
		Left outer join SDS.tblClusterMaster ct on dc.ClusterId=ct.ClusterId  
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID  
		Left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo
		Left outer join SDS.tblClusterMaster ConCt with (nolock) on isnull(ac.AreaClusterId,0)=conct.ClusterId
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with(nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cl.DistributorID
	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and o.DistributorId= @DistributorId   
		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  isnull(convert(numeric(17,0),@DelBoyId),0)=convert(numeric(17,0),0))  
		and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)  
	group by o.DistributorId, d.StaffRefNo, d.StaffName,dc.ClusterId,ct.AreaClusterName, isnull(ac.AreaClusterId,1), conCt.AreaClusterName  


	select id, DistributorId,StaffRefNo, StaffName, DelBoyClusterId, DelBoyClusterName, ConsClusterId, ConsClusterName, Total,InCluster,OutCluster,
	OutTradingArea,NotFound,Deviation 
	from #tbl

	drop table #tbl
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDelBoyWiseLastDeliveryBookingList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDelBoyWiseLastDeliveryBookingList]      
--declare      
@DistributorId int,      
@DelBoyId nvarchar(20),      
@DeliveryDate datetime      
--set @DistributorId=14193; set @DelBoyId='1151419300000001'; set @DeliveryDate='2024-01-24'  
as   
BEGIN      
	SET FMTONLY OFF      
      
	select cm.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, cm.UniqueConsumerId, cd.ConsumerNo, isnull(ac.AreaClusterId,0) AreaClusterId,  
		sds.fn_CamelCase(cd.ConsumerName) ConsumerName, cd.MobileNo, sds.fn_CamelCase(cd.Address) Address, cd.Pin,       
		cd.Latitude as TripLatitude, cd.Longitude TripLongitude, cd.Source TripSource,cm.OrderRefNo,  cm.OrderNo, cd.AreaRefNo,   
		sds.fn_CamelCase(cd.AreaName) AreaName, 0 IsUpdated, case when (isnull(cd.InCluster,0)=1 ) then 1 else 0 end InCluster,  
		isnull(cd.ClusterId,0) ClusterId, isnull(cd.inTradingArea,0) inTradingArea,isnull(cd.IsVerified,0) IsVerified, IsVerifiedUpdated,  
		isnull(cd.AddressConfirmed,0) AddressConfirmed, isnull(cd.AreaConfirmed,0) AreaConfirmed,   
		isnull(cd.LocationConfirmed,0) LocationConfirmed, cm.ActualDeliveryDate, cd.LastUpdatedDatetime,cd.TripGCDate,        
		(SELECT isnull(convert(nvarchar(20), mn.MobileNo) +', ','') +isnull( mn.Prm1 +', ','') +isnull( nullif(mn.Prm2,'') +', ','') +  
		isnull(mn.Prm3 +', ','')+isnull(mn.Prm4 +', ','') FROM DCMS.tblConsumerMaster mn WITH(NOLOCK) WHERE mn.UniqueConsumerId=cd.UniqueConsumerId) RegMobileNo,      
		Convert(bigint,ROUND(cl.Distance, 0)) AS Deviation,     
		cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,        
		cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,        
		cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,        
		cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime     
	
	from DCMS.tblDeliveryBoyRefillOrder cm with (nolock)       
		left outer join DCMS.tblDistributorStaffDetails d with (nolock) on cm.StaffRefNo=d.StaffRefNo      
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = cm.UniqueConsumerId and cm.DistributorId=cd.DistributorID       
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with (nolock) on cm.UniqueConsumerId = cl.UniqueConsumerId and cm.DistributorId=cd.DistributorID       
		Left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo  
	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and cm.DistributorId= @DistributorId       
		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  @DelBoyId=convert(numeric(17,0),0))      
		and cast(cm.ActualDeliveryDate as date) = cast(@DeliveryDate as date)      
	order by cd.LastUpdatedDatetime      
END     
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDelBoyWiseLastDeliveryBookingListNew]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetDelBoyWiseLastDeliveryBookingListNew]      
--declare      
@DistributorId int,      
@DelBoyId nvarchar(20),      
@DeliveryDate datetime      
--set @DistributorId=14193; set @DelBoyId='1141419300000007'; set @DeliveryDate='2024-01-24'  
as   
BEGIN      
	SET FMTONLY OFF      
      
	select o.DistributorId, d.StaffRefNo, sds.fn_CamelCase(d.StaffName) StaffName, o.UniqueConsumerId, cd.ConsumerNo, isnull(ac.AreaClusterId,0) AreaClusterId,  
		ct.AreaClusterName ConsClusterName, sds.fn_CamelCase(cd.ConsumerName) ConsumerName, cd.MobileNo, sds.fn_CamelCase(cd.Address) Address, cd.Pin,       
		cd.Latitude as TripLatitude, cd.Longitude TripLongitude, cd.Source TripSource,o.OrderRefNo,  o.OrderNo, cd.AreaRefNo,   
		sds.fn_CamelCase(cd.AreaName) AreaName, 0 IsUpdated, case when (isnull(cd.InCluster,0)=1 ) then 1 else 0 end InCluster,  
		isnull(cd.ClusterId,0) InClusterId, isnull(cd.inTradingArea,0) inTradingArea,isnull(cd.IsVerified,0) IsVerified, IsVerifiedUpdated,  
		isnull(cd.AddressConfirmed,0) AddressConfirmed, isnull(cd.AreaConfirmed,0) AreaConfirmed,   
		isnull(cd.LocationConfirmed,0) LocationConfirmed, o.ActualDeliveryDate, cd.TripGCDate,
		COALESCE( cl.VitranLastUpdateDateTime1,cl.VitranLastUpdateDateTime) as LastUpdatedDatetime,
		(SELECT isnull(convert(nvarchar(20), mn.MobileNo) +', ','') +isnull( mn.Prm1 +', ','') +isnull( nullif(mn.Prm2,'') +', ','') +  
		isnull(mn.Prm3 +', ','')+isnull(mn.Prm4 +', ','') FROM DCMS.tblConsumerMaster mn WITH(NOLOCK) WHERE mn.UniqueConsumerId=cd.UniqueConsumerId) RegMobileNo,      
		Convert(bigint,ROUND(cl.Distance, 0)) AS Deviation, 		
		cl.VitranLatitude VitaranLatitude,cl.VitranLongitude VitaranLongitude,cl.VitranLastUpdateDateTime VitaranLastUpdateDateTime,        
		cl.VitranLatitude1 VitaranLatitude1,cl.VitranLongitude1 VitaranLongitude1,cl.VitranLastUpdateDateTime1 VitaranLastUpdateDateTime1,        
		cl.MILatitude MILatitude,cl.MILongitude MILongitude,cl.MILastUpdateDateTime MILastUpdateDateTime,        
		cl.HPPayLatitude HPPayLatitude,cl.HPPayLongitude HPPayLongitude,cl.HPPayLastUpdateDateTime HPPayLastUpdateDateTime,
	    cl.VitranLatitudeSAFE ,cl.VitranLongitudeSAFE,cl.VitranLastUpdateDateTimeSAFE     
	
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)       
		left outer join DCMS.tblDistributorStaffDetails d with (nolock) on o.StaffRefNo=d.StaffRefNo      
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId and o.DistributorId=cd.DistributorID       
		left outer JOIN SDS.tblConsumerLocationHistoryNew cl with (nolock) on o.UniqueConsumerId = cl.UniqueConsumerId and o.DistributorId=cd.DistributorID       
		Left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo  
		left outer join SDS.tblClusterMaster ct on ac.AreaClusterId=ct.ClusterId
	where d.StaffStatusCode='Active' and cd.ConsumerStatus='Active' and o.DistributorId= @DistributorId       
		and (d.StaffRefNo=convert(numeric(17,0), @DelBoyId) or  @DelBoyId=convert(numeric(17,0),0))      
	and cast(o.ActualDeliveryDate as date) = cast(@DeliveryDate as date)      
	order by cd.LastUpdatedDatetime      
END     
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDeliveredOrderForAddiDelBoy]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDeliveredOrderForAddiDelBoy]
@DistributorId int,
@AdditionalStaffRefNo numeric(17,0),
@FromDate datetime,
@ToDate datetime

--set @DistributorId =14193 set @DeliveryBoyId =11711419300000005 set @TripDate ='2019-09-21' --set @FromDate ='2019-09-20' set @ToDate ='2019-09-20'

AS
BEGIN	
	SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,
		TPD.UniqueConsumerId, CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice,TPD.ExpectedDeliveryDate, 
		(CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,
		'work on it' AS PaymentType, CD.AreaRefNo, cd.Latitude, cd.Longitude,
		ISNULL(CD.MobileNo,0)as MobileNo, TP.StaffRefNo,TP.StaffName,TP.AddiStaffRefNo,TP.AddiStaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,
		TP.TripEndDate,TPD.ReturnQty, TPD.ActualDeliveryDate, 0 as RSP, 0 as SVAT, 0 as VAT
	FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
		SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId INNER JOIN
		SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
	WHERE	TP.DistributorId=@DistributorId and  TPD.AssignedTo=isnull(@AdditionalStaffRefNo,0) 
		and CAST(TP.TripDate as date) BETWEEN CAST(ISNULL(@FromDate,TP.TripDate) as date) 
		and CAST(ISNULL(@ToDate,TP.TripDate) as date) and OrderStatus NOT IN('0','APRN','OPEN','AGEN')
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetDeliveryBoyCurrentLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_GetDeliveryBoyCurrentLocation]
--	Description		:	Get deliver boy current location

--	Author			:	Prasanna	17-Oct-2019

--	Date Modified		Modified By	     Modifications
--	17-Oct-2019			Prasanna         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetDeliveryBoyCurrentLocation]
	@DistributorId int,
	@UniqueConsumerId numeric(18,0)
AS
BEGIN

	SELECT TOP 1 T.StaffName,d.TotalPrice,d.OrderDate,cl.Latitude,cl.Longitude,cl.LocationDateTime
	FROM SDS.tblTripPlanning t INNER JOIN
	SDS.tblTripPlanningDetails d WITH(NOLOCK) ON t.TripId=d.TripId INNER JOIN
	SDS.tblCurrentLocation cl WITH(NOLOCK) ON t.StaffRefNo=cl.StaffRefNo
	where UniqueConsumerId=@UniqueConsumerId AND d.OrderStatus='0' AND t.DistributorId=@DistributorId
	order by t.TripDate desc, cl.LocationDateTime desc
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDeliveryBoyDetailsReport]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDeliveryBoyDetailsReport]
--declare
@DistributorId bigint,
@DeliveryBoyId bigint,
@VehicleId bigint,
@ActiveFlag varchar(10)

--set @DistributorId=8131 set @ActiveFlag='Y' set @ClusterId=0
as
BEGIN
	SELECT c.ClusterId, c.DistributorId, SDS.fn_CamelCase(c.AreaClusterName) as AreaClusterName, 
	c.LastUpdatedDatetime, c.IsActive, isnull(dc.StaffRefNo,0) StaffRefNo,SDS.fn_CamelCase( st.StaffName)as StaffName, 
	isnull(dc.NoOfTrip,0) ExpectedTrip,isnull((select sum(NoOfTrip)  from SDS.tblDeliveryBoyClusterMapping where StaffRefNo=st.StaffRefNo and st.TripStatus='Alloted'),0) Alloted ,
	0 as Completed, v.VehicleNo, isnull(v.RTOCapacity,0) RTOCapacity,
	isnull(dc.NoOfTrip,0) * isnull(v.RTOCapacity,0) PossDelivery, 
	(select count(AreaRefNo) from sds.tblAreaClusterMapping where AreaClusterId=c.ClusterId) AreaCount,
	st.TripStatus,tp.OrderQuantity,
	isnull((STUFF((select ', ' + SDS.fn_CamelCase(a.AreaName) from DCMS.tblDistributorAreaMaster a WITH(NOLOCK) 
	inner join sds.tblAreaClusterMapping ac on ac.AreaClusterId=c.clusterId where a.AreaRefNo=ac.AreaRefNo FOR XML PATH('')),1,1,'')),'') AS SelectArea
	FROM SDS.tblVehicleDeliveryBoyMapping AS vd WITH(NOLOCK) LEFT OUTER JOIN 
	SDS.tblVehicleMaster AS v WITH(NOLOCK) ON vd.VehicleId = v.VehicleId RIGHT OUTER JOIN
	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON vd.DeliveryBoyId = dc.StaffRefNo RIGHT OUTER JOIN
	SDS.tblClusterMaster AS c WITH(NOLOCK) ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN
	SDS.tblTripPlanning AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo LEFT OUTER JOIN
	SDS.tblTripPlanningDetails AS tp with(nolock) ON tp.TripId = st.TripId
	where (c.DistributorId=@DistributorId or @DistributorId=0) and (c.IsActive=@ActiveFlag or upper(@ActiveFlag)='ALL') 
	and (st.VehicleId=@VehicleId or @VehicleId=0) and (st.StaffRefNo=@DeliveryBoyId or @DeliveryBoyId=0)

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDeliveryBoyStock]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDeliveryBoyStock]
--declare
@DeliveryBoyId numeric(17,0)
--set @DeliveryBoyId=11711419300000005
AS
BEGIN
	SELECT	i.ItemId, i.ItemDescription, i.ItemShortDescription,ISNULL(s.FilledQuantity,0) as FilledQty, ISNULL(s.EmptyQuantity,0) as EmptyQty
			,COUNT(BD.BreakdownId) as BreakdownRequestCount
	FROM	SDS.tblItemCodeMaster i with(nolock) left outer join 
	SDS.tblDeliveryBoyStock s with(nolock) on i.ItemID = s.ItemID and s.DeliveryBoyId= @DeliveryBoyId left outer join 
	 SDS.tblBreakDown BD on  BD.DeliveryBoyId=@DeliveryBoyId and cast(BD.BreakDownDateTime as date)=CAST(GetDate() as date)
	WHERE i.Active='Y' 
	group by 	i.ItemId, i.ItemDescription, i.ItemShortDescription,s.FilledQuantity, s.EmptyQuantity
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDeliveryboyTripDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDeliveryboyTripDetails]
--declare
@DistributorId int,
@Date datetime
--set @DistributorId=15139; set @Date='2020-03-04'

as

select dl.StaffRefNo, dl.StaffName, c.AreaClusterName,t.TripId,t.TripNo,t.TripDate,i.ItemShortDescription, count(td.OrderNo) OrderCount 

from dcms.tblDistributorStaffDetails dl inner join sds.tblDeliveryBoyClusterMapping dc on dl.StaffRefNo=dc.StaffRefNo 
inner join sds.tblClusterMaster c on dc.ClusterId=c.ClusterId
left outer join sds.tblTripPlanning t on c.ClusterId=t.ClusterId
inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
left outer join dcms.tblItemPriceCodeMap ip on td.PriceCode=ip.PriceCode
left outer join sds.tblItemCodeMaster i on ip.PackageCode=i.PackageCode
where dl.distributorid=@DistributorId and cast(t.tripdate as date)=cast(@Date as date)
group by dl.StaffRefNo, dl.StaffName, c.AreaClusterName,t.TripId,t.TripNo,t.TripDate,i.ItemShortDescription
order by t.tripdate desc

GO
/****** Object:  StoredProcedure [SDS].[usp_GetDeliveryBoywiseStock]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetDeliveryBoywiseStock 15139

CREATE PROCEDURE [SDS].[usp_GetDeliveryBoywiseStock]
--declare
@DistributorId int
--set @DistributorId=15139
AS
BEGIN
	SELECT        db.StaffRefNo, db.StaffName, v.VehicleId, v.VehicleNo, i.ItemId, i.ItemDescription, i.ItemShortDescription, ISNULL(dbs.FilledQuantity, 0) AS FilledQty, ISNULL(dbs.EmptyQuantity, 0) AS EmptyQty
	FROM            SDS.tblItemCodeMaster AS i WITH (nolock) INNER JOIN
	SDS.tblDeliveryBoyStock AS dbs WITH (nolock) ON i.ItemId = dbs.ItemId RIGHT OUTER JOIN
	DCMS.tblDistributorStaffDetails AS db INNER JOIN
	SDS.tblVehicleDeliveryBoyMapping AS vdb ON db.StaffRefNo = vdb.DeliveryBoyId LEFT OUTER JOIN
	SDS.tblVehicleMaster AS v ON vdb.VehicleId = v.VehicleId ON dbs.DeliveryBoyId = db.StaffRefNo
						 
	where db.DistributorId=@DistributorId and i.Active='Y'

END

--SELECT	i.ItemId, i.ItemDescription, i.ItemShortDescription,ISNULL(s.FilledQuantity,0) as FilledQty, ISNULL(s.EmptyQuantity,0) as EmptyQty
--			,COUNT(BD.BreakdownId) as BreakdownRequestCount
--	FROM	SDS.tblItemCodeMaster i with(nolock) left outer join 
--	SDS.tblDeliveryBoyStock s with(nolock) on i.ItemID = s.ItemID and s.DeliveryBoyId= @DeliveryBoyId left outer join 
--	 SDS.tblBreakDown BD on  BD.DeliveryBoyId=@DeliveryBoyId and cast(BD.BreakDownDateTime as date)=CAST(GetDate() as date)
--	WHERE i.Active='Y' 
--	group by 	i.ItemId, i.ItemDescription, i.ItemShortDescription,s.FilledQuantity, s.EmptyQuantity


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityAnalysisConsumerDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Santosh>
-- Create date: <03-04-2021>
-- Description:	<Get Density Analysis Consumer Details>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetDensityAnalysisConsumerDetails]
--declare
@DistributorId int,
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime

--set @DistributorId=14193; set @ClusterId=0; set @CaseNo='DA'; set @TripDate='2021-05-03'

AS
BEGIN
	SELECT  da.TripId, da.CaseNo, da.TripNo, CONVERT(int, REPLACE(da.TripNo, 'TRP/', '')) AS TripIndexNo, da.TripDate, da.ClusterId, 
		da.StaffRefNo, da.StaffName, dad.DensityGroupNo, dad.SequenceNo, dad.OrderNo, dad.OrderDate, cd.UniqueConsumerId, cd.DistributorID, 
		cd.ConsumerNo, cd.ConsumerName, cd.ConsumerStatus, cd.MobileNo, cd.Address, cd.Pin, cd.AreaRefNo, cd.AreaName, cd.Latitude, 
		cd.Longitude, cd.DistanceFromAgency, cd.DistanceFromGodown,
		--dad.DensityFrom
		(case when (dad.UniqueConsumerId= dad.DensityFrom) then 1 else 0 end ) as DensityFrom
	FROM SDS.tblDensityAnalysis AS da WITH (nolock) INNER JOIN
		SDS.tblDensityAnalysisDetails AS dad WITH (nolock) ON da.TripId = dad.TripId INNER JOIN
		SDS.tblConsumerDetails AS cd WITH (nolock) ON cd.UniqueConsumerId = dad.UniqueConsumerId
	WHERE	da.DistributorId=@DistributorId AND upper(da.CaseNo)=upper(@CaseNo) and cast(da.TripDate as date) = cast(@TripDate as date)
		and (da.ClusterId=@ClusterId or @ClusterId=0)
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityAnalysisConsumerDetails_RtSeq]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Rajendra>
-- Create date: <15-05-2021>
-- Description:	<Get Density Analysis Consumer Details for new del seq second time desnity data>
-- =============================================
create PROCEDURE [SDS].[usp_GetDensityAnalysisConsumerDetails_RtSeq]
--declare
@DistributorId int,
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime

--set @DistributorId=14193; set @ClusterId=0; set @CaseNo='DA'; set @TripDate='2021-05-03'

AS
BEGIN
	SELECT  da.TripId, da.CaseNo, da.TripNo, CONVERT(int, REPLACE(da.TripNo, 'TRP/', '')) AS TripIndexNo, da.TripDate, da.ClusterId, 
		da.StaffRefNo, da.StaffName, dad.DensityGroupNo, dad.SequenceNo, dad.OrderNo, dad.OrderDate, cd.UniqueConsumerId, cd.DistributorID, 
		cd.ConsumerNo, cd.ConsumerName, cd.ConsumerStatus, cd.MobileNo, cd.Address, cd.Pin, cd.AreaRefNo, cd.AreaName, cd.Latitude, 
		cd.Longitude, cd.DistanceFromAgency, cd.DistanceFromGodown,
		--dad.DensityFrom
		(case when (dad.UniqueConsumerId= dad.DensityFrom) then 1 else 0 end ) as DensityFrom
	FROM SDS.tblDensityAnalysis_RtSeq AS da WITH (nolock) INNER JOIN
		SDS.tblDensityAnalysisDetails_RtSeq AS dad WITH (nolock) ON da.TripId = dad.TripId INNER JOIN
		SDS.tblConsumerDetails AS cd WITH (nolock) ON cd.UniqueConsumerId = dad.UniqueConsumerId
	WHERE	da.DistributorId=@DistributorId AND upper(da.CaseNo)=upper(@CaseNo) and cast(da.TripDate as date) = cast(@TripDate as date)
		and (da.ClusterId=@ClusterId or @ClusterId=0)
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityAnalysisSummary]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetDensityAnalysisSummary 14193,0,'2021-04-20', ''

CREATE proc [SDS].[usp_GetDensityAnalysisSummary]
--declare
@DistributorId int,
@ClusterId INT,
@Tdate datetime,
@CaseNo nvarchar(50)
--set @DistributorId=14193; set @ClusterId=0; set @Tdate='2021-04-20'; set @CaseNo='OD'

as

BEGIN
	if (upper(isnull(@CaseNo,''))='DA')
	Begin
		SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
			dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
			Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, dad.DelTripSequenceNo as DelTripSequenceNo
		FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
		left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
		where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
			and (isnull(da.CaseNo,'') in ('DA','OD',''))
		GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo 
	End
	else if (upper(isnull(@CaseNo,''))='OD')
	Begin
		SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
			dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
			Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, dad.DelTripSequenceNo_OD as DelTripSequenceNo
		FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
		left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
		where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
			and (isnull(da.CaseNo,'') in ('DA','OD',''))
		GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo_OD  
	End
	else if (upper(isnull(@CaseNo,''))='AD')
	Begin
		SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
			dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
			Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, ISNULL(dad.DelTripSequenceNo_AD,0) as DelTripSequenceNo
		FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
		left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
		where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
			and (isnull(da.CaseNo,'') in ('AD',''))
		GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo_AD  
	End
	else if (upper(isnull(@CaseNo,''))='OA')
	Begin
		SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
			dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
			Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, ISNULL(dad.DelTripSequenceNo_OA,0) as DelTripSequenceNo
		FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
		left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
		where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
			and (isnull(da.CaseNo,'') in ('OA',''))
		GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo_OA  
	End
	else
	Begin
		SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
			dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
			sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
			Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, 0 as DelTripSequenceNo
		FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
		left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
		where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
			and (isnull(da.CaseNo,'') in ('DA','OD',''))
		GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo 
	End
	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityAnalysisSummary_old]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_GetDensityAnalysisSummary 14193,0,'2021-04-03', 'DA'

create proc [SDS].[usp_GetDensityAnalysisSummary_old]
--declare
@DistributorId int,
@ClusterId INT,
@Tdate datetime,
@CaseNo nvarchar(50)

--set @DistributorId=14193; set @ClusterId=74; set @Tdate = '2021-04-08 18:32:01.260';set @CaseNo = 'DA'

as

BEGIN

	Select
	 -- dense_rank() OVER (PARTITION BY ClusterId ORDER BY Ab.OnlyOldestBookingDate,OlderThan10Days desc,OlderThan5Days desc,OlderThan2Days desc,Upto2Days desc,KM_Air) AS DeliveryTripSequenceNo,
	ROW_NUMBER() OVER(Partition by ClusterId ORDER BY Ab.OnlyOldestBookingDate,OlderThan10Days desc,OlderThan5Days desc,OlderThan2Days desc,Upto2Days desc,KM_Air) AS DeliveryTripSequenceNo,
	AB.CaseNo,TripDate,DistributorId,ClusterId,ClusterName,DensityGroupNo,NoOfBookings,OldestBookingDate,OnlyOldestBookingDate,
	OlderThan10Days,OlderThan5Days,OlderThan2Days,Upto2Days,KM_Air,KM_Road,DelTripSequenceNo
	From(
	SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId,
	 da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, dad.DensityGroupNo,
	  COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate, CAST(MIN(dad.OrderDate)as date) AS OnlyOldestBookingDate,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
		Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, dad.DelTripSequenceNo
	FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
	left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
	where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
		and (isnull(da.CaseNo,'')=@CaseNo or isnull(@CaseNo,'')='')
	GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo
	) as AB
	order by Ab.OnlyOldestBookingDate,OlderThan10Days desc,OlderThan5Days desc,OlderThan2Days desc,Upto2Days desc,KM_Air
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityAnalysisSummary_RtSeq]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.[usp_GetDensityAnalysisSummary_RtSeq] 14193,0,'2021-04-20', 'DA'

create proc [SDS].[usp_GetDensityAnalysisSummary_RtSeq]
--declare
@DistributorId int,
@ClusterId INT,
@Tdate datetime,
@CaseNo nvarchar(50)
--set @DistributorId=14145; set @ClusterId=0; set @Tdate='2021-05-15'; set @CaseNo='DA'

as

BEGIN
	SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
		dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
		Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, dad.DelTripSequenceNo as DelTripSequenceNo
	FROM SDS.tblDensityAnalysis_RtSeq AS da INNER JOIN SDS.tblDensityAnalysisDetails_RtSeq AS dad ON da.TripId = dad.TripId
	left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
	where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
		and (isnull(da.CaseNo,'') =@CaseNo)
	GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo 
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityAnalysisSummary_WithDelSeq]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_GetDensityAnalysisSummary 14145,111,'2021-04-14', 'DA'

create proc [SDS].[usp_GetDensityAnalysisSummary_WithDelSeq]
--declare
@DistributorId int,
@ClusterId INT,
@Tdate datetime,
@CaseNo nvarchar(50)
--set @DistributorId=14145; set @ClusterId=111; set @Tdate='2021-04-14'

as

BEGIN
set FMTONLY OFF

	IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups

	create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, ClusterName nvarchar(500), 
		DensityGroupNo int, NoOfBookings int, OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,
		KM_Air int, KM_Road int, DelTripSequenceNo int)

	insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, ClusterName,DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
		OlderThan2Days, Upto2Days,KM_Air, KM_Road, DelTripSequenceNo)
	SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName, 
		dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,
		sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,
		Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, dad.DelTripSequenceNo
	FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId
	left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId
	where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)
		and (isnull(da.CaseNo,'')=@CaseNo or isnull(@CaseNo,'')='')
	GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName, dad.DensityGroupNo, dad.DelTripSequenceNo
	
	--select * from #DensityGroups

	--Case 2 Density-Ageing
	declare @OldBkgDt datetime, @NoofTrips int, @MaxBkg10 int=0,@MaxBkg5 int=0,@MaxBkg2 int=0,@MaxBkg int=0, @c int =1
	select @NoofTrips=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId
	select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
	--select @OldBkgDt
	
While (@c<=@NoofTrips)
Begin
	if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)>1)
	Begin
	---- Older than 10 days
		set @MaxBkg10 =0; select @MaxBkg10=max(OlderThan10Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
		--select @MaxBkg10
		if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
						and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0)=1)
		Begin
			--select @MaxBkg10, ' older then 10 days'
			--select '>10',* from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days=@MaxBkg and OlderThan10Days>0
			update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
						and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0
		End
		Else
		Begin
		---- Older than 5 days
			set @MaxBkg5 =0; select @MaxBkg5=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
					and OlderThan10Days=@MaxBkg10 and isnull(DelTripSequenceNo,0)=0
			if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
						and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0)=1)
			Begin
			--select @MaxBkg5,' older then 5 days'
				--select '>5',* from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan5Days=@MaxBkg and OlderThan5Days>0
				update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
							and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0
			End
			else
			Begin
			---- Older than 2 days
				set @MaxBkg2 =0; select @MaxBkg2=max(OlderThan2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
							and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and isnull(DelTripSequenceNo,0)=0
				if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
							and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0)=1)
				Begin
					--select @MaxBkg2, ' older then 2 days'
					--select '>2',* from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan2Days=@MaxBkg and OlderThan2Days>0
					update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
								and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0
				End
				else
				Begin
				---- Upto 2 days 
					set @MaxBkg =0; select @MaxBkg=max(Upto2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
								and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and isnull(DelTripSequenceNo,0)=0
					if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
					and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and Upto2Days=@MaxBkg and Upto2Days>0)=1)
					Begin
						--select @MaxBkg, 'upto 2 days'
						--select 'upto2',* from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and Upto2Days=@MaxBkg and Upto2Days>0
						update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
						and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg and Upto2Days>0
					End
					else
					Begin
						--select 'Last '
						--select top 1 'upto2',* from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and Upto2Days=@MaxBkg order by KM_Air
						update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo=
							(select top 1 DensityGroupNo from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
							and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg order by KM_Air)
					End
				End
			End
		End
	End 
	else 
	Begin
		--select @OldBkgDt
		--select 'Old',* from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
		update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
	End
set @c=@c+1
End  

	select CaseNo, TripDate, DistributorId, ClusterId, ClusterName,DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
		OlderThan2Days, Upto2Days,KM_Air, KM_Road, DelTripSequenceNo from #DensityGroups


	drop table #DensityGroups
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDensityDataForClusterCard]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetDensityDataForClusterCard 14193, '2020-12-05'

CREATE proc [SDS].[usp_GetDensityDataForClusterCard]
--declare
@DistributorId int,
@TripDate datetime
--,@ClusterId bigint
--set @DistributorId=14193; set @tripDate='2020-12-05'; set @ClusterId=71

as

BEGIN
set fmtonly off	
	IF OBJECT_ID('tempdb..#Result') IS NOT NULL DROP TABLE #Result
	IF OBJECT_ID('tempdb..#cluster') IS NOT NULL DROP TABLE #cluster

	create table #Result (id int identity, DistributorId int, TripDate datetime, ClusterId bigint, ClusterName nvarchar(200), DeliveryBoyId nvarchar(25), StaffName  nvarchar(200), 
	VehicleId bigint, VehicleNo  nvarchar(25), VehicleCapacity int, NoOfTrips int, BookingDate datetime, TotalPending int,
	[1] int, [2] int, [3] int, [4] int, [5] int, [6] int, [7] int, [8] int,[9] int, [10] int,[11] int, [12] int, [13] int, [14] int, [15] int, selectedGroup nvarchar(20)) 

	insert into #Result (DistributorId, TripDate, ClusterId, ClusterName, DeliveryBoyId, StaffName, VehicleId, VehicleNo, VehicleCapacity, NoOfTrips, 
	BookingDate, TotalPending, [1], [2], [3], [4], [5], [6], [7], [8],[9], [10],[11], [12], [13], [14], [15], selectedGroup) 

	SELECT pt.DistributorId, pt.TripDate, pt.ClusterId, pt.ClusterName, pt.DeliveryBoyId, SDS.fn_CamelCase(pt.StaffName) as StaffName, pt.VehicleId, pt.VehicleNo, pt.VehicleCapacity, pt.NoOfTrips,cast(pt.BookingDate as date) BookingDate,
	(select count(OrderRefNo)TotalPending FROM sds.tblDensityDataClusterwise d where cast(d.TripDate as date) = cast(@TripDate as date) and d.DistributorId = @DistributorId and d.ClusterId=pt.ClusterId) as TotalPending,
	isnull(pt.[1],0) [1], isnull(pt.[2],0) [2], isnull(pt.[3],0) [3], isnull(pt.[4],0) [4], isnull(pt.[5],0) [5], isnull(pt.[6],0) [6], isnull(pt.[7],0) [7], isnull(pt.[8],0) [8], isnull(pt.[9],0) [9], isnull(pt.[10],0) [10]
	,isnull(pt.[11],0) [11],isnull(pt.[12],0) [12],isnull(pt.[13],0) [13],isnull(pt.[14],0) [14],isnull(pt.[15],0) [15], ''
	FROM
	(
		SELECT d.DistributorId, d.TripDate, d.ClusterId, d.ClusterName, d.DeliveryBoyId, s.StaffName, d.VehicleId, d.VehicleNo, d.VehicleCapacity, d.NoOfTrips,cast(d.BookingDate as date) BookingDate, d.DensityGroupNo,
		count(d.BookingCount) BookingCount
		FROM sds.tblDensityDataClusterwise d left outer join dcms.tblDistributorStaffDetails s on d.deliveryBoyId=s.StaffRefNo 
		where cast(d.TripDate as date) = cast(@TripDate as date) and d.DistributorId = @DistributorId --and (d.ClusterId = @ClusterId or @ClusterId=0)
		group by d.DistributorId, d.TripDate, d.ClusterId, d.ClusterName, d.DeliveryBoyId,s.StaffName, d.VehicleId, d.VehicleNo, d.VehicleCapacity, d.NoOfTrips,cast(d.BookingDate as date), d.DensityGroupNo
	) AS SourceTable PIVOT(AVG([BookingCount]) FOR [DensityGroupNo] IN([1], [2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15])) AS pt;

	create table #cluster(id int identity, clusterid bigint)

	insert into #cluster(clusterid) select distinct clusterid from #Result order by ClusterId

	declare @c int=1, @c1 int,@cId bigint,@noOfTrips int
	select @c1=max(id) from #cluster

	while (@c<=@c1)
	Begin
		set @cId=0; set @noOfTrips=0;

		select @cId=clusterid from #cluster where id=@c 
		select @noOfTrips=NoOfTrips from #result where ClusterId=@cId 

		--select @cId, @noOfTrips
		--select ClusterId, max(DensityGroupNo) from sds.tblDensityDataClusterwise where ClusterId=@cId group by ClusterId 

		update  #result set selectedGroup=
		isnull((STUFF((select ', ' + SDS.fn_CamelCase(a.DensityGroupNo) from (
		select top (@noOfTrips) g.DensityGroupNo, g.BookingCount, min(g.bookingdate) bdate, g.VehicleCapacity, count(g.orderrefno) bcount 
		from sds.tblDensityDataClusterwise g
		where cast(g.TripDate as date) = cast(@TripDate as date) and g.DistributorId = @DistributorId and g.ClusterId = @cId
		group by g.DensityGroupNo,g.BookingCount,g.VehicleCapacity
		order by bdate asc) a	
		FOR XML PATH('')),1,1,'')),'') 

		where ClusterId=@cId

		set @c=@c+1
	End

	select DistributorId, TripDate, ClusterId, ClusterName, DeliveryBoyId, StaffName, VehicleId, VehicleNo, VehicleCapacity, NoOfTrips, 
	BookingDate, TotalPending, isnull([1],0) [1], isnull([2],0) [2], isnull([3],0) [3], isnull([4],0) [4], isnull([5],0) [5], isnull([6],0) [6], isnull([7],0) [7], 
	isnull([8],0) [8],isnull([9],0) [9], isnull([10],0) [10],isnull([11],0) [11], isnull([12],0) [12], isnull([13],0) [13], isnull([14],0) [14], isnull([15],0) [15], selectedGroup 
	from #Result 

	drop table #Result
	drop table #cluster
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistAreaGeoCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_GetDistAreaGeoCoordinates]
--	Description		:	Get Distributors item Price details

--	Author			:	Prasanna	31-March-2018

--	Date Modified		Modified By	     Modifications
--	31-March-2018		Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetDistAreaGeoCoordinates]
@DistributorId int,
@AreaRefNo varchar(20)
AS
BEGIN
	
	SELECT da.DistributorId,da.AreaRefNo,da.AreaJSON,ActiveStatus,gc.AreaJSON AS OriginalAreaCoordinates
	FROM SDS.tblDistributorAreaGeoCoordinates da LEFT OUTER JOIN
	--[SDS].[tblDistributorAreaMapping] dam WITH(NOLOCK) ON dam.AreaRefNo=da.AreaRefNo LEFT OUTER JOIN
	[SDS].[tblGeoCoordinateMaster] gc WITH(NOLOCK) ON gc.AreaCode=da.AreaRefNo
	WHERE da.DistributorId=@DistributorId AND da.AreaRefNo=@AreaRefNo

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorClassRoomLog]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDistributorClassRoomLog]

@SACode nvarchar(20)
as

BEGIN
	IF(@SACode ='')
	BEGIN
		SELECT zo.ZOCode,zo.ZOName,ro.ROCode,ro.ROName,sa.SACode,sa.SAName,dcr.DistributorId,DistributorName,JDEDistributorCode,AllotedDateTime,
		StartDateTime,EndDateTime,Duration,ActiveForOnBoarding,crm.Id,crm.SessionName
		FROM [SDS].[tblDistributorClassRoomLog] dcr INNER JOIN
		[DCMS].[tblDistributorMaster] dm WITH(NOLOCK) ON dm.DistributorId=dcr.DistributorId INNER JOIN
		[SDS].[tblSAMaster] sa WITH(NOLOCK) ON sa.SACode=dm.SACode INNER JOIN
		[SDS].[tblROMaster] ro WITH(NOLOCK) ON ro.ROCode=sa.ROCode INNER JOIN
		[SDS].[tblZOMaster] zo WITH(NOLOCK) ON zo.ZOCode=ro.ZOCode LEFT OUTER JOIN
		[SDS].[tblClassRoomMaster] crm WITH(NOLOCK) ON crm.Id=dcr.ClassRoomMasterId
		ORDER BY zo.ZOName,ro.ROName,sa.SAName,DistributorName,AllotedDateTime
	END
	ELSE
	BEGIN 
		SELECT zo.ZOCode,zo.ZOName,ro.ROCode,ro.ROName,sa.SACode,sa.SAName,dcr.DistributorId,DistributorName,JDEDistributorCode,AllotedDateTime,
		StartDateTime,EndDateTime,Duration,ActiveForOnBoarding,crm.Id,crm.SessionName
		FROM [SDS].[tblDistributorClassRoomLog] dcr INNER JOIN
		[DCMS].[tblDistributorMaster] dm WITH(NOLOCK) ON dm.DistributorId=dcr.DistributorId INNER JOIN
		[SDS].[tblSAMaster] sa WITH(NOLOCK) ON sa.SACode=dm.SACode INNER JOIN
		[SDS].[tblROMaster] ro WITH(NOLOCK) ON ro.ROCode=sa.ROCode INNER JOIN
		[SDS].[tblZOMaster] zo WITH(NOLOCK) ON zo.ZOCode=ro.ZOCode LEFT OUTER JOIN
		[SDS].[tblClassRoomMaster] crm WITH(NOLOCK) ON crm.Id=dcr.ClassRoomMasterId
		WHERE sa.SACode=@SACode
		ORDER BY zo.ZOName,ro.ROName,sa.SAName,DistributorName,AllotedDateTime
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorClusterCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDistributorClusterCoordinates]
--declare 
@DistributorId int
--set @DistributorId=14193
as
BEGIN
	SELECT dcc.DistributorId, AreaClusterId, AreaJSON ,cm.AreaClusterName clusterName 
	FROM SDS.tblDistributorClusterCoordinates dcc WITH (NOLOCK) 
	inner join [SDS].[tblClusterMaster] cm WITH (NOLOCK) on cm.[ClusterId] = dcc.AreaClusterId
	where dcc.DistributorId=@DistributorId and cm.DistributorId=@DistributorId and ActiveStatus='Y'
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorClusterDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDistributorClusterDetails]

as
Begin

select  DistributorId,ClusterId from SDS.tblSaveDistandClustId 

End
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorConfigSetup]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDistributorConfigSetup]
@DistributorID int,
@ConfigId int
as

BEGIN
	SELECT d.DistributorID, m.ConfigId, m.ConfigName, isnull(d.ConfigValue,'N') as ConfigValue
	FROM SDS.tblDistributorConfigMaster AS m left outer JOIN SDS.tblDistributorConfigSetup AS d ON m.ConfigId = d.ConfigId 
	where d.DistributorID=@DistributorID and (m.ConfigId=@ConfigId or @ConfigId=0)
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorCounsumerInOutCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_GetDistributorCounsumerInOutCounts]
--declare 
@DistributorID int,
@ClusterId bigint
--set @DistributorID=14193; set @ClusterId=0
as
BEGIN
	SELECT cd.DistributorID, COUNT(cd.UniqueConsumerId) AS Total, sum(case when cd.intradingArea=1 then 1 else 0 end) InTA,
		((COUNT(cd.UniqueConsumerId))-(sum(case when cd.intradingArea=1 then 1 else 0 end))) OutTA,
		sum(case when cd.InCluster=1 and cd.ClusterId=acm.AreaClusterId then 1 else 0 end) InCluster,
		((COUNT(cd.UniqueConsumerId))-(sum(case when cd.InCluster=1 and cd.ClusterId=acm.AreaClusterId then 1 else 0 end))) OutCluster
	FROM SDS.tblConsumerDetails AS cd WITH (nolock) LEFT OUTER JOIN
		SDS.tblAreaClusterMapping AS acm  WITH (nolock) ON acm.AreaRefNo = cd.AreaRefNo
	where cd.DistributorID=@DistributorID and (acm.AreaClusterId=@ClusterId or isnull(@ClusterId,0)=0)
	group by cd.DistributorID
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorDetailsByStaffId]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetDistributorDetailsByStaffId
--	Description		:	Get Distributors details by staffid 

--	Author			:	Prasanna	18-May-2018

--	Date Modified		Modified By	     Modifications
--	18-May-2018		Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetDistributorDetailsByStaffId]
	@DistributorId int,
	@StaffRefNo numeric(18, 0)
AS
BEGIN		
		SELECT dsm.StaffName,dm.DistributorName,dm.AddressLine1 +' '+ dm.AddressLine2 +' '+ dm.AddressLine3 AS DistributorAddress,
		  dm.Email,dm.MobileNo,dm.GSTN
		FROM SDS.tblDistributorStaffMaster dsm INNER JOIN 
			DCMS.tblDistributorMaster dm with(nolock) ON dsm.DistributorId=dm.DistributorId
		WHERE dsm.DistributorId = @DistributorId AND dsm.StaffRefNo=@StaffRefNo AND dsm.StaffStatusCode ='Active'
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorForActivationBySA]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_GetDistributorForActivationBySA]--'346'

@SACode nvarchar(20)
as

BEGIN

	SELECT dm.SACode,sa.SAName,dm.DistributorId,dm.JDEDistributorCode,dm.DistributorName,dm.IsDistributorLive
	FROM HPCLDCMS.DCMS.[tblDistributorMaster] dm WITH(NOLOCK)left outer join
	HPCLDCMS.DCMS.[tblSAMaster] sa WITH(NOLOCK) ON sa.SACode=dm.SACode left outer join
	HPCLDCMS.INTERFACE.tblSDSDealers de on de.DistributorId=dm.DistributorId
	where sa.SACode=@SACode and dm.IsDistributorLive='Y' and de.DistributorId is null
	and (dm.DistributorName not like 'INACTIVE%') and (dm.DistributorName not like 'ND%')
	ORDER BY sa.SAName,DistributorName
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorGodownStock]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--   SDS.usp_GetDistributorGodownStock 14193

CREATE proc [SDS].[usp_GetDistributorGodownStock]
--declare
@DistributorId int
--set @DistributorId=14193
AS
BEGIN

SELECT			i.ItemID as ItemCode, i.PackageCode,SDS.fn_CamelCase(i.ItemShortDescription)as ItemShortDescription, isnull(s.DistributorId,0) DistributorId, isnull(s.FilledQuantity,0) GodownStockFilled, 
				isnull(s.EmptyQuantity,0) GodownStockEmpty, isnull(s.DefectiveQuantity,0) GodownStockDefective,
				COUNT(BD.BreakdownId) as BreakdownRequestCount

FROM			sds.tblItemCodeMaster i  left outer join
			   SDS.tblDistributorStock s on i.ItemId=s.ItemID and s.DistributorId=@DistributorId left outer join
			   SDS.tblBreakDown BD on  BD.DistributorId=@DistributorId and cast(BD.BreakDownDateTime as date)=CAST(GetDate() as date) and BD.isconfirm is null

where i.Active='Y'
group by i.ItemID,i.PackageCode,i.ItemShortDescription,s.DistributorId,s.FilledQuantity, 
		s.EmptyQuantity,s.DefectiveQuantity

END
	--  Select a.ItemCode, a.PackageCode,a.ItemShortDescription,(ISNULL(a.GodownStockFilled,0)-ISNULL(c.[Quantity],0)+ISNULL(b.FilledQty,0)) as GodownStockFilled,
	--		 (ISNULL(a.GodownStockEmpty,0)-ISNULL(c.[EmptyQty],0)+ISNULL(b.EmptyQty,0))as GodownStockEmpty

 -- From (
 -- SELECT   @DistributorID as DistributorID,ipm.ItemCode, ipm.PackageCode,ipm.ItemShortDescription, SUM(ISNULL(ird.ReceiptQty, 0)) AS GodownStockFilled,e.GodownStockEmpty
	--FROM           DCMS.tblItemPriceCodeMap AS ipm
	--LEFT OUTER JOIN DCMS.tblItemReceiptDtls AS ird ON ird.PriceCode = ipm.PriceCode
	--LEFT OUTER JOIN DCMS.tblItemReceiptHdr AS ir ON ir.ReceiptRefNo = ird.ReceiptRefNo 

	--left outer join (
	--SELECT      ipm.ItemCode,  ipm.PackageCode,ipm.ItemShortDescription, SUM(ISNULL(ird.ReceiptQty, 0)) AS GodownStockEmpty
	--FROM           DCMS.tblItemPriceCodeMap AS ipm
	--LEFT OUTER JOIN DCMS.tblItemReceiptDtls AS ird ON ird.PriceCode = ipm.PriceCode
	--LEFT OUTER JOIN DCMS.tblItemReceiptHdr AS ir ON ir.ReceiptRefNo = ird.ReceiptRefNo 
	--WHERE        (ipm.ActiveFlag = 'Y') AND (ir.DistributorID = @DistributorID or ir.DistributorID is null)
	--and ipm.ItemCategory ='E' and ipm.ItemShortDescription='14.2' 
	--group by ipm.PackageCode,ipm.ItemCode,ipm.ItemShortDescription
	--) e on ipm.PackageCode=e.PackageCode

	--WHERE        (ipm.ActiveFlag = 'Y') AND (ir.DistributorID = @DistributorID or ir.DistributorID is null)
	--and ipm.ItemCategory <>'E' and ipm.ItemShortDescription='14.2' 
	--group by ipm.PackageCode,ipm.ItemCode,ipm.ItemShortDescription,e.GodownStockEmpty
	--)as a left outer join
	--(

	--	select ST.[DistributorId],STD.[ItemId],SUM(ISNULL(STD.[FilledQty], 0)) as FilledQty,SUM(ISNULL(STD.[EmptyQty], 0)) as EmptyQty
	--	from [SDS].[tblStockTransfer] ST inner join 
	--		[SDS].[tblStockTransferDetails] STD on ST.[StockTransferId]=STD.[StockTransferId]
	--	where st.[IsAccepted]='Y' and ST.[DistributorId]=@DistributorID and ST.[TransferedTo]='G'
	--	group by  ST.[DistributorId],STD.[ItemId]
	
	--) b on a.DistributorID=b.DistributorId left outer join
	
	--(

	--	select SA.[DistributorId]
	--	,SAD.[ItemId],SUM(ISNULL(SAD.[Quantity], 0)) as Quantity,SUM(ISNULL(SAD.[EmptyQty], 0)) as EmptyQty
	--	from [SDS].[tblStockAllotment] SA inner join 
	--		[SDS].[tblStockAllotmentDetails] SAD on SA.[StockAllotmentId]=SAD.[StockAllotmentId]
	--	where (sA.[IsAccepted]='Y' OR SA.[IsAccepted] is null) and SA.[DistributorId]=@DistributorID and  SA.[AllotmentBy]='G'
	--	group by SA.[DistributorId],SAD.[ItemId]
	
	--) c on c.DistributorID=a.DistributorId







GO
/****** Object:  StoredProcedure [SDS].[Usp_GetDistributorInClusterConsumerCounts]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[Usp_GetDistributorInClusterConsumerCounts]
--declare 
@SACode nvarchar(20),  
@DistributorId int 
--set @DistributorId=14193 set @SACode=332

As  
BEGIN
	SELECT d.DistributorId, d.SACode, d.JDEDistributorCode, d.DistributorName,cm.ClusterId, cm.AreaClusterName as ClusterName,
	--dm.DTotalConsumer ,dm.DInCluster,
	0 DTotalConsumer, 0 DInCluster,
	COUNT(cd.UniqueConsumerId) AS TotalConsumer, --sum(case when (cd.InCluster=1) then 1 else 0 end) AS InCluster,
	sum(case when (isnull(cd.InCluster,0)=1 and acm.AreaClusterId=cd.ClusterId) then 1 else 0 end) AS InCluster	
	FROM DCMS.tblDistributorMaster AS d INNER JOIN SDS.tblClusterMaster AS cm ON d.DistributorId = cm.DistributorId INNER JOIN
	SDS.tblOnBoardingCompleted AS ob ON d.DistributorId = ob.DistributorId INNER JOIN
	SDS.tblAreaClusterMapping acm ON cm.ClusterId = acm.AreaClusterId INNER JOIN
	SDS.tblConsumerDetails AS cd ON acm.AreaRefNo = cd.AreaRefNo 
	--inner join (		SELECT d.DistributorId, COUNT(cd.UniqueConsumerId) AS DTotalConsumer,
	--	sum(case when (isnull(cd.InCluster,0)=1 and acm.AreaClusterId=cd.ClusterId) then 1 else 0 end) AS DInCluster
	--	FROM DCMS.tblDistributorMaster AS d INNER JOIN SDS.tblClusterMaster AS cm ON d.DistributorId = cm.DistributorId INNER JOIN
	--	SDS.tblOnBoardingCompleted AS ob ON d.DistributorId = ob.DistributorId INNER JOIN 
	--	SDS.tblAreaClusterMapping acm ON cm.ClusterId = acm.AreaClusterId INNER JOIN
	--	SDS.tblConsumerDetails AS cd ON acm.AreaRefNo = cd.AreaRefNo
	--	where cm.IsActive='Y' and cd.ConsumerStatus='Active' AND ob.IsOnBoardingStage1 = 2 
	--	and (d.SACode=@SACode or @SACode='0') and (d.DistributorId=@DistributorId or @DistributorId=0) 
	--	GROUP BY d.DistributorId 
	--) dm on d.DistributorId=dm.DistributorId
	where 
	--cm.IsActive='Y' and cd.ConsumerStatus='Active' AND ob.IsOnBoardingStage1 = 2 --and dm.DInCluster<1000
	--and 
	(d.SACode=@SACode or @SACode='0') and (d.DistributorId=@DistributorId or @DistributorId=0) 
	GROUP BY d.DistributorId,d.SACode, d.JDEDistributorCode, d.DistributorName, cm.DistributorId, cm.ClusterId,cm.AreaClusterName --,dm.DTotalConsumer,dm.DInCluster
	order by d.DistributorName,cm.AreaClusterName
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorInformation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDistributorInformation]    
@DistributorId nvarchar(50)   
as      
BEGIN  
SET FMTONLY OFF    
select DistributorId,JDEDistributorCode,DistributorName,Email,SACode from dcms.tblDistributorMaster  where DistributorId =@DistributorId  
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorLocation]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetDistributorLocation] 
--declare
@DistributorId int 
  
as  
BEGIN  

	SELECT distinct d.DistributorId, d.JDEDistributorCode, d.DistributorName, d.AddressLine1+', '+d.AddressLine2+', '+ d.AddressLine3 DAddress,   
	d.PhoneNo, d.MobileNo, d.Email,c.CityName, d.StateCode,d.DistrictCode,dl.DLat, dl.DLong,isnull(dg.Latitude,lg.Latitude) AS GLat, isnull(dg.Longitude,lg.Longitude) AS GLong
	FROM  DCMS.tblDistributorMaster d left outer join DCMS.tblCityMaster c on d.CityCode=c.CityCode  
	left outer join sds.tblDistributorLocation dl on d.DistributorId=dl.DistributorId  
	left outer join DCMS.tblDistributorGodown AS dg on d.DistributorId = dg.DistributorId
	left outer join	SDS.tblDistributorGodown AS lg ON dg.GoDownId = lg.GodownId 
	WHERE d.DistributorId = @DistributorId  and  (lg.ActiveFlag = 'Y' or dg.ActiveFlag='Y')

END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorMinimumInCompletedStepforStage1Status]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorMinimumInCompletedStepforStage1Status]
--declare
@ZOCode nvarchar(20),
@SACode nvarchar(20)
--set @ZOCode='0'; set @SACode='0'
AS
BEGIN

set FMTONLY OFF

	declare @tblResult table (id int identity(1,1), ZOCode nvarchar(20), ZOName nvarchar(200), SACode nvarchar(20), SAName nvarchar(200), DistributorId int,
	JDEDistributorCode nvarchar(20), DistributorName nvarchar(200), IsOnBoardingStage1 int, InCompletedSteps int, Step1 int, Step2 int, Step3 int, Step7 int, 
	Step8 int, StepCount int,Targeted int, Pending int, PendingPercent numeric(6,2) )

	insert into @tblresult
	SELECT s.ZOCode, z.ZOName, d.SACode, s.SAName, d.DistributorId,d.JDEDistributorCode, d.DistributorName,o.IsOnBoardingStage1,0,1,1,1,1,1,0,0,0,0.00
	FROM DCMS.tblDistributorMaster AS d INNER JOIN SDS.tblOnBoardingCompleted AS o ON o.DistributorId = d.DistributorId LEFT OUTER JOIN
	SDS.tblSAMaster AS s ON d.SACode = s.SACode LEFT OUTER JOIN SDS.tblZOMaster AS z ON s.ZOCode = z.ZOCode  --where d.DistributorId in (
		--8263,8288,9128,14145,14331,15139,88888
	--11292100,11361100,12543370,12545800,12550950,19632800,	88888888
	--)
	 where(s.ZOCode=@ZOCode or @ZOCode='' or @ZOCode='0') and (d.SACode=@SACode or @SACode='' or @SACode='0')
	
	declare @DId int, @c int, @c1 int,@IncompleteStepCount int
	select @c1=isnull(max(id),0) from @tblresult
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0; set @IncompleteStepCount=0;
		select @DId=DistributorId from @tblresult where id=@c

		-- Check Vehicles
		if not exists(select 1 from sds.tblVehicleMaster where DistributorId=@DId and Active='Y')
		Begin
			set @IncompleteStepCount=1 		
			update @tblresult set Step1=0 where DistributorId=@DId  
		End

		-- Check DeliveryBoy vehicle mapping
		--if not exists(select v.VehicleId, m.VehicleId from sds.tblVehicleMaster v inner join sds.tblVehicleDeliveryBoyMapping m on v.VehicleId=m.VehicleId
		--where v.DistributorId=@DId and m.VehicleId is not null and v.Active='Y')
		if exists(select v.VehicleId, m.VehicleId from sds.tblVehicleMaster v left outer join sds.tblVehicleDeliveryBoyMapping m on v.VehicleId=m.VehicleId
		where v.DistributorId=@DId and m.VehicleId is null and v.Active='Y')
		Begin
			if (@IncompleteStepCount=0) set @IncompleteStepCount=2 		
			update @tblResult set Step2=0 where DistributorId=@DId 		
		End
		----- Check Godown Master ith location
		if not exists(select 1 from sds.tblDistributorGodown g left outer join sds.tblDistributorGodownStaffMapping gk on g.godownid=gk.godownid
				where g.DistributorId=@DId and g.ActiveFlag='Y' and g.Latitude is not  null and isnull(gk.GodownKeeperId,0)<> 0)
		Begin	 
			if (@IncompleteStepCount=0) set @IncompleteStepCount=3 		
			update @tblResult set Step3=0 where DistributorId=@DId 		
		End
				
		---- check POD area declaration
		if exists(select 1 from sds.tblClusterMaster c left outer join sds.tblAreaClusterMapping cm on c.ClusterId=cm.AreaClusterId 
		left outer join sds.tblPODWeekdaysDetails pd on cm.AreaRefNo=pd.AreaRefNo where c.DistributorId=@DId and c.Regionid=2 and pd.AreaRefNo is null)
		Begin			
				if (@IncompleteStepCount=0) set @IncompleteStepCount=7 	
			    update @tblResult set Step7=0 where DistributorId=@DId		
		End
		
		-- check cluster master, area cluster mapping and cluster delivery boy mapping
		if exists(select 1 from DCMS.tblDistributorAreaMaster where DistributorID=@DId and StatusFlag='Y' and AreaRefNo not in (
			select AreaRefNo from sds.tblAreaClusterMapping where DistributorId=@DId and IsActive='Y'))
		Begin
					if (@IncompleteStepCount=0) set @IncompleteStepCount=8
			    update @tblResult set Step8=0 where DistributorId=@DId
			
		End
		
		if exists(select 1 from sds.tblclustermaster where distributorId=@DId and IsActive='Y' and clusterId not in 
				(select clusterId from sds.tblDeliveryBoyClusterMapping where distributorId=@DId))
	    Begin
					if (@IncompleteStepCount=0) set @IncompleteStepCount=8
			    update @tblResult set Step8=0 where DistributorId=@DId		
	    End		

		declare @tot int, @verified int, @NotVerified int
		select @tot=count(UniqueConsumerId), @verified=sum(case when isnull(IsVerified,0)=1 then 1 else 0 end), 
		@NotVerified=sum(case  when isnull(IsVerified,0)=0 then 1 else 0 end)  
		from sds.tblConsumerDetails where DistributorID=@DId

		update @tblResult set 
		InCompletedSteps = @IncompleteStepCount,StepCount =Step1+Step2+Step3+Step7+Step8, Targeted=isnull(@tot,0), Pending=isnull(@NotVerified,0),
		PendingPercent=isnull((convert(decimal(10,2), round( @NotVerified*100.00/isnull(nullif(@tot,0),1),2))),0.00) 
		where DistributorId=@DId
		
	set @c=@c+1
	End

	select ZOCode, ZOName, SACode, SAName, DistributorId, JDEDistributorCode, DistributorName, 
	IsOnBoardingStage1, 
	InCompletedSteps
	,Step1,Step2,Step3,Step7,Step8,StepCount,Targeted, Pending,PendingPercent from  @tblResult where StepCount <> 1
	order by ZOName,SAName,DistributorName
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorMinimumInCompletedStepforStage1Status_ACLDB]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_GetDistributorMinimumInCompletedStepforStage1Status_ACLDB]
--declare
@DistributorId nvarchar(max)=''
--set @DistributorId='9128,8288,14331,14145,15139,8263,88888'
--set @DistributorId='8263'--'8263'
AS
BEGIN			

set FMTONLY OFF

	declare @tblDistri table (id int identity(1,1),DistributorId int,Step4 int,Step5 int,Step6 int, IncompleteStep int,StepCount int)
	insert into @tblDistri(DistributorId, Step4,Step5,Step6,IncompleteStep,StepCount)	select value,1,1,1,0,1 from sds.fn_StringSplit(@DistributorId,',')
	
	declare @DId int, @c int, @c1 int ,@Incomplete int
	select @c1=isnull(max(id),0) from @tblDistri 
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0;set @Incomplete=0;
		select @DId=DistributorId from @tblDistri where id=@c		

		-- check Distributor Tahshil mapping
		if not exists(select 1 from sds.tblDistributorDeliveryTaluka where DistributorId=@DId and isnull(TalukaCode,'')<>'')		
		Begin
		   set @Incomplete = 4;
		   update @tblDistri set Step4=0 where DistributorId=@DId  
		End


		-- check Trading area 
		if not exists(select 1 from sds.tblDistributorTradingAreaCoordinates m inner join sds.tblDistributorTradingAreaMajorAreaMapping d on m.DistributorId=d.DistributorId where m.DistributorId=@DId )
		Begin
		    if (@Incomplete=0) set @Incomplete=5 		
			update @tblDistri set Step5=0 where DistributorId=@DId				 		
		End
	
		-- check cluasters 
		if not exists(select 1 from sds.tblDistributorClusterCoordinates where DistributorId=@DId and ActiveStatus='Y')
		Begin
			if (@Incomplete=0) set @Incomplete=6		
			update @tblDistri set Step6=0 where DistributorId=@DId				 
		End
	
		update @tblDistri set IncompleteStep=@Incomplete,StepCount=Step4+Step5+Step6 where DistributorId=@DId
			
	set @c=@c+1
	End

	select * from  @tblDistri 
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorNotStartedOnBoardingScheduler]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorNotStartedOnBoardingScheduler]
--declare
@ZOCode nvarchar(20),
@SACode nvarchar(20)
--set @ZOCode=''; set @SACode=''
as

BEGIN

	declare @tblDistri table (id int,DistributorId int, JDEDistributorCode nvarchar(20), DistributorName nvarchar(200),SAcode nvarchar(20), 
	Step1 int,Step2 int,Step3 int,Step4 int,Step5 int,Step6 int,Step7 int,Step8 int, Step1Remark varchar(max),Step2Remark varchar(max),Step3Remark varchar(max),
	Step4Remark varchar(max),Step5Remark varchar(max),Step6Remark varchar(max),Step7Remark varchar(max),Step8Remark varchar(max),
	Verified int, notVerified int, NotverifiedPercent decimal(10,2),Stage1Status int,Stage1StatusText nvarchar(20),Stage2Status int,stage2Statustext nvarchar(20))
	
	insert into @tblDistri exec sds.usp_Rpt_GetDistributorOnBoardingStatus '0', 0

	--select * from @tblDistri

	-- Not started Activity
	SELECT s.ZOCode, z.ZOName, o.SACode, s.SAName, o.DistributorId, o.DistributorName,o.JDEDistributorCode
	from @tblDistri o LEFT OUTER JOIN SDS.tblSAMaster AS s ON o.SACode = s.SACode LEFT OUTER JOIN SDS.tblZOMaster AS z ON s.ZOCode = z.ZOCode 
	where (s.ZOCode=@ZOCode or @ZOCode='' or @ZOCode='0') and (o.SACode=@SACode or @SACode='' or @SACode='0')
	and (isnull(Step1,0)=0 and isnull(Step2,0)=0 and isnull(Step3,0)=0 and isnull(Step4,0)=0 and isnull(Step5,0)=0 and isnull(Step6,0)=0 and isnull(Step8,0)=0 
	and isnull(Stage1Status,0)=0)
	order by z.ZOName, s.SAName, o.DistributorName
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorOnBoardingStatusForScheduler]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorOnBoardingStatusForScheduler]
--declare
@SACode nvarchar(20),
@DistributorId int=0
--set @SACode=341; set @DistributorId=0
AS
BEGIN

set FMTONLY OFF

	declare @tblDistri table (id int identity(1,1),DistributorId int, JDEDistributorCode nvarchar(20), DistributorName nvarchar(200),SAcode nvarchar(20), 
	Step1 int,Step1Text nvarchar(20),Step2 int,Step2Text nvarchar(20),Step3 int,Step3Text nvarchar(20),Step4 int,Step4Text nvarchar(20),Step5 int,Step5Text nvarchar(20),
	Step6 int,Step6Text nvarchar(20),Step7 int,Step7Text nvarchar(20),Step8 int,Step8Text nvarchar(20),Step1Remark varchar(max),Step2Remark varchar(max),Step3Remark varchar(max),
	Step4Remark varchar(max),Step5Remark varchar(max),Step6Remark varchar(max),Step7Remark varchar(max),Step8Remark varchar(max),
	Verified int, notVerified int, NotverifiedPercent decimal(10,2),Stage1Status int,Stage1StatusText nvarchar(20),Stage2Status int,stage2Statustext nvarchar(20))

	insert into @tblDistri(DistributorId, JDEDistributorCode, DistributorName,SAcode,Step1,Step2,Step3,Step4,Step5,Step6,Step7,Step8,Step1Remark,Step2Remark,Step3Remark,
		Step4Remark,Step5Remark,Step6Remark,Step7Remark,Step8Remark, Verified, notVerified, NotverifiedPercent,Stage1Status,Stage1StatusText,Stage2Status,stage2Statustext)
		
	SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName,
		d.SACode,0,0,0,0,0,0,0,0,b.Step1Remark,b.Step2Remark,b.Step3Remark,b.Step4Remark,b.Step5Remark,b.Step6Remark,b.Step7Remark,b.Step8Remark,
		0,0,0,b.IsOnBoardingStage1, obs.Statustext,b.IsOnBoardingStage2, obs1.Statustext				
	FROM SDS.tblUser AS u INNER JOIN
		DCMS.tblDistributorMaster AS d ON u.RefNo = d.DistributorId and u.RoleId=3 and isnull(u.Status,'N')='Y' LEFT OUTER JOIN
		SDS.tblOnBoardingCompleted AS b ON d.DistributorId = b.DistributorId LEFT OUTER JOIN
		sds.tblOnboardingStatus AS 	 Obs on Obs.value= b.IsOnBoardingStage1 and obs.ForType='STAGE1' LEFT OUTER JOIN
		sds.tblOnboardingStatus AS 	 Obs1 on Obs1.value= b.IsOnBoardingStage2  and Obs1.ForType='STAGE2'
	WHERE upper(isnull(d.StatusCode,''))='A' and (d.DistributorName not like 'INACTIVE%')
		and (d.DistributorName not like 'ND%') and (d.SACode=@SACode or @SACode='0')
		and (d.DistributorId=isnull(@DistributorId,0) or isnull(@DistributorId,0)=0)
	order By d.DistributorName


	declare @DId int, @c int, @c1 int
	select @c1=isnull(max(id),0) from @tblDistri 
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0
		select @DId=DistributorId from @tblDistri where id=@c

		-- Check Vehicles
		if exists(select 1 from sds.tblVehicleMaster where DistributorId=@DId and Active='Y')
		Begin
			update @tblDistri set Step1=1 where DistributorId=@DId 
		End

		-- Check DeliveryBoy vehicle mapping
		if not exists(select v.VehicleId, m.VehicleId from sds.tblVehicleMaster v left outer join sds.tblVehicleDeliveryBoyMapping m on v.VehicleId=m.VehicleId
		where v.DistributorId=@DId and m.VehicleId is null and v.Active='Y')
		Begin
			update @tblDistri set Step2=1 where DistributorId=@DId and step1=1
		End
		----- Check Godown Master ith location
		if exists(select 1 from sds.tblDistributorGodown g inner join sds.tblDistributorGodownStaffMapping gk on g.godownid=gk.godownid
				where g.DistributorId=@DId and g.ActiveFlag='Y' and g.Latitude is not null and isnull(gk.GodownKeeperId,0)<>0)
		Begin
			update @tblDistri set Step3=1 where DistributorId=@DId
		End

		-- check Distributor Tahshil mapping
		if exists(select 1 from sds.tblDistributorDeliveryTaluka where DistributorId=@DId and isnull(TalukaCode,'')<>'')
		Begin
			update @tblDistri set Step4=1 where DistributorId=@DId
		End
		-- check Trading area 
		if exists(select 1 from sds.tblDistributorTradingAreaCoordinates m inner join sds.tblDistributorTradingAreaMajorAreaMapping d on m.DistributorId=d.DistributorId where m.DistributorId=@DId)
		Begin
			update @tblDistri set Step5=1 where DistributorId=@DId
		End
		-- check cluasters 
		if exists(select 1 from sds.tblClusterMaster c inner join sds.tblDistributorClusterCoordinates cc on c.ClusterId=cc.AreaClusterId where c.DistributorId=@DId and IsActive='Y')
		Begin
			update @tblDistri set Step6=1 where DistributorId=@DId
		End
		
		-- check POD area declaration
		if not exists(select c.ClusterId,c.Regionid,pd.arearefno from sds.tblClusterMaster c left outer join sds.tblAreaClusterMapping cm on c.ClusterId=cm.AreaClusterId 
		left outer join sds.tblPODWeekdaysDetails pd on cm.AreaClusterId=pd.AreaRefNo where c.DistributorId=@DId and c.Regionid=2 and pd.AreaRefNo is null)
		Begin
			update @tblDistri set Step7=1 where DistributorId=@DId
		End

		-- check cluster master, area cluster mapping and cluster delivery boy mapping
		if not exists(select 1 from DCMS.tblDistributorAreaMaster where DistributorID=@DId and StatusFlag='Y' and AreaRefNo not in (
			select AreaRefNo from sds.tblAreaClusterMapping where DistributorId=@DId and IsActive='Y'))
		Begin
			if not exists(select * from sds.tblclustermaster where distributorId=@DId and IsActive='Y' and clusterId not in 
				(select clusterId from sds.tblDeliveryBoyClusterMapping where distributorId=@DId))
			Begin
				update @tblDistri set Step8=1 where DistributorId=@DId
			End
		End

	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step1,0) >1)
		update @tblDistri set Step1= (select  Step1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step1,0) >1) where DistributorId=@DId
		
	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step2,0) >1)
		update @tblDistri set Step2= (select  Step2 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step2,0) >1) where DistributorId=@DId
		
	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step3,0) >1)
		update @tblDistri set Step3= (select  step3 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step3,0) >1) where DistributorId=@DId
		
	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step4,0) >1)
		update @tblDistri set Step4= (select  step4 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step4,0) >1) where DistributorId=@DId
		
	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step5,0) >1)
		update @tblDistri set Step5= (select  Step5 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step5,0) >1) where DistributorId=@DId
		
	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step6,0) >1)
		update @tblDistri set Step6= (select  step6 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step6,0) >1) where DistributorId=@DId
		
	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step7,0) >1)
		update @tblDistri set Step7= (select  step7 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step7,0) >1) where DistributorId=@DId

	if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step8,0) >1)
		update @tblDistri set Step8= (select  step8 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step8,0) >1) where DistributorId=@DId

		declare @tot int, @verified int, @NotVerified int
		select @tot=count(UniqueConsumerId), @verified=sum(case when isnull(IsVerified,0)=1 then 1 else 0 end), 
		@NotVerified=sum(case  when isnull(IsVerified,0)=0 then 1 else 0 end)  
		from sds.tblConsumerDetails where DistributorID=@DId

		--select @tot,@verified,@NotVerified

		update @tblDistri set Verified=isnull(@verified,0), notVerified=isnull(@NotVerified,0), 
		NotverifiedPercent=isnull((convert(decimal(10,2), round( @NotVerified*100.00/isnull(nullif(@tot,0),1),2))),0.00) where DistributorId=@DId
		
	set @c=@c+1
	End
	
	update @tblDistri set step1text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step1
	update @tblDistri set Step2Text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step2
	update @tblDistri set Step3Text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step3
	update @tblDistri set Step4Text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step4
	update @tblDistri set step5text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step5
	update @tblDistri set step6text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step6
	update @tblDistri set step7text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step7
	update @tblDistri set step8text=StatusText  from sds.tblOnboardingStatus where ForType='STAGE1' and value=step8



	select id,DistributorId, JDEDistributorCode, DistributorName,SAcode, 
	Step1,Step1Text,Step2,Step2Text,Step3,Step3Text,Step4,Step4Text,Step5,Step5Text,
	Step6,Step6Text,Step7,Step7Text,Step8,Step8Text,Step1Remark,Step2Remark,Step3Remark,
	Step4Remark,Step5Remark,Step6Remark,Step7Remark,Step8Remark,
	Verified, notVerified, NotverifiedPercent,Stage1Status,Stage1StatusText,Stage2Status,stage2Statustext from  @tblDistri order by JDEDistributorCode
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorPendingApprovalSchedulerForSA]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorPendingApprovalSchedulerForSA]
--declare
@SACode nvarchar(20),
@DistId nvarchar(20)
as

BEGIN
	IF(@SACode = '0' AND @DistId <> '0')
	BEGIN
	SELECT D.JDEDistributorCode,D.DistributorId,D.DistributorName,SA.SACode,SA.SAName ,OD.EmployeeName,OD.EmployeeNo,OD.Email,OD.MobileNo
	FROM DCMS.tblDistributorMaster D inner join SDS.tblSAMaster SA  WITH(NOLOCK) ON D.SACode=SA.SACode inner join 
	SDS.tblOfficerDetails OD WITH(NOLOCk) ON OD.AreaCode=SA.SACode  WHERE  D.DistributorId=@DistId
	END
	ELSE IF(@SACode <> '0' AND @DistId = '0')
	BEGIN
	SELECT ''JDEDistributorCode,0 DistributorId , '' DistributorName,SA.SACode,SA.SAName ,OD.EmployeeName,OD.EmployeeNo,OD.Email,OD.MobileNo
	FROM  SDS.tblSAMaster SA  inner join 
	SDS.tblOfficerDetails OD WITH(NOLOCk) ON OD.AreaCode=SA.SACode  WHERE  SA.SACode=@SACode
	END
END




/****** Object:  StoredProcedure [SDS].[usp_SaveEmailSchSendDate]    Script Date: 2/9/2021 11:07:54 AM ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorStage1StatusForScheduler]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorStage1StatusForScheduler] 
--declare
@ZOCode nvarchar(20),
@SACode nvarchar(20)
--set @ZOCode=''; set @SACode=''
AS
BEGIN

set FMTONLY OFF

	declare @tblResult table (id int identity(1,1), ZOCode nvarchar(20), ZOName nvarchar(200), SACode nvarchar(20), SAName nvarchar(200), DistributorId int, DistributorName nvarchar(200), 
	CompletedSteps int,	IsOnBoardingStage1 int, Targeted int, Pending int, PendingPercent numeric(6,2))
	
	insert into @tblresult
	SELECT s.ZOCode, z.ZOName, d.SACode, s.SAName, d.DistributorId, d.DistributorName,0,o.IsOnBoardingStage1,0,0,0.00
	FROM DCMS.tblDistributorMaster AS d INNER JOIN SDS.tblOnBoardingCompleted AS o ON o.DistributorId = d.DistributorId LEFT OUTER JOIN
	SDS.tblSAMaster AS s ON d.SACode = s.SACode LEFT OUTER JOIN SDS.tblZOMaster AS z ON s.ZOCode = z.ZOCode
	where  (s.ZOCode=@ZOCode or @ZOCode='' or @ZOCode='0') and (d.SACode=@SACode or @SACode='' or @SACode='0') --and d.DistributorId=14145
	
	declare @DId int, @c int, @c1 int, @StepsCount int
	select @c1=isnull(max(id),0) from @tblresult
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0; set @StepsCount=0; 
		select @DId=DistributorId from @tblresult where id=@c

		-- Check Vehicles
		if exists(select 1 from sds.tblVehicleMaster where DistributorId=@DId and Active='Y')
		Begin
			set @StepsCount=1 
		End

		-- Check DeliveryBoy vehicle mapping
		if not exists(select v.VehicleId, m.VehicleId from sds.tblVehicleMaster v left outer join sds.tblVehicleDeliveryBoyMapping m on v.VehicleId=m.VehicleId
		where v.DistributorId=@DId and m.VehicleId is null and v.Active='Y')
		Begin
			if (@StepsCount=1) set @StepsCount=@StepsCount+1 
		End
		----- Check Godown Master ith location
		if exists(select 1 from sds.tblDistributorGodown g inner join sds.tblDistributorGodownStaffMapping gk on g.godownid=gk.godownid
				where g.DistributorId=@DId and g.ActiveFlag='Y' and g.Latitude is not null and isnull(gk.GodownKeeperId,0)<>0)
		Begin
			set @StepsCount=@StepsCount+1 
		End
				
		---- check POD area declaration
		if not exists(select c.ClusterId,c.Regionid,pd.arearefno from sds.tblClusterMaster c left outer join sds.tblAreaClusterMapping cm on c.ClusterId=cm.AreaClusterId 
		left outer join sds.tblPODWeekdaysDetails pd on cm.AreaRefNo=pd.AreaRefNo where c.DistributorId=@DId and c.Regionid=2 and pd.AreaRefNo is null)
		Begin		--if (@StepsCount>5) 
			set @StepsCount=@StepsCount+1 
		End
		
		-- check cluster master, area cluster mapping and cluster delivery boy mapping
		if not exists(select 1 from DCMS.tblDistributorAreaMaster where DistributorID=@DId and StatusFlag='Y' and AreaRefNo not in (
			select AreaRefNo from sds.tblAreaClusterMapping where DistributorId=@DId and IsActive='Y'))
		Begin
			if not exists(select * from sds.tblclustermaster where distributorId=@DId and IsActive='Y' and clusterId not in 
				(select clusterId from sds.tblDeliveryBoyClusterMapping where distributorId=@DId))
			Begin
				set @StepsCount=@StepsCount+1 
			End
		End
		
		declare @tot int, @verified int, @NotVerified int
		select @tot=count(UniqueConsumerId), @verified=sum(case when isnull(IsVerified,0)=1 then 1 else 0 end), 
		@NotVerified=sum(case  when isnull(IsVerified,0)=0 then 1 else 0 end)  
		from sds.tblConsumerDetails where DistributorID=@DId

		update @tblResult set CompletedSteps=@StepsCount, Targeted=isnull(@tot,0), Pending=isnull(@NotVerified,0),
		PendingPercent=isnull((convert(decimal(10,2), round( @NotVerified*100.00/isnull(nullif(@tot,0),1),2))),0.00) 
		where DistributorId=@DId
		
	set @c=@c+1
	End

	select ZOCode, ZOName, SACode, SAName, DistributorId, DistributorName, CompletedSteps, IsOnBoardingStage1, Targeted, Pending,PendingPercent 
	from  @tblResult where CompletedSteps>1
	order by ZOName,SAName,DistributorName
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorStage1StatusForScheduler_ACLDB]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetDistributorStage1StatusForScheduler_ACLDB '9128,8288,14331,14145,15139,8263,88888'

CREATE PROCEDURE [SDS].[usp_GetDistributorStage1StatusForScheduler_ACLDB]
--declare
@DistributorId nvarchar(max)=''
--set @DistributorId='9128,8288,14331,14145,15139,8263,88888'
AS
BEGIN			

set FMTONLY OFF

	declare @tblDistri table (id int identity(1,1),DistributorId int,Step4 int,Step5 int,Step6 int, total int)

	insert into @tblDistri(DistributorId, Step4,Step5,Step6)	select value,0,0,0 from sds.fn_StringSplit(@DistributorId,',')
	
	declare @DId int, @c int, @c1 int, @cnt int
	select @c1=isnull(max(id),0) from @tblDistri 
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0; set @cnt=0
		select @DId=DistributorId from @tblDistri where id=@c		

		-- check Distributor Tahshil mapping
		if exists(select 1 from sds.tblDistributorDeliveryTaluka where DistributorId=@DId and isnull(TalukaCode,'')<>'')
		Begin
			update @tblDistri set Step4=1 where DistributorId=@DId
			set @cnt=1;
		End
		-- check Trading area 
		if exists(select 1 from sds.tblDistributorTradingAreaCoordinates m inner join sds.tblDistributorTradingAreaMajorAreaMapping d on m.DistributorId=d.DistributorId where m.DistributorId=@DId)
		Begin
			update @tblDistri set Step5=1 where DistributorId=@DId
			set @cnt=@cnt+1;
		End
		-- check cluasters 
		if exists(select 1 from sds.tblDistributorClusterCoordinates where DistributorId=@DId and ActiveStatus='Y')
		Begin
			update @tblDistri set Step6=1 where DistributorId=@DId
			set @cnt=@cnt+1;
		End
		update @tblDistri set Total=@cnt where DistributorId=@DId
	set @c=@c+1
	End
	
	select * from  @tblDistri 
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorSystemStock]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		 sds.usp_GetDistributorSystemStock  14193,'2019-10-10'
		

CREATE proc [SDS].[usp_GetDistributorSystemStock] 
@DistributorID int,
@TripDate datetime

as

--select s.Pricecode, SDS.fn_CamelCase( ipc.ItemDescription ) as ItemDescription,  isnull(s.currentGoodStock,0) CurrentStock  
--from sds.tblDistributorSystemStock s inner join DCMS.tblItemPriceCodeMap i with(nolock) on s.PriceCode=i.PriceCode
--inner join sds.tblitemcodemaster im on i.ItemCode=im.ItemId
--where s.DistributorID=@DistributorID and s.ActiveFlag='Y' and i.ActiveFlag='Y' and isnull(currentGoodStock,0)>0 

SELECT s.PriceCode, s.ItemId, SDS.fn_CamelCase(ipc.ItemDescription ) as ItemDescription, isnull(s.CurrentGoodStock,0)+isnull(e.ExpStockQty,0) AvailableStock,
s.ItemCategory, isnull(t.TripOdrQty,0) TotTripQty, (isnull(s.CurrentGoodStock,0)+isnull(e.ExpStockQty,0))-(isnull(t.TripOdrQty,0)) as AfterTrips
FROM SDS.tblDistributorSystemStock s inner join sds.tblItemCodeMaster i on s.itemId=i.ItemId
left outer join SDS.tblTripExpectedStock e on s.DistributorID=e.DistributorID and s.itemId=e.ItemId 
and s.PriceCode=e.PriceCode and cast(expStockDate as date) = cast(@TripDate as date)
inner join DCMS.tblItemPriceCodeMap ipc with(nolock) on s.PriceCode=ipc.PriceCode
left outer join 
(
	SELECT t.DistributorId, d.PriceCode, sum(isnull(d.OrderQuantity,0)) TripOdrQty
	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
	WHERE (t.DistributorId = @DistributorID) AND (CAST(t.TripDate AS date) = CAST(@TripDate AS date))
	and isnull(d.OrderStatus,'0') in ('0','OPEN','AGEN','APRN') and isnull(t.TripStatus,'0') <> 'Alloted'
	group by  t.DistributorId, d.PriceCode
) t on s.PriceCode=t.PriceCode

WHERE (s.DistributorID = @DistributorID) and isnull(s.ActiveFlag,'N')='Y' and s.ItemCategory <>'E' and i.itemId is not null 
and ( ((isnull(s.CurrentGoodStock,0)+isnull(e.ExpStockQty,0))-(isnull(t.TripOdrQty,0)))<>0)

--isnull(s.CurrentGoodStock,0)+isnull(e.ExpStockQty,0) AvailableStock
--(isnull(s.CurrentGoodStock,0)+isnull(e.ExpStockQty,0))-(isnull(t.TripOdrQty,0)) as AfterTrips



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorSystemStockForTrip]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetDistributorSystemStockForTrip 15139, '2020-02-13'


CREATE proc [SDS].[usp_GetDistributorSystemStockForTrip] 
--declare
@DistributorID int,
@TripDate datetime
--set @DistributorID=15139; set @TripDate='2020-02-13'
as

BEGIN
	SET FMTONLY OFF

	declare @AvlStock table(Id Int identity(1,1), PriceCode int, ItemId int, ItemDescription nvarchar(100), ItemCategory nvarchar(50), 
		AvlStock int, ExpStock int, AllotedTripCnt int, NotAllotedTripCnt int)

	insert into @AvlStock (PriceCode, ItemId, ItemDescription, ItemCategory, AvlStock, ExpStock, AllotedTripCnt, NotAllotedTripCnt)
	SELECT  s.PriceCode, ipc.ItemCode, SDS.fn_CamelCase(ipc.ItemDescription) AS ItemDescription, ipc.ItemCategory, ISNULL(s.CurrentGoodStock, 0) stockQty,0,0,0 
	FROM   DCMS.tblDistributorSystemStock AS s left OUTER JOIN --SDS.tblItemCodeMaster AS i ON s.ItemId = i.ItemId left OUTER JOIN
		   DCMS.tblItemPriceCodeMap AS ipc with(nolock) ON s.PriceCode = ipc.PriceCode
	WHERE (s.DistributorID = @DistributorID) and s.PriceCode in (select pricecode from sds.tblActiveItems where (isnull(Active,'N')='Y'))

	update @AvlStock set ExpStock= ISNULL(e.ExpStockQty, 0) from @AvlStock s inner join SDS.tblTripExpectedStock e 
	on s.PriceCode=e.PriceCode and (e.DistributorID = @DistributorID) and CAST(e.ExpStockDate AS date) = CAST(@TripDate AS date)

	insert into @AvlStock (PriceCode, ItemId, ItemDescription, ItemCategory, AvlStock, ExpStock, AllotedTripCnt, NotAllotedTripCnt)
	SELECT e.PriceCode, e.ItemId, SDS.fn_CamelCase(ipc.ItemDescription) AS ItemDescription, ipc.ItemCategory, 0, ISNULL(e.ExpStockQty, 0) ExpQty,0,0
	FROM SDS.tblTripExpectedStock AS e left OUTER JOIN SDS.tblItemCodeMaster AS i ON e.ItemId = i.ItemId 
		left OUTER JOIN DCMS.tblItemPriceCodeMap AS ipc with(nolock) ON e.PriceCode = ipc.PriceCode
	WHERE (e.DistributorID = @DistributorID) and CAST(e.ExpStockDate AS date) = CAST(@TripDate AS date) and e.PriceCode not in (select PriceCode from @AvlStock)

	update @AvlStock set AllotedTripCnt= isnull(d.TripOdrQty,0) from @AvlStock s inner join 
	(
		SELECT d.PriceCode, sum(isnull(d.OrderQuantity,0)) TripOdrQty	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
		WHERE (t.DistributorId = @DistributorID) AND (CAST(t.TripDate AS date) = CAST(@TripDate AS date)) 
		and isnull(d.OrderStatus,'0') in ('0','OPEN','AGEN','APRN') and isnull(t.TripStatus,'0') = 'Alloted'
		group by  t.DistributorId, d.PriceCode
	) d on s.PriceCode=d.PriceCode

	insert into @AvlStock (PriceCode, ItemId, ItemDescription, ItemCategory, AvlStock, ExpStock, AllotedTripCnt, NotAllotedTripCnt)
	SELECT d.PriceCode, 0, SDS.fn_CamelCase(ipc.ItemDescription), ipc.ItemCategory, 0, 0, sum(isnull(d.OrderQuantity,0)),0
	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
	left OUTER JOIN DCMS.tblItemPriceCodeMap AS ipc with(nolock) ON d.PriceCode = ipc.PriceCode	
	WHERE (t.DistributorId = @DistributorID) AND (CAST(t.TripDate AS date) = CAST(@TripDate AS date))
	and isnull(d.OrderStatus,'0') in ('0','OPEN','AGEN','APRN') and isnull(t.TripStatus,'0') = 'Alloted' and d.PriceCode not in (select PriceCode from @AvlStock)
	group by  t.DistributorId, d.PriceCode,ipc.ItemDescription,ipc.ItemCategory

	update @AvlStock set NotAllotedTripCnt= isnull(d.TripOdrQty,0) 
	from @AvlStock s inner join 
	(
		SELECT d.PriceCode, sum(isnull(d.OrderQuantity,0)) TripOdrQty	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
		WHERE (t.DistributorId = @DistributorID) AND (CAST(t.TripDate AS date) = CAST(@TripDate AS date)) 
		and isnull(d.OrderStatus,'0') in ('0','OPEN','AGEN','APRN') and isnull(t.TripStatus,'0') <> 'Alloted'
		group by  t.DistributorId, d.PriceCode
	) d on s.PriceCode=d.PriceCode
	
	insert into @AvlStock (PriceCode, ItemId, ItemDescription, ItemCategory, AvlStock, ExpStock, AllotedTripCnt, NotAllotedTripCnt)
	SELECT d.PriceCode, 0, SDS.fn_CamelCase(ipc.ItemDescription), ipc.ItemCategory, 0, 0, 0, sum(isnull(d.OrderQuantity,0))
	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId
	left OUTER JOIN DCMS.tblItemPriceCodeMap AS ipc with(nolock) ON d.PriceCode = ipc.PriceCode	
	WHERE (t.DistributorId = @DistributorID) AND (CAST(t.TripDate AS date) = CAST(@TripDate AS date))
	and isnull(d.OrderStatus,'0') in ('0','OPEN','AGEN','APRN') and isnull(t.TripStatus,'0') <> 'Alloted' and d.PriceCode not in (select PriceCode from @AvlStock)
	group by  t.DistributorId, d.PriceCode,ipc.ItemDescription,ipc.ItemCategory
	
	select id, PriceCode, ItemId, ItemDescription, ItemCategory, (isnull(AvlStock,0) + isnull(ExpStock,0) - isnull(AllotedTripCnt,0)) as AvailableStock, 
	isnull(NotAllotedTripCnt,0) as TotTripQty, (isnull(AvlStock,0) + isnull(ExpStock,0) - isnull(AllotedTripCnt,0)- isnull(NotAllotedTripCnt,0)) as AfterTrips from @AvlStock
	where (isnull(AvlStock,0) + isnull(ExpStock,0) - isnull(AllotedTripCnt,0)- isnull(NotAllotedTripCnt,0))<>0 and ItemCategory <>'E' and (itemId=2)
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorTradingAreaCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---   Get Distributor Trading area coordinates for display on map
--		sds.usp_GetDistributorTradingAreaCoordinates 14193

create proc [SDS].[usp_GetDistributorTradingAreaCoordinates]
@DistributorId int

as

SELECT DistributorId, AreaJSON, ActiveStatus, LastUpdateDateTime
FROM            SDS.tblDistributorTradingAreaCoordinates
where DistributorId=@DistributorId




GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorTradingAreaCoordinatesBySACode]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---   Get Distributor Trading area coordinates for display on map
--		sds.usp_GetDistributorTradingAreaCoordinatesBySACode 14193
CREATE PROC [SDS].[usp_GetDistributorTradingAreaCoordinatesBySACode]
@DistributorId nvarchar(max)--='14193,14145,15139,88888'

as
BEGIN
	set fmtonly off
	declare @str nvarchar(max)=''
	declare @result table (DistributorId int, AreaJSON varchar(max), ActiveStatus char(1), LastUpdateDateTime datetime)

	set @str=' SELECT DistributorId, AreaJSON, ActiveStatus, LastUpdateDateTime
	FROM            SDS.tblDistributorTradingAreaCoordinates
	where DistributorId in ('+@DistributorId+')'

	print @str
	insert into @result exec (@str)
	select * from @result
End


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorWiseActiveTripCase]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_GetDistributorWiseActiveTripCase]
--	Description		:	To Get  Distributor Wise Active Trip Case

--	Author			:	Swapnil

--	Date Modified	Modified By	     Modifications
--	26-FEb-2021		Swapnil			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetDistributorWiseActiveTripCase]
@DistributorId int ,
@TripDate datetime
AS
BEGIN
		Select DATC.PKId,DATC.DistributorId,DATC.TripDate,DATC.ActiveCaseId,DATC.ParameterId,DATC.Weightage,DATC.OnOffFlag,DATC.SequencePriority,
			   DATC.RefId,DATC.RefValue,
			   TCM.CaseName,tcm.ActiveForTrips,tcm.EditAllowedFlag,
			   Tp.ParameterName,tp.ParameterType,
			   TCSM.SourceName
		From SDS.tblDistributorWiseActiveTripCase DATC inner join
			 SDS.tblTripCaseMaster TCM on TCM.CaseId=DATC.ActiveCaseId inner join
			 SDS.tblTripParameter TP on   TP.ParameterId=DATC.ParameterId left outer join
			 SDS.tblTripCaseSourceMaster TCSM on TCSM.SourceId=DATC.RefId
		where DATC.DistributorId=@DistributorId and CAST(DATC.TripDate as date)=cast(@TripDate as date)
		order by DATC.TripDate,DATC.DistributorId,DATC.SequencePriority

END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorWiseActiveTripGeneration]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorWiseActiveTripGeneration]
AS
BEGIN
		
		Select TC.[PKId],TC.[DistributorId],TC.[CaseId],Tc.[ActiveFlag],TC.[LastUpdatedDate],
				zo.ZOCode,zo.ZOName,ro.ROCode,ro.ROName,sa.SACode,sa.SAName
			, DM.JDEDistributorCode,DM.DistributorName
			,'Case ' + CAST(TC.[CaseId] as varchar(2)) + ' : ' + TCM.CaseName as CaseName


		From SDS.tblDistributorwiseActiveTripGeneration TC inner join 
			[SDS].[tblTripCaseMaster] TCM on TC.CaseId=TCM.CaseId inner join 
			DCMS.tblDistributorMaster DM on DM.DistributorId=TC.DistributorId INNER JOIN
			[SDS].[tblSAMaster] sa WITH(NOLOCK) ON sa.SACode=DM.SACode INNER JOIN
			[SDS].[tblROMaster] ro WITH(NOLOCK) ON ro.ROCode=sa.ROCode INNER JOIN
			[SDS].[tblZOMaster] zo WITH(NOLOCK) ON zo.ZOCode=ro.ZOCode
		where Tc.[ActiveFlag]=1
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistributorWisePendingOrders]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetDistributorWisePendingOrders]
--zdeclare
@SACode nvarchar(20),
@Flag Nvarchar(20)
--set @SACode='338'; set @Flag='ALL'; --set @Flag='P'; set @Flag='D'

AS

BEGIN
	SET FMTONLY OFF
	declare @AvgSale decimal =0, @Str1 varchar(max)=''

	declare @SADestr table(id int identity,DistributorId int)
	insert into @SADestr(DistributorId) 
	SELECT DistributorId FROM DCMS.tblDistributorMaster 
	where SACode=@SACode and StatusCode='A' and DistributorName not like 'INACTIVE%' and DistributorName not like 'ND%'

	declare @c int=1, @c1 int, @Id int=''; select @c1=max(id) from @SADestr

	while (@c<=@c1)
	Begin
		set @Id=0; set @Id=(select DistributorId from @SADestr where id=@c)
		set @c=@c+1
	End

	If(isnull(@Flag,'ALL')='ALL')
	Begin
	print 1
		select sa.DistributorId, d.DistributorName, d.JDEDistributorCode, b.EntryDate, isnull(b.TotalPendingOrder,0) TotalPendingOrder, 
		cast( round(isnull(b.AvgSale,0),0) as float) AvgSale, CAST(CONVERT(DECIMAL(10,2),isnull(b.BackLog,0.00)) as float)  BackLog, b.pk_BacklogId
		from sds.tblDistributorWiseBacklog b inner join DCMS.tblDistributorMaster d with(nolock) on d.DistributorId= b.DistributorId
		inner join @SADestr sa on sa.DistributorId=d.DistributorId
		where d.SACode=@SACode and d.StatusCode='A' and d.DistributorName not like 'INACTIVE%' and d.DistributorName not like 'ND%' and isnull(b.TotalPendingOrder,0)>0
		and b.EntryDate=(select max(entrydate) from SDS.tblDistributorWiseBacklog where DistributorId=b.DistributorId)
		order by b.BackLog Desc
	End
	Else
	Begin
		select top 10 sa.DistributorId, d.DistributorName, d.JDEDistributorCode, b.EntryDate, isnull(b.TotalPendingOrder,0) TotalPendingOrder, 
		cast( round(isnull(b.AvgSale,0),0) as float) AvgSale, CAST(CONVERT(DECIMAL(10,2),isnull(b.BackLog,0.00)) as float) BackLog, b.pk_BacklogId
		from sds.tblDistributorWiseBacklog b inner join DCMS.tblDistributorMaster d with(nolock) on d.DistributorId= b.DistributorId
		inner join @SADestr sa on sa.DistributorId=d.DistributorId
		where d.SACode=@SACode and d.StatusCode='A' and d.DistributorName not like 'INACTIVE%' and d.DistributorName not like 'ND%' and isnull(b.TotalPendingOrder,0)>0
		and b.EntryDate=(select max(entrydate) from SDS.tblDistributorWiseBacklog where DistributorId=b.DistributorId)
		order by 
			case @Flag when 'D' then b.BackLog end desc,
			case @Flag when 'P' then b.BackLog end Asc
	End
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistrictWiseAreaJSON]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [SDS].[usp_GetDistrictWiseAreaJSON]

@DistrictCode varchar(30) 

as

BEGIN

	SELECT  a.AreaCode, SDS.fn_CamelCase(a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,cm.AreaJSON
	FROM  SDS.tblDistrictMaster AS d WITH (NOLOCK) INNER JOIN
		  SDS.tblTalukaMaster AS t WITH (NOLOCK) ON t.DistrictCode = d.DistrictCode INNER JOIN 
		  SDS.tblAreaMaster AS a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN
		  SDS.tblGeoCoordinateMaster cm WITH (NOLOCK) ON cm.AreaCode=a.AreaCode
	WHERE (d.DistrictCode = @DistrictCode)
	ORDER BY AreaName

END




GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistTalukaMstByDistributorId]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetDistTalukaMstByDistributorId
--	Description		:	To Dist Taluka Master By DistributorId

--	Author			:	Swapnil

--				    Modifications
--	06-12-2019		Swapnil			Created
**************************************************************/

CREATE  PROCEDURE [SDS].[usp_GetDistTalukaMstByDistributorId]
@DistributorId  int
AS
BEGIN
	
		Select	DistributorId,DDT.[TalukaCode] ,tm.[TalukaName],DM.[DistrictCode],DM.[DistrictName],DM.[StateCode]

		From	[SDS].[tblDistributorDeliveryTaluka] DDT inner join
				[SDS].[tblTalukaMaster] TM on DDT.[TalukaCode]=tm.[TalukaCode] inner join
				[SDS].[tblDistrictMaster] DM on DDT.[DistrictCode]=DM.[DistrictCode]
		where	 (DistributorId=@DistributorId OR  @DistributorId=0) 
	

END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetDistWiseCCLList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- [SDS].[usp_GetDistWiseCCLList] 6659
CREATE PROC [SDS].[usp_GetDistWiseCCLList]
--declare
 @DistributorID INT
-- SET @DistributorID=6659
AS 
BEGIN
	select DistributorID,UniqueConsumerId,Latitude,Longitude,ClusterId,AreaRefNo
	from sds.tblConsumerDetails with (nolock) where DistributorID=@DistributorID 
	and Latitude is not null and Longitude is not null and [Source] is not null
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetEmailDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetEmailDetails] 
as
Begin
      select s.Name,c.EmpEmail Email,c.OfficerRole,c.EmailConfigurationId,c.EmailForId Id,c.EmailForId from [SDS].[tblEmailConfiguration] c 
	  inner join [Sds].[tblEmailForStage] s on s.EmailForId =c.EmailForId
End

GO
/****** Object:  StoredProcedure [SDS].[usp_GetEmailSchSendDate]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetEmailSchSendDate]
@Key varchar(50)
AS
BEGIN
	
	IF(@Key = '')
	BEGIN
	SELECT [Key],[Value],Info,LastUpdatedOn FROM [SDS].[tblAppConfiguration] 
	END
	ELSE
	BEGIN
	SELECT [Key],[Value],Info,LastUpdatedOn FROM [SDS].[tblAppConfiguration] WHERE [Key]=@Key
	END
		
END



GO
/****** Object:  StoredProcedure [SDS].[usp_getGoogleAPIHitsHIstory]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_getGoogleAPIHitsHIstory 341,'','2020-05-17','2020-06-01'

CREATE proc [SDS].[usp_getGoogleAPIHitsHIstory]
--declare
@LoginUserRefId nvarchar(20),
@GoogleAPIName nvarchar(500),
@fromDate datetime,
@ToDate datetime

--set @LoginUserRefId=0; set @GoogleAPIName=''; set @fromDate='2020-05-17'; set @ToDate='2020-06-01'
as

SELECT a.LoginUserRefId, case when a.RoleId=3 then d.DistributorName when a.RoleId=7 then s.SAName else '' end as UserName, 
GoogleAPIName, PageName, EventName, sum(HitsCount) NoOfHits
FROM SDS.tblGoogleAPIHitsHIstory a left outer join dcms.tblDistributorMaster d on a.LoginUserRefId=d.DistributorId and a.RoleId=3
	left outer join sds.tblSAMaster s on a.LoginUserRefId=s.SACode and a.RoleId=7
where cast(EntryDate as date) between cast(@fromDate as date) and cast(@ToDate as date)
and (a.LoginUserRefId=@LoginUserRefId or isnull(nullif(@LoginUserRefId,0),'')='') 
and (a.GoogleAPIName=ltrim(rtrim(isnull(@GoogleAPIName,''))) or ltrim(rtrim(isnull(@GoogleAPIName,'')))='')
group by a.LoginUserRefId, d.DistributorName,s.SAName,a.RoleId, GoogleAPIName, PageName, EventName


GO
/****** Object:  StoredProcedure [SDS].[usp_GetGroupCodeData]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Proc [SDS].[usp_GetGroupCodeData]

as
Begin
	select DistributorId, GroupCode from DCMS.tblDistributorGroupDetails where DistributorId in (select DistributorId from HPCLDCMS.INTERFACE.tblSDSDealers where DistributorId=14193)
End
GO
/****** Object:  StoredProcedure [SDS].[usp_GetInvoiceDetailsByInvoiceNo]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetInvoiceDetailsByInvoiceNo
--	Description		:	Get Invoice Details By InvoiceNo

--	Author			:	Swapnil

--	Date Modified		Modified By	     Modifications
--	25-06-2019		swapnil			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetInvoiceDetailsByInvoiceNo]
@InvoiceNo  VARCHAR(100),
@DistributorId int
AS
BEGIN



	IF(PATINDEX('%[a-z]%', @InvoiceNo) = 1)
	BEGIN
		select top 1 [SalesOrderNo],[SalesOrderType],[SalesOrderCompany],[LineNumber],[SalesOrderDate],ID.[InvoiceNo]
			  ,[InvoiceLineNumber],[InvoiceType],[InvoiceCompany],ID.[InvoiceDate],[InvoiceCreationDateAndTimeStamp]
			  ,[EMRReasonCode],[EMRApprovalDate],[ShippingLocation],IPCM.[ItemCode],[ItemGroup],[ShippedQuantity],[UOM]
			  ,[UnitPriceInINR],[TotalPriceInINR],[OriginalOrderNo],[OriginalOrderType],[OriginalOrderCompany],[LineNumber1]
			  ,[SoldTo],[ShipTo],[VehicleNo],[DeliveryMode],[IndentRefNo]
			  ,[PriceCode1],[InsertDateTime],[TransporterCode],SDS.fn_CamelCase([TransporterName]) as TransporterName
			  ,IPCM.ItemDescription,IPCM.ItemShortDescription,
			  (CASE When ITH.InvoiceNo is null then 'N' Else 'Y' End)as IsUpload 

			from [HPCLDCMS].[DCMS].[tblInvoiceData] ID inner join 
			[HPCLDCMS].[DCMS].[tblItemPriceCodeMap] IPCM on ID.[ItemCode]=IPCM.[ItemCode] and  ID.[PriceCode1]=IPCM.[PriceCode] left outer join
			[SDS].[tblItemReceiptHdr] ITH on ITH.InvoiceNo=ID.InvoiceNo
			where ID.VehicleNo=@InvoiceNo and ID.[SoldTo]=@DistributorId and ITH.InvoiceNo is null
			order by ID.[InvoiceDate]
	END
	ELSE
	BEGIN

		select  [SalesOrderNo],[SalesOrderType],[SalesOrderCompany],[LineNumber],[SalesOrderDate],ID.[InvoiceNo]
			  ,[InvoiceLineNumber],[InvoiceType],[InvoiceCompany],ID.[InvoiceDate],[InvoiceCreationDateAndTimeStamp]
			  ,[EMRReasonCode],[EMRApprovalDate],[ShippingLocation],IPCM.[ItemCode],[ItemGroup],[ShippedQuantity],[UOM]
			  ,[UnitPriceInINR],[TotalPriceInINR],[OriginalOrderNo],[OriginalOrderType],[OriginalOrderCompany],[LineNumber1]
			  ,[SoldTo],[ShipTo],[VehicleNo],[DeliveryMode],[IndentRefNo]
			  ,[PriceCode1],[InsertDateTime],[TransporterCode],SDS.fn_CamelCase([TransporterName]) as TransporterName
			  ,IPCM.ItemDescription,IPCM.ItemShortDescription,
			  (CASE When ITH.InvoiceNo is null then 'N' Else 'Y' End)as IsUpload 

			from [HPCLDCMS].[DCMS].[tblInvoiceData] ID inner join 
			[HPCLDCMS].[DCMS].[tblItemPriceCodeMap] IPCM on ID.[ItemCode]=IPCM.[ItemCode] and  ID.[PriceCode1]=IPCM.[PriceCode] left outer join
			[SDS].[tblItemReceiptHdr] ITH on ITH.InvoiceNo=ID.InvoiceNo
			where ID.InvoiceNo=@InvoiceNo and ID.[SoldTo]=@DistributorId and ITH.InvoiceNo is null
			
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetItemDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,Rahul>
-- Create date: <Create Date,13-01-2018,>
-- Description:	<Description,to get Item details from Table against respective distributor,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetItemDetails]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
    
	 SELECT ItemID,ItemDescription,ItemShortDescription,PackageCode,ItemPrice,Active,LastUpdateDateTime
     FROM SDS.tblItemCodeMaster where Active = 'Y'
	
END
	





GO
/****** Object:  StoredProcedure [SDS].[usp_GetItemListwithPrice]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetItemListwithPrice] --14193
--declare
@DistributorId int	
--set @DistributorId=14193
AS
BEGIN
	SELECT i.ItemID,i.ItemDescription,i.ItemShortDescription,i.Active ActiveFlag,i.PackageCode
    FROM  SDS.tblItemCodeMaster i 
    WHERE i.Active='Y'  --p.DistributorId = @DistributorId 
	ORDER BY i.ItemDescription
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetLatestVitranGCForInsideChk]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- SDS.usp_GetLatestVitranGCForInsideChk 14193
CREATE Proc [SDS].[usp_GetLatestVitranGCForInsideChk]
--Declare 
@DistributorId int--=14145

as

BEGIN

	--Select cd.UniqueConsumerId, cd.Source, cd.Latitude, cd.Longitude, dt.UpdatedDate, cd.AreaRefNo, acm.AreaClusterId as ClusterId, 0 as Distance
	
	--from SDS.tblConsumerLocationHistoryNew cl inner join #tbldt dt on dt.UniqueConsumerId=cd.UniqueConsumerId
	--LEFT OUTER JOIN SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cd.AreaRefNo
	--where cd.DistributorID=@DistributorId and NewSource in ('VITRANDC','VITRANCAP','VITRANSAFE')  and IsV1Received=1
	
	Select cl.UniqueConsumerId,cl.VitranLatitude1 as Latitude,cl.VitranLongitude1 as Longitude,cl.VitranLastUpdateDateTime1 as UpdatedDate,
		cd.AreaRefNo,acm.AreaClusterId as ClusterId 
	From SDS.tblConsumerLocationHistoryNew cl inner join SDS.tblConsumerDetails cd on cd.DistributorID=cl.DistributorID and cd.UniqueConsumerId=cl.UniqueConsumerId
	LEFT OUTER JOIN SDS.tblAreaClusterMapping acm WITH(NOLOCK) ON acm.AreaRefNo=cd.AreaRefNo
	where cd.DistributorID=@DistributorId and cl.VitranLatitude1 is not null and cl.VitranLongitude1 is not null
	and cl.VitranLastUpdateDateTime1>=isnull(cl.VitranLat1InsideChkDate,'2024-02-01')

END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetLocationDetailsForPOD]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetLocationDetailsForPOD 15139,12011513900000006, '2020-09-03'

CREATE PROCEDURE [SDS].[usp_GetLocationDetailsForPOD]
--declare
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@TripDate datetime
--set @DistributorId=15139; set @TripDate='2020-09-03'; set @DeliveryBoyId=12011513900000006
AS
BEGIN
SET FMTONLY OFF
	
	--SELECT TPD.SequenceNo,da.AreaName,pod.AreaRefNo, pod.Latitute as Latitude, pod.Longitute AS Longitude
		
	--	FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
	--	SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
	--	left outer join sds.tblCDCMSAreaPODDetails pod with (NOLOCK) on TPD.AreaRefNo=pod.AreaRefNo and pod.DistributorId=@DistributorId
	--	left outer join dcms.tblDistributorAreaMaster da on TPD.AreaRefNo=da.AreaRefNo
	--WHERE	TP.DistributorId=@DistributorId and  ( TP.StaffRefNo=@DeliveryBoyId OR 0=@DeliveryBoyId)
	--	and CAST(TP.TripDate as date)=CAST(ISNULL (@TripDate,TP.TripDate) as date) and TPD.IsPODHD='POD'

	DECLARE @GroupCode VARCHAR(3)='', @TotCount int=0, @strquery varchar(max)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#TotCount') IS NOT NULL DROP TABLE #TotCount
	create table #TotCount(SequenceNo int,AreaName varchar(500),AreaRefNo numeric(18,0),Latitude varchar(50),Longitude varchar(50),TotalCustomer int)

		set @strquery=( 'insert into #TotCount SELECT TPD.SequenceNo,da.AreaName,pod.AreaRefNo, pod.Latitute as Latitude, pod.Longitute AS Longitude
		,COUNT(DISTINCT o.OrderRefNo) TotalCustomer
		FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
		SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
		left outer join sds.tblCDCMSAreaPODDetails pod with (NOLOCK) on TPD.AreaRefNo=pod.AreaRefNo and pod.DistributorId='+convert(nvarchar(25),@DistributorId)+'
		left outer join dcms.tblDistributorAreaMaster da on TPD.AreaRefNo=da.AreaRefNo
		left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o with (NOLOCK) on TPD.AreaRefNo=o.AreaRefNo
		left outer join sds.tblConsumerDetails CD with (NOLOCK) on o.UniqueConsumerId = CD.UniqueConsumerId
		left outer JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode
	WHERE	TP.DistributorId='+convert(nvarchar(25),@DistributorId)+' and  ( TP.StaffRefNo='+convert(nvarchar(25),@DeliveryBoyId)+' OR 0='+convert(nvarchar(25),@DeliveryBoyId)+')  
		and CAST(TP.TripDate as date)=CAST(ISNULL('''+ CONVERT(nvarchar(50), @TripDate,101)+''',TP.TripDate) as date) and TPD.IsPODHD=''POD''
		and CD.ConsumerStatus=''Active'' and o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
		and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
		GROUP BY TPD.SequenceNo,da.AreaName,pod.AreaRefNo, pod.Latitute, pod.Longitute 
		')
		
		print @strquery
		exec(@strquery)
		select * from #TotCount
		drop table #TotCount	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetLogDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetLogDetails]

as

Begin

	SELECT top 200 LogID, DistributorId, LogFor, LogData, LogStatus, LogDatetime, LogException
	FROM SDS.tblAuditLog order by LogDateTime desc

End



SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [SDS].[usp_GetMajorAreaCoordinates]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		 sds.usp_GetMajorAreaCoordinates 14193

CREATE proc [SDS].[usp_GetMajorAreaCoordinates]
--declare
@DistributorId int -- =15139
as
BEGIN

--SELECT  a.AreaCode, SDS.fn_CamelCase(a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,AreaJSON,t.TalukaCode
--FROM  SDS.tblTalukaMaster t WITH (NOLOCK) INNER JOIN
--      SDS.tblAreaMaster a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN 
--      SDS.tblGeoCoordinateMaster GCM with(nolock) on GCM.AreaCode = a.AreaCode INNER JOIN 
--      SDS.tblDistributorDeliveryTaluka da WITH (NOLOCK) ON t.TalukaCode = da.TalukaCode
--WHERE (da.DistributorId = @DistributorId)
--ORDER BY t.TalukaCode

	SELECT  a.AreaCode, SDS.fn_CamelCase(a.AreaName + ' (' + t.TalukaName + ')') AS AreaName,AreaJSON,t.TalukaCode,IsMuncipleCorp
	FROM  SDS.tblTalukaMaster t WITH (NOLOCK) INNER JOIN
		  SDS.tblAreaMaster a WITH (NOLOCK) ON t.TalukaCode = a.TalukaCode INNER JOIN 
		  SDS.tblGeoCoordinateMaster GCM with(nolock) on GCM.AreaCode = a.AreaCode INNER JOIN 
		  SDS.tblDistributorDeliveryTaluka da WITH (NOLOCK) ON t.TalukaCode = da.TalukaCode INNER JOIN
		  SDS.tblDistrictMaster dm WITH (NOLOCK) ON dm.DistrictCode=t.DistrictCode
	WHERE (da.DistributorId = @DistributorId)
	ORDER BY a.AreaCode

END




GO
/****** Object:  StoredProcedure [SDS].[usp_GetOfficerAndEmailPurposeDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE proc [SDS].[usp_GetOfficerAndEmailPurposeDetails] 
@DetailFlag varchar(10)	-- 'ALL' for all
as
Begin
   IF(@DetailFlag = 'CCPerson')

     Begin
      SELECT cast(EmailCCPersonId as int ) as PersonId ,Name as PersonName ,EMAIL FROM [SDS].[tblEmailCCPerson]
     End

    ELSE IF(@DetailFlag = 'Officer')

      Begin
      SELECT EmployeeNo as PersonId ,EmployeeName as PersonName,EMAIL FROM [SDS].[tblOfficerDetails]
     End

   ELSE

    Begin
      SELECT EmailForId as PersonId ,Name as PersonName,null as Email FROM [SDS].[tblEmailForStage] 
    End
End



GO
/****** Object:  StoredProcedure [SDS].[usp_GetOfficerDetailsbyRole]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Rahul G>
-- Create date: <28-10-2020>
-- Description:	<Get Officer Details by Role>
-- =============================================
create PROCEDURE [SDS].[usp_GetOfficerDetailsbyRole]
--declare
	@Role varchar(25)
	--set @Role='ZO'
AS
BEGIN
	SELECT OD.AreaCode Code, case OD.OfficerRole when 'ZO' then ZM.ZOName when 'SO' then SA.SAName when 'RO' then RO.ROName else '' end AS Name, 
		OD.EmployeeNo, OD.EmployeeName, OD.MobileNo, OD.Email, OD.AreaName,  ISNULL(OE.Active,'N') AS Status
	FROM SDS.tblOfficerDetails AS OD left outer JOIN SDS.tblZOMaster AS ZM 
		ON OD.AreaCode = ZM.ZOCode AND OfficerRole='ZO' and ZM.ActiveFlag='Y' left outer JOIN
		SDS.tblSAMaster SA ON OD.AreaCode = SA.SACode AND OfficerRole='SO' and SA.ActiveFlag='Y' 
		left outer JOIN SDS.tblROMaster RO ON OD.AreaCode = RO.ROCode AND OfficerRole='RO' and RO.ActiveFlag='Y' 
		left outer JOIN SDS.tblOfficerEmailData OE ON OE.Code=OD.AreaCode and OE.Active= 'Y'
	WHERE OD.OfficerRole=@Role and OE.Code is null

	Union all 

	SELECT OD.AreaCode Code, case OD.OfficerRole when 'ZO' then ZM.ZOName when 'SO' then SA.SAName when 'RO' then RO.ROName else '' end AS Name, 
		OD.EmployeeNo, OD.EmployeeName, OD.MobileNo, OD.Email, OD.AreaName,  ISNULL(OE.Active,'N') AS Status
	FROM SDS.tblOfficerDetails AS OD left outer JOIN SDS.tblZOMaster AS ZM 
		ON OD.AreaCode = ZM.ZOCode AND OfficerRole='ZO' and ZM.ActiveFlag='Y' left outer JOIN
		SDS.tblSAMaster SA ON OD.AreaCode = SA.SACode AND OfficerRole='SO' and SA.ActiveFlag='Y' 
		left outer JOIN SDS.tblROMaster RO ON OD.AreaCode = RO.ROCode AND OfficerRole='RO' and RO.ActiveFlag='Y' 
		left outer JOIN SDS.[tblOfficerEmailData] OE ON OE.Code=OD.AreaCode and OE.Active= 'Y'
	WHERE OD.OfficerRole=@Role and OE.Code is not null
 END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetOfficerDetailsbyStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Rahul G>
-- Create date: <29-10-2020>
-- Description:	<Get Officer Details by Code>
-- =============================================
create PROCEDURE [SDS].[usp_GetOfficerDetailsbyStatus]
--declare
	@Flag varchar(25),
	@Role varchar(20)
	--set @Role='ZO'
AS
BEGIN
	SELECT Code,Name,EmployeeNo,EmployeeName,MobileNo,Email,OfficerRole,Active
	FROM SDS.tblOfficerEmailData
	WHERE Active=@Flag and OfficerRole=@Role
 END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetOfficerDetailsForEmail]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetOfficerDetailsForEmail] 
@role varchar(10),	
@EmailFor int -- 'ALL' for all
as

    Begin
      select (case when isnull(e.EmpNo,0)>0 then 1 else 0 end) as IsSelect,  f.EmployeeNo as PersonId ,f.EmployeeName as PersonName,f.EMAIL,f.OfficerRole ,e.EmailForId
        from sds.tblOfficerDetails f left outer join sds.tblEmailConfiguration e on f.EmployeeNo=e.EmpNo
		and e.EmailForId =@EmailFor 
		 where (f.OfficerRole =@role or upper(@role)='ALL')
     End



GO
/****** Object:  StoredProcedure [SDS].[usp_GetOrderDetailsClusterwise_Distributorwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	sds.usp_GetOrderDetailsClusterwise_Distributorwise 14193,0

CREATE proc [SDS].[usp_GetOrderDetailsClusterwise_Distributorwise]
--declare
@DistributorID int,
@ClusterId int
--set @DistributorID=15139; set @ClusterId=0; 

as

set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM HPCLDCMS.DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#TotalOdr') IS NOT NULL DROP TABLE #TotalOdr
	create table #TotalOdr(ClusterId int, PendingBokng int)
	IF OBJECT_ID('tempdb..#TotDelivered') IS NOT NULL DROP TABLE #TotDelivered
	create table #TotDelivered(ClusterId int, TotalDelivered int, AvgDailySale decimal(18,2))
	IF OBJECT_ID('tempdb..#TotCanceled') IS NOT NULL DROP TABLE #TotCanceled
	create table #TotCanceled(ClusterId int, TotalCanceled int) 
	
	declare @Str varchar(max)= 'insert into #TotalOdr
	select ac.areaclusterId, count(OrderRefNo) PendingBokng  
	from sds.tblAreaClusterMapping ac left outer join HPCLDCMS.DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo
	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
	group by ac.areaclusterId'
	print (@Str)
	exec (@Str)
	
	declare @Str1 varchar(max)= 'insert into #TotDelivered
	select ac.areaclusterId, count(o.OrderRefNo)+isnull(TrpSale,0) TotalDelivered,
	round((count(o.OrderRefNo)+ isnull(TrpSale,0))/(select convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),2) AvgSale
	from sds.tblAreaClusterMapping ac left outer join HPCLDCMS.DCMS.tblRefillOrderDtls'+@GroupCode+'  o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
	left outer join (
		select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) TrpSale
		from sds.tblAreaClusterMapping ac left outer join HPCLDCMS.DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
		where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
		and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
		and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
		group by ac.DistributorId, ac.areaclusterId
	) r2 on o.DistributorId=r2.DistributorId and ac.areaclusterId=r2.areaclusterId
	
	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
	and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	group by ac.areaclusterId,TrpSale'
	print (@Str1)
	exec (@Str1)

	declare @Str2 varchar(max)= 'insert into #TotCanceled
	select ac.areaclusterId, count(o.OrderRefNo)+isnull(TrpSale,0) TotalCanceled
	from sds.tblAreaClusterMapping ac left outer join HPCLDCMS.DCMS.tblRefillOrderDtls'+@GroupCode+'  o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
	left outer join (
		select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) TrpSale
		from sds.tblAreaClusterMapping ac left outer join HPCLDCMS.DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
		where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
		and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
		and (o.CancelDate IS NOT NULL)
		group by ac.DistributorId, ac.areaclusterId
	) r2 on o.DistributorId=r2.DistributorId and ac.areaclusterId=r2.areaclusterId
	
	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
	and (o.CancelDate IS NOT NULL)
	group by ac.areaclusterId,TrpSale'
	print (@Str2)
	exec (@Str2)

	select c.ClusterId, sds.fn_CamelCase(c.AreaClusterName) AreaClusterName, isnull(o.PendingBokng,0) PendingBokng, 
	isnull(s.TotalDelivered,0) TotalDelivered,isnull(cl.TotalCanceled,0) TotalCanceled,
	 isnull(s.AvgDailySale,0) AvgDailySale,round(Isnull(isnull(o.PendingBokng,0)/isnull(nullif(s.AvgDailySale,0),1),0),2) BackLog  
	from sds.tblClusterMaster c left outer join #TotalOdr o on c.ClusterId=o.ClusterId 
	left outer join #TotDelivered s on c.ClusterId=s.ClusterId
	left outer join #TotCanceled cl on cl.ClusterId=c.ClusterId
	where c.DistributorId=@DistributorID and c.IsActive='Y'

drop table #TotalOdr
drop table #TotDelivered
drop table #TotCanceled


GO
/****** Object:  StoredProcedure [SDS].[usp_GetOrderHistoryByOrderStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--SDS.usp_GetOrderHistoryByOrderStatus 14145, 'All',0,'2020-01-01','2020-01-31'
CREATE PROCEDURE [SDS].[usp_GetOrderHistoryByOrderStatus]
--declare
@DistributorId int ,
@OrderStatus varchar(100) ,
@areaclusterId INT ,
@FromDate Datetime ,
@ToDate Datetime
--set @DistributorId=14193; set @OrderStatus='All'; set @areaclusterId=0; set @FromDate='2020-01-01'; set @ToDate='2020-01-31';

AS
BEGIN
	set fmtonly off
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--print @GroupCode

	declare @strquery varchar(max),@Condition varchar(max), @DateCondition nvarchar(max) 

	if (@FromDate is null or @ToDate is null) begin set @DateCondition='' end
	else begin set @DateCondition=' AND CAST(o.OrderDate as DATE) between Cast('''+convert(nvarchar(30),@FromDate,101)+''' as date)  and cast('''+convert(nvarchar(30),@ToDate,101)+''' as date)' end
	print @DateCondition

	SET @Condition=CASE WHEN @OrderStatus='Pending' THEN 'and o.OrderStatusCode IN (''OPEN'',''APRN'',''AGEN'')' 
						WHEN @OrderStatus='Completed' THEN 'and  O.OrderStatusCode=''DLVD'' and c.ConsumerNo is not null'
						WHEN @OrderStatus='TodayPending' THEN 'and (o.OrderStatusCode IN (''OPEN'',''APRN'',''AGEN'') OR (O.OrderStatusCode=''DLVD'' and CAST(o.ActualDeliveryDate as date)=CAST(GETDATE() as date))) and c.ConsumerNo is not null' 
						WHEN @OrderStatus='All' THEN '' ELSE 'not match' END


	IF OBJECT_ID('tempdb..#tblOdrDetails') IS NOT NULL DROP TABLE #tblOdrDetails

	CREATE TABLE #tblOdrDetails(OrderRefNo numeric(17, 0),OrderDate datetime, DistributorId int,AreaClusterId int,UniqueConsumerId numeric(17, 0),
	OrderNo int,OrderTypeCode varchar(5),OrderStatusCode varchar(100),ActualOrderStatus varchar(max),ActualDeliveryDate datetime,ConsumerNo int,
	ConsumerName nvarchar(100),Address varchar(max),AreaRefNo numeric(17, 0),AreaName nvarchar(200),Pin numeric(6, 0),MobileNo numeric(10, 0),
	Latitude nvarchar(50),Longitude nvarchar(50),PlaceId nvarchar(max),cSource nvarchar(50),SequenceNo int,TripNo varchar(10))

	set @strquery=('
	INSERT INTO #tblOdrDetails (OrderRefNo ,OrderDate, DistributorId,AreaClusterId ,UniqueConsumerId,
	OrderNo ,OrderTypeCode ,OrderStatusCode ,ActualOrderStatus,ActualDeliveryDate,ConsumerNo,ConsumerName ,Address,
	AreaRefNo ,AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,PlaceId, cSource,SequenceNo,TripNo)

	SELECT o.OrderRefNo,o.OrderDate, ac.DistributorId, ac.AreaClusterId, o.UniqueConsumerId,o.OrderNo, o.OrderTypeCode, o.OrderStatusCode,
		(CASE WHEN O.OrderStatusCode=''DLVD'' then ''Order_Delivered'' 
		WHEN O.OrderStatusCode<>''DLVD'' and TP.ActualDeliveryDate  is not null THEN ''Order_Delivered''
		WHEN O.OrderStatusCode<>''DLVD'' and TP.OrderRefNo  is null THEN ''Pending_Order'' ELSE ''Trip_Generated''  END) as ActualOrderStatus
		,o.ActualDeliveryDate,c.ConsumerNo, c.ConsumerName, c.Address, c.AreaRefNo, c.AreaName, c.Pin, c.MobileNo,
		c.Latitude, c.Longitude,c.PlaceId, c.Source,tp.SequenceNo,tpl.TripNo

	FROM DCMS.tblRefillOrderDtls'+@GroupCode +' AS o WITH (NOLOCK) inner join
		SDS.tblConsumerDetails AS c ON o.UniqueConsumerId = c.UniqueConsumerId inner join
		SDS.tblAreaClusterMapping AS ac ON o.AreaRefNo = ac.AreaRefNo left outer join
		SDS.tblTripPlanningDetails AS TP on TP.OrderRefNo=o.OrderRefNo AND CAST(TP.CreatedDate as date)=CAST(GETDATE() as date) INNER JOIN 
		SDS.tblTripPlanning tpl ON tpl.TripId=TP.TripId 
		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	where ac.DistributorId='+convert(nvarchar(30),@DistributorId)+'  and (areaclusterId ='+convert(nvarchar(30),@areaclusterId)+
	'  or 0='+convert(nvarchar(30),@areaclusterId)+') '+@Condition+' ' + @DateCondition)

	print @strquery
	exec (@strquery)

	set @strquery=('
	INSERT INTO #tblOdrDetails (OrderRefNo ,OrderDate, DistributorId,AreaClusterId ,UniqueConsumerId,
		OrderNo ,OrderTypeCode ,OrderStatusCode ,ActualOrderStatus,ActualDeliveryDate,ConsumerNo,ConsumerName ,Address,
		AreaRefNo ,AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,PlaceId,cSource,SequenceNo,TripNo)
		SELECT o.OrderRefNo,o.OrderDate, ac.DistributorId, ac.AreaClusterId, o.UniqueConsumerId,o.OrderNo, o.OrderTypeCode, o.OrderStatusCode,
		(CASE WHEN O.OrderStatusCode=''DLVD'' then ''Order_Delivered'' 
		WHEN O.OrderStatusCode<>''DLVD'' and TP.ActualDeliveryDate  is not null THEN ''Order_Delivered''
		WHEN O.OrderStatusCode<>''DLVD'' and TP.OrderRefNo  is null THEN ''Pending_Order'' ELSE ''Trip_Generated''  END) as ActualOrderStatus
		,o.ActualDeliveryDate,c.ConsumerNo, c.ConsumerName, c.Address, c.AreaRefNo, c.AreaName, c.Pin, c.MobileNo,
		c.Latitude, c.Longitude,c.PlaceId, c.Source,tp.SequenceNo,tpl.TripNo
	FROM DCMS.tblRefillOrderDtls AS o WITH (NOLOCK) inner join SDS.tblConsumerDetails AS c ON o.UniqueConsumerId = c.UniqueConsumerId 
		inner join SDS.tblAreaClusterMapping AS ac ON o.AreaRefNo = ac.AreaRefNo left outer join SDS.tblTripPlanningDetails AS TP on TP.OrderRefNo=o.OrderRefNo 
		AND CAST(TP.CreatedDate as date)=CAST(GETDATE() as date) INNER JOIN SDS.tblTripPlanning tpl ON tpl.TripId=TP.TripId 
		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	where ac.DistributorId='+convert(nvarchar(30),@DistributorId)+'  
		and (areaclusterId ='+convert(nvarchar(30),@areaclusterId)+'  or 0='+convert(nvarchar(30),@areaclusterId)+') '+@Condition+' ' + @DateCondition)

	print @strquery
	exec (@strquery)

	select distinct  OrderRefNo ,OrderDate, DistributorId,AreaClusterId ,UniqueConsumerId,
	OrderNo ,OrderTypeCode ,OrderStatusCode,SDS.fn_CamelCase(ActualOrderStatus) ActualOrderStatus,
	ActualDeliveryDate,ConsumerNo,SDS.fn_CamelCase(ConsumerName) ConsumerName ,SDS.fn_CamelCase(Address) Address,
	AreaRefNo ,SDS.fn_CamelCase(AreaName)AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,PlaceId,cSource,SequenceNo,TripNo
	from #tblOdrDetails 
	order by OrderDate desc,OrderNo desc
	drop table #tblOdrDetails

END





GO
/****** Object:  StoredProcedure [SDS].[usp_GetOrderStatus]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_GetOrderStatus]       
--declare      
@DistributorCode nvarchar(20),      
@UniqueConsumerId numeric(17,0)      
 --set @DistributorCode='41049924'; set @UniqueConsumerId=9100912800047411;       
AS      
BEGIN      

set FMTONLY OFF  
	Declare @GroupCode VARCHAR(3)='', @Str varchar(max)='',@IsPaymentReceived VARCHAR(3)='', @tripdt datetime=getdate(), @OrderRefNo numeric(17,0),@DistributorId int

	select @DistributorId=DistributorId from DCMS.tblDistributorMaster where JDEDistributorCode=@DistributorCode     

	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  

	IF OBJECT_ID('tempdb..#Odr') IS NOT NULL DROP TABLE #Odr       
	create table #Odr(DistributorId int,UniqueConsumerId numeric(17, 0),OrderRefNo numeric(17, 0), OrderDate datetime, OrderStatusCode nvarchar(20),  
	TransactionReferenceNumber nvarchar(50),ActualDeliveryDate datetime,TripId bigint,TripDate datetime, Latitude varchar(50),Longitude varchar(50),CashMemoDate datetime,DAC nvarchar(20)) 
 
	SET @Str = 'INSERT INTO #Odr(DistributorID, UniqueConsumerId, OrderRefNo, OrderDate, OrderStatusCode, TransactionReferenceNumber, ActualDeliveryDate, CashMemoDate,DAC)
				SELECT TOP 1 o.DistributorID, o.UniqueConsumerId,o.OrderRefNo,ISNULL(su.OrderDate,ISNULL(o.ActualOrderDate,o.OrderDate)) as OrderDate,o.OrderStatusCode,rpd.TransactionReferenceNumber,
                CASE WHEN SU.DeliveryDate is not null THEN SU.DeliveryDate 
					 WHEN o.ActualDeliveryDate IS NOT NULL THEN CONVERT(VARCHAR, o.ActualDeliveryDate, 120) + '' '' + CONVERT(VARCHAR, o.LastUpdateDateTime, 108) 
					 ELSE NULL END AS DeliveryTimeStamp,
                o.InterfaceBookingDate,o.OTP
				FROM HPCLDCMS.DCMS.tblRefillOrderDtls' + @GroupCode + ' o WITH (NOLOCK)
                LEFT OUTER JOIN HPCLDCMS.esv.tblRefillPaymentDtls rpd WITH (NOLOCK) ON o.OrderRefNo = rpd.OrderRefNo AND rpd.PaymentStatus = ''SUCCESS''
				Left outer join HPCLDCMS.DCMS.tblSuvidhaClubOrders su with (NOLOCK) on o.OrderRefNo=su.OrderRefNo
			    WHERE o.DistributorID = ' + CONVERT(NVARCHAR(25), @DistributorId) + '
                AND o.UniqueConsumerId = ' + CONVERT(NVARCHAR(25), @UniqueConsumerId) + ' ORDER BY  o.OrderDate DESC'
	print(@str)      
	exec (@Str)      
	
	if not exists (select top 1 Orderrefno from #Odr)
	begin
	INSERT INTO #Odr(DistributorID, UniqueConsumerId, OrderRefNo, OrderDate, OrderStatusCode, TransactionReferenceNumber, ActualDeliveryDate, CashMemoDate)
				SELECT TOP 1 o.DistributorID, o.UniqueConsumerId,o.OrderRefNo,ISNULL(su.OrderDate,ISNULL(o.ActualOrderDate,o.OrderDate)) as OrderDate,o.OrderStatusCode,rpd.TransactionReferenceNumber,
                CASE WHEN SU.DeliveryDate is not null THEN SU.DeliveryDate 
					 WHEN o.ActualDeliveryDate IS NOT NULL THEN CONVERT(VARCHAR, o.ActualDeliveryDate, 120) + ' ' + CONVERT(VARCHAR, o.LastUpdateDateTime, 108) 
					 ELSE NULL END AS DeliveryTimeStamp,
                o.InterfaceBookingDate
				FROM HPCLDCMS.DCMS.tblRefillOrderDtls o WITH (NOLOCK)
                LEFT OUTER JOIN HPCLDCMS.esv.tblRefillPaymentDtls rpd WITH (NOLOCK) ON o.OrderRefNo = rpd.OrderRefNo AND rpd.PaymentStatus = 'SUCCESS'
				Left outer join HPCLDCMS.DCMS.tblSuvidhaClubOrders su with (NOLOCK) on o.OrderRefNo=su.OrderRefNo
			    WHERE o.DistributorID =  @DistributorId and o.OrderStatusCode<>'CNCL'
                AND o.UniqueConsumerId =  @UniqueConsumerId  ORDER BY  o.ActualDeliveryDate DESC
	end

	set @OrderRefNo=(select top 1 Orderrefno from #Odr order by orderdate desc)
	declare @PrevDelLat varchar(50), @PrevDelLong varchar(50)
	
	select top 1 @PrevDelLat=td.Latitude, @PrevDelLong=td.Longitude from SDS.tblTripPlanningDetails td
	where td.DeliveredBy=(select  StaffRefNo
	from SDS.tblTripPlanning t inner join SDS.tblTripPlanningDetails d on t.TripId=d.TripId 
	where t.DistributorId=@DistributorId and d.UniqueConsumerId=@UniqueConsumerId and cast(t.TripDate as date)=cast(getdate() as date))
	and td.ActualDeliveryDate is not null
	Order by td.ActualDeliveryDate desc 

	Update #Odr
	set TripId=a.TripId,
		TripDate=a.TripDate,
		Latitude=@PrevDelLat,
		Longitude=@PrevDelLong
	From #Odr o inner join (
	select t.DistributorId, t.TripId, t.TripDate, d.OrderRefNo, d.UniqueConsumerId 
	from SDS.tblTripPlanning t inner join SDS.tblTripPlanningDetails d on t.TripId=d.TripId 
	where t.DistributorId=@DistributorId and d.UniqueConsumerId=@UniqueConsumerId and d.OrderRefNo=@OrderRefNo and cast(t.TripDate as date)=cast(@tripdt as date)
	) a on o.OrderRefNo=a.OrderRefNo and o.DistributorId=a.DistributorId and o.UniqueConsumerId=a.UniqueConsumerId
	
	select distinct DistributorId,UniqueConsumerId,OrderRefNo, OrderDate, OrderStatusCode, TransactionReferenceNumber,ActualDeliveryDate,
	TripId,TripDate, Latitude,Longitude,CashMemoDate,isnull(DAC,'') DAC
	from #Odr 
  drop table #Odr  
END  

GO
/****** Object:  StoredProcedure [SDS].[usp_GetOrderStatusByOrderRefNo]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetOrderStatusByOrderRefNo]
--Declare
@DistributorId int,
@UniqueConsumerId numeric(17,0),
@OrderRefNo numeric(17,0)
--set @DistributorId=14193 set @UniqueConsumerId=9110812700021907 set @OrderRefNo=1191419300103709
as

BEGIN
SET FMTONLY OFF
	declare @GCode VARCHAR(3)='', @Str varchar(max)=''
	SELECT @GCode=GroupCode FROM DCMS.tblDistributorGroupDetails WITH(NOLOCK) WHERE DistributorId=@DistributorId
	if(isnull(@GCode,'')='') set @GCode='' else set @GCode='$'+@GCode

		IF OBJECT_ID('tempdb..#Odr') IS NOT NULL DROP TABLE #Odr 
		create table #Odr(DistributorId int,OrderRefNo numeric(17, 0),UniqueConsumerId numeric(17, 0),OrderStatusCode nvarchar(20), ActualDeliveryDate datetime)
		
		if exists(select OrderRefNo FROM HPCLDCMS.DCMS.tblRefillOrderDtls WHERE DistributorID=@DistributorId and Orderrefno=@OrderRefNo and UniqueConsumerId=@UniqueConsumerId)
		Begin
			Insert into #Odr(DistributorId,OrderRefNo,UniqueConsumerId,OrderStatusCode, ActualDeliveryDate)
			select distinct DistributorID, OrderRefNo,UniqueConsumerId,OrderStatusCode,ActualDeliveryDate
			FROM HPCLDCMS.DCMS.tblRefillOrderDtls WITH (NOLOCK)
			WHERE DistributorID = @DistributorId and Orderrefno=@OrderRefNo and UniqueConsumerId=@UniqueConsumerId
		End
		Else
		Begin
			set  @Str = ' Insert into #Odr(DistributorId,OrderRefNo,UniqueConsumerId,OrderStatusCode, ActualDeliveryDate)
			select distinct o.DistributorID, o.OrderRefNo,o.UniqueConsumerId,o.OrderStatusCode,o.ActualDeliveryDate
			FROM HPCLDCMS.DCMS.tblRefillOrderDtls'+@GCode +' o WITH (NOLOCK)
			WHERE	o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' and o.Orderrefno='+convert(nvarchar(25),@OrderRefNo)+' 
			and o.UniqueConsumerId='+convert(nvarchar(25),@UniqueConsumerId)

			--print(@str)
			exec (@Str)
		End
	
	Select DistributorId,OrderRefNo,UniqueConsumerId,OrderStatusCode, ActualDeliveryDate From #Odr

	--select * from DCMS.tblRefillOrderDtls$BA where DistributorId=14193
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetOrderStatusForAddiDelBoy]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  sds.usp_GetOrderStatusForAddiDelBoy 15139, 11811513900000007,'2020-02-11','2020-02-11'  
CREATE PROCEDURE [SDS].[usp_GetOrderStatusForAddiDelBoy]  
@DistributorId int,  
@AdditionalStaffRefNo numeric(17,0),  
@OrderRefNo numeric(17,0),  
@TripDate datetime  
  
--set @DistributorId =14193 set @DeliveryBoyId =11711419300000005 set @TripDate ='2019-09-21' --set @FromDate ='2019-09-20' set @ToDate ='2019-09-20'  
  
AS  
BEGIN   
  
  SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,  
   TPD.UniqueConsumerId, CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice,TPD.ExpectedDeliveryDate,   
   (CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,  
   'work on it' AS PaymentType, CD.AreaRefNo, cd.Latitude,cd.Longitude,ISNULL(CD.MobileNo,0)as MobileNo, TP.StaffRefNo,TP.StaffName,TP.AddiStaffRefNo,  
    TP.AddiStaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,  
   TP.TripEndDate,TPD.ReturnQty, TPD.ActualDeliveryDate, 0 as RSP, 0 as SVAT, 0 as VAT 
  FROM SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN  
   SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId INNER JOIN  
   SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId  
  WHERE TP.DistributorId=@DistributorId and  --TPD.AssignedTo=isnull(@AdditionalStaffRefNo,0) and   
  TPD.OrderRefNo = isnull(@OrderRefNo,0)   
   and CAST(TP.TripDate as date) = CAST(ISNULL(@TripDate,TP.TripDate) as date)  
END  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetOverlappConsumersForShowList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_GetOverlappConsumersForShowList]--14193,77,10056,154
--declare
@SourceDistributorId int,
@SourceClusterId int,
@DestDistributorId int,
@DestClusterId int
as
BEGIN

	SELECT tb.UniqueConsumerId,cd.ConsumerNo,cd.ConsumerName,tb.Latitude,tb.Longitude,tb.SourceClusterId,tb.DestClusterId,
	tb.OrderRefNo,ol.OrderDate,cl.AreaClusterName as SourceAreaClName,cld.AreaClusterName as DestAreaClusterName
	from SDS.tblTransferBookingNew tb with(nolock) left outer join
	SDS.tblConsumerDetails cd with(nolock) on tb.UniqueConsumerId=cd.UniqueConsumerId and tb.SourceDistributorId=cd.DistributorID left outer join
	SDS.tblOverLappClusterDtls ol with(nolock) on tb.UniqueConsumerId=ol.UniqueConsumerId and tb.OrderRefNo=ol.OrderRefNo left outer join
	SDS.tblClusterMaster cl with(nolock) on tb.SourceClusterId=cl.ClusterId left outer join
	SDS.tblClusterMaster cld with(nolock) on tb.DestClusterId=cld.ClusterId 
	where tb.SourceDistributorId=@SourceDistributorId and tb.SourceClusterId=@SourceClusterId 
	and tb.DestDistributorId=@DestDistributorId and	tb.DestClusterId=@DestClusterId 
	--and cast(tb.LastUpdatedDate as date)=CAST(getdate() as date)
	order by SourceAreaClName
		
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetOverlappedConsumerList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_GetOverlappedConsumerList]--14193,77,10056,151
--declare
@SourceDistributorId int,
@SourceClusterId int,
@DestDistributorId int,
@DestClusterId int
as
BEGIN
	SELECT ol.SourceDistributorId,ol.SourceClusterId,ol.DestDistributorId,ol.DestClusterId,ol.UniqueConsumerId,
	cd.Latitude,cd.Longitude,cl.AreaClusterName,cd.AreaRefNo AS SourceAreaRefNo,ol.OrderRefNo,ol.OrderDate
	from SDS.tblOverLappClusterDtls ol with(nolock) left outer join 
	SDS.tblClusterMaster cl with(nolock) on ol.DestClusterId=cl.ClusterId left outer join
	SDS.tblConsumerDetails cd with(nolock) on ol.UniqueConsumerId=cd.UniqueConsumerId and ol.SourceDistributorId=cd.DistributorID left outer join
	SDS.tblTransferBookingNew tb with(nolock) on ol.UniqueConsumerId=tb.UniqueConsumerId
	where ol.SourceDistributorId=@SourceDistributorId and ol.SourceClusterId=@SourceClusterId and 
	ol.UniqueConsumerId not in (select UniqueConsumerId from SDS.tblTransferBookingNew with(nolock) where SourceDistributorId=@SourceDistributorId and 
	SourceClusterId=@SourceClusterId and DestDistributorId=@DestDistributorId and DestClusterId=@DestClusterId)and
	ol.DestClusterId=@DestClusterId and ol.DestDistributorId=@DestDistributorId
	order by ol.OrderDate desc
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingBookingforCurrentData_Mob]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



----  sds.usp_GetPendingBookingforCurrentData_Mob 14193, 12311419300000009   
CREATE PROCEDURE [SDS].[usp_GetPendingBookingforCurrentData_Mob]    
--declare  
@DistributorId int,    
@DeliveryBoyId numeric(17,0)   
--set @DistributorId=14193; set @DeliveryBoyId=11414193000000071

AS    
BEGIN    
SET FMTONLY OFF 
	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max) 
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  

	IF OBJECT_ID('tempdb..#tblOdrs') IS NOT NULL DROP TABLE #tblOdrs  
	CREATE TABLE #tblOdrs(id int identity,DistributorID int, OrderRefNo numeric(17,0),NatureCode varchar(10),PriceCode int,OrderNo int,
	OrderDate datetime,UniqueConsumerId numeric(17,0),ConsumerNo int, ConsumerName varchar(250), AreaName varchar(250), 
	Address varchar(1000), Pin varchar(10), OrderQuantity int, ExpectedDeliveryDate datetime, OrderStatusCode varchar(10),   
	AreaRefNo numeric(17,0),Latitude varchar(50), Longitude varchar(50), MobileNo varchar(20),StaffRefNo numeric(17,0),StaffName varchar(250),
	ReturnQty int,ActualDeliveryDate datetime,RSP  decimal(10,2),SVAT decimal(10,2),VAT decimal(10,2), PaymentStatus varchar(50))

	set @strquery=( '  
		insert into #tblOdrs (DistributorID, OrderRefNo,NatureCode,PriceCode,OrderNo,OrderDate,UniqueConsumerId,ConsumerNo, 
			ConsumerName, AreaName,Address, Pin, OrderQuantity, ExpectedDeliveryDate, OrderStatusCode,AreaRefNo,Latitude, Longitude, MobileNo,
			StaffRefNo,StaffName,ReturnQty,ActualDeliveryDate,RSP,SVAT,VAT, PaymentStatus)  
			
		Select o.DistributorID, o.OrderRefNo,o.NatureCode,o.PriceCode, o.OrderNo, o.OrderDate,  
			o.UniqueConsumerId,CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, o.OrderQuantity, o.ExpectedDeliveryDate,o.OrderStatusCode,
			CD.AreaRefNo,cd.Latitude, cd.Longitude, ISNULL(CD.MobileNo,0)as MobileNo, s.StaffRefNo,s.StaffName,o.ReturnQty,o.ActualDeliveryDate,
			cast(0 as decimal) as RSP, (cast(0 as decimal)) as SVAT, (cast(0 as decimal)) as VAT, o.Prepaid as PaymentStatus 
		From DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK)
			INNER JOIN SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = o.UniqueConsumerId and cd.DistributorID=o.DistributorId
			INNER JOIN SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo
			INNER JOIN SDS.tblclusterMaster ct on ac.AreaClusterId=ct.ClusterId
			INNER join SDS.tblDeliveryBoyClusterMapping dc on ct.ClusterId=dc.ClusterId
			left outer join DCMS.tblDistributorStaffDetails s on dc.StaffRefNo=s.StaffRefNo
			Left outer Join 
			(	select t.DistributorId, t.TripId, td.OrderRefNo
				from SDS.tblTripPlanningDetails td with (nolock)  
				INNER JOIN SDS.tblTripPlanning AS t WITH (nolock) ON td.TripId = t.TripId 
				Where t.DistributorId='+convert(nvarchar(25),@DistributorId)+' and CAST(t.TripDate as date)=CAST(getdate() as date) 
			) td on td.OrderRefNo=o.OrderRefNo and td.DistributorId=o.DistributorId 
		where o.DistributorID='+convert(nvarchar(25),@DistributorId)+' and dc.StaffRefNo='+convert(nvarchar(25),@DeliveryBoyId)+' 
			 and OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'')
			and td.OrderRefNo is null
		Order by o.OrderDate
		' )  

	print @strquery  
	exec (@strquery)  
    
	SELECT id, DistributorID, OrderRefNo,NatureCode,PriceCode,OrderNo,OrderDate,UniqueConsumerId,ConsumerNo, 
		ConsumerName, AreaName,Address, Pin, OrderQuantity, ExpectedDeliveryDate, OrderStatusCode,AreaRefNo,Latitude, Longitude, MobileNo,
		StaffRefNo,StaffName,ReturnQty,ActualDeliveryDate,RSP,SVAT,VAT, PaymentStatus 
	FROM #tblOdrs  
	where not( ((isnull(Latitude,'')='') or (isnull(Longitude,'')='') or (isnull(Latitude,'') like '-%') or (isnull(Longitude,'') like '-%')))  
  
Drop table #tblOdrs  
  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingBookingforCurrentDataHPCL]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetPendingBookingforCurrentDataHPCL] 
--declare
@GroupCode varchar(5),
@DistributorId varchar(1000)
--set @GroupCode='BA'; set @DistributorId='14193'

as

Begin
	declare @str varchar(max)=''
	CREATE TABLE #Bkg(OrderRefNo numeric(17, 0),DistributorID int,UniqueConsumerId numeric(17, 0),NatureCode varchar(2),AreaRefNo numeric(17, 0),
	OrderNo int,OrderDate datetime,OrderTypeCode varchar(5),DeliveryMode char(1),OrderStatusCode varchar(5),OrderQuantity int,
	ExpectedDeliveryDate datetime,ActualDeliveryDate date,PriceCode int,ReturnQty int,CancelReasonCode tinyint,CancelDate datetime,
	OrderSourceCode varchar(50),SingleDouble varchar(2),Prepaid varchar(15)) 

	if (isnull(@GroupCode,'')<>'')
	Begin
		set @str=' Insert into #Bkg(OrderRefNo, DistributorID, UniqueConsumerId, NatureCode, AreaRefNo, OrderNo, OrderDate, OrderTypeCode, 
				DeliveryMode, OrderStatusCode, OrderQuantity, ExpectedDeliveryDate, ActualDeliveryDate, PriceCode, ReturnQty, CancelReasonCode, 
				CancelDate, OrderSourceCode, SingleDouble, Prepaid)
			SELECT  o.OrderRefNo, o.DistributorID, o.UniqueConsumerId, o.NatureCode, o.AreaRefNo, o.OrderNo, o.OrderDate, o.OrderTypeCode, 
				o.DeliveryMode, o.OrderStatusCode, o.OrderQuantity, o.ExpectedDeliveryDate, o.ActualDeliveryDate, o.PriceCode, o.ReturnQty, o.CancelReasonCode, 
				o.CancelDate, o.OrderSourceCode, o.SingleDouble, isnull(o.PaymentReceivedFlag,''N'') Prepaid
			FROM HPCLDCMS.DCMS.tblRefillOrderDtls$'+@GroupCode+' AS o with(nolock) 
			where	o.DistributorID in ('+@DistributorId+')'

		Print(@str)
		exec(@str)
	End

	Select OrderRefNo, DistributorID, UniqueConsumerId, NatureCode, AreaRefNo, OrderNo, OrderDate, OrderTypeCode,DeliveryMode, OrderStatusCode, 
		OrderQuantity, ExpectedDeliveryDate, ActualDeliveryDate, PriceCode, ReturnQty, CancelReasonCode, CancelDate, OrderSourceCode, SingleDouble, Prepaid 
	from #Bkg 

drop table #Bkg

END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingBookingForDensity]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetPendingBookingForDensity] 
--declare
@DistributorId int
--set @DistributorId=14193

as

BEGIN
SET FMTONLY OFF
	SELECT p.id, p.DistributorID, p.BackLogdays, p.ClusterId, p.VehicleId, p.VehicleNo, p.StaffRefNo, p.AreaRefNo, p.OrderRefNo, p.OrderNo, 
		p.OrderDate, p.UniqueConsumerId,p.ConsumerNo, p.ConsumerName, p.AreaName,c.Latitude, c.Longitude,p.ConMobileNo, p.ConAddress, p.NatureCode, 
		p.PriceCode, p.ItemDescription, p.OrderQuantity,p.OrderStatusCode, p.ExpectedDeliveryDate, p.RSP, p.Source, p.InCluster, p.InTraidingArea, 
		p.IsVerified, p.FromDistributorID, p.FromClusterId, p.VehCapacity, p.NoOfTrips
	FROM sds.tblPendingBookingForDensity p with (nolock) inner join sds.tblConsumerDetails c with (nolock)on p.UniqueConsumerId=c.UniqueConsumerId
	where p.DistributorID=@DistributorID 
	and not( ((isnull(p.Latitude,'')='') or (isnull(p.Longitude,'')='') or (isnull(p.Latitude,'') like '-%') or (isnull(p.Longitude,'') like '-%')))
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingBookingForTrip]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Get Pending Booking for trip planning clusterwise
--			SDS.usp_GetPendingBookingForTrip 14193,1024,0 

CREATE PROCEDURE [SDS].[usp_GetPendingBookingForTrip]
--declare
@DistributorId int,
@ClusterId numeric(17,0),
@OrderCnt int
--set @DistributorId=14193
--set @ClusterId=1023
--set @OrderCnt=25
AS
BEGIN
	SET FMTONLY OFF
	BEGIN TRY
		DECLARE @GroupCode VARCHAR(3)=''
				
		SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
		if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
		print @GroupCode

		if (isnull(@OrderCnt,0)=0)  
		Begin
			SELECT @OrderCnt=   isnull(dc.NoOfTrip,0)* isnull(v.RTOCapacity,0) 
			FROM SDS.tblVehicleMaster AS v INNER JOIN SDS.tblVehicleDeliveryBoyMapping AS dv ON v.VehicleId = dv.VehicleId 
			INNER JOIN SDS.tblDeliveryBoyClusterMapping AS dc ON dv.DeliveryBoyId = dc.StaffRefNo
			where dc.ClusterId=@ClusterId and dc.IsActive='Y' and dv.Active='Y'
		End

		IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

		CREATE TABLE #tblpendingOdr(id int identity,IsSelected bit, DaysDelay int,ClusterId int, StaffRefNo numeric(17, 0),DistributorID int,
		AreaRefNo numeric(17, 0),OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),ConsumerNo int,ConsumerName varchar(100),
		AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),ConMobileNo nvarchar(50),ConAddress nvarchar(500),
		NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money)

		declare @strquery varchar(max)
		set @strquery=( 'insert into #tblpendingOdr 
		SELECT	0 IsSelected, datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId, dc.StaffRefNo, o.DistributorID, o.AreaRefNo, o.OrderRefNo,
			o.OrderNo,o.OrderDate, o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, 
			c.Latitude, c.Longitude, c.MobileNo, c.Address,	o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,
			o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP
		FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) inner join 
			sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN 
			SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
			DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
			SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
			SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN
			DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
			SDS.tblTripPlanningDetails t with(nolock) on t.OrderRefNo = o.OrderRefNo
		WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
			AND dc.ClusterId = '+convert(nvarchar(20),@ClusterId)+' AND t.OrderRefNo IS NULL
		order by datediff(d,o.OrderDate,getdate()) desc, o.OrderDate desc' )

		print @strquery
		exec (@strquery)
		--SELECT PriceCode, CurrentGoodStock FROM SDS.tblDistributorSystemStock WHERE DistributorID=@vDistributorId AND ActiveFlag = 'Y' and currentGoodStock>0

		print @OrderCnt

		update #tblpendingOdr set IsSelected=1 where OrderRefNo in (select top (@OrderCnt) OrderRefNo from #tblpendingOdr order by DaysDelay desc )

		select TOP 23 * from #tblpendingOdr order by DaysDelay desc

		drop table #tblpendingOdr
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
	END CATCH
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingBookingsForDensityAnalysis_rtSeq]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_GetPendingBookingsForDensityAnalysis_rtSeq]
--declare 
@DistributorId int,
@TripDate datetime,
@CaseNo nvarchar(10)

as

SELECT        d.TripId, d.CaseNo, d.TripNo, d.TripDate, d.DistributorId, d.ClusterId, d.StaffRefNo, d.AddiStaffRefNo, 
d.VehicleId, d.GodownId, d.GLatitude, d.GLongitude, dd.TripPlanningDetId, dd.DensityGroupNo, dd.KM_Air, dd.KM_Road, 
dd.DelTripSequenceNo, dd.SequenceNo, dd.OrderRefNo, dd.UniqueConsumerId, dd.PriceCode, dd.ItemDesc, 
dd.AreaRefNo, dd.OrderNo, dd.OrderDate, dd.AgeingDays, dd.OrderQuantity, dd.ActualDeliveryDate, dd.OrderStatus, dd.Latitude, 
dd.Longitude, dd.DensityFrom
FROM SDS.tblDensityAnalysis AS d INNER JOIN SDS.tblDensityAnalysisDetails AS dd ON d.TripId = dd.TripId
where d.DistributorId=@DistributorId and d.CaseNo=@CaseNo and cast(d.TripDate as date)=cast(@TripDate as date) 
and isnull(DelTripSequenceNo,0)>0

GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingDistForRevGeo]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetPendingDistForRevGeo]
--declare 
@Code nvarchar(20),
@Flag varchar(10)

as

BEGIN
---- only reverse Geo. after activation, In side out side will be updated after step approval

	IF(@Flag='DIST')
	BEGIN
		SELECT c.DistributorID, COUNT(DISTINCT c.UniqueConsumerId) - SUM(CASE WHEN cd.UniqueConsumerId IS NOT NULL THEN 1 ELSE 0 END) AS PendingRevGeoConsumers
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) INNER JOIN
			DCMS.tblDistributorMaster AS dm WITH (NOLOCK) ON c.DistributorID = dm.DistributorId LEFT OUTER JOIN
			SDS.tblConsumerDetails AS cd WITH (NOLOCK) ON c.UniqueConsumerId = cd.UniqueConsumerId LEFT OUTER JOIN
			SDS.tblOnBoardingCompleted AS ob WITH (nolock) ON dm.DistributorId = ob.DistributorId
		WHERE (dm.DistributorID = @Code) --and (ob.step1=2 and ob.step2=2 and ob.step3=2 and ob.step4=2 and ob.step5=2 and ob.step6=2 and ob.step7=2 and ob.Step8=2)
		GROUP BY c.DistributorID
	END
	ELSE IF(@Flag='SA')
	BEGIN
		SELECT c.DistributorID, COUNT(DISTINCT c.UniqueConsumerId) - SUM(CASE WHEN cd.UniqueConsumerId IS NOT NULL THEN 1 ELSE 0 END) AS PendingRevGeoConsumers
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) INNER JOIN
			DCMS.tblDistributorMaster AS dm WITH (NOLOCK) ON c.DistributorID = dm.DistributorId LEFT OUTER JOIN
			SDS.tblSAMaster AS sa WITH (NOLOCK) ON dm.SACode = sa.SACode LEFT OUTER JOIN
			SDS.tblConsumerDetails AS cd WITH (NOLOCK) ON c.UniqueConsumerId = cd.UniqueConsumerId LEFT OUTER JOIN
			SDS.tblOnBoardingCompleted AS ob WITH (nolock) ON dm.DistributorId = ob.DistributorId
		WHERE (sa.SACode = @Code) --and (ob.step1=2 and ob.step2=2 and ob.step3=2 and ob.step4=2 and ob.step5=2 and ob.step6=2 and ob.step7=2 and ob.Step8=2)
		GROUP BY c.DistributorID
	END
	ELSE IF(@Flag='RO')
	BEGIN
		SELECT c.DistributorID, COUNT(DISTINCT c.UniqueConsumerId) - SUM(CASE WHEN cd.UniqueConsumerId IS NOT NULL THEN 1 ELSE 0 END) AS PendingRevGeoConsumers
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) INNER JOIN
			DCMS.tblDistributorMaster AS dm WITH (NOLOCK) ON c.DistributorID = dm.DistributorId LEFT OUTER JOIN
			SDS.tblSAMaster AS sa WITH (NOLOCK) ON dm.SACode = sa.SACode LEFT OUTER JOIN
			SDS.tblConsumerDetails AS cd WITH (NOLOCK) ON c.UniqueConsumerId = cd.UniqueConsumerId LEFT OUTER JOIN
			SDS.tblOnBoardingCompleted AS ob WITH (nolock) ON dm.DistributorId = ob.DistributorId
		WHERE (sa.ROCode = @Code) --and (ob.step1=2 and ob.step2=2 and ob.step3=2 and ob.step4=2 and ob.step5=2 and ob.step6=2 and ob.step7=2 and ob.Step8=2)
		GROUP BY c.DistributorID
	END
	ELSE IF(@Flag='ALL')
	BEGIN
		SELECT c.DistributorID, COUNT(DISTINCT c.UniqueConsumerId) - SUM(CASE WHEN cd.UniqueConsumerId IS NOT NULL THEN 1 ELSE 0 END) AS PendingRevGeoConsumers
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) INNER JOIN
			DCMS.tblDistributorMaster AS dm WITH (NOLOCK) ON c.DistributorID = dm.DistributorId LEFT OUTER JOIN
			SDS.tblSAMaster AS sa WITH (NOLOCK) ON dm.SACode = sa.SACode LEFT OUTER JOIN
			SDS.tblConsumerDetails AS cd WITH (NOLOCK) ON c.UniqueConsumerId = cd.UniqueConsumerId LEFT OUTER JOIN
			SDS.tblOnBoardingCompleted AS ob WITH (nolock) ON dm.DistributorId = ob.DistributorId
		--WHERE (ob.step1=2 and ob.step2=2 and ob.step3=2 and ob.step4=2 and ob.step5=2 and ob.step6=2 and ob.step7=2 and ob.Step8=2)
		--WHERE C.DistributorID=14193
		GROUP BY c.DistributorID
	END
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingOrdersClusterwise]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetPendingOrdersClusterwise]
--declare      
@DistributorId bigint,      
@ClusterId int      
--set @DistributorId=14193 ; set @ClusterId=0

as

Begin
	SET FMTONLY OFF 
	DECLARE @TotalPendingOrder int = 0      
	SELECT @TotalPendingOrder= sum(isnull(TotalPendingOrder,0)) FROM sds.tblDistributorClusterwiseBacklog with(NOLOCK) where DistributorId =@DistributorId  

	SELECT distinct a.DistributorId,a.ClusterId,a.AreaClusterName,a.StaffRefNo,a.StaffName,bk.PendingOrders,bk.AvgDailySale,bk.Backlog,      
	Convert(decimal(4,1),convert(float,ROUND(CAST((e.TotalPendingOrder * 100.0 / @TotalPendingOrder) AS FLOAT), 4))) as PendingOrderPercent,    
	ISNULL(b.GeneratedTrips, 0) as GeneratedTrips,ISNULL(c.CompletedTrips,0) as CompletedTrips,a.NoOfTrip,      
	ISNULL(f.RTOCapacity,0) as RTOCapacity,      
	(isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))) AvailableTrips,      
	case when ((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))>=0       
	then 'Less Booking, Trips Available' else 'Shortfall of Trips' End TripsAvailRemark,      
	case when ((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))=0       
	then 'No Trips Can Be Used For Another Cluster.'      
	when ((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))> 0       
	then convert(nvarchar(3),((isnull(a.NoOfTrip,0)) - (ceiling (isnull(e.TotalPendingOrder,0)/convert(float,isnull(nullif(f.RTOCapacity,0),1)))))) + ' Trips Can Be Used For Another Cluster.'      
	else 'Infrastructure Insufficient ' End Remark, d.DistanceFromAgency,d.DistanceFromGodown      
	FROM      
	(
		SELECT c.DistributorId, c.ClusterId,SDS.fn_CamelCase( c.AreaClusterName )as AreaClusterName, dc.StaffRefNo,    
		SDS.fn_CamelCase( db.StaffName ) as StaffName, dc.NoOfTrip    
		FROM SDS.tblClusterMaster AS c  LEFT OUTER JOIN SDS.tblDeliveryBoyClusterMapping AS dc ON dc.ClusterId = c.ClusterId LEFT OUTER JOIN    
		DCMS.tblDistributorStaffDetails AS db WITH (NOLOCK) ON dc.StaffRefNo = db.StaffRefNo
		where  c.IsActive='Y' and c.DistributorId=@DistributorId and (c.clusterid=@ClusterId or @ClusterId=0) 
	) a
	left outer join   
	(
		select distinct DistributorId, clusterId, isnull(TotalPendingOrder,0) PendingOrders, cast( round(isnull(AvgSale,0),0) as int) AvgDailySale,
		CAST(Backlog as DECIMAL(10,2)) Backlog 
		from sds.tblDistributorClusterwiseBacklog cb 
		where DistributorId=@DistributorId and (clusterid=@ClusterId or @ClusterId=0) and isnull(TotalPendingOrder,0)>0 
		and EntryDate= (select max(entrydate) from sds.tblDistributorClusterwiseBacklog where DistributorId=@DistributorId and clusterId=cb.clusterId) 
	) as bk on a.DistributorId=bk.DistributorId and a.ClusterId=bk.clusterId
	LEFT OUTER JOIN 
	(      
		select ClusterId, count(tripid) as GeneratedTrips  from SDS.tblTripPlanning  with(NOLOCK) 
		where cast(TripDate as date)=cast(getdate() as date)  GROUP BY ClusterId      
	) as b on a.ClusterId = b.ClusterId
	LEFT OUTER JOIN      
	(       
		select ClusterId, count(tripid) as CompletedTrips from SDS.tblTripPlanning  with(NOLOCK)      
		where cast(TripDate as date)=cast(getdate() as date) and (TripStatus='COMPLETED' or TripEndDate is not null )  GROUP BY ClusterId      
	) as c on c.ClusterId = a.ClusterId 
	LEFT OUTER JOIN      
	(      
		SELECT ac.AreaClusterId, max(cd.DistanceFromAgency) as DistanceFromAgency , max(cd.DistanceFromGodown) as DistanceFromGodown      
		FROM SDS.tblConsumerDetails AS cd INNER JOIN SDS.tblAreaClusterMapping ac ON cd.AreaRefNo = ac.AreaRefNo    
		where cd.DistributorID=@DistributorId and upper(isnull(cd.ConsumerStatus,''))='ACTIVE' GROUP BY ac.AreaClusterId      
	) as d on d.AreaClusterId =  a.ClusterId 
	LEFT OUTER JOIN      
	(      
		SELECT clusterId, SUM(TotalPendingOrder) as TotalPendingOrder from sds.tblDistributorClusterwiseBacklog GROUP BY clusterId      
	) as e on e.clusterId = a.ClusterId 
	LEFT OUTER JOIN      
	(      
		select distinct t.clusterId, v.RTOCapacity from sds.tblTripPlanning t left outer join sds.tblVehicleMaster v on t.VehicleId=v.VehicleId      
		where t.distributorId=@DistributorId and cast(TripDate as date)=cast(getdate() as date)      
	) as f on f.ClusterId=e.clusterId 

END  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingOrdersDetails]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--			sds.usp_GetPendingOrdersDetails 14193, 70
			
CREATE proc [SDS].[usp_GetPendingOrdersDetails]
--declare
@DistributorId bigint,
@ClusterId int

--set @DistributorId=14193; set @ClusterId=0
as
Begin
	set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#ret') IS NOT NULL DROP TABLE #ret

	CREATE TABLE #ret(OrderRefNo numeric(17, 0), DistributorId int,AreaClusterId int,UniqueConsumerId numeric(17, 0),
	OrderNo int, OrderDate datetime, OrderTypeCode varchar(5),ConsumerNo int,
	ConsumerName nvarchar(200),AddressLine1 nvarchar(1000), AddressLine2 nvarchar(1000), AddressLine3 nvarchar(1000),AreaRefNo numeric(17, 0),AreaName nvarchar(200),
	CityCode nvarchar(50), DistrictCode nvarchar(50), StateCode nvarchar(50), Pin numeric(6, 0),MobileNo numeric(10, 0),
	Email nvarchar(200))

	declare @Str varchar(max)= ' insert into #ret
	SELECT o.OrderRefNo, ac.DistributorId, ac.AreaClusterId, o.UniqueConsumerId, o.OrderNo, o.OrderDate, o.OrderTypeCode, 
	c.ConsumerNo, SDS.fn_CamelCase(c.ConsumerName) ConsumerName, SDS.fn_CamelCase(c.AddressLine1) AddressLine1, SDS.fn_CamelCase(c.AddressLine2) AddressLine2,
	SDS.fn_CamelCase(c.AddressLine3) AddressLine3,	c.AreaRefNo, SDS.fn_CamelCase(da.AreaName) AreaName,
	c.CityCode, c.DistrictCode, c.StateCode, c.Pin, c.MobileNo, c.Email 	
	FROM SDS.tblAreaClusterMapping AS ac 
	left outer join DCMS.tblRefillOrderDtls'+@GroupCode+' AS o WITH (NOLOCK) ON o.AreaRefNo = ac.AreaRefNo 
	inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''
	left outer JOIN DCMS.tblConsumerMaster AS c WITH (NOLOCK) ON o.UniqueConsumerId = c.UniqueConsumerId 
	left outer join DCMS.tblDistributorAreaMaster da WITH (NOLOCK) on c.AreaRefNo=da.AreaRefNo
	where ac.DistributorId='+convert(nvarchar(20),@DistributorId) +' and (ac.AreaClusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0) 
	and OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'') '

	print(@Str)
	exec (@Str)

	select * from #ret

	drop table #ret
End


GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingOrdersList]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--  sds.usp_GetPendingOrdersList 14193, 0, null,null,null  
CREATE PROCEDURE [SDS].[usp_GetPendingOrdersList]  
--declare
@DistributorId int,  
@DeliveryBoyId numeric(17,0),  
@TripDate datetime,  
@FromDate datetime,  
@ToDate datetime
  
AS  
BEGIN   
  
	IF(@FromDate is null)  
	BEGIN  
		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,
			TPD.UniqueConsumerId,CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice,
			TPD.ExpectedDeliveryDate, 
			(CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,   
			'work on it' AS PaymentType, CD.AreaRefNo,cd.Latitude, cd.Longitude,  
			ISNULL(CD.MobileNo,0)as MobileNo,TP.StaffRefNo,TP.StaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate,TPD.ReturnQty,   
			TPD.ActualDeliveryDate, cast(0 as decimal) as RSP, (cast(0 as decimal)) as SVAT, (cast(0 as decimal)) as VAT, 
			TPD.CashMemoNo,TPD.CashMemoRefNo,dsd.StaffName DeliveredBy, 'NA' PaymentStatus,TPD.OrderStatus as OrderStatusCode    
		FROM SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN  
			SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId INNER JOIN  
			SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId and cd.DistributorID=TP.DistributorId
			left outer join dcms.tblDistributorStaffDetails AS dsd WITH (nolock) on dsd.StaffRefNo=TPd.DeliveredBy     
		WHERE TP.DistributorId=@DistributorId and  ( TP.StaffRefNo=@DeliveryBoyId OR 0=@DeliveryBoyId)   
			and CAST(TP.TripDate as date)=CAST(ISNULL(@TripDate,TP.TripDate) as date)  
		order by TPD.SequenceNo
	END  
	ELSE  
	BEGIN  
		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,TPD.UniqueConsumerId,   
			CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice, TPD.ExpectedDeliveryDate,   
			(CASE WHEN TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,   
			'work on it' AS PaymentType, CD.AreaRefNo,cd.Latitude, cd.Longitude,  
			ISNULL(CD.MobileNo,0)as MobileNo,TP.StaffRefNo,TP.StaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate,  
			TPD.ReturnQty, TPD.ActualDeliveryDate, cast(0 as decimal) as RSP, (cast(0 as decimal)) as SVAT, (cast(0 as decimal)) as VAT, 
			TPD.CashMemoNo,TPD.CashMemoRefNo,dsd.StaffName DeliveredBy, 'NA' PaymentStatus,TPD.OrderStatus as OrderStatusCode  
		FROM SDS.tblTripPlanningDetailsHistory AS TPD WITH (nolock) INNER JOIN  
			SDS.tblTripPlanningHistory AS TP WITH (nolock) ON TPD.TripId = TP.TripId INNER JOIN  
			SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId  and cd.DistributorID=TP.DistributorId  
			left outer join dcms.tblDistributorStaffDetails AS dsd WITH (nolock) on dsd.StaffRefNo=TPd.DeliveredBy   
		WHERE TP.DistributorId=@DistributorId and  ( TP.StaffRefNo=@DeliveryBoyId OR 0=@DeliveryBoyId)   
			and CAST(TPD.ActualDeliveryDate as date) Between  CAST(ISNULL(@FromDate, TPD.ActualDeliveryDate) as date) and CAST(ISNULL(@ToDate, TPD.ActualDeliveryDate) as date)  
		order by TPD.SequenceNo
	END  
END  
  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingOrdersListAddDelBoy]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetPendingOrdersListAddDelBoy 14193, 0, null,null,null

CREATE PROCEDURE [SDS].[usp_GetPendingOrdersListAddDelBoy]
--declare
@DistributorId int,
@AdditionalStaffRefNo numeric(17,0),
@TripDate datetime,
@FromDate datetime,
@ToDate datetime

AS

BEGIN	
	
	--IF(@FromDate is null)
	--Begin
		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,TPD.UniqueConsumerId,
			CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice,TPD.ExpectedDeliveryDate, 
			(CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,
			'work on it' AS PaymentType, CD.AreaRefNo, cd.Latitude, cd.Longitude,
			ISNULL(CD.MobileNo,0)as MobileNo,TP.StaffRefNo,TP.StaffName,TP.AddiStaffRefNo,TP.AddiStaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,
			TP.TripStartDate, TP.TripEndDate,TPD.ReturnQty, TPD.ActualDeliveryDate, cast(0 as decimal) as RSP, cast(0 as decimal) as SVAT, cast(0 as decimal) as VAT,
			TPD.CashMemoNo,TPD.CashMemoRefNo,dsd.StaffName DeliveredBy
		FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
			SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId INNER JOIN
			SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
			left outer join dcms.tblDistributorStaffDetails AS dsd WITH (nolock) on dsd.StaffRefNo=TPd.DeliveredBy 
		WHERE	TP.DistributorId=@DistributorId and  ( TP.AddiStaffRefNo=isnull(@AdditionalStaffRefNo,0) OR 0=isnull(@AdditionalStaffRefNo,0)) 
			and CAST(TP.TripDate as date)=CAST(ISNULL(@TripDate,TP.TripDate) as date)
--	End
--	ELSE
--	Begin
--		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,TPD.OrderRefNo,TPD.NatureCode,TPD.PriceCode, TPD.OrderNo, TPD.OrderDate,
--			TPD.UniqueConsumerId, CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, TPD.ItemDesc, TPD.OrderQuantity, TPD.TotalPrice,TPD.ExpectedDeliveryDate, 
--			(CASE WHEN TPD.OrderStatus='0' or TPD.OrderStatus='APRN' OR TPD.OrderStatus='OPEN' OR TPD.OrderStatus='AGEN'  THEN '0' ELSE  TPD.OrderStatus END) as OrderStatus,
--			'work on it' AS PaymentType, CD.AreaRefNo, CD.Latitude, CD.Longitude,ISNULL(CD.MobileNo,0)as MobileNo,
--			TP.StaffRefNo,TP.StaffName,TP.AddiStaffRefNo,TP.AddiStaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate,
--			TPD.ReturnQty, TPD.ActualDeliveryDate,ISNULL(IPD.[RSP],0)as RSP,ISNULL(IPD.[SVAT],0)as SVAT,ISNULL(IPD.[VAT],0)as VAT		
--		FROM	SDS.tblTripPlanningDetailsHistory AS TPD WITH (nolock) INNER JOIN
--			SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = TPD.UniqueConsumerId INNER JOIN
--			SDS.tblTripPlanningHistory AS TP WITH (nolock) ON TPD.TripId = TP.TripId left outer join 
--			DCMS.tblItem123PriceDefinitions IPD with(nolock) on IPD.DistributorId=TP.DistributorId and IPD.NatureCode=TPD.NatureCode and IPD.PriceCode=TPD.PriceCode and [ActiveFlag]='Y'
--		WHERE	TP.DistributorId=@DistributorId and  
--			TP.StaffRefNo= (select 1 from sds.tblVehicleDeliveryBoyMapping where AddiStaffRefNo= isnull(@AdditionalStaffRefNo,0) OR 0=isnull(@AdditionalStaffRefNo,0)) 				
--			and CAST(TPD.ActualDeliveryDate as date) Between  CAST(ISNULL(@FromDate, TPD.ActualDeliveryDate) as date) and CAST(ISNULL(@ToDate, TPD.ActualDeliveryDate) as date)

--END
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingOrdersListForPOD]    Script Date: 04-10-2024 12:01:09 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetPendingOrdersListForPOD
--	Description		:	To Get pending order list by delivery boy Id
--	Author			:	Swapnil	17-Aug-2019
-- use				: To Get pending order list by delivery boy Id for POD locations
--	Date Modified		Modified By	     Modifications
--  01-Aug-2020		Rajendra	     Created
**************************************************************/
--		sds.usp_GetPendingOrdersListForPOD 15139, 12011513900000005, '2020-08-04'

CREATE PROCEDURE [SDS].[usp_GetPendingOrdersListForPOD]
--declare
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@TripDate datetime
--set @DistributorId=15139; set @TripDate='2020-08-01'; set @DeliveryBoyId=12011513900000006
AS
BEGIN
SET FMTONLY OFF
	
	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	
	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

	CREATE TABLE #tblpendingOdr(id int identity, TripId bigint,SequenceNo int,TripNo nvarchar(50),TripPlanningDetId bigint,OrderRefNo numeric(17, 0),
	NatureCode varchar(2),PriceCode int, OrderNo int, OrderDate datetime,
		UniqueConsumerId numeric(17, 0), ConsumerNo int, ConsumerName nvarchar(500), AreaName nvarchar(200), Address nvarchar(500), Pin decimal(10,0), OrderQuantity int,
		ItemDesc nvarchar(50), TotalPrice decimal(10,2), ExpectedDeliveryDate datetime, 
		 OrderStatus nvarchar(10),PaymentType nvarchar(20), AreaRefNo numeric(17, 0), Latitude nvarchar(50), Longitude nvarchar(50), MobileNo nvarchar(20),
		StaffRefNo numeric(17, 0),StaffName nvarchar(200),DistributorId int,TripDate datetime,TripStatus nvarchar(20),TripStartDate datetime,TripEndDate datetime, ReturnQty int,
		ActualDeliveryDate datetime, RSP decimal(10,2), SVAT decimal(10,2), VAT decimal(10,2), CashMemoNo nvarchar(50),CashMemoRefNo numeric(17, 0),DeliveredBy nvarchar(200), PaymentStatus nvarchar(50))

	set @strquery=( '
		insert into #tblpendingOdr (TripId,SequenceNo,TripNo,TripPlanningDetId,OrderRefNo,NatureCode,PriceCode, OrderNo, OrderDate,
		UniqueConsumerId, ConsumerNo, ConsumerName, AreaName, Address, Pin, OrderQuantity,
		ItemDesc, TotalPrice, ExpectedDeliveryDate, OrderStatus,PaymentType, AreaRefNo, Latitude, Longitude, MobileNo,
		StaffRefNo,StaffName,DistributorId,TripDate,TripStatus,TripStartDate,TripEndDate, ReturnQty,
		ActualDeliveryDate, RSP, SVAT, VAT, CashMemoNo,CashMemoRefNo,DeliveredBy, PaymentStatus)

		SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,o.OrderRefNo,o.NatureCode,o.PriceCode, o.OrderNo, o.OrderDate,
			o.UniqueConsumerId, CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, o.OrderQuantity,
			i.ItemDescription as ItemDesc, 0 as TotalPrice, o.ExpectedDeliveryDate, 0 as OrderStatus,
			''work on it'' AS PaymentType, TPD.AreaRefNo, pod.Latitute, pod.Longitute,ISNULL(CD.MobileNo,0) as MobileNo,
			TP.StaffRefNo,TP.StaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate, o.ReturnQty, o.ActualDeliveryDate,
		0 as RSP,0 as SVAT,0 as VAT, TPD.CashMemoNo,TPD.CashMemoRefNo,dsd.StaffName DeliveredBy, ''Prepaid'' PaymentStatus
		
		FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
		SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId
		left outer join dcms.tblDistributorStaffDetails AS dsd WITH (nolock) on dsd.StaffRefNo=TPd.DeliveredBy 
		left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o with (NOLOCK) on tpd.AreaRefNo=o.AreaRefNo
		left outer join SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = o.UniqueConsumerId 
		left outer join sds.tblCDCMSAreaPODDetails pod with (NOLOCK) on TPD.AreaRefNo=pod.AreaRefNo and pod.DistributorId='+convert(nvarchar(25),@DistributorId)+'
		left outer JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode

		WHERE	TP.DistributorId='+convert(nvarchar(25),@DistributorId)+' and  ( TP.StaffRefNo='+convert(nvarchar(25),@DeliveryBoyId)+' OR 0='+convert(nvarchar(25),@DeliveryBoyId)+')  
		and CD.ConsumerStatus=''Active'' and o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'')
		and CAST(TP.TripDate as date)=CAST(ISNULL('''+ CONVERT(nvarchar(50), @TripDate,101)+''',TP.TripDate) as date)
		and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
		')
		
		print @strquery
		exec (@strquery)

	select TripId,SequenceNo,TripNo,TripPlanningDetId,OrderRefNo,NatureCode,PriceCode, OrderNo, OrderDate,
		UniqueConsumerId, ConsumerNo, ConsumerName, AreaName, Address, Pin, OrderQuantity,
		ItemDesc, TotalPrice, ExpectedDeliveryDate, OrderStatus,PaymentType, AreaRefNo, Latitude, Longitude, MobileNo,
		StaffRefNo,StaffName,DistributorId,TripDate,TripStatus,TripStartDate,TripEndDate, ReturnQty,
		ActualDeliveryDate, RSP, SVAT, VAT, CashMemoNo,CashMemoRefNo,DeliveredBy, PaymentStatus 
		from #tblpendingOdr

	drop table #tblpendingOdr
END




GO
/****** Object:  StoredProcedure [SDS].[usp_GetPendingOrderWithDensityAnalysis]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		SDS.usp_GetPendingOrderWithDensityAnalysis 14193 ,0

CREATE proc [SDS].[usp_GetPendingOrderWithDensityAnalysis]
--declare
@DistributorId int,
@ClusterId INT
as
BEGIN
	set fmtonly off
	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#tblOdrDetails') IS NOT NULL DROP TABLE #tblOdrDetails

	CREATE TABLE #tblOdrDetails(OrderRefNo numeric(17, 0),OrderDate datetime, DistributorId int,AreaClusterId int, ClusterName nvarchar(250), 
	UniqueConsumerId numeric(17, 0),OrderNo int,OrderTypeCode varchar(5),OrderStatusCode varchar(100),ActualDeliveryDate datetime,ConsumerNo int,
	ConsumerName nvarchar(100),Address varchar(max),AreaRefNo numeric(17, 0),AreaName nvarchar(200),Pin numeric(6, 0),MobileNo numeric(10, 0),
	Latitude nvarchar(50),Longitude nvarchar(50),PlaceId nvarchar(max),cSource nvarchar(50),SequenceNo int,TripNo varchar(10),
	DensityGroupNo int	)

	set @strquery=('
	INSERT INTO #tblOdrDetails (OrderRefNo ,OrderDate, DistributorId,AreaClusterId, ClusterName,UniqueConsumerId,OrderNo ,OrderTypeCode ,OrderStatusCode,
	ActualDeliveryDate,ConsumerNo,ConsumerName ,Address, AreaRefNo ,AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,PlaceId, cSource,TripNo,SequenceNo,DensityGroupNo)

	SELECT o.OrderRefNo,o.OrderDate, ac.DistributorId, ac.AreaClusterId, ct.AreaClusterName, o.UniqueConsumerId,o.OrderNo, o.OrderTypeCode, o.OrderStatusCode,
		o.ActualDeliveryDate,c.ConsumerNo, c.ConsumerName, c.Address, c.AreaRefNo, c.AreaName, c.Pin, c.MobileNo,
		c.Latitude, c.Longitude,c.PlaceId, c.Source,t.TripNo,t.SequenceNo,ISNULL(t.DensityGroupNo,0)
	FROM DCMS.tblRefillOrderDtls'+@GroupCode +' AS o WITH (NOLOCK) 
		inner join SDS.tblConsumerDetails AS c ON o.UniqueConsumerId = c.UniqueConsumerId 
		inner join SDS.tblAreaClusterMapping AS ac ON o.AreaRefNo = ac.AreaRefNo 
		left outer join sds.tblclustermaster ct on ac.AreaClusterId=ct.ClusterId
		left outer join (	select t.TripNo, t.TripDate, td.SequenceNo, td.OrderRefNo, td.DensityGroupNo from SDS.tblDensityAnalysisDetails AS td 
			inner JOIN SDS.tblDensityAnalysis t ON t.TripId=td.TripId where t.DistributorId='+convert(nvarchar(30),@DistributorId)+' 
			and CAST(t.TripDate as date)=CAST(getdate() as date)
		) t on t.OrderRefNo=o.OrderRefNo 
		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	where ac.DistributorId='+convert(nvarchar(30),@DistributorId)+'  
		and (areaclusterId ='+convert(nvarchar(30),@ClusterId)+'  or 0='+convert(nvarchar(30),@ClusterId)+')  
		and (o.OrderStatusCode IN (''0'',''OPEN'',''APRN'',''AGEN'') OR (O.OrderStatusCode=''DLVD'' and CAST(o.ActualDeliveryDate as date)=CAST(GETDATE() as date))) 
		and c.ConsumerNo is not null '
	)

	print @strquery
	exec (@strquery)

	select distinct  OrderRefNo ,OrderDate, DistributorId,AreaClusterId, ClusterName,UniqueConsumerId,OrderNo ,OrderTypeCode ,OrderStatusCode,
	ActualDeliveryDate,ConsumerNo,SDS.fn_CamelCase(ConsumerName) ConsumerName ,SDS.fn_CamelCase(Address) Address,
	AreaRefNo ,SDS.fn_CamelCase(AreaName)AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,PlaceId,cSource,TripNo,SequenceNo,DensityGroupNo
	from #tblOdrDetails 
	order by OrderDate desc,OrderNo desc
	
	drop table #tblOdrDetails
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetPilotDistributorDelBoyDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetPilotDistributorDelBoyDetails]
@DistributorId int
as

Begin
	SELECT DistributorId, DistributorCode, DelBoyId, ClusterId
	FROM SDS.tblPilotDistributorDelBoyDetails 
	where (DistributorId= isnull(@DistributorId,0) or isnull(@DistributorId,0)=0)
End
GO
/****** Object:  StoredProcedure [SDS].[usp_GetPODDetailsForTrip]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

----	sds.usp_GetPODDetailsForTrip 15139, '2021-06-08'

CREATE proc [SDS].[usp_GetPODDetailsForTrip]
--declare
@DistributorId int,
@TripDate datetime
--set @DistributorId=15139; set @TripDate='2020-07-15'

as

BEGIN
	SET FMTONLY OFF
	
	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max), @FromDid int, @GroupCode2 nvarchar(5)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode


	IF OBJECT_ID('tempdb..#tblpod') IS NOT NULL DROP TABLE #tblpod

	CREATE TABLE #tblpod(id int identity,DistributorID int, ClusterId bigint, VehicleId bigint, StaffRefNo numeric(17, 0),PODAreaRefNo numeric(17, 0), 
	Latitude nvarchar(50),Longitude nvarchar(50),NoOfBookings int,FromDistributorID int, FromClusterId bigint)
	 
	 set @strquery=( 'insert into #tblpod(ClusterId,DistributorID,VehicleId,StaffRefNo,PODAreaRefNo,Latitude,Longitude,NoOfBookings,FromDistributorID,FromClusterId)
		select ac.AreaClusterId,ac.DistributorID,dv.VehicleId, dc.StaffRefNo,p.AreaRefNo, p.Latitute, p.Longitute , count(distinct OrderRefNo),0,0
		from sds.tblCDCMSAreaPODDetails p inner join sds.tblAreaClusterMapping ac on p.AreaRefNo=ac.AreaRefNo 
		inner join sds.tblPODWeekdaysDetails wd on p.AreaPodId=wd.PODId and wd.weekdays=datepart(dw,'''+convert(nvarchar(25),@TripDate,101)+''')
		left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o   on o.AreaRefNo=p.AreaRefNo and o.distributorId=p.distributorId
		left outer join SDS.tblDeliveryBoyClusterMapping dc on ac.AreaClusterId=dc.ClusterId
		left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
		where ac.distributorId='+convert(nvarchar(25),@DistributorId)+' and isnull(p.DeliveryType,''HD'')=''POD'' and isnull(ac.IsActive,''N'')=''Y''
		group by ac.AreaClusterId,ac.DistributorID,p.AreaRefNo, p.Latitute, p.Longitute,dv.VehicleId,dc.StaffRefNo
	')
	print @strquery
	exec (@strquery)


	set @strquery=''

	if (@FromDid>0)
	Begin
		SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDid
		if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

		set @strquery=( 'insert into #tblpod(ClusterId,DistributorID,VehicleId,StaffRefNo,PODAreaRefNo,Latitude,Longitude,NoOfBookings,FromDistributorID,FromClusterId)
		select ac.AreaClusterId,ac.DistributorID,dv.VehicleId, dc.StaffRefNo,p.AreaRefNo, p.Latitute, p.Longitute , count(distinct OrderRefNo),0,0
		from sds.tblCDCMSAreaPODDetails p inner join sds.tblAreaClusterMapping ac on p.AreaRefNo=ac.AreaRefNo 
		inner join sds.tblPODWeekdaysDetails wd on p.AreaPodId=wd.PODId and wd.weekdays=datepart(dw,'''+convert(nvarchar(25),@TripDate,101)+''')
		left outer join dcms.tblRefillOrderDtls'+@GroupCode2 +' o   on o.AreaRefNo=p.AreaRefNo and o.distributorId=p.distributorId
		left outer join SDS.tblDeliveryBoyClusterMapping dc on ac.AreaClusterId=dc.ClusterId
		left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
		where ac.distributorId='+convert(nvarchar(25),@FromDid)+' and isnull(p.DeliveryType,''HD'')=''POD'' and isnull(ac.IsActive,''N'')=''Y''
		group by ac.AreaClusterId,ac.DistributorID,p.AreaRefNo, p.Latitute, p.Longitute,dv.VehicleId,dc.StaffRefNo
		')
		print @strquery
		exec (@strquery)
	End
	select id, DistributorID, ClusterId, VehicleId, StaffRefNo,PODAreaRefNo, Latitude, Longitude, NoOfBookings, FromDistributorID, FromClusterId from #tblpod
	
	drop table #tblpod
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetPreferredBookingDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetPreferredBookingDetails 14193, 0, '2021-03-01'

CREATE PROCEDURE [SDS].[usp_GetPreferredBookingDetails]
--declare
@DistributorId int,
@DeliveryBoyId numeric(17,0)=0,
@PreferredBookingDate datetime
-- set @DistributorId=14193; set @PreferredBookingDate='2021-03-01'; --set @DeliveryBoyId=12011513900000006
AS
BEGIN
SET FMTONLY OFF
	
	DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	
	set @DeliveryBoyId=ISNULL(@DeliveryBoyId,0);

	IF OBJECT_ID('tempdb..#tblPreferredBooking') IS NOT NULL DROP TABLE #tblPreferredBooking

	CREATE TABLE #tblPreferredBooking(id int identity, OrderRefNo numeric(17, 0),UniqueConsumerId numeric(17, 0),AreaRefNo numeric(17, 0),OrderNo int, OrderDate datetime,
	OrderQuantity int,ReturnQty int,OrderStatusCode nvarchar(10), NatureCode varchar(2),PriceCode int, ConsumerNo int, ConsumerName nvarchar(500), 
	AreaName nvarchar(200), Address nvarchar(500), Pin decimal(10,0),MobileNo numeric(10, 0), ItemDescription nvarchar(50), TotalPrice decimal(10,2),
	 RSP decimal(10,2), SVAT decimal(10,2), VAT decimal(10,2), Latitude nvarchar(50), Longitude nvarchar(50), StaffRefNo numeric(17, 0),StaffName nvarchar(200),
	 ClusterId int, AreaClusterName nvarchar(200), CashMemoNo nvarchar(50),CashMemoRefNo numeric(17, 0) )

	set @strquery=( '
		insert into #tblPreferredBooking (OrderRefNo,UniqueConsumerId,AreaRefNo,OrderNo,OrderDate,OrderQuantity,ReturnQty,OrderStatusCode,
		NatureCode,PriceCode,ConsumerNo,ConsumerName,AreaName,Address,Pin,MobileNo,ItemDescription,TotalPrice,RSP,SVAT,VAT,
		Latitude,Longitude,StaffRefNo,StaffName,ClusterId,AreaClusterName)

		select ROD.OrderRefNo,ROD.UniqueConsumerId,ROD.AreaRefNo,ROD.OrderNo,ROD.OrderDate,ROD.OrderQuantity,ROD.ReturnQty,
		ROD.OrderStatusCode,ROD.NatureCode,ROD.PriceCode,CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin,ISNULL(CD.MobileNo,0) as MobileNo,
		i.ItemDescription as ItemDescription,0 as TotalPrice,ISNULL(0,0)as RSP,ISNULL(0,0)as SVAT,ISNULL(0,0)as VAT,
		cd.Latitude, cd.Longitude,TP.StaffRefNo,TP.StaffName,TP.ClusterId,Cm.[AreaClusterName]
		From DCMS.tblRefillOrderDtls'+@GroupCode +'  ROD WITH (nolock) left outer join
		SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = ROD.UniqueConsumerId  left outer JOIN 
		DCMS.tblItemPriceCodeMap AS i WITH (NOLOCK) ON  i.PriceCode =  ROD.PriceCode  left outer JOIN 
		[SDS].[tblAreaClusterMapping] ACM  with(nolock) on ACM.AreaRefNo=ROD.AreaRefNo --left outer JOIN 
		OUTER APPLY 
		(SELECT TOP 1 * FROM [SDS].[tblTripPlanning]
		WHERE ClusterId=ACM.AreaClusterId) AS TP left outer JOIN [SDS].[tblClusterMaster] Cm on Cm.ClusterId=TP.ClusterId
		Where  ROD.DistributorID='+convert(nvarchar(25),@DistributorId)+
		+'and  ( TP.StaffRefNo='+convert(nvarchar(25),@DeliveryBoyId)+' OR 0='+convert(nvarchar(25),@DeliveryBoyId)+')'  +
		' and CAST(ROD.ExpectedDeliveryDate as date)=Cast('''+convert(nvarchar(25),@PreferredBookingDate)+''' as date) ')
		
		--print @strquery
		exec (@strquery)

	select OrderRefNo,UniqueConsumerId,AreaRefNo,OrderNo,OrderDate,OrderQuantity,ReturnQty,OrderStatusCode,NatureCode,PriceCode,
	ConsumerNo,ConsumerName,AreaName,Address,Pin,MobileNo,ItemDescription,TotalPrice,RSP,SVAT,VAT,Latitude,Longitude,
	StaffRefNo,StaffName,ClusterId,AreaClusterName,CashMemoNo,CashMemoRefNo 
	from #tblPreferredBooking

	drop table #tblPreferredBooking
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetRefillOrderDtlsForDensityChk]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetRefillOrderDtlsForDensityChk 14193, '2020-02-27'

CREATE proc [SDS].[usp_GetRefillOrderDtlsForDensityChk]
--declare
@DistributorId int,
@TripDate datetime
--set @DistributorId=14193; set @tripDate='2020-02-27'

as

select ct.DistributorId, o.ActualDeliveryDate, ct.ClusterId, ct.AreaClusterName ClusterName, dc.staffRefNo as DeliveryBoyId, db.StaffName, vd.VehicleId, v.VehicleNo, v.RTOCapacity VehicleCapacity,
dc.NoOfTrip, count(orderrefNo) DelCount
from sds.tblClusterMaster ct with (nolock) left outer join sds.tblAreaClusterMapping ac with (nolock) on ct.ClusterId=ac.AreaClusterId
left outer join dcms.tblRefillOrderDtls o with (nolock) on ac.AreaRefNo=o.AreaRefNo 
left outer join sds.tblDeliveryBoyClusterMapping dc with (nolock) on dc.ClusterId=ct.ClusterId
left outer join sds.tblVehicleDeliveryBoyMapping vd with (nolock) on dc.StaffRefNo=vd.DeliveryBoyId
left outer join dcms.tblDistributorStaffDetails db with (nolock) on dc.StaffRefNo=db.StaffRefNo
left outer join sds.tblVehicleMaster v with (nolock) on vd.vehicleId=v.vehicleId
where o.distributorId=@DistributorId and cast(o.ActualDeliveryDate as date)=cast(@TripDate as date)
group by ct.DistributorId, o.ActualDeliveryDate, ct.ClusterId, ct.AreaClusterName, dc.staffRefNo,vd.VehicleId, v.VehicleNo, v.RTOCapacity,dc.NoOfTrip, db.StaffName




GO
/****** Object:  StoredProcedure [SDS].[usp_GetRefillOrderDtlsWithTripDtls]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- SDS.usp_GetRefillOrderDtlsWithTripDtls 14193,0   
   
CREATE proc [SDS].[usp_GetRefillOrderDtlsWithTripDtls]   
--declare   
@DistributorId int ,   
@ClusterId INT   
--set @DistributorId=14193; set @clusterId=0;   
   
as   
   
BEGIN   
 set fmtonly off   
 DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)=''   
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId   
 if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode   
   
 IF OBJECT_ID('tempdb..#tblOdrDetails') IS NOT NULL DROP TABLE #tblOdrDetails   
   
 CREATE TABLE #tblOdrDetails(OrderRefNo numeric(17, 0),OrderDate datetime, DistributorId int,AreaClusterId int, ClusterName nvarchar(250),   
 UniqueConsumerId numeric(17, 0),OrderNo int,OrderTypeCode varchar(5),OrderStatusCode varchar(100),ActualDeliveryDate datetime,ConsumerNo int,   
 ConsumerName nvarchar(100),Address varchar(max),AreaRefNo numeric(17, 0),AreaName nvarchar(200),Pin numeric(6, 0),MobileNo numeric(10, 0),   
 Latitude nvarchar(50),Longitude nvarchar(50),PlaceId nvarchar(max),cSource nvarchar(50),SequenceNo int,TripNo varchar(10), BookingStatus Varchar(20))   
    
 IF OBJECT_ID('tempdb..#Trip') IS NOT NULL DROP TABLE #Trip   
  
 select t.TripNo, t.TripDate, td.SequenceNo, td.OrderRefNo, td.OrderStatus,td.ActualDeliveryDate into #Trip from SDS.tblTripPlanningDetails AS td WITH (NOLOCK)   
 inner JOIN SDS.tblTripPlanning t WITH (NOLOCK) ON t.TripId=td.TripId   
 where t.DistributorId=@DistributorId and CAST(t.TripDate as date)=CAST(getdate() as date)  
  
 set @strquery=('   
  INSERT INTO #tblOdrDetails (OrderRefNo ,OrderDate, DistributorId,AreaClusterId, ClusterName,UniqueConsumerId,OrderNo ,OrderTypeCode ,OrderStatusCode,  
  ActualDeliveryDate,ConsumerNo,ConsumerName ,Address, AreaRefNo ,AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,PlaceId, cSource,TripNo,SequenceNo,BookingStatus)   
   
  SELECT o.OrderRefNo,o.OrderDate, ac.DistributorId, ac.AreaClusterId, ct.AreaClusterName, o.UniqueConsumerId,o.OrderNo, o.OrderTypeCode, t.OrderStatus,   
  t.ActualDeliveryDate,c.ConsumerNo, c.ConsumerName, c.Address, c.AreaRefNo, c.AreaName, c.Pin, c.MobileNo,   
  c.Latitude, c.Longitude,c.PlaceId,c.Source, t.TripNo,t.SequenceNo,
  case	when t.TripNo is not null then ''Trip Generated'' 
	when t.OrderStatus in (''DLVD'',''Deliver'') and t.ActualDeliveryDate is not null then ''Delivered''
	Else ''Pending'' End as BookingStatus 
  FROM DCMS.tblRefillOrderDtls'+@GroupCode +' AS o WITH (NOLOCK)   
  inner join SDS.tblConsumerDetails AS c WITH (NOLOCK) ON o.UniqueConsumerId = c.UniqueConsumerId   
  inner join SDS.tblAreaClusterMapping AS ac WITH (NOLOCK) ON o.AreaRefNo = ac.AreaRefNo   
  left outer join sds.tblclustermaster ct WITH (NOLOCK) on ac.AreaClusterId=ct.ClusterId   
  left outer join #Trip t on t.OrderRefNo=o.OrderRefNo   
  inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''   
  where ac.DistributorId='+convert(nvarchar(30),@DistributorId)+' and (areaclusterId ='+  
  convert(nvarchar(30),@ClusterId)+' or 0='+convert(nvarchar(30),@ClusterId)+')   
  and (o.OrderStatusCode IN (''0'',''OPEN'',''APRN'',''AGEN'') OR   
  (t.OrderStatus in (''DLVD'',''Deliver'') and CAST(t.ActualDeliveryDate as date)=CAST(GETDATE() as date)))   
  and c.ConsumerNo is not null '   
  )   
   
 -- print @strquery   
 exec (@strquery)   
   
 select distinct OrderRefNo ,OrderDate, DistributorId,AreaClusterId, ClusterName,UniqueConsumerId,OrderNo ,OrderTypeCode ,  
  upper(OrderStatusCode) OrderStatusCode,ActualDeliveryDate,ConsumerNo,SDS.fn_CamelCase(ConsumerName) ConsumerName,  
  SDS.fn_CamelCase(Address) Address, AreaRefNo ,SDS.fn_CamelCase(AreaName)AreaName ,Pin ,MobileNo ,Latitude ,Longitude ,  
  PlaceId,cSource,TripNo,SequenceNo,BookingStatus  
 from #tblOdrDetails   
 order by OrderDate desc,OrderNo desc   
   
 drop table #tblOdrDetails   
END   
   
   
GO
/****** Object:  StoredProcedure [SDS].[usp_GetRefillOrderDtlsWithTripDtlsNew]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		SDS.usp_GetRefillOrderDtlsWithTripDtlsNew 14193,70, 32090
     
CREATE proc [SDS].[usp_GetRefillOrderDtlsWithTripDtlsNew]
--declare
@DistributorId int,
@ClusterId INT,
@Tripid bigInt,
@TripDate varchar(50)=null
--set @DistributorId=14193; set @clusterId=73; set @Tripid=32020

as

BEGIN     
set fmtonly off   
	declare @TripDt datetime=convert(datetime, @TripDate)
	IF OBJECT_ID('tempdb..#tblOdrDetails') IS NOT NULL DROP TABLE #tblOdrDetails     
	CREATE TABLE #tblOdrDetails(DistributorId int,ClusterId int, ClusterName nvarchar(250),OrderRefNo numeric(17, 0),OrderNo int,
		OrderDate datetime, UniqueConsumerId numeric(17, 0),OrderStatusCode varchar(100),ActualDeliveryDate datetime,ConsumerNo int, 
		ConsumerName nvarchar(100),Address varchar(max),AreaRefNo numeric(17, 0),AreaName nvarchar(200),Pin numeric(6, 0),MobileNo numeric(10, 0),
		Latitude nvarchar(50),Longitude nvarchar(50), cSource nvarchar(50),SequenceNo int,TripNo varchar(10), BookingStatus Varchar(20)) 
 
	insert into #tblOdrDetails(DistributorId,ClusterId, ClusterName,OrderRefNo,OrderNo,OrderDate,UniqueConsumerId,OrderStatusCode,ActualDeliveryDate,
		ConsumerNo, ConsumerName,Address,AreaRefNo,AreaName,Pin,MobileNo,Latitude,Longitude, cSource,SequenceNo,TripNo, BookingStatus)
	select t.DistributorId,t.ClusterId,ct.AreaClusterName,td.OrderRefNo,td.OrderNo, td.OrderDate, td.UniqueConsumerId,td.OrderStatus,
		td.ActualDeliveryDate,cd.ConsumerNo,cd.ConsumerName,cd.Address,td.AreaRefNo,da.AreaName,cd.Pin,cd.MobileNo,cd.Latitude,
		cd.Longitude,cd.Source,td.SequenceNo,t.TripNo,
		case when t.TripNo is not null and td.OrderStatus IN ('0','OPEN','APRN','AGEN') then 'Trip Generated'   
			 when td.OrderStatus in ('DLVD','Deliver') and td.ActualDeliveryDate is not null then 'Delivered'
			 when td.OrderStatus in ('SKIP') then 'SKIPPED'   
			 Else 'Pending' End as BookingStatus
	from SDS.tblTripPlanningDetails AS td WITH (NOLOCK)     
		inner JOIN SDS.tblTripPlanning t WITH (NOLOCK) ON t.TripId=td.TripId   
		inner join SDS.tblclusterMaster ct with (nolock) on t.ClusterId=ct.ClusterId  
		left outer join SDS.tblConsumerDetails cd with (nolock) on td.UniqueConsumerId=cd.UniqueConsumerId and t.DistributorId=cd.DistributorID
		Left outer join DCMS.tblDistributorAreaMaster da with (nolock) on td.AreaRefNo=da.AreaRefNo
	where t.DistributorId=@DistributorId and CAST(t.TripDate as date)=CAST(isnull(@TripDate,getdate()) as date)    
		and (t.ClusterId =@ClusterId or 0=@ClusterId) 
		and (td.OrderStatus IN ('0','OPEN','APRN','AGEN','SKIP') OR 
		(td.OrderStatus in ('DLVD','Deliver') and CAST(td.ActualDeliveryDate as date)=CAST(isnull(@TripDate,getdate()) as date)))  
     
	select distinct OrderRefNo, OrderDate, DistributorId, ClusterId, ClusterName, UniqueConsumerId, OrderNo,    
		upper(OrderStatusCode) OrderStatusCode, ActualDeliveryDate, ConsumerNo, SDS.fn_CamelCase(ConsumerName) ConsumerName,    
		SDS.fn_CamelCase(Address) Address, AreaRefNo, SDS.fn_CamelCase(AreaName) AreaName, Pin, MobileNo, Latitude, Longitude,    
		cSource, TripNo, SequenceNo, BookingStatus    
	from #tblOdrDetails
	order by OrderDate desc,OrderNo desc     
drop table #tblOdrDetails     
END     
     
GO
/****** Object:  StoredProcedure [SDS].[usp_GetRegenerateTripDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_GetRegenerateTripDetails]
--DECLARE
@DistributorId INT,
@ClusterId NUMERIC(17,0),
@TripDate DATETIME
--	SET @DistributorId=14193; SET @ClusterId=70;SET @TripDate=GETDATE()
AS

BEGIN
	SET FMTONLY OFF

	DECLARE @TripIds varchar(50), @ActiveTripCaseId INT,@LastsequenceNo int;

	DECLARE @ClusterDetails TABLE (ClusterId INT,AreaClusterName VARCHAR(100),NoOfTrip INT,VehicleId BIGINT,VehCapacity INT,TripBookingCount INT,NoOfPODAreas INT,
	Regionid INT,RegionType VARCHAR(50),PickupLocation CHAR,PickLatitude VARCHAR(50),PickLongitude VARCHAR(50),ActiveCaseId INT,LastSequenceNo INT)

	declare @GLat nvarchar(50), @GLogi nvarchar(50),@cntAvailableTrips int

	SET @ActiveTripCaseId = (Select TCM.[CaseId] From [SDS].[tbltripCaseActiveDistributorwise] TCD inner join  [SDS].[tblTripCaseMaster] TCM on TCD.[CaseId] = TCM.CaseId  
								where (TCD.DistributorId=@DistributorId) and (TCM.ActiveForTrips='Y')) 

	-- DELETE TRIPS WHICH ARE NOT STARTED AND NOT COMPLETED
	set @TripIds = (select TOP 1 STUFF((SELECT ', ' + CAST(TripId AS VARCHAR(10)) [text()] FROM [SDS].[tblTripPlanning] t  
    WHERE DistributorId=@DistributorId and ClusterId = @ClusterId and CAST(TripDate AS Date) = CAST(GetDate() AS Date) AND (TripStatus <> 'TripStarted' 
	AND TripStatus <> 'Completed') FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)'),1,2,' ') TripIdList 
	FROM [SDS].[tblTripPlanning] WHERE DistributorId=@DistributorId and ClusterId = @ClusterId AND CAST(TripDate AS DATE)= CAST(GetDate() AS DATE))  
	IF(@TripIds IS NOT NULL AND @TripIds <> '')
	BEGIN
		exec ('DELETE FROM SDS.tblTripPlanningDetails WHERE TripId IN (' + @TripIds +')');   
		exec ('DELETE FROM SDS.TblTripPlanningNotIncluded WHERE TripId IN (' + @TripIds +')');  
		exec ('DELETE FROM SDS.tblTripPlanning WHERE TripId IN (' + @TripIds +')');
	END
	----Get Last Sequence Number
	SET @LastsequenceNo = (select max(tpd.SequenceNo) from sds.tblTripPlanning tp
							inner join sds.tblTripPlanningDetails tpd on tp.TripId = tpd.TripId where tp.DistributorId=@DistributorId and tp.ClusterId=@ClusterId 
							and cast(TripDate as date)=cast(@TripDate as date))

	SET @cntAvailableTrips = ISNULL((SELECT COUNT(TripId) FROM SDS.tblTripPlanning WHERE DistributorId=@DistributorId AND ClusterId=@ClusterId AND 
	CAST(TripDate AS DATE)=CAST(@TripDate AS DATE) GROUP BY DistributorId,ClusterId),0) -- GET COUNT OF TRIPS AFTER DELETED
	--SELECT @@cntAvailableTrips

	SELECT  @GLat=Latitude, @GLogi=Longitude FROM SDS.tblDistributorGodown where DistributorId=@DistributorId and isnull(ActiveFlag,'N')='Y'

	INSERT INTO @ClusterDetails(ClusterId,AreaClusterName,NoOfTrip,VehicleId,VehCapacity,TripBookingCount,NoOfPODAreas,Regionid,RegionType,PickupLocation,PickLatitude,
	PickLongitude,ActiveCaseId,LastSequenceNo)
	SELECT   c.clusterid, c.AreaClusterName, isnull((isnull(dc.NoOfTrip,0) - @cntAvailableTrips),0) NoOfTrip,v.VehicleId, isnull(v.RTOCapacity,0) VehCapacity,
		isnull((isnull(dc.NoOfTrip,0) - @cntAvailableTrips),0)* isnull(v.RTOCapacity,0) TripBookingCount, isnull(pod.POD,0) NoOfPODAreas, c.Regionid, rt.RegionType,
		isnull(c.PickupLocation,'G') PickupLocation, isnull(c.Latitude,@GLat) PickLatitude, isnull(c.Longitude,@GLogi) pickLongitude,@ActiveTripCaseId,@LastsequenceNo
	FROM sds.tblClusterMaster c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId
		left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
		left outer join SDS.tblVehicleMaster AS v ON v.VehicleId = dv.VehicleId	
		left outer join sds.tblClusterRegionTypeMaster rt on c.Regionid=rt.Id	
		Left outer Join (
			select ac.AreaClusterId,count(p.AreaRefNo) POD from sds.tblCDCMSAreaPODDetails p inner join sds.tblAreaClusterMapping ac on p.AreaRefNo=ac.AreaRefNo 
			inner join sds.tblPODWeekdaysDetails wd on p.AreaPodId=wd.PODId and wd.weekdays=datepart(dw,@TripDate)
			where ac.distributorId=@DistributorId and isnull(p.DeliveryType,'HD')='POD' and isnull(ac.IsActive,'N')='Y'
			group by ac.AreaClusterId
		) pod on pod.AreaClusterId=c.ClusterId
	where c.IsActive='Y' and dc.IsActive='Y' and dv.Active='Y' and v.Active='Y' and c.distributorId=@DistributorId AND C.ClusterId=@ClusterId

	SELECT ClusterId,AreaClusterName,NoOfTrip,VehicleId,VehCapacity,TripBookingCount,NoOfPODAreas,Regionid,RegionType,PickupLocation,PickLatitude,
	PickLongitude,ActiveCaseId,LastSequenceNo from @ClusterDetails
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetRegionTypeMst]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_GetRegionTypeMst]
--	Description		:	To get Region Type Mst

--	Author			:	Swapnil

--				    Modifications
--	19-Feb-2020		swpnil			Created
**************************************************************/

CREATE  PROCEDURE [SDS].[usp_GetRegionTypeMst]

AS
BEGIN
	Select [Id],[RegionType],[ActiveFlag]
	From [SDS].[tblClusterRegionTypeMaster] where [ActiveFlag] = 'Y'
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetRequestForClusterEdit]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_GetRequestForClusterEdit] --14193,0,'DA'    
--declare    
@DistributorId int,    
@ClusterId bigint,
@FlagFor nvarchar     
   
AS    
BEGIN    
 select DistributorID,ClusterId,[Status],Flag,UpdatedDate,FlagFor
 from SDS.tblRequestForClusterEdit WHERE DistributorId=@DistributorId AND (ClusterId=@ClusterId or @ClusterId=0) AND FlagFor='DA'
END    
GO
/****** Object:  StoredProcedure [SDS].[usp_GetResetPasswordDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [SDS].[usp_GetResetPasswordDetails]
@ResetId numeric(17,2)
as
BEGIN
SELECT	ResetID,DistributorId,ResetStatus,DistributorCode,CreatedDate,datediff(mi,CreatedDate,GETDATE()) as TimeSpan from SDS.tbl_ResetPassword
where ResetID =@ResetId

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetSATradingAreaCoordinates]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetSATradingAreaCoordinates]
@SACode nvarchar(20)

as
BEGIN
	SELECT dm.DistributorName, dtc.DistributorId, AreaJSON, ActiveStatus, dtc.LastUpdateDateTime,dm.SACode
	FROM            SDS.tblDistributorTradingAreaCoordinates dtc right outer join 
	[HPCLDCMS].[DCMS].[tblDistributorMaster] dm on dtc.DistributorId = dm.DistributorId 
	where dm.SACode = @SACode and (dm.DistributorName not like 'INACTIVE%') and (dm.DistributorName not like 'ND%')	 order by dm.DistributorName
END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetSchedulerStatusSummaryForEmail]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	SDS.usp_GetSchedulerStatusSummaryForEmail
CREATE proc [SDS].[usp_GetSchedulerStatusSummaryForEmail]
AS
BEGIN
	
	SET FMTONLY OFF
	
	IF OBJECT_ID('tempdb..#tblScheduler') IS NOT NULL DROP TABLE #tblScheduler 
	CREATE TABLE #tblScheduler(SACode varchar(10),SalesAreaName Varchar(200),DistributorId int,DistributorCode nvarchar(8),DistributorName nvarchar(200), 
	ConsumerLocationGCFlag char(1),GetSecondGCFlag char(1),ProcessSecondGCFlag char(1),DistributorStockFlag char(1),BacklogFlag char(1),TripFlag char(1))

	INSERT INTO #tblScheduler(SACode,SalesAreaName,DistributorId, DistributorCode,DistributorName)
	SELECT d.SACode,SDS.fn_CamelCase(sa.SAName) as SalesAreaName,d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase(d.DistributorName) as DistributorName
	from DCMS.tblDistributorMaster AS d with(nolock) inner join HPCLDCMS.INTERFACE.tblSDSDealers sd on d.DistributorId=sd.DistributorId
	left outer join sds.tblSAMaster AS sa with(nolock) on d.SACode=sa.SACode
	where d.StatusCode='A' and isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')
	
	update #tblScheduler set ConsumerLocationGCFlag=f.ConsumerLocation
	from #tblScheduler dt inner join (select DistributorId,case when CompStatus=1 then 'Y' else 'N' end ConsumerLocation
	from sds.tblSchedulerStatusSummary where SchedulerName='ConsumerLocation' and cast(EndDate as date)=cast(getdate() as date)
	) f on dt.DistributorId=f.DistributorId

	update #tblScheduler set GetSecondGCFlag=f.GetSecondGCFlag
	from #tblScheduler dt inner join (select DistributorId,case when CompStatus=1 then 'Y' else 'N' end GetSecondGCFlag
	from sds.tblSchedulerStatusSummary where SchedulerName='GetSecondGC' and cast(EndDate as date)=cast(getdate() as date)
	) f on dt.DistributorId=f.DistributorId

	if exists(select * from sds.tblSchedulerStatusSummary where DistributorId=0 and SchedulerName='ProcessSecondGC' and CompStatus=1 and cast(EndDate as date)=cast(getdate() as date))
		update #tblScheduler set ProcessSecondGCFlag='Y'
	Else
		update #tblScheduler set ProcessSecondGCFlag='N'
	
	if exists(select * from sds.tblSchedulerStatusSummary where DistributorId=0 and SchedulerName='DistributorStock' and CompStatus=1 and cast(EndDate as date)=cast(getdate() as date))
		update #tblScheduler set DistributorStockFlag='Y'
	Else
		update #tblScheduler set DistributorStockFlag='N'

	update #tblScheduler set BacklogFlag=f.BacklogFlag
	from #tblScheduler dt inner join (select DistributorId,case when CompStatus=1 then 'Y' else 'N' end BacklogFlag
	from sds.tblSchedulerStatusSummary where SchedulerName='Backlog' and cast(EndDate as date)=cast(getdate() as date)
	) f on dt.DistributorId=f.DistributorId

	update #tblScheduler set TripFlag=t.TripFlag
	from #tblScheduler dt inner join (select DistributorId,case when CompStatus=1 then 'Y' else 'N' end TripFlag
	from sds.tblSchedulerStatusSummary where SchedulerName='Trip' and cast(EndDate as date)=cast(getdate() as date)
	) t on dt.DistributorId=t.DistributorId

	select SACode, SalesAreaName, DistributorId,DistributorCode,DistributorName, 
	isnull(ConsumerLocationGCFlag,'N') ConsumerLocationGCFlag, isnull(GetSecondGCFlag,'N') GetSecondGCFlag,
	isnull(ProcessSecondGCFlag,'N') ProcessSecondGCFlag,isnull(DistributorStockFlag,'N') DistributorStockFlag,
	isnull(BacklogFlag,'N') BacklogFlag,isnull(TripFlag,'N') TripFlag 
	from #tblScheduler
	Order by ConsumerLocationGCFlag,GetSecondGCFlag,ProcessSecondGCFlag,DistributorStockFlag,BacklogFlag,TripFlag

	drop table #tblScheduler
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetSDSVersionList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE proc [SDS].[usp_GetSDSVersionList] 
@VersionId int

as
BEGIN
    IF(@VersionId = 0)
	BEGIN
	SELECT [VersionId]
      ,[VersionNo]
      ,CONVERT(VARCHAR ,[VersionDate] ,103) VersionDate
      ,CONVERT(VARCHAR ,[ReleasedOn] ,103)  ReleasedOn
      ,[Releases]
      ,[ActiveStatus]
      ,[CreatedBy]
      ,[CreatedDate]
      ,[UpdatedBy]
      ,[UpdatedDate]
  FROM [SDS].[tblSDSVersionMaster]-- WHERE  ActiveStatus=1
  END
  ELSE
  BEGIN
  SELECT [VersionId]
      ,[VersionNo]
      ,CONVERT(VARCHAR ,[VersionDate] ,103) VersionDate
      ,CONVERT(VARCHAR ,[ReleasedOn] ,103)  ReleasedOn
      ,[Releases]
      ,[ActiveStatus]
      ,[CreatedBy]
      ,[CreatedDate]
      ,[UpdatedBy]
      ,[UpdatedDate]
  FROM [SDS].[tblSDSVersionMaster] WHERE VersionId=@VersionId --and ActiveStatus=1
  END

END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetSecondGCData]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [SDS].[usp_GetSecondGCData]

as

---Summary
--select count(cd.UniqueConsumerId) Total, 
--sum(case when cd.Latitude is not null then 1 else 0 end) as FirstVitran,
--sum(case when cd.InCluster=1 and cd.ClusterId=ac.AreaClusterId then 1 else 0 end) as FirstInside,
--sum(case when cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId) then 1 else 0 end) as FirstOutside,
--sum(case when cl.VitranLatitude1 is not null then 1 else 0 end) as SecondVitran,
--sum(case when cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=ac.AreaClusterId then 1 else 0 end) as SecondInside,
--sum(case when cl.VitranLatitude1 is not null and (cl.VitranLat1InCluster=0 or cl.VitranLat1InClusterId<>ac.AreaClusterId) then 1 else 0 end) as SecondOutside,

--sum(case when (cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=ac.AreaClusterId and (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId))) then 1 else 0 end) as FirstOutNSecondIn

--from SDS.tblConsumerDetails cd 
--Left outer join SDS.tblConsumerLocationHistoryNew cl on cd.DistributorID=cl.DistributorID and cd.UniqueConsumerId=cl.UniqueConsumerId
--left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo

select count(cd.UniqueConsumerId) Total, 
sum(case when cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId) then 1 else 0 end) as FirstOutside,
sum(case when cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=ac.AreaClusterId then 1 else 0 end) as SecondInside,

sum(case when (cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=ac.AreaClusterId and (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId))) then 1 else 0 end) as FirstOutNSecondIn

from SDS.tblConsumerDetails cd 
Left outer join SDS.tblConsumerLocationHistoryNew cl on cd.DistributorID=cl.DistributorID and cd.UniqueConsumerId=cl.UniqueConsumerId
left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo
GO
/****** Object:  StoredProcedure [SDS].[usp_GetStateMaster]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,Rahul>
-- Create date: <Create Date,13-01-2018,>
-- Description:	<Description,to get Item details from Table against respective distributor,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetStateMaster]
@IsActive nvarchar(3)
AS
BEGIN
    if (upper(@IsActive)='Y') set @IsActive=1 ; if (upper(@IsActive)='N') set @IsActive=0 

	 SELECT StateCode,StateName,ActiveFlag,LastUpdateBy,GSTN 
	 FROM SDS.tblStateMaster where (ActiveFlag = @IsActive )
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetStepwiseSummaryforDistributor]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetStepwiseSummaryforDistributor 88888

CREATE proc [SDS].[usp_GetStepwiseSummaryforDistributor]
--declare 
@DistributorId int

--set @DistributorId=88888

as
BEGIN
	set FMTONLY OFF
	declare @summTbl table (id int identity(1,1), DistributorId int, Forstep nvarchar(10), Summarytext varchar(max))

	--- Step 1: Vehicle Details summary
	insert into @summTbl(DistributorId,Forstep, Summarytext)
	select DistributorId, 'Step1', 'Total Vehicles : ' + convert(nvarchar(5),count(distinct vehicleid)) from sds.tblVehicleMaster where DistributorId=@DistributorId group by DistributorId
	
	--- Step 2 vehicle del. boy mapping summary
	insert into @summTbl(DistributorId,Forstep, Summarytext)
	select v.DistributorId, 'Step2', 'Total Vehicles : ' + convert(nvarchar(5),count(distinct v.vehicleid))+'  '+
	'Mapped Vehicles : ' + convert(nvarchar(5),sum(case when isnull(vd.DeliveryBoyId,0)>0 then 1 else 0 end)) 
	from sds.tblVehicleMaster v left outer join sds.tblVehicleDeliveryBoyMapping vd on v.VehicleId=vd.VehicleId
	where v.DistributorId=@DistributorId group by v.DistributorId
	
	--- Step 3: Godown Details summary
	insert into @summTbl(DistributorId,Forstep, Summarytext)
	SELECT dg.DistributorId, 'Step3', 'Total Godown : ' + convert(nvarchar(5),count(distinct dg.GoDownId))+'  '+
		'Mapped Godown : ' + convert(nvarchar(5),sum(case when isnull(gk.GodownKeeperId,0)>0 then 1 else 0 end))
	FROM SDS.tblDistributorGodownStaffMapping AS gk RIGHT OUTER JOIN DCMS.tblDistributorGodown AS dg ON gk.GodownId = dg.GoDownId 
		LEFT OUTER JOIN SDS.tblDistributorGodown AS sg ON dg.GoDownId = sg.GodownId
	where dg.DistributorId=@DistributorId 
	group by dg.DistributorId

	---- Step 4: District, Tahshil/ward details
	--insert into @summTbl(DistributorId,Forstep, Summarytext)
	--select DistributorId, 'Step4', 'Total Districts : ' + convert(nvarchar(5),count(distinct DistrictCode))+'  '+
	-- 'Total Tehsil/Wards : ' + convert(nvarchar(5),sum(case when isnull(TalukaCode,'')<>'' then 1 else 0 end)) from sds.tblDistributorDeliveryTaluka 
	--where DistributorId=@DistributorId and ActiveFlag='Y' and ltrim(rtrim(isnull(DistrictCode,''))) <>'' and ltrim(rtrim(isnull(TalukaCode,''))) <>'' group by DistributorId

	---- Step 5: Deffine Trading area
	--insert into @summTbl(DistributorId,Forstep, Summarytext)
	--SELECT DistributorID, 'Step5', 'Total Selected Areas : '+ convert(nvarchar(5),count(distinct AreaRefNo)) 
	--FROM            SDS.tblDistributorAreaGeoCoordinates with(nolock) 
	--where DistributorId=@DistributorId
	--group by DistributorID

	-- Step 6: Create clusters Select/Draw
	insert into @summTbl(DistributorId,Forstep, Summarytext)
	SELECT c.DistributorId, 'Step6','Total Clusters: ' + convert(nvarchar(5),count(distinct c.ClusterId))	
	FROM SDS.tblClusterMaster AS c WITH(NOLOCK) 
	where (c.DistributorId=@DistributorId) and (c.IsActive='Y') 
	group by c.DistributorId
	
	-- Step 7: POD Area Details
	insert into @summTbl(DistributorId,Forstep, Summarytext)
	SELECT  da.DistributorID, 'Step7', 'Total Area : '+ convert(nvarchar(5),count (distinct da.arearefno)) +'  '+
	'Total POD Area : ' + convert(nvarchar(5),sum(case when isnull(UPPER(LTRIM(RTRIM(pod.DeliveryType))),'HD') ='POD' then 1 else 0 end ))
	FROM DCMS.tblDistributorAreaMaster AS da WITH (nolock) LEFT OUTER JOIN SDS.tblCDCMSAreaPODDetails AS pod ON da.AreaRefNo = pod.AreaRefNo
	WHERE da.DistributorID = @DistributorId	group by da.DistributorID

	-- Step 8 Cluster Details Mapping
	insert into @summTbl(DistributorId,Forstep, Summarytext)
	SELECT c.DistributorId, 'Step8','Total Clusters: ' + convert(nvarchar(5),count(distinct c.ClusterId)) +'  '+
	'Clusters Mapped with Delivery boy : '+ convert(nvarchar(5),sum(case when isnull(dc.StaffRefNo,0)>0 then 1 else 0 end )) +'  '+
	'Possible Delivery : '+ convert(nvarchar(5),sum(isnull(isnull(dc.NoOfTrip,0) * isnull(v.RTOCapacity,0),0))) PossDelivery
	
	FROM SDS.tblVehicleDeliveryBoyMapping AS vd WITH(NOLOCK) LEFT OUTER JOIN 
	SDS.tblVehicleMaster AS v WITH(NOLOCK) ON vd.VehicleId = v.VehicleId RIGHT OUTER JOIN
	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON vd.DeliveryBoyId = dc.StaffRefNo RIGHT OUTER JOIN
	SDS.tblClusterMaster AS c WITH(NOLOCK) ON dc.ClusterId = c.ClusterId
	where (c.DistributorId=@DistributorId) and (c.IsActive='Y') 
	group by c.DistributorId

	select id,DistributorId,Forstep,Summarytext from @summTbl

END




GO
/****** Object:  StoredProcedure [SDS].[usp_GetStockAllotmentByStockAllotmentId]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_GetStockAllotmentByStockAllotmentId
--	Description		:	To View the Stock Allotment Details by Stock Allotment id

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetStockAllotmentByStockAllotmentId]
	@StockAllotmentId bigint
AS
BEGIN
	BEGIN
			SELECT	icm.ItemID,icm.ItemDescription, ISNULL(sa.Quantity,0) AS Quantity,ISNULL(sa.EmptyQty,0) AS EmptyQty,icm.ItemShortDescription
			FROM	SDS.tblStockAllotmentDetails sa inner join
					SDS.tblItemCodeMaster icm on icm.ItemID = sa.ItemID
			WHERE	sa.StockAllotmentId = @StockAllotmentId
	END


	
		
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetSuggestedAvailableTrips]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_GetSuggestedAvailableTrips] --14193,0,'2021-08-24'  
--declare  
@DistributorId int,  
@TripDate datetime,  
@ClusterId bigint  
--set @DistributorId=14193; set @TripDate='2021-09-08'; set @ClusterId=0
--SDS.usp_GetSuggestedAvailableTrips 14193,'2021-08-24',0
as  
  
-----Get Pending Orders and Backlog  
BEGIN
	Begin  
		 SET FMTONLY OFF  
		 DECLARE @GroupCode VARCHAR(3)=''  
		 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
		 if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  
		 IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr  
		 create table #TotOdr(ClusterId int, PendingOrders int)  
		 IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale  
		 create table #TotSale(ClusterId int, TotalSale int, AvgDailySale float)  
		 IF OBJECT_ID('tempdb..#Tottrp') IS NOT NULL DROP TABLE #Tottrp
		 create table #Tottrp(DistributorId int, areaclusterId bigint, TrpSale int)

		 declare @Str varchar(max)= 'insert into #TotOdr  
		 select ac.areaclusterId, count(OrderRefNo) PendingOrders    
		 from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo  
		 where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +')   
		 and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)  
		 group by ac.areaclusterId'--and cast(o.orderdate as date)>=DATEadd(dd,-(select NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())  
		 print (@Str)  
		 exec (@Str)  
   
		--select * from #TotOdr

		insert into #Tottrp(DistributorId, areaclusterId, TrpSale)
	select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) TrpSale
	from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
	where (ac.DistributorId=@DistributorId) 
	and (o.OrderStatusCode in ( 'DLVD')) and (ac.areaclusterId=@ClusterId or convert(nvarchar(20),@ClusterId)=0)
	and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	group by ac.DistributorId, ac.areaclusterId

		 declare @Str1 varchar(max)= 'insert into #TotSale  
		 select ac.areaclusterId, count(o.OrderRefNo)+TrpSale TotalSale,  
		 round((count(o.OrderRefNo)+ TrpSale)/(select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),2) AvgSale  
		 from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+'  o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo   
		 left outer join #Tottrp r2 on o.DistributorId=r2.DistributorId and ac.areaclusterId=r2.areaclusterId  
		 where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +')   
		 and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)  
		 and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())  
		 group by ac.areaclusterId,TrpSale'  
		 print (@Str1)  
		 exec (@Str1)  
	End---------------------------  
  
	--select * from #TotSale

	SELECT distinct t.DistributorId, t.ClusterId,SDS.fn_CamelCase( c.AreaClusterName ) as AreaClusterName,   
	isnull(o.PendingOrders,0) PendingOrders, ceiling (isnull(o.PendingOrders,0)/convert(float,isnull(nullif(v.RTOCapacity,0),1))) WithTrips,  
	isnull(dc.NoOfTrip,0)*isnull(v.RTOCapacity,0) MaxDeliveries,   
	isnull(dc.NoOfTrip,0) NoOfTrips, round(isnull(s.AvgDailySale,0),0) AvgDailySale,round(Isnull(isnull(o.PendingOrders,0)/isnull(nullif(s.AvgDailySale,0),1),0),2) BackLog,   
	(isnull(dc.NoOfTrip,0)) - (ceiling (isnull(o.PendingOrders,0)/convert(float,isnull(nullif(v.RTOCapacity,0),1)))) AvailableTrips,  
	t.VehicleId, v.VehicleNo, v.RTOCapacity, t.TripDate,
	(select count( distinct tripid) from SDS.tblTripPlanning where ClusterId=t.clusterId  and cast(TripDate as date)=cast(@TripDate as date)) GeneratedTrips,
	(o.PendingOrders - (dc.NoOfTrip * v.RTOCapacity)) TotalPendings,t.IsExtraTrip
	into #Result  
    
	FROM SDS.tblClusterMaster AS c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId   
	 LEFT OUTER JOIN SDS.tblTripPlanning AS t INNER JOIN  
	 SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId INNER JOIN  
	 SDS.tblTripPlanningDetails AS td ON t.TripId = td.TripId ON c.ClusterId = t.ClusterId  
	 left outer join #TotOdr o on c.ClusterId=o.ClusterId   
	 left outer join #TotSale s on c.ClusterId=s.ClusterId  
	 left outer join sds.tblDistributorGodown g on c.GodownId=g.GodownId  
	where t.DistributorId =@DistributorId and cast(t.TripDate as date)=cast(@TripDate as date)  
	 and (t.ClusterId=@ClusterId or @ClusterId=0) --and isnull(IsExtraTrip,'N') = 'N'
	group by t.ClusterId, c.AreaClusterName, t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.StaffRefNo, t.VehicleId, t.TotalOrders,  
	  t.TripStatus,  v.VehicleNo, v.RTOCapacity, t.StaffName, td.PriceCode, td.ItemDesc, o.PendingOrders, s.AvgDailySale,dc.NoOfTrip,t.IsExtraTrip
  
	--select r.* from #Result r order by r.AreaClusterName  

	DECLARE 
	@TotalPendings int,
	@AvarageForSuggestion int,
	@TotalRows int,
	@Pendings int,
	@RowCount int

	Declare @TempTable table (id int identity,ClusterName VARCHAR(500),ClusterId bigint,VehicleId bigint,VehCapacity int, DeliveryBoy VARCHAR(500), VehicleNo VARCHAR(50), 
			schBookings int,actTripNo int,AvailableCapacity int)

	insert into @TempTable(ClusterName,ClusterId,VehicleId,VehCapacity,DeliveryBoy,VehicleNo,schBookings,actTripNo,AvailableCapacity)
	exec sds.usp_CheckTripsAvailability @DistributorId,@TripDate,@ClusterId

	--select * from @TempTable

	declare @NewTable table (id int,ClusterId int,AvailableCapacity int)
	declare @NewTable_NEW table (id int,ClusterId int,AvailableCapacity int)

	--select count(id) from @TempTable where isnull(AvailableCapacity,0)>0 and ClusterId <> @ClusterId
	--set @TotalRows = (select count(id) from @TempTable where isnull(AvailableCapacity,0)>0 and ClusterId <> @ClusterId)

	set @RowCount=1
	
	DECLARE @tblClusterPending table (Id int identity,ClusterId int,PendingOrders int)

	insert into @tblClusterPending
	select Clusterid,TotalPendings from #Result where TotalPendings > 0 and (ClusterId not in (select ClusterId from @TempTable) 
	and ClusterId not in (select clusterid from #Result where VehicleId in (select vehicleId from #Result where IsExtraTrip='Y') 
	and ClusterId not in (select ClusterId from #Result where IsExtraTrip='Y'))) and isnull(IsExtraTrip,'N')='N'-- Get those cluster id which can generate extra trips
	

	--select * from @tblClusterPending

	set @TotalRows=(select max(Id) from @tblClusterPending);
	--select @TotalRows

	WHILE(@rowCount <= @TotalRows)
	BEGIN
	set @TotalPendings = (select r.PendingOrders from @tblClusterPending r where r.Id=@RowCount)
	set @ClusterId = (select r.ClusterId from @tblClusterPending r where r.Id=@RowCount)
	while(@TotalPendings >= 0)
	begin
		SET @Pendings=(select TOP 1 max(AvailableCapacity) from @TempTable 	
		where isnull(AvailableCapacity,0)>0 and ClusterId <> @ClusterId and AvailableCapacity<=@TotalPendings 
		group by id,AvailableCapacity order by AvailableCapacity desc)

		--select @Pendings;

		set @TotalPendings = @TotalPendings - @Pendings
				
		insert into @NewTable (id,ClusterId,AvailableCapacity)
		select TOP 1 id,@ClusterId,max(AvailableCapacity) from @TempTable 	
			where isnull(AvailableCapacity,0)>0 and ClusterId <> @ClusterId and AvailableCapacity<=@Pendings and id not in (select id from @NewTable)
			group by id,AvailableCapacity order by AvailableCapacity desc 
	end
	INSERT INTO @NewTable_NEW
	select * from @NewTable 
	DELETE FROM @NewTable WHERE 1=1
	set @RowCount = @RowCount + 1;
	END



	--select * from @NewTable_NEW order by id
	--select * from @TempTable

	select distinct
	r.DistributorId,r.AreaClusterName,r.ClusterId,r.VehicleId,r.VehicleNo,r.AvailableTrips ShortfallOfTrips,r.PendingOrders,r.NoOfTrips,r.BackLog,r.MaxDeliveries PlannedBookings,r.RTOCapacity,r.GeneratedTrips,r.WithTrips,t.ClusterId as SuggestedClusterId,
	t.AvailableCapacity,t.VehicleId as SuggestedVehicleId,t.VehCapacity,t.ClusterName
		from #Result r 
	inner join @NewTable_NEW n on r.ClusterId=n.ClusterId 
	inner join @TempTable t on n.id = t.id where ISNULL(r.IsExtraTrip,'N')='N'
		order by r.PendingOrders,t.AvailableCapacity desc

	drop table #TotOdr  
	drop table #TotSale 
	drop table #Tottrp 
	drop table #Result  
  
END
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTalukaMstByDistrictMst]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetTalukaMstByDistrictMst
--	Description		:	To Taluka Master By District Code
--	Author			:	Swapnil
--				    Modifications
--	06-12-2019		Swapnil			Created
**************************************************************/
---		SDS.usp_GetTalukaMstByDistrictMst 14193,'','District'

CREATE  PROCEDURE [SDS].[usp_GetTalukaMstByDistrictMst]
@DistributorId int,
@Code varchar(50),
@StateCode nvarchar(50),
@Status  varchar(50)
AS
BEGIN

	  --declare @StateCode nvarchar(50)='';
	 -- select @StateCode=StateCode from DCMS.tblDistributorMaster where DistributorId=@DistributorId

	IF(@Status='District')
	BEGIN
		Select DistrictCode as UniqueCode,DistrictName as Name,'' as ParentCode,'' as ParentName, CAST(0 AS BIT) as DistChecked
		From SDS.tblDistrictMaster 		where StateCode=@StateCode and (DistrictCode=@Code OR  @Code='' )
		order by Name,DistChecked 
	END
	ELSE IF(@Status='Taluka')
	BEGIN		
		Select	TM.TalukaCode as UniqueCode,TM.TalukaName as Name,TM.DistrictCode as ParentCode,DM.DistrictName as ParentName,
			   (CASE when DDT.TalukaCode is null then CAST(0 AS BIT) else CAST(1 AS BIT) end)as DistChecked				
		From	SDS.tblDistrictMaster DM  inner join SDS.tblTalukaMaster TM on TM.DistrictCode=DM.DistrictCode left outer join 
				SDS.tblDistributorDeliveryTaluka DDT on DDT.TalukaCode=TM.TalukaCode and DDT.DistrictCode=TM.DistrictCode and DDT.DistributorId=@DistributorId		
		where (TM.DistrictCode=@Code)
		order by Name,DistChecked 
	END
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTaxDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetTaxDetails
--	Description		:	To Get all Tax Details

--	Author			:	Prasanna	18-05-2018		

--	03-March-2018		Swapnil	     Modifications
--	18-05-2018		Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_GetTaxDetails]

AS
BEGIN
				
		SELECT        ID, TaxType, Tax, LastUpdatedDateTime
FROM            SDS.tblTaxDetails
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetTradingAreaCoordinates]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetTradingAreaCoordinates]
@DistributorId int,
@SACode nvarchar(20)

AS
BEGIN
	IF(@DistributorId <> 0)
	BEGIN
	SELECT SDS.fn_CamelCase(dm.DistributorName) DistributorName, ISNULL(dm.DistributorId,0) as DistributorId, dm.SACode
	FROM  [DCMS].[tblDistributorMaster] dm 
	WHERE dm.DistributorId = @DistributorId and (dm.DistributorName not like 'INACTIVE%') and (dm.DistributorName not like 'ND%')	 
	ORDER BY dm.DistributorName
	END
	ELSE IF(@SACode <> '')
	BEGIN
	SELECT SDS.fn_CamelCase(dm.DistributorName) DistributorName, ISNULL(dm.DistributorId,0) as DistributorId,  dm.SACode
	FROM [DCMS].[tblDistributorMaster] dm 
	WHERE dm.SACode = @SACode and (dm.DistributorName not like 'INACTIVE%') and (dm.DistributorName not like 'ND%')	 
	ORDER BY dm.DistributorName
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetTraidingAreawiseCounts]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetTraidingAreawiseCounts 14193

CREATE proc [SDS].[usp_GetTraidingAreawiseCounts] 
--declare 
@DistributorID int
  --set @DistributorID=14193
as
BEGIN
	set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--print @GroupCode; 
	
	declare  @clusterCount int, @ActConsu int, @TotConsu int, @InactConsu int

	select  @TotConsu=count(UniqueConsumerId),
	@ActConsu=sum(case when ConsumerStatus = 'Active' then 1 else 0 end),
	@InactConsu=sum(case when ConsumerStatus <> 'Active' then 1 else 0 end)
	from DCMS.tblConsumerMaster WITH (NOLOCK) where DistributorID=@DistributorID
	select @clusterCount=count(clusterId) from sds.tblClusterMaster where DistributorID=@DistributorID and isactive='Y'

	--IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr create table #TotOdr(DistributorId int, PendingOrders int)
	--IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale create table #TotSale(DistributorId int, TotalSale nvarchar(50), AvgDailySale int)
	
	--declare @Str varchar(max)= 'insert into #TotOdr
	--select o.DistributorId, count(distinct o.OrderRefNo)   from DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK)
	--inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	--and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (o.AreaRefNo='+convert(nvarchar(20),0) +' or '+convert(nvarchar(20),0) +'=0)	
	--group by o.DistributorId '		--and cast(orderdate as date)>=DATEadd(dd,-(select NoOfDaysForBacklog from SDS.tblAppConfigData),getdate()) 

	--print (@Str)
	--exec (@Str)

	--declare @Str1 varchar(max)= 'insert into #TotSale
	--select r1.DistributorId, count(distinct r1.OrderRefNo)+ isnull(r2.TrpCnt,0), 
	--round((count(r1.OrderRefNo)+ isnull(r2.TrpCnt,0))/(select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),0)
	--from DCMS.tblRefillOrderDtls'+@GroupCode+' r1 WITH (NOLOCK) inner join sds.tblactiveitems ai with (nolock) on r1.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--left outer join 
	--(
	--	select o.DistributorId, count(distinct o.OrderRefNo) TrpCnt  from DCMS.tblRefillOrderDtls o WITH (NOLOCK)
	--	inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--	where (o.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	--	and (o.OrderStatusCode in ( ''DLVD'')) and (o.AreaRefNo='+convert(nvarchar(20),0) +' or '+convert(nvarchar(20),0) +'=0)
	--	and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate()) 
	--	group by o.DistributorId
	--) r2 on r1.DistributorId=r2.DistributorId
	--where (r1.DistributorId='+convert(nvarchar(20),@DistributorId) +') and (r1.OrderStatusCode in ( ''DLVD'')) 
	--and cast(r1.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate()) 
	--group by r1.DistributorId, r2.TrpCnt '

	--print (@Str1)
	--exec (@Str1)		
	--print 1
	--select * from #TotOdr
	--select * from #TotSale
	if exists(select 1 from sds.tblDistributorWiseBacklog where DistributorId=@DistributorId)
	Begin
	--	select @DistributorID DistributorID, isnull(@TotConsu,0) TotalConsumer, isnull(@ActConsu,0) ActiveConsumer, 
	--	isnull(@InactConsu,0) InActiveConsumer, isnull(@clusterCount,0) ClusterCnt,
	--	o.PendingOrders,isnull(s.TotalSale,0) TotalSale,isnull(s.AvgDailySale,0)  as AvgDailySale ,
	--convert(nvarchar(50),round((o.PendingOrders/convert(decimal(18,2),s.AvgDailySale)),2)) BackLog
	--	--(o.PendingOrders/isnull(nullif(s.AvgDailySale,'0.0'),'1.0'))     
	--	from #TotOdr o left outer join #TotSale s on o.DistributorId=s.DistributorId


	select @DistributorID DistributorID, isnull(@TotConsu,0) TotalConsumer, isnull(@ActConsu,0) ActiveConsumer, 
		isnull(@InactConsu,0) InActiveConsumer, isnull(@clusterCount,0) ClusterCnt,
		TotalPendingOrder as PendingOrders,0 TotalSale,isnull(AvgSale,0)  as AvgDailySale ,
	BackLog as  BackLog
		--(o.PendingOrders/isnull(nullif(s.AvgDailySale,'0.0'),'1.0'))     
		from  sds.tblDistributorWiseBacklog where DistributorId=@DistributorId and CAST(EntryDate as DATE)=CAST(GETDATE() AS DATE) 
	End
	else
	Begin
		select 
		@DistributorID DistributorID, isnull(@TotConsu,0) TotalConsumer, isnull(@ActConsu,0) ActiveConsumer, 
		isnull(@InactConsu,0) InActiveConsumer, isnull(@clusterCount,0) ClusterCnt, 0 PendingOrders, '0' TotalSale, 0 AvgDailySale , '0.0' BackLog 
	End

	--drop table #TotOdr
	--drop table #TotSale
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTransferBooking]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetTransferBooking 0

CREATE proc [SDS].[usp_GetTransferBooking]
@DistributorId bigint

as

BEGIN
SELECT tb.TransferId, tb.FromDistributorId, dFrm.JDEDistributorCode FromDistributorCode, dFrm.DistributorName FromDistributorName, tb.FromClusterId, 
	cfrm.AreaClusterName FromClusterName, tb.ToDistributorId, dto.JDEDistributorCode ToDistributorCode, dto.DistributorName ToDistributorName, 
    tb.ToClusterId, cto.AreaClusterName ToClusterName, tb.FromDate, tb.IsTransfer, tb.ToDate, tb.AddedBy, tb.LastUpdatedDate
FROM SDS.tblTransferBooking AS tb INNER JOIN
	DCMS.tblDistributorMaster AS dFrm WITH (NOLOCK) ON tb.FromDistributorId = dFrm.DistributorId INNER JOIN
	DCMS.tblDistributorMaster AS dto WITH (NOLOCK) ON tb.ToDistributorId = dto.DistributorId LEFT OUTER JOIN
	SDS.tblClusterMaster AS cfrm ON tb.FromClusterId = cfrm.ClusterId LEFT OUTER JOIN
	SDS.tblClusterMaster AS cto ON tb.ToClusterId = cto.ClusterId
where (FromDistributorId=@DistributorId or isnull(@DistributorId,0)=0)
		
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetTransferBookingById]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetTransferBookingById]
 --declare
@DistributorId int
 --set @DistributorId=14193
as
begin
	
	SET FMTONLY OFF

	declare @GCode VARCHAR(3)='', @Str varchar(max)='',@total int;
	SELECT @GCode=GroupCode FROM DCMS.tblDistributorGroupDetails WITH(NOLOCK) WHERE DistributorId=@DistributorId
	if(isnull(@GCode,'')='') set @GCode='' else set @GCode='$'+@GCode

	IF OBJECT_ID('tempdb..#TransferBooking') IS NOT NULL DROP TABLE #TransferBooking 
    create table #TransferBooking(DistributorId int,DistributorName nvarchar(50),ClusterId int,ClusterName nvarchar(50),
	TotalPendingOrder int,flag int,TotalInside int,)

	set  @Str = ' Insert into #TransferBooking(DistributorId,DistributorName,ClusterId,ClusterName,TotalPendingOrder,Flag,TotalInside)
				select distinct o.DistributorID,sds.fn_CamelCase(d.DistributorName) AS DistributorName,cm.ClusterId,sds.fn_CamelCase(cm.AreaClusterName) AS ClusterName,
				Count(o.OrderRefNo) AS TotalPendingOrder,0,0
				FROM DCMS.tblRefillOrderDtls'+@GCode +' o WITH (NOLOCK) inner join SDS.tblAreaClusterMapping ac WITH (NOLOCK) on o.AreaRefNo=ac.AreaRefNo
				inner join sds.tblClusterMaster cm with(nolock) on ac.AreaClusterId=cm.ClusterId
				inner join dcms.tblDistributorMaster d with(nolock) on cm.DistributorId=d.DistributorId
				inner join sds.tblConsumerDetails cd with(nolock) on o.DistributorID=cd.DistributorID and o.UniqueConsumerId=cd.UniqueConsumerId
				WHERE o.DistributorID = '+ convert(nvarchar(25),@DistributorId) +' and cm.IsActive=''Y'' 
				and cd.Latitude is not null and cd.Longitude is not null and cd.incluster=1 and cd.clusterId=ac.areaClusterid
				and o.OrderStatusCode in (''0'',''OPEN'',''AGEN'',''APRN'')
				group by o.DistributorID,d.DistributorName,cm.ClusterId,cm.AreaClusterName '

	print(@str)
	exec (@Str)

	Update #TransferBooking set flag=1
	from #TransferBooking tb WITH(NOLOCK) inner join sds.tblOverLappClusterDtls ol WITH(NOLOCK) on ol.SourceClusterId=tb.ClusterId 
		and cast(LastUpdatedDate as date)=cast(getdate() as date) 
		and SourceDistributorId=@DistributorId

	Update #TransferBooking set TotalInside=AvailableCnt
	from #TransferBooking tb WITH(NOLOCK) inner join
	(
		SELECT ol.SourceDistributorId,ol.SourceClusterId,count(InsideCount) AS AvailableCnt	
		from SDS.tblOverLappClusterDtls ol WITH(NOLOCK) left outer join SDS.tblClusterMaster cl on ol.DestClusterId=cl.ClusterId	
		where ol.SourceDistributorId=@DistributorId and cast(ol.LastUpdatedDate as date)=CAST(getdate() as date)	
		group by ol.SourceDistributorId,ol.SourceClusterId
	) ab on tb.DistributorId=ab.SourceDistributorId and tb.ClusterId=ab.SourceClusterId

	Select DistributorId,DistributorName,ClusterId,ClusterName,TotalPendingOrder,flag,TotalInside From #TransferBooking
	
	drop table #TransferBooking

end
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTransferBookingConsumerDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- SDS.usp_GetTransferBookingConsumerDetails 14193, 77
CREATE proc [SDS].[usp_GetTransferBookingConsumerDetails]
--declare
@DistributorId int,
@ClusterId bigint
--set @DistributorId=14193; set @ClusterId=70;
as
BEGIN

	SET FMTONLY OFF

	declare @GCode VARCHAR(3)='', @Str varchar(max)=''
	SELECT @GCode=GroupCode FROM DCMS.tblDistributorGroupDetails WITH(NOLOCK) WHERE DistributorId=@DistributorId
	if(isnull(@GCode,'')='') set @GCode='' else set @GCode='$'+@GCode

	IF OBJECT_ID('tempdb..#TransferBookingDts') IS NOT NULL DROP TABLE #TransferBookingDts
    create table #TransferBookingDts(DistributorId int,UniqueConsumerId numeric(17,0),OrderRefNo numeric(17,0),AreaRefNo numeric(17,0),
	AreaName nvarchar(50),ClusterId bigint,ClusterName nvarchar(50),Latitude nvarchar(50),Longitude nvarchar(50),OrderDate datetime)

	set  @Str = ' Insert into #TransferBookingDts(DistributorId,UniqueConsumerId,OrderRefNo,AreaRefNo,AreaName,ClusterId,ClusterName,Latitude,Longitude,OrderDate)
				SELECT distinct o.DistributorID,cd.UniqueConsumerId,o.OrderRefNo,cd.AreaRefNo,cd.AreaName,
				cm.ClusterId,sds.fn_CamelCase(cm.AreaClusterName) AS ClusterName,
				ISNULL(cd.Latitude,'''') AS Latitude,ISNULL(cd.Longitude,'''') AS Longitude,cast(o.OrderDate as date) AS OrderDate
				FROM DCMS.tblRefillOrderDtls'+@GCode +' o WITH (NOLOCK) inner join SDS.tblAreaClusterMapping ac WITH (NOLOCK) on o.AreaRefNo=ac.AreaRefNo
				inner join sds.tblClusterMaster cm with(nolock) on ac.AreaClusterId=cm.ClusterId
				inner join sds.tblConsumerDetails cd with(nolock) on o.DistributorID=cd.DistributorID and o.UniqueConsumerId=cd.UniqueConsumerId
				left outer join sds.tblTransferBookingNew tb with(nolock) on o.UniqueConsumerId=tb.UniqueConsumerId and o.OrderRefNo=tb.OrderRefNo
				WHERE o.DistributorID = '+ convert(nvarchar(25),@DistributorId) + ' and cm.ClusterId = ' + convert(nvarchar(25),@ClusterId) 
				+ ' and cm.IsActive=''Y'' and cd.Latitude is not null and cd.Longitude is not null and cd.incluster=1 
				and cd.clusterId=ac.areaClusterid and o.OrderStatusCode in (''0'',''OPEN'',''APRN'',''AGEN'')and tb.UniqueConsumerId is null'

	print(@str)
	exec (@Str)

	Select DistributorId,UniqueConsumerId,OrderRefNo,AreaRefNo,AreaName,ClusterId,Latitude,Longitude,OrderDate From #TransferBookingDts
	
	drop table #TransferBookingDts

END

GO
/****** Object:  StoredProcedure [SDS].[usp_GetTrfConsumerLstForMap]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_GetTrfConsumerLstForMap]
--declare
@SourceDistributorId int,
@DestDistributorId int
as
BEGIN

	SELECT tb.UniqueConsumerId,cd.ConsumerNo,cd.ConsumerName,tb.Latitude,tb.Longitude,tb.SourceClusterId,tb.DestClusterId,
	tb.OrderRefNo,ol.OrderDate
	from SDS.tblTransferBookingNew tb WITH(NOLOCK) left outer join
	SDS.tblConsumerDetails cd WITH(NOLOCK) on tb.UniqueConsumerId=cd.UniqueConsumerId left outer join
	SDS.tblOverLappClusterDtls ol WITH(NOLOCK) on tb.UniqueConsumerId=ol.UniqueConsumerId
	where tb.SourceDistributorId=@SourceDistributorId and tb.DestDistributorId=@DestDistributorId 
	and cast(tb.LastUpdatedDate as date)=CAST(getdate() as date)		
END
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripBookingsToCheckValidLocation]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [SDS].[usp_GetTripBookingsToCheckValidLocation]
--declare
@DistributorId int,
@AreaClusterId bigint
--set @DistributorId=15139;	set @AreaClusterId=48

as

BEGIN
SET FMTONLY OFF
----------------- Get Cluster wise order count to pick for trip planning
	declare  @clusterwiseOrderCnt table(id int identity,clusterId bigint,ClusterName nvarchar(200),NoOfTrips int, vehicleId bigint, VehCapacity int, 
	orderCnt int, FromDistributorId int, FromClusterId bigint)
	
	insert into @clusterwiseOrderCnt	
	SELECT   c.clusterid, c.AreaClusterName, isnull(dc.NoOfTrip,0),v.VehicleId, isnull(v.RTOCapacity,0),isnull(dc.NoOfTrip,0)* isnull(v.RTOCapacity,0), 
	tb.FromDistributorId, tb.FromClusterId
	FROM sds.tblClusterMaster c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId
	left outer join SDS.tblVehicleDeliveryBoyMapping dv on dc.StaffRefNo=dv.DeliveryBoyId
	left outer join SDS.tblVehicleMaster AS v ON v.VehicleId = dv.VehicleId	
	left outer join sds.tblTransferBooking tb on tb.ToDistributorId=@DistributorId and tb.ToClusterId=c.ClusterId
	and IsTransfer='Y' and cast(getdate() as date) between cast(tb.FromDate as date) and cast(isnull(tb.ToDate, cast(getdate() as date)) as date)
	where c.IsActive='Y' and dc.IsActive='Y' and dv.Active='Y' and v.Active='Y' and c.distributorId=@DistributorId
		and (c.clusterid = @AreaClusterId or @AreaClusterId=0)

	--select * from @clusterwiseOrderCnt
-----------------------------------------------------------------------------------
	
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

	CREATE TABLE #tblpendingOdr(id int identity, BackLogdays int,ClusterId bigint,VehicleId bigint, StaffRefNo numeric(17, 0),DistributorID int,
	AreaRefNo numeric(17, 0), DeliveryType nvarchar(10), OrderRefNo numeric(17, 0),OrderNo int,OrderDate datetime,UniqueConsumerId numeric(17, 0),
	ConsumerNo int,ConsumerName varchar(100),AreaName varchar(100),Latitude nvarchar(50),Longitude nvarchar(50),PlaceId nvarchar(500), InCluster bit, 
	InTraidingArea bit, ConMobileNo numeric(10,0),ConAddress nvarchar(500),	NatureCode varchar(2),PriceCode int,ItemDescription varchar(100),
	OrderQuantity int,OrderStatusCode varchar(5),ExpectedDeliveryDate datetime,RSP money, Source nvarchar(50),FromDistributorID int, FromClusterId bigint)

	declare @c int, @c1 int, @OrderCnt int, @ClusterId bigint, @strquery varchar(max), @VehicleId bigint, @OrderPickBuffer int
	declare @ClusterIdFrom bigint, @DistributorIdFrom int, @GroupCode2 VARCHAR(3)='', @strquery2 varchar(max), @DelBoyNo numeric(17, 0)
	select @c1=max(id) from @clusterwiseOrderCnt

	set @c=1

	While (@c<=@c1)
	Begin
		set @OrderCnt=0; set @ClusterId=0; set @strquery=''; set @VehicleId=0;
		select @OrderCnt=orderCnt, @ClusterId=clusterId,@VehicleId=VehicleId, @ClusterIdFrom=isnull(FromClusterId,0), @DistributorIdFrom=isnull(FromDistributorId,0) 
		from @clusterwiseOrderCnt where id=@c
		set @OrderPickBuffer=(select top 1 isnull(OrderPickBuffer,0) from sds.tblAppConfigData)
		set @OrderCnt=@OrderCnt+(@OrderCnt*@OrderPickBuffer/100)
	
		set @strquery=( '
			insert into #tblpendingOdr (BackLogdays,ClusterId,VehicleId, StaffRefNo,DistributorID,AreaRefNo, DeliveryType,OrderRefNo,OrderNo,OrderDate,
			UniqueConsumerId,ConsumerNo,ConsumerName, AreaName,Latitude,Longitude,PlaceId,InCluster,InTraidingArea,ConMobileNo, ConAddress, NatureCode,
			PriceCode,ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,Source,FromDistributorID, FromClusterId)		

			SELECT datediff(d,o.OrderDate,getdate()) DaysDelay, dc.ClusterId,'+convert(nvarchar(15),@VehicleId)+' VehicleId, dc.StaffRefNo, 
				o.DistributorID, o.AreaRefNo, pod.DeliveryType, o.OrderRefNo, o.OrderNo,o.OrderDate, o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, 
				da.AreaName, c.Latitude, c.Longitude,c.PlaceId, isnull(c.InCluster,0),isnull(c.inTradingArea,0), c.MobileNo, c.Address,o.NatureCode, 
				o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,0 RSP, c.Source,0 FromDistributorID, 0 FromClusterId
			FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) LEFT OUTER JOIN 
				SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
				DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN 
				sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
				SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
				SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN 
				DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
				sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId  LEFT OUTER JOIN
				(	select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
					on t.TripId=d.TripId and cast(t.TripDate as date)=cast(getdate() as date)
				) t on t.OrderRefNo = o.OrderRefNo		
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' 
				AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') AND dc.ClusterId = '+convert(nvarchar(20),@ClusterId)+' 
				and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+') 
				AND t.OrderRefNo IS NULL and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
		' )

		set @strquery2=''; set @DelBoyNo=0;
		if (@ClusterIdFrom>0 and @DistributorIdFrom>0)
		Begin
			SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorIdFrom
			if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2
			select @DelBoyNo=staffrefNo from SDS.tblDeliveryBoyClusterMapping with(nolock) where ClusterId=@ClusterId
			set @strquery2=( '
			UNION

			SELECT datediff(d,o.OrderDate,getdate()) DaysDelay, '+convert(nvarchar(20),@ClusterId)+','+convert(nvarchar(15),@VehicleId)+' VehicleId, '+
				convert(nvarchar(25),@DelBoyNo)+', '+convert(nvarchar(25),@DistributorId)+', o.AreaRefNo, DeliveryType, o.OrderRefNo, o.OrderNo,o.OrderDate,
				o.UniqueConsumerId, c.ConsumerNo,c.ConsumerName, da.AreaName, c.Latitude, c.Longitude, c.PlaceId, isnull(c.InCluster,0),isnull(c.inTradingArea,0),
				c.MobileNo, c.Address, o.NatureCode, o.PriceCode,i.ItemDescription, o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,
				0 RSP,c.Source, o.DistributorID FromDistributorID, dc.ClusterId FromClusterId
			FROM DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) LEFT OUTER JOIN 
				SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
				DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN
				sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
				SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
				SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId INNER JOIN 
				DCMS.tblDistributorAreaMaster da with(nolock) on da.AreaRefNo = o.AreaRefNo LEFT OUTER JOIN
				sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId  LEFT OUTER JOIN
				(	select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
					on t.TripId=d.TripId where t.DistributorID = '+convert(nvarchar(25),@DistributorIdFrom)+' AND cast(t.TripDate as date)=cast(getdate() as date)
				) t on t.OrderRefNo = o.OrderRefNo		
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorIdFrom)+' 
				AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') AND dc.ClusterId = '+convert(nvarchar(25),@ClusterIdFrom)+' 
				and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorIdFrom)+') 
				AND t.OrderRefNo IS NULL and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
			' )
			End
			else 		
			Begin 			
				set @strquery2='' 		
			End

			set @strquery=@strquery +' '+@strquery2
			print @strquery
			exec (@strquery)

		set @c=@c+1
		End

	select 1 As IsLocated, BackLogdays,ClusterId, VehicleId, StaffRefNo, DistributorID,AreaRefNo,OrderRefNo,OrderNo,OrderDate,
		UniqueConsumerId,ConsumerNo,SDS.fn_CamelCase( ConsumerName ) as ConsumerName,SDS.fn_CamelCase( AreaName ) as AreaName, 
		Latitude, Longitude, PlaceId,InCluster, InTraidingArea, ConMobileNo,ConAddress ConsumerAddress,cast(0 as numeric(6,0)) as pin,NatureCode,
		PriceCode, SDS.fn_CamelCase( ItemDescription ) as ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,RSP,
		ISNULL(SDS.fn_CamelCase(Source),'-') as Source,	FromDistributorID, FromClusterId
	from #tblpendingOdr 
	order by orderno
	
drop table #tblpendingOdr
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GettripCaseActiveDistwise]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [GettripCaseActiveDistwise]
--	Description		:	get Update trip Case Active Dist wise

--	Author			:	Swapnil

--				    Modifications
--	24-Feb-2021		swpnil			Created
**************************************************************/

CREATE  PROCEDURE [SDS].[usp_GettripCaseActiveDistwise]
@DistributorId int,
@CaseId int
AS
BEGIN
	
	select zo.ZOCode,zo.ZOName,ro.ROCode,ro.ROName,sa.SACode,sa.SAName,TC.[pk_MappingId],TC.[DistributorId],TC.[CaseId],TC.[LastUpdatedDate]
	, DM.JDEDistributorCode,DM.DistributorName
	,'Case ' + CAST(TC.[CaseId] as varchar(2)) + ' : ' + TCM.CaseName as CaseName,TCM.[EditAllowedFlag],TCM.[ActiveStatus],TCM.[ActiveForTrips]

	From	[SDS].[tbltripCaseActiveDistributorwise] TC inner join 
			[SDS].[tblTripCaseMaster] TCM on TC.CaseId=TCM.CaseId inner join 
			DCMS.tblDistributorMaster DM on DM.DistributorId=TC.DistributorId INNER JOIN
			[SDS].[tblSAMaster] sa WITH(NOLOCK) ON sa.SACode=DM.SACode INNER JOIN
			[SDS].[tblROMaster] ro WITH(NOLOCK) ON ro.ROCode=sa.ROCode INNER JOIN
			[SDS].[tblZOMaster] zo WITH(NOLOCK) ON zo.ZOCode=ro.ZOCode

	where (TC.DistributorId=@DistributorId or @DistributorId=0)
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripCaseMaster]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	 <Author,Rahul>
-- Create date: <Create Date,13-01-2018,>
-- Description:	<Description,to get Item details from Table against respective distributor,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetTripCaseMaster]

@DistributorId int,
@ActiveForTrips nvarchar(10)

AS
BEGIN
    

	IF(@DistributorId=0)
	BEGIN
		Select  cast(0 as int) DistributorId,[CaseId],[CaseName],[EditAllowedFlag],[ActiveStatus],[ActiveForTrips],[LastUpdatedDate]

		From [SDS].[tblTripCaseMaster]
		where (ActiveForTrips=@ActiveForTrips OR @ActiveForTrips='') 
	END
	ELSE 
	BEGIN

		Select  TCD.DistributorId,TCM.[CaseId],TCM.[CaseName],TCM.[EditAllowedFlag],TCM.[ActiveStatus],TCM.[ActiveForTrips],
				TCM.[LastUpdatedDate]

		From	[SDS].[tbltripCaseActiveDistributorwise] TCD inner join
				[SDS].[tblTripCaseMaster] TCM on TCD.[CaseId] = TCM.CaseId
		where	(TCD.DistributorId=@DistributorId OR @DistributorId=0) and (TCM.ActiveForTrips=@ActiveForTrips OR @ActiveForTrips='') 

	END
END







GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripCaseParameters]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [SDS].[usp_GetTripCaseParameters] 
--declare 
@DistributorId int,
@ClusterId int,
@ParameterFlag nvarchar(50)

AS

BEGIN

SELECT  [DistributorId],[ClusterId],[ParameterType],[ParameterId],[ParameterValue],[ParameterValueText],[Sequence]
  FROM [SDS].[tblTripCaseDetails] 
  where DistributorId=@DistributorId and ClusterId=@ClusterId and ParameterValueText=@ParameterFlag

END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripCaseSourceMaster]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	 <Author,Rahul>
-- Create date: <Create Date,13-01-2018,>
-- Description:	<Description,to get Item details from Table against respective distributor,>
-- =============================================
Create PROCEDURE [SDS].[usp_GetTripCaseSourceMaster]
@ParameterId int
AS
BEGIN
    
   select	[SourceId],[ParameterId],[SourceName],[ActiveStatus],[LastUpdatedDate]
  From	 [SDS].[tblTripCaseSourceMaster]
  where	 ([ParameterId]=@ParameterId OR @ParameterId=0)
  
END







GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripCasesSummary]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE proc [SDS].[usp_GetTripCasesSummary]    
--declare    
@DistributorId int,    
@ClusterId INT,    
@Tdate datetime--,    
--@CaseNo nvarchar(50)    
--set @DistributorId=14145; set @ClusterId=115; set @Tdate='2021-08-27'; --set @CaseNo='OD'    
  
as    
declare @trip INT=0;     
BEGIN  
 SET FMTONLY OFF  
    IF OBJECT_ID('tempdb..#CasesDetails') IS NOT NULL BEGIN  DROP TABLE #CasesDetails END  
  create table #CasesDetails (CaseNo varchar(10), TripDate datetime ,DistributorId int ,ClusterId bigint, ClusterName varchar(100), DensityGroupNo int ,NoOfBookings int,  
   OldestBookingDate datetime, latedeliverydate datetime,  
 OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int, KM_Air int, KM_Road int ,DelTripSequenceNoDA int,DelTripSequenceNoOD int)  
   
   Insert into #CasesDetails    
   SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName,     
   dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,    
   max(datediff(dd,dad.OrderDate,@Tdate)) latedeliverydate,  
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,    
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,    
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,    
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,    
   Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, --dad.DelTripSequenceNo as DelTripSequenceNo1,dad.DelTripSequenceNo_OD as DelTripSequenceNo,  
   ISNULL(dad.DelTripSequenceNo,0) as DelTripSequenceNoDA  ,  
   ROW_NUMBER() OVER(ORDER BY Isnull(max(dad.KM_Air),0) ASC)  as DelTripSequenceNoOD  
   FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId    
   left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId    
   where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)    
   and (isnull(da.CaseNo,'') in ('DA'))    
   GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName,   
   dad.DensityGroupNo, dad.DelTripSequenceNo ,dad.DelTripSequenceNo_OD,dad.DelTripSequenceNo_AD   
  
   select @trip = max(DelTripSequenceNoDA)from #CasesDetails   
  
   SELECT CaseNo,TripDate,DistributorId,ClusterId,ClusterName,DensityGroupNo,NoOfBookings,OldestBookingDate,latedeliverydate ,OlderThan10Days,OlderThan5Days,  
   OlderThan2Days, Upto2Days, KM_Air, KM_Road ,DelTripSequenceNoDA,(CASE when (DelTripSequenceNoOD <= @trip) THEN   DelTripSequenceNoOD ELSE 0  END)DelTripSequenceNoOD  
   FROM #CasesDetails  
   DROP TABLE #CasesDetails   
End    
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripCasesSummaryforAD]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetTripCasesSummaryforAD]          
--declare          
@DistributorId int,          
@ClusterId INT,          
@Tdate datetime          
--@CaseNo nvarchar(50)          
--set @DistributorId=14145; set @ClusterId=115; set @Tdate='2021-09-23'; --set @CaseNo='OD'          
        
as          
declare @trip INT=0;           
BEGIN        
 SET FMTONLY OFF        
    IF OBJECT_ID('tempdb..#CasesDetails') IS NOT NULL BEGIN  DROP TABLE #CasesDetails END        
  create table #CasesDetails (CaseNo varchar(10), TripDate datetime ,DistributorId int ,ClusterId bigint, ClusterName varchar(100), DensityGroupNo int ,NoOfBookings int,        
   OldestBookingDate datetime, latedeliverydate datetime,        
 OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int, KM_Air int, KM_Road int ,DelTripSequenceNoAD int,DelTripSequenceNoOA int)        
         
   Insert into #CasesDetails          
   SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, sds.fn_CamelCase(c.AreaClusterName) ClusterName,           
   dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,          
   max(datediff(dd,dad.OrderDate,@Tdate)) latedeliverydate,        
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>10) then 1 else 0 end) OlderThan10Days,          
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>5 and datediff(dd,dad.OrderDate,@Tdate)<=10) then 1 else 0 end) OlderThan5Days,          
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)>2 and datediff(dd,dad.OrderDate,@Tdate)<=5) then 1 else 0 end) OlderThan2Days,          
   sum(case when (datediff(dd,dad.OrderDate,@Tdate)<=2) then 1 else 0 end) Upto2Days,          
   Isnull(max(dad.KM_Air),0) KM_Air, Isnull(max(dad.km_Road),0) KM_Road, --dad.DelTripSequenceNo as DelTripSequenceNo1,dad.DelTripSequenceNo_OD as DelTripSequenceNo,        
   ISNULL(dad.DelTripSequenceNo_AD,0) as DelTripSequenceNoAD  ,        
   --ROW_NUMBER() OVER(ORDER BY Isnull(max(dad.KM_Air),0) ASC)      
   ISNULL(dad.DelTripSequenceNo_AD,0) as DelTripSequenceNoOA        
   FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId          
   left outer join sds.tblClusterMaster c on da.ClusterId=c.ClusterId          
   where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId or @ClusterId=0) and cast(da.TripDate as date)=cast(@Tdate as date)          
   and (isnull(da.CaseNo,'') in ('AD'))          
   GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId,c.AreaClusterName,         
   dad.DensityGroupNo, dad.DelTripSequenceNo ,dad.DelTripSequenceNo_OA,dad.DelTripSequenceNo_AD         
        
   select @trip = max(DelTripSequenceNoAD)from #CasesDetails         
        
   SELECT CaseNo,TripDate,DistributorId,ClusterId,ClusterName,DensityGroupNo,NoOfBookings,OldestBookingDate,latedeliverydate ,OlderThan10Days,OlderThan5Days,        
   OlderThan2Days, Upto2Days, KM_Air, KM_Road ,DelTripSequenceNoAD,(select Isnull(max(KM_Air),0) KM_Air from  SDS.tblDensityAnalysisDetails dad
   inner join SDS.tblDensityAnalysis da  ON da.TripId = dad.TripId  
   where da.CaseNo ='OA' and DensityGroupNo =c.DensityGroupNo and ClusterId =c.ClusterId) KM_AirOA,
   --(CASE when (DelTripSequenceNoOE <= @trip) THEN   DelTripSequenceNoOE ELSE 0  END)    
   DelTripSequenceNoOA      
   FROM #CasesDetails c 
   DROP TABLE #CasesDetails         
End 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripCaseWithParameter]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	 <Author,Rahul>
-- Create date: <Create Date,13-01-2018,>
-- Description:	<Description,to get Item details from Table against respective distributor,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetTripCaseWithParameter]
-- Add the parameters for the stored procedure here

AS
BEGIN
    
    select	TCPA.[TripCaseId],TCM.[CaseId],TCM.[CaseName],TCM.[ActiveForTrips],TCM.[ActiveStatus] as TripCaseActiveStatus,TCM.EditAllowedFlag
,TP.[ParameterId],TP.[ParameterName],TP.[ParameterType],TP.[ActiveStatus]
,TCPA.Weightage,TCPA.SequencePriority,TCPA.[OnOffFlag],
ISNULL(TCPA.[RefId],'')as RefId,ISNULL(TCPA.[RefValue],'') as RefValue,
ISNULL((Select count(TCSM.[SourceId])  From [SDS].[tblTripCaseSourceMaster] TCSM where TCSM.ParameterId=TP.[ParameterId]),0) as IsSourceMaster

  From	[SDS].[tblTripCaseMaster] TCM Left outer join 
[SDS].[tblTripCaseParameter] TCPA on TCPA.CaseId = TCM.CaseId Left outer join
[SDS].[tblTripParameter]  TP on TP.[ParameterId]= TCPA.[ParameterId]

  order By TCM.[CaseId],TP.[ParameterId]

END







GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripDataDensityAnalysisDelSeq]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetTripDataDensityAnalysisDelSeq]
--declare 
@DistributorId int,
@TripDate datetime,
@CaseNo nvarchar(10),
@ClusterId bigint

as

SELECT        d.TripId, d.CaseNo, d.TripDate, d.DistributorId, d.ClusterId, d.StaffRefNo, 
d.VehicleId, d.GodownId, d.GLatitude, d.GLongitude, dd.TripPlanningDetId, dd.DensityGroupNo, dd.KM_Air, dd.KM_Road, 
dd.DelTripSequenceNo, dd.SequenceNo, dd.OrderRefNo, dd.UniqueConsumerId, dd.PriceCode, 
dd.AreaRefNo, dd.OrderNo, dd.OrderDate, dd.OrderStatus
FROM SDS.tblTripDensityHdr AS d INNER JOIN SDS.tblTripDensityDtls AS dd ON d.TripId = dd.TripId
where d.DistributorId=@DistributorId and d.ClusterId=@ClusterId and d.CaseNo=@CaseNo and cast(d.TripDate as date)=cast(@TripDate as date) 
and isnull(DelTripSequenceNo,0)>0

GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripDataForDensityCard]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_GetTripDataForDensityCard]
--declare
@DistributorId int,
@TripDate datetime
--,@ClusterId bigint
--set @DistributorId=14193; set @tripDate='2020-11-10'; set @ClusterId=70

as

select trp.TripId, trp.TripDate, trp.DistributorId, trp.ClusterId, cast(trp.BookingDate as date) BookingDate,
isnull(trp.[TRP/01],0) [TRP/01], isnull(trp.[TRP/02],0) [TRP/02], isnull(trp.[TRP/03],0) [TRP/03], isnull(trp.[TRP/04],0) [TRP/04], isnull(trp.[TRP/05],0) [TRP/05], 
isnull(trp.[TRP/06],0) [TRP/06], isnull(trp.[TRP/07],0) [TRP/07], isnull(trp.[TRP/08],0) [TRP/08], isnull(trp.[TRP/09],0) [TRP/09], isnull(trp.[TRP/10],0) [TRP/10]
FROM
(
	SELECT t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.ClusterId, cast(td.OrderDate as date) BookingDate,count( td.OrderRefNo) BookingCount
	FROM SDS.tblTripPlanning AS t WITH (nolock) INNER JOIN SDS.tblTripPlanningDetails AS td WITH (nolock) ON t.TripId = td.TripId
	WHERE t.DistributorId = @DistributorId and isnull(td.IsPODHD,'HD')='HD' AND CAST(t.TripDate AS date) = CAST(@TripDate AS date) --AND (t.ClusterId = @ClusterId OR @ClusterId = 0)
	group by t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.ClusterId, cast(td.OrderDate as date)
) AS SourceTable PIVOT(AVG([BookingCount]) FOR TripNo IN([TRP/01], [TRP/02],[TRP/03],[TRP/04],[TRP/05],[TRP/06],[TRP/07],[TRP/08],[TRP/09],[TRP/10])) AS trp;


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripDetailsForDeliveryBoyWise]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_GetTripDetailsForDeliveryBoyWise]
--declare
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@TripDate datetime,
@FromDate datetime,
@ToDate datetime


--set @DistributorId =14145 set @DeliveryBoyId =12011414500000014 set @TripDate ='2021-01-21' set @FromDate ='2021-01-21' set @ToDate ='2021-01-21'
AS

BEGIN	
set FMTONLY OFF

	DECLARE @GroupCode VARCHAR(3)='', @TotCount int=0, @strquery varchar(max)
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#TotCount') IS NOT NULL DROP TABLE #TotCount
	create table #TotCount(TotCount int)

		set @strquery=( ' insert into #TotCount SELECT count(o.OrderRefNo)
		FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
		left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o with (NOLOCK) on tpd.AreaRefNo=o.AreaRefNo
		left outer join SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = o.UniqueConsumerId 
		left outer JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode
		WHERE	TP.DistributorId='+convert(nvarchar(25),@DistributorId)+' and  ( TP.StaffRefNo='+convert(nvarchar(25),@DeliveryBoyId)+' OR 0='+convert(nvarchar(25),@DeliveryBoyId)+')  
		and CD.ConsumerStatus=''Active'' and o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'')
		and CAST(TP.TripDate as date)=CAST(ISNULL('''+ CONVERT(nvarchar(50), @TripDate,101)+''',TP.TripDate) as date)
		and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
		and tpd.IsPODHD=''POD''
		')
		
		print @strquery
		exec(@strquery)

		select @TotCount =isnull(TotCount,0) from #TotCount
		
	IF(@FromDate is null)
	BEGIN 
		SELECT        TP.TripId, TP.TripNo, TP.TripDate, TP.TripStartDate, TP.TripEndDate, TP.StaffRefNo, TP.StaffName, TP.ClusterId, CM.AreaClusterName, 
			VM.VehicleId, VM.VehicleNo, VM.RTOCapacity, TP.TripStatus,(select top 1 isPODHD from sds.tblTripPlanningDetails where TripId=TP.TripId) ispod,
			case when ((select top 1 isPODHD from sds.tblTripPlanningDetails where TripId=TP.TripId) ='POD') then @TotCount else COUNT(TPD.TripId) end AS TotalOrder,
			--(SELECT  COUNT(*) FROM SDS.tblTripPlanning TP   WITH (nolock) INNER JOIN SDS.tblTripPlanningDetails AS TPD WITH (nolock) ON TPD.TripId = TP.TripId ) AS TotalOrder,
			sum(CASE WHEN isnull(TPD.OrderStatus,'') IN('0','','APRN','AGEN','OPEN') THEN 1 ELSE 0 END) AS PendingOrder
			,sum(CASE WHEN TPD.OrderStatus='DLVD' THEN 1 ELSE 0 END) as DeliveredOrder 
			,sum(CASE WHEN TPD.OrderStatus='Denied' THEN 1 ELSE 0 END) as DeniedOrder
			,sum(CASE WHEN TPD.OrderStatus='NotAvailable' THEN 1 ELSE 0 END) as NotAvailableOrder
			,SUM(case when TPD.OrderStatus IN('DLVD','Denied','NotAvailable') then 1 else 0 end) as CompletedOrder
			,SUM(case when TPD.OrderStatus ='SKIP' THEN 1 ELSE 0 end) as SkipOrder,
			TP.AddiStaffRefNo,AddiStaffName, (select top 1 isPODHD from sds.tblTripPlanningDetails where TripId=TP.TripId) as isPODHD

		FROM SDS.tblTripPlanning AS TP WITH (nolock) INNER JOIN
			SDS.tblTripPlanningDetails AS TPD WITH (nolock) ON TPD.TripId = TP.TripId INNER JOIN
			SDS.tblClusterMaster AS CM WITH (nolock) ON CM.ClusterId = TP.ClusterId INNER JOIN
			SDS.tblVehicleMaster AS VM WITH (nolock) ON VM.VehicleId = TP.VehicleId
		WHERE	TP.DistributorId=@DistributorId and  ( TP.StaffRefNo=@DeliveryBoyId OR 0=@DeliveryBoyId) 
			and CAST(TP.TripDate as date)=CAST(ISNULL(@TripDate,TP.TripDate) as date)			
		GROUP BY TP.TripId, TP.TripNo, TP.TripDate, TP.TripStartDate, TP.TripEndDate, TP.StaffRefNo, TP.StaffName, TP.ClusterId, 
			CM.AreaClusterName, VM.VehicleId, VM.VehicleNo, VM.RTOCapacity, TP.TripStatus,--,TPD.OrderStatus 
			TP.AddiStaffRefNo,AddiStaffName
			
	END
	else
	BEGIN
		SELECT TP.TripId, TP.TripNo, TP.TripDate, TP.TripStartDate, TP.TripEndDate, TP.StaffRefNo, TP.StaffName, TP.ClusterId, 
			CM.AreaClusterName, VM.VehicleId, VM.VehicleNo, VM.RTOCapacity, TP.TripStatus,(select top 1 isPODHD from sds.tblTripPlanningDetails where TripId=TP.TripId) ispod, COUNT(TPD.TripId) AS PendingOrder,
			COUNT(TPD.TripId) AS TotalOrder,
			sum(CASE WHEN isnull(TPD.OrderStatus,'') IN('0','','APRN','AGEN','OPEN') THEN 1 ELSE 0 END) AS PendingOrder
			,sum(CASE WHEN TPD.OrderStatus='DLVD' THEN 1 ELSE 0 END) as DeliveredOrder 
			,sum(CASE WHEN TPD.OrderStatus='Denied' THEN 1 ELSE 0 END) as DeniedOrder
			,sum(CASE WHEN TPD.OrderStatus='NotAvailable' THEN 1 ELSE 0 END) as NotAvailableOrder
			,SUM(case when TPD.OrderStatus IN('DLVD','Denied','NotAvailable') then 1 else 0 end) as CompletedOrder
			,SUM(case when TPD.OrderStatus ='SKIP' THEN 1 ELSE 0 end) as SkipOrder,
			TP.AddiStaffRefNo,AddiStaffName, (select top 1 isPODHD from sds.tblTripPlanningDetails where TripId=TP.TripId) as isPODHD

			FROM  SDS.tblTripPlanningHistory AS TP WITH (nolock) INNER JOIN
			SDS.tblTripPlanningDetailsHistory AS TPD WITH (nolock) ON TPD.TripId = TP.TripId INNER JOIN
			SDS.tblClusterMaster AS CM WITH (nolock) ON CM.ClusterId = TP.ClusterId INNER JOIN
			SDS.tblVehicleMaster AS VM WITH (nolock) ON VM.VehicleId = TP.VehicleId
		WHERE	TP.DistributorId=@DistributorId and  ( TP.StaffRefNo=@DeliveryBoyId OR 0=@DeliveryBoyId) 							
			and CAST(TP.TripDate as date) Between  CAST(ISNULL(@FromDate, TP.TripDate) as date) and CAST(ISNULL(@ToDate, TP.TripDate) as date)
		GROUP BY TP.TripId,TPD.OrderDate, TP.TripNo, TP.TripDate, TP.TripStartDate, TP.TripEndDate, TP.StaffRefNo, TP.StaffName, TP.ClusterId, 
			CM.AreaClusterName, VM.VehicleId, VM.VehicleNo, VM.RTOCapacity, TP.TripStatus,TP.AddiStaffRefNo,AddiStaffName
	END	
	drop table #TotCount	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripDetailsForRoute]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_GetTripDetailsForRoute]
--declare
@DistributorId int,
@TripId bigint
--set @DistributorId=14193; set @TripId=179569
as
-- --31797  31801

Begin
	declare @DelBoyId numeric(17,0)
	select @DelBoyId= isnull(StaffRefNo,0) from sds.tblTripPlanning where DistributorId=@DistributorId and TripId=@TripId

	SELECT	t.TripId, t.TripNo, t.TripDate, t.ClusterId,t.StaffRefNo ,( t.StaffName ) as StaffName, v.VehicleNo, tdl.OrderRefNo, 
		tdl.UniqueConsumerId, tdl.ItemDesc, tdl.OrderNo, tdl.OrderDate, tdl.OrderQuantity, tdl.TotalPrice, c.ConsumerNo, c.ConsumerName, c.MobileNo, 
		c.Address, c.Pin, c.AreaName, c.Latitude lat, c.Longitude lng, c.Source, tdl.ExpectedDeliveryDate,t.GodownId,t.GLatitude AS GodownLat,
		t.GLongitude AS GodownLong,	tdl.SequenceNo, tdl.orderstatus, tdl.AreaRefNo, tdl.IsPODHD,DBLatitude, DBLongitude, UpdateBeforeMin
	FROM SDS.tblTripPlanning AS t INNER JOIN SDS.tblTripPlanningDetails AS tdl ON t.TripId = tdl.TripId INNER JOIN
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId INNER JOIN 
		SDS.tblConsumerDetails AS c ON tdl.UniqueConsumerId = c.UniqueConsumerId and c.DistributorID=@DistributorId
		left outer join (	
			SELECT TOP (1) DistributorId, StaffRefNo, Latitude as DBLatitude, Longitude as DBLongitude, datediff(MINUTE,[Datetime],getdate()) UpdateBeforeMin  
			FROM SDS.tblDelBoyLocationSave WHERE DistributorId=@DistributorId and StaffRefNo=@DelBoyId ORDER BY [DateTime] DESC 
		) dl on t.DistributorId=dl.DistributorId and t.StaffRefNo=dl.StaffRefNo	
	Where t.TripId=@TripId and t.DistributorId=@DistributorId and isnull(tdl.IsPODHD,'HD')='HD' 

	UNION

	SELECT	t.TripId, t.TripNo, t.TripDate, t.ClusterId,t.StaffRefNo ,( t.StaffName ) as StaffName, v.VehicleNo, tdl.OrderRefNo, 
		tdl.UniqueConsumerId, tdl.ItemDesc, tdl.OrderNo, tdl.OrderDate, tdl.OrderQuantity, tdl.TotalPrice, 0 ConsumerNo, '' ConsumerName, 0 MobileNo,
		'' Address, 0 Pin, da.AreaName, pod.Latitute lat, pod.Longitute lng, '' Source,tdl.ExpectedDeliveryDate,
		t.GodownId,t.GLatitude AS GodownLat,t.GLongitude AS GodownLong,	tdl.SequenceNo, tdl.orderstatus, tdl.AreaRefNo, tdl.IsPODHD 
		,DBLatitude, DBLongitude, UpdateBeforeMin
	 from SDS.tblTripPlanning AS t INNER JOIN
		SDS.tblTripPlanningDetails AS tdl ON t.TripId = tdl.TripId INNER JOIN
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId inner join
		dcms.tblDistributorAreaMaster da on tdl.AreaRefNo=da.AreaRefNo and t.DistributorId=da.DistributorID left outer join
		sds.tblCDCMSAreaPODDetails pod on tdl.AreaRefNo=pod.AreaRefNo and t.DistributorId=da.DistributorID
		left outer join 
		(SELECT TOP (1) DistributorId, StaffRefNo, Latitude as DBLatitude, Longitude as DBLongitude, datediff(MINUTE,[Datetime],getdate()) UpdateBeforeMin  
		 FROM SDS.tblDelBoyLocationSave WHERE DistributorId=@DistributorId and StaffRefNo=@DelBoyId ORDER BY [DateTime] DESC 
		 ) dl on t.DistributorId=dl.DistributorId and t.StaffRefNo=dl.StaffRefNo
	Where t.TripId=@TripId and t.DistributorId=@DistributorId and isnull(tdl.IsPODHD,'HD')='POD'
	ORDER BY tdl.SequenceNo

end


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripDetailsForRouteByDelBoy]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_GetTripDetailsForRouteByDelBoy 14145,1151414500000003,'2022-01-07'
CREATE PROC [SDS].[usp_GetTripDetailsForRouteByDelBoy]  
--declare  
@DistributorId int,  
@DelBoyId bigint,
@TripDate datetime  
--set @DistributorId=15139; set @TripId=1  
as  
  
BEGIN  
	SELECT t.TripId, t.TripNo, cast(t.TripDate as date) TripDate, t.ClusterId,t.StaffRefNo ,SDS.fn_CamelCase( t.StaffName ) as StaffName, 
		v.VehicleNo, tdl.OrderRefNo, tdl.UniqueConsumerId, tdl.ItemDesc, tdl.OrderNo, tdl.OrderDate, tdl.OrderQuantity, tdl.TotalPrice, 
		c.ConsumerNo, c.ConsumerName, c.MobileNo, c.Address, c.Pin, c.AreaName, c.Latitude lat, c.Longitude lng, c.Source,  
		tdl.ExpectedDeliveryDate,t.GodownId,t.GLatitude AS GodownLat,t.GLongitude AS GodownLong, tdl.SequenceNo, tdl.orderstatus, tdl.AreaRefNo, tdl.IsPODHD  
	FROM SDS.tblTripPlanning AS t INNER JOIN  
		SDS.tblTripPlanningDetails AS tdl ON t.TripId = tdl.TripId INNER JOIN  
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId INNER JOIN  
		SDS.tblConsumerDetails AS c ON tdl.UniqueConsumerId = c.UniqueConsumerId    
	Where t.StaffRefNo=@DelBoyId and t.DistributorId=@DistributorId and cast(t.TripDate as date)=cast(@TripDate as date) and isnull(tdl.IsPODHD,'HD')='HD'  
  
	UNION  
  
	SELECT t.TripId, t.TripNo, cast(t.TripDate as date) TripDate, t.ClusterId,t.StaffRefNo ,SDS.fn_CamelCase( t.StaffName ) as StaffName, 
		v.VehicleNo, tdl.OrderRefNo, tdl.UniqueConsumerId, tdl.ItemDesc, tdl.OrderNo, tdl.OrderDate, tdl.OrderQuantity, tdl.TotalPrice, 0 ConsumerNo, 
		'' ConsumerName, 0 MobileNo,  '' Address, 0 Pin, da.AreaName, pod.Latitute lat, pod.Longitute lng, '' Source,tdl.ExpectedDeliveryDate,  
		t.GodownId,t.GLatitude AS GodownLat,t.GLongitude AS GodownLong, tdl.SequenceNo, tdl.orderstatus, tdl.AreaRefNo, tdl.IsPODHD   
	from SDS.tblTripPlanning AS t INNER JOIN  
		SDS.tblTripPlanningDetails AS tdl ON t.TripId = tdl.TripId INNER JOIN  
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId inner join  
		dcms.tblDistributorAreaMaster da on tdl.AreaRefNo=da.AreaRefNo and t.DistributorId=da.DistributorID left outer join  
		sds.tblCDCMSAreaPODDetails pod on tdl.AreaRefNo=pod.AreaRefNo and t.DistributorId=da.DistributorID  
	Where t.StaffRefNo=@DelBoyId and t.DistributorId=@DistributorId and cast(t.TripDate as date)=cast(@TripDate as date) and isnull(tdl.IsPODHD,'HD')='POD'  
	order by tdl.SequenceNo
  
end  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripExpectedStock]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Rahul>
-- Create date: <Create Date,,23-07-2019>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_GetTripExpectedStock] 
	 --Add the parameters for the stored procedure here
@DistributorID int,
@CurrDate datetime --='2020-02-09 00:00:00.000'
AS
	
BEGIN
	--set @DistributorID=14193
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
  SELECT [DistributorID],[ExpStockDate],tes.[PriceCode],[ItemId],[ExpStockQty]
          ,tes.[LastUpdateBy],tes.[LastUpdateDateTime],SDS.fn_CamelCase(ItemDescription) as ItemDescription
  FROM [SDS].[tblTripExpectedStock] tes inner join sds.tblActiveItems ai on tes.PriceCode=ai.PriceCode
  where DistributorId =@DistributorID 
		and  Cast(ExpStockDate as date)=CAST(ISNULL(@CurrDate,ExpStockDate) as date)
  
  order by Cast(ExpStockDate as date) desc
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripGenerateData]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_GetTripGenerateData] 
--declare 
@DistributorId int,
@TripDate datetime
--set @DistributorId = 14193 set @TripDate = GETDATE();
as

BEGIN

	SELECT tp.TripId,tp.TripDate,tp.ClusterId,tp.StaffRefNo,tp.StaffName,tp.TripStatus,tp.TripStartDate,tp.TripEndDate,
	tpd.UniqueConsumerId,tpd.IsPODHD,tpd.CashMemoRefNo,tpd.OrderRefNo,tpd.OrderStatus,
	STUFF((SELECT ', ' + CAST(TripId AS VARCHAR(10)) [text()]
         FROM [SDS].[tblTripPlanning] t
         WHERE DistributorId = tp.DistributorId AND CAST(t.TripDate AS DATE)= CAST(@TripDate AS DATE) and TripStatus <> 'TripStarted' and TripStatus <> 'Completed'
         FOR XML PATH(''), TYPE)
        .value('.','NVARCHAR(MAX)'),1,2,' ') TripIdList
	 FROM [SDS].[tblTripPlanning] tp INNER JOIN
	[SDS].[tblTripPlanningDetails] tpd  ON tp.TripId=tpd.TripId
	WHERE CAST(tp.TripDate AS DATE)= CAST(@TripDate AS DATE) AND tp.DistributorId=@DistributorId and TripStatus <> 'TripStarted' and TripStatus <> 'Completed'
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripItemList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----	sds.usp_GetTripItemList 15139

CREATE PROCEDURE [SDS].[usp_GetTripItemList]  
@DistributorId int

AS
BEGIN

	select ipc.PriceCode,ipc.ItemCode,SDS.fn_CamelCase(ipc.ItemDescription) as ItemDescription ,isnull(ExpStockQty,0) as ExpectedStock, ExpStockDate  
	from DCMS.tblItemPriceCodeMap ipc WITH (NOLOCK) inner join sds.tblItemCodeMaster icm on ipc.ItemCode= icm.ItemId
	 inner join sds.tblActiveItems ai on ipc.PriceCode=ai.PriceCode
	 left join sds.[tblTripExpectedStock] tes on tes.PriceCode =ipc.PriceCode and  Cast(ExpStockDate as date)=CAST(ISNULL(getdate(),ExpStockDate) as date)
	and tes.DistributorId=@DistributorId 
	where ipc.ActiveFlag ='Y' and icm.Active ='Y' and isnull(ai.Active,'N')='Y'

END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripPendingOrdersByTripId]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--   sds.usp_GetTripPendingOrdersByTripId 14193, 70,31928  
     
CREATE proc [SDS].[usp_GetTripPendingOrdersByTripId]  
--declare  
@DistributorId bigint,  
@ClusterId int,  
@TripId bigint  
  
--set @DistributorId=14193; set @ClusterId=70 set @TripId=31928  
as  
BEGIN  
  
	SELECT td.OrderRefNo, td.OrderNo, td.OrderDate, td.UniqueConsumerId, cd.ConsumerNo, cd.ConsumerName, cd.Address, 
		da.AreaName, cd.MobileNo, td.OrderStatus, td.SequenceNo,
		t.DistributorId,t.ClusterId,t.TripId, t.TripNo, t.TripDate,   td.TripPlanningDetId
	FROM SDS.tblTripPlanning AS t WITH (NOLOCK) INNER JOIN
		SDS.tblTripPlanningDetails AS td WITH (NOLOCK) ON t.TripId = td.TripId  INNER JOIN
		SDS.tblConsumerDetails AS cd WITH (NOLOCK) ON td.UniqueConsumerId = cd.UniqueConsumerId AND t.DistributorId = cd.DistributorID LEFT OUTER JOIN
		DCMS.tblDistributorAreaMaster AS da WITH (NOLOCK) ON td.AreaRefNo = da.AreaRefNo
	WHERE t.DistributorID = @DistributorId and t.ClusterId=@ClusterId and t.TripId=@TripId 
		and td.OrderStatus not in ('Deliver','NotAvailable','Denied','DLVD','CNCL')

END  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTriptKMForPilotReport]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetTriptKMForPilotReport] 
 @TripDate datetime     
AS      
BEGIN      
      
 SELECT t.DistributorId,d.JDEDistributorCode,d.DistributorName, SUM(TotalKM_SDS) TotalKM_SDS,SUM(TotalTime_SDS) TotalTime_SDS,  
 max(TotalKM_DelBoy) TotalKM_DelBoy,max(TotalTime_DelBoy) TotalTime_DelBoy, StaffRefNo,StaffName, max(TotalOrders) TotalOrders,z.ZOName  
 --t.ClusterId,VehicleId,c.AreaClusterName    
 FROM SDS.tblTripKMDetails t  with (nolock) inner join DCMS.tblDistributorMaster d on t.DistributorId=d.DistributorId   
 inner join SDS.tblClusterMaster c  with (nolock) on c.DistributorId=d.DistributorId    
 inner join SDS.tblSAMaster s on s.SACode=d.SACode inner join SDS.tblROMaster r on r.ROCode=s.ROCode   
 inner join sds.tblZOMaster z on z.ZOCode=r.ZOCode 
 inner join sds.tblPilotDistributorDelBoyDetails pdb  with (nolock) on t.StaffRefNo=pdb.DelBoyId   
 WHERE CAST(CreatedDate as date)=CAST(@TripDate as date)    
 GROUP BY t.DistributorId,d.JDEDistributorCode,d.DistributorName,StaffRefNo,StaffName,z.ZOName--,t.ClusterId,VehicleId,c.AreaClusterName    
     
END 


GO
/****** Object:  StoredProcedure [SDS].[usp_GetTriptKMForUIReport]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_GetTriptKMForUIReport] 
--declare
@FromDate datetime,   
@ToDate datetime,
@DistributorId int
--set @FromDate ='2021-01-01'; set @ToDate= '2022-03-30'; set @DistributorId=0
AS      
BEGIN
	
		SELECT CAST(CreatedDate as date) CreatedDate,t.DistributorId,d.JDEDistributorCode,d.DistributorName, SUM(TotalKM_SDS) TotalKM_SDS,
		SUM(TotalTime_SDS) TotalTime_SDS, max(TotalKM_DelBoy) TotalKM_DelBoy,max(TotalTime_DelBoy) TotalTime_DelBoy, StaffRefNo,
		StaffName, max(TotalOrders) TotalOrders,z.ZOName  
		FROM SDS.tblTripKMDetails t  with (nolock) inner join DCMS.tblDistributorMaster d on t.DistributorId=d.DistributorId   
		inner join SDS.tblClusterMaster c  with (nolock) on c.DistributorId=d.DistributorId    
		left outer join SDS.tblSAMaster s on s.SACode=d.SACode inner join SDS.tblROMaster r on r.ROCode=s.ROCode   
		left outer join sds.tblZOMaster z on z.ZOCode=r.ZOCode 
		left outer join sds.tblPilotDistributorDelBoyDetails pdb  with (nolock) on t.StaffRefNo=pdb.DelBoyId   
		WHERE CAST(CreatedDate as date) between CAST(@FromDate as date) and CAST(@ToDate as date)  
		and (t.DistributorId = @DistributorId or @DistributorId=0)
		GROUP BY CAST(CreatedDate as date),t.DistributorId,d.JDEDistributorCode,d.DistributorName,StaffRefNo,StaffName,z.ZOName
	order by CAST(CreatedDate as date),DistributorName,StaffName
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_GetTripwiseOrderDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GetTripwiseOrderDetails]
--declare
@DistributorId int, 
@ClusterId bigint,
@AreaRefNo numeric(17,0),
@StaffRefNo numeric(17,0),
@TripNo nvarchar(25),
@VehicleNo nvarchar(25),
@PriceCode int,
@fromDate datetime,
@ToDate datetime
--set @DistributorId=14193
--set @VehicleNo='/01'

as

BEGIN
	set FMTONLY OFF
	SELECT t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.ClusterId, cl.AreaClusterName, t.StaffRefNo, t.StaffName, t.VehicleId, v.VehicleNo, 
		td.SequenceNo, td.OrderRefNo, td.UniqueConsumerId, td.NatureCode, td.PriceCode, td.ItemDesc, td.AreaRefNo Delivered_AreaRefNo, td.OrderNo, td.OrderDate,
		td.OrderQuantity, td.ExpectedDeliveryDate, td.StartedOn, td.ReachedOn, td.ActualDeliveryDate, td.EndedOn, td.ReturnQty, 
		td.TotalPrice, td.OrderStatus, td.Latitude Delivered_Lat, td.Longitude Delivered_Long, td.PlaceId Delivered_PlaceId,
		td.ProcessFlag, td.ProcessDate, c.ConsumerNo, c.ConsumerName, c.MobileNo, c.Address, c.Pin, c.AreaRefNo AS Cons_AreaRefNo, c.AreaName Cons_AreaName, 
		c.Latitude AS Cons_Lat, c.Longitude AS Cons_Long, c.PlaceId AS Cons_PlaceId
	FROM SDS.tblTripPlanning AS t INNER JOIN
		SDS.tblTripPlanningDetails AS td ON t.TripId = td.TripId LEFT OUTER JOIN
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId LEFT OUTER JOIN
		SDS.tblConsumerDetails AS c ON td.UniqueConsumerId = c.UniqueConsumerId AND t.DistributorId = c.DistributorID LEFT OUTER JOIN
		SDS.tblClusterMaster AS cl ON t.ClusterId = cl.ClusterId
	Where t.DistributorId=@DistributorId and (t.ClusterId=isnull(@ClusterId,0) or isnull(@ClusterId,0)=0) 
		and (td.AreaRefNo=isnull(@AreaRefNo,0) or isnull(@AreaRefNo,0)=0)
		and (t.StaffRefNo=isnull(@StaffRefNo,0) or isnull(@StaffRefNo,0)=0) and (t.TripNo like '%'+isnull(@TripNo,'')+'%')  
		and (v.VehicleNo like '%'+isnull(@VehicleNo,'')+'%') 
		and (td.PriceCode=isnull(@PriceCode,0) or isnull(@PriceCode,0)=0)
		and (cast(t.TripDate as date)>=cast(@fromDate as date) or @fromDate is null)
		and (cast(t.TripDate as date)<=cast(@ToDate as date) or @ToDate is null)
	
	union 

	SELECT t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.ClusterId, cl.AreaClusterName, t.StaffRefNo, t.StaffName, t.VehicleId, v.VehicleNo, 
		td.SequenceNo, td.OrderRefNo, td.UniqueConsumerId, td.NatureCode, td.PriceCode, td.ItemDesc, td.AreaRefNo Delivered_AreaRefNo, td.OrderNo, td.OrderDate,
		td.OrderQuantity, td.ExpectedDeliveryDate, td.StartedOn, td.ReachedOn, td.ActualDeliveryDate, td.EndedOn, td.ReturnQty, 
		td.TotalPrice, td.OrderStatus, td.Latitude Delivered_Lat, td.Longitude Delivered_Long, td.PlaceId Delivered_PlaceId,
		td.ProcessFlag, td.ProcessDate, c.ConsumerNo, c.ConsumerName, c.MobileNo, c.Address, c.Pin, c.AreaRefNo AS Cons_AreaRefNo, c.AreaName Cons_AreaName, 
		c.Latitude AS Cons_Lat, c.Longitude AS Cons_Long, c.PlaceId AS Cons_PlaceId
	FROM SDS.tblTripPlanningHistory AS t INNER JOIN
		SDS.tblTripPlanningDetailsHistory AS td ON t.TripId = td.TripId LEFT OUTER JOIN
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId LEFT OUTER JOIN
		SDS.tblConsumerDetails AS c ON td.UniqueConsumerId = c.UniqueConsumerId AND t.DistributorId = c.DistributorID LEFT OUTER JOIN
		SDS.tblClusterMaster AS cl ON t.ClusterId = cl.ClusterId
	Where t.DistributorId=@DistributorId and (t.ClusterId=isnull(@ClusterId,0) or isnull(@ClusterId,0)=0) 
		and (td.AreaRefNo=isnull(@AreaRefNo,0) or isnull(@AreaRefNo,0)=0)
		and (t.StaffRefNo=isnull(@StaffRefNo,0) or isnull(@StaffRefNo,0)=0) and (t.TripNo like '%'+isnull(@TripNo,'')+'%')  
		and (v.VehicleNo like '%'+isnull(@VehicleNo,'')+'%') 
		and (td.PriceCode=isnull(@PriceCode,0) or isnull(@PriceCode,0)=0)
		and (cast(t.TripDate as date)>=cast(@fromDate as date) or @fromDate is null)
		and (cast(t.TripDate as date)<=cast(@ToDate as date) or @ToDate is null)
	order by t.TripDate desc, TripNo 
END


GO
/****** Object:  StoredProcedure [SDS].[Usp_GetUnmappedConsumerCounts]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[Usp_GetUnmappedConsumerCounts]
--declare   
@DistributorId int,  
@ClusterId int,  
@AreaRefNo numeric(17,0)  
--set @DistributorId=15139 set @ClusterId=0; set @AreaRefNo=0  

as
BEGIN
	SELECT da.DistributorId,  count(distinct da.AreaRefNo) AreaCount, COUNT(distinct c.UniqueConsumerId) AS CntConsumer
	FROM  DCMS.tblDistributorAreaMaster AS da 
	left outer join SDS.tblConsumerDetails c ON da.AreaRefNo = c.AreaRefNo and upper(isnull(ConsumerStatus,''))='ACTIVE' 
	left outer join SDS.tblAreaClusterMapping AS ac  on da.AreaRefNo=ac.AreaRefNo
	WHERE da.DistributorId=@DistributorId and  ac.AreaRefNo is null 
	GROUP BY da.DistributorId
END

GO
/****** Object:  StoredProcedure [SDS].[Usp_GetUnmappedConsumerList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[Usp_GetUnmappedConsumerList]--14193,0,0,'DASH'
--declare       
@DistributorId int,      
@ClusterId int,      
@AreaRefNo numeric(17,0),
@ListFor varchar(5)='Page'
--set @DistributorId=14193 set @ClusterId=0; set @AreaRefNo=0      
      
As    
BEGIN    
	if(@ListFor='DASH')
	Begin
		SELECT distinct da.DistributorID, da.AreaRefNo, da.AreaCode, SDS.fn_CamelCase(da.AreaName) AS AreaName, convert(numeric(17,0),0) UniqueConsumerId, 0 ConsumerNo, '' ConsumerName,     
		'' ConsumerStatus, convert(numeric(17,0),0) MobileNo    
		FROM DCMS.tblDistributorAreaMaster AS da   
		left outer join SDS.tblConsumerDetails AS c ON da.AreaRefNo = c.AreaRefNo AND (UPPER(ISNULL(c.ConsumerStatus, '')) = 'ACTIVE')   
		LEFT OUTER JOIN SDS.tblAreaClusterMapping AS ac ON da.AreaRefNo = ac.AreaRefNo    
		WHERE (da.DistributorID = @DistributorId) AND (ac.AreaRefNo IS NULL)    
		ORDER BY AreaName    
	End
	Else
	Begin
		SELECT da.DistributorID, da.AreaRefNo, da.AreaCode, SDS.fn_CamelCase(da.AreaName) AS AreaName, isnull (c.UniqueConsumerId,0) UniqueConsumerId, c.ConsumerNo, c.ConsumerName,     
		c.ConsumerStatus, c.MobileNo    
		FROM DCMS.tblDistributorAreaMaster AS da   
		inner join SDS.tblConsumerDetails AS c ON da.AreaRefNo = c.AreaRefNo AND (UPPER(ISNULL(c.ConsumerStatus, '')) = 'ACTIVE')   
		LEFT OUTER JOIN SDS.tblAreaClusterMapping AS ac ON da.AreaRefNo = ac.AreaRefNo    
		WHERE (da.DistributorID = @DistributorId) AND (ac.AreaRefNo IS NULL) and isnull (c.UniqueConsumerId,0.0)<>0   
     
		--union     
    
		--SELECT distinct da.DistributorID, da.AreaRefNo, da.AreaCode, SDS.fn_CamelCase(da.AreaName) AS AreaName, 0 UniqueConsumerId, 0 ConsumerNo, '' ConsumerName,     
		--'' ConsumerStatus, 0 MobileNo    
		--FROM DCMS.tblDistributorAreaMaster AS da   
		--left outer join SDS.tblConsumerDetails AS c ON da.AreaRefNo = c.AreaRefNo AND (UPPER(ISNULL(c.ConsumerStatus, '')) = 'ACTIVE')   
		--LEFT OUTER JOIN SDS.tblAreaClusterMapping AS ac ON da.AreaRefNo = ac.AreaRefNo    
		--WHERE (da.DistributorID = @DistributorId) AND (ac.AreaRefNo IS NULL)    
		--ORDER BY isnull (c.UniqueConsumerId,0),AreaName, c.ConsumerName  
	End  
END 



GO
/****** Object:  StoredProcedure [SDS].[usp_getUpdateAddressLocationInCDCMS]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_getUpdateAddressLocationInCDCMS
--	Description		:	To get Update Address Location In CDCMS

--	Author			:	Swapnil

--	Date Modified	Modified By	     Modifications
--	16-Mar-2021		Swapnil			Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_getUpdateAddressLocationInCDCMS]
@DistributorCode nvarchar(20),
@UpdatedFlag bit
AS
BEGIN

	select id,UniqueConsumerId,LocFlag,DistributorCode,CommJson,UpdatedBy,UpdatedRoleId,UpdatedFlag,UpdatedDate,Action
	from  SDS.tblUpdateAddressLocationInCDCMS 
	where  UpdatedFlag=@UpdatedFlag--(DistributorCode=@DistributorCode or @DistributorCode='') 
		
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetUserDeviceDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_GetUserDeviceDetails]
--	Description		:	To return Active user details

--	Author			:	Prasanna	13-April-2018

--	Date Modified		Modified By	     Modifications
--	13-April-2018		Prasanna         Created
**************************************************************/

create PROCEDURE [SDS].[usp_GetUserDeviceDetails]
	@DistributorId int,
	@UserId numeric(18,0)	
AS
BEGIN
	SELECT DistributorId,[StaffRefNo],[MobileNo],[RoleId],[VersionNo],[LastSeen],[DeviceId]
	FROM SDS.tblActiveUsers WITH(NOLOCK) 
	WHERE DistributorId=@DistributorId AND StaffRefNo=@UserId
	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetVehicleDeliveryBoyMapping]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	Pass 0 in @DeliveryBoyId to remove mapping. 
CREATE proc [SDS].[usp_GetVehicleDeliveryBoyMapping]
@VehicleId	bigint,
@DeliveryBoyId	numeric(18, 0),
@DistributorId	bigint,
@Status	nvarchar(20)
as

BEGIN
		select vd.VehDelboyId,vd.DeliveryBoyId,vd.VehicleId,vm.VehicleNo,vm.RTOCapacity,vd.DistributorId, 
		vd.AdditionalDelBoyId,ds.StaffName AdditionalDelBoyName
		 from DCMS.tblDistributorStaffDetails db WITH (NOLOCK) Inner join 
		 sds.tblVehicleDeliveryBoyMapping vd on vd.DeliveryBoyId=db.StaffRefNo and vd.Active='Y'  inner join 
		 [SDS].[tblVehicleMaster] VM on VM.[VehicleId] =Vd.VehicleId
		 left outer join dcms.tblDistributorStaffDetails ds on vd.AdditionalDelBoyId=ds.StaffRefNo
		 where db.DistributorId=@DistributorId  and db.StaffRefNo=@DeliveryBoyId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_GetVehicleForTrip]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_GetVehicleForTrip]
@DistributorId int

as

SELECT VehicleId, VehicleNo FROM SDS.tblVehicleMaster AS v
WHERE (Active = 'Y') and DistributorId=@DistributorId



GO
/****** Object:  StoredProcedure [SDS].[usp_GetVersionDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: usp_GetVersionDetails
--	Description		:	get version details

--	Author			:	Prasanna	26- May -2018

--	Date Modified		Modified By	     Modifications
--	26- May -2018			Prasanna	         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_GetVersionDetails]
@ApplicationName nvarchar(100)
AS
BEGIN

	SELECT        TOP (1) VerId,ApplicationName, VersionNumber, VersionDate, LastUpdatedDate
FROM            SDS.tblVersionDetails
where (ApplicationName= @ApplicationName or @ApplicationName='')
ORDER BY LastUpdatedDate DESC

END


GO
/****** Object:  StoredProcedure [SDS].[usp_GetVitranGCVerifyCounts]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.[usp_GetVitranGCVerifyCounts] 14193,72
CREATE proc [SDS].[usp_GetVitranGCVerifyCounts] 
--declare
@DistributorId int,
@ClusterId bigint
----set @DistributorId=14193; set @ClusterId=0

as

BEGIN
SET FMTONLY OFF

	if exists(select 1 from sds.tblclustermaster where  DistributorId= @DistributorId and (ClusterId=@ClusterId or @ClusterId=0))
	Begin
		select c.DistributorId, --c.ClusterId, c.AreaClusterName,	
		count(o.UniqueConsumerId) Total,
		sum(case when (isnull(cd.InCluster,0)=1) then 1 else 0 end) InCluster, 
		sum(case when (isnull(cd.InCluster,0)=1) then 0 else 1 end) OutCluster, 
		sum(case when (isnull(cd.inTradingArea,0)=1) then 0 else 1 end) OutTradingArea,
		sum(case when cd.Latitude IS NULL then 1 else 0 end) NotFound,
		sum(case when (isnull(cd.IsVerifiedUpdated,0)=1) then 1 else 0 end) IsVerifiedUpdated,
		sum(case when (isnull(cd.IsVerifiedUpdated,0)=1) then 0 else 1 end) IsVerifiedNotUpdated
		from SDS.tblClusterMaster c Left outer Join SDS.tblDeliveryBoyClusterMapping dc on dc.ClusterId=c.ClusterId
		left outer Join DCMS.tblDeliveryBoyRefillOrder o with (nolock) on dc.StaffRefNo=o.StaffRefNo
		left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId
		where   c.DistributorId= @DistributorId and c.IsActive='Y' and (c.ClusterId=@ClusterId or @ClusterId=0)
		--and cd.ConsumerStatus='Active' --and isnull(cd.IsVerified,0)=1 and isnull(IsVerifiedUpdated,0) =0
		group by c.DistributorId--, c.ClusterId, c.AreaClusterName
	End
	Else
	Begin
		select @DistributorId DistributorId, 0 Total,0 InCluster,0 OutCluster,0  OutTradingArea,0 NotFound,0 IsVerifiedUpdated,0 IsVerifiedNotUpdated
	End
END


GO
/****** Object:  StoredProcedure [SDS].[usp_GoogleAPIHitsHIstoryAdd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_GoogleAPIHitsHIstoryAdd]
@LoginUserRefId	int,
@GoogleAPIName	nvarchar(500),
@PageName	nvarchar(500),
@EventName	nvarchar(100),
@Source nvarchar(20),
@HitsCount	int,
@RoleId int,
@RetValue bigint output

as

BEGIN
	insert into sds.tblGoogleAPIHitsHIstory(LoginUserRefId,GoogleAPIName,PageName,EventName,Source,HitsCount,EntryDate,RoleId)
	values(@LoginUserRefId,@GoogleAPIName,@PageName,@EventName,@Source,@HitsCount,getDate(),@RoleId)

	set @RetValue=ISNULL(scope_identity(),0)
	return @retValue

END	

GO
/****** Object:  StoredProcedure [SDS].[usp_grp_GetDateWiseOrderCount]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_grp_GetDateWiseOrderCount]
--declare
@DistributorId int,
@FromDate datetime,
@ToDate datetime
	--set @DistributorId =15139; set @FromDate='2019-12-01'; set @ToDate='2019-12-30'
AS

BEGIN
	set FMTONLY OFF

	select DistributorId as DistributorID, cast(EntryDate as date) as AlDate, isnull(PendingOrderCnt,0) as ReceivedOrders, isnull(DeliveredCnt,0) as OrderDelivered 
	from [DCMS].[tblDistributorPendingSaleDatewise] 
	where DistributorId = @DistributorId and cast(EntryDate as date) between cast(@FromDate as date) and cast(@ToDate as date) order by AlDate

	--- show data for last 30 days instead of 01st of month to till date.
	--set @ToDate= getdate(); set @FromDate=DATEADD(dd,-30,getdate()); 	print @fromdate
	
	--DECLARE @GroupCode VARCHAR(3)='', @str varchar(max)=''				
	--SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	--if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	--IF OBJECT_ID('tempdb..#ret') IS NOT NULL DROP TABLE #ret
	--create table #ret(DistributorID int, AlDate date, ReceivedOrders int, OrderDelivered int)

	--	set @str= (' insert into #ret
	--SELECT	'+convert(nvarchar(20),@DistributorId)+'  DistributorID, MD.AlDate,ISNULL(b.Booked,0) as ReceivedOrders,ISNULL(d.Delivered,0) OrderDelivered	
	--FROM	[SDS].[fn_GetTotalDateInMonth]('''+convert(nvarchar(50), @fromdate,101)+''','''+convert(nvarchar(50), @todate,101)+''')  MD 
	--left outer join 	
	--(
	--	select distributorId, t.OrderDate, count(t.OrderRefNo) Booked From (
	--		select distinct distributorId, cast(OrderDate as date) OrderDate, OrderRefNo from DCMS.tblRefillOrderDtls o
	--		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--		where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(OrderDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
	--		union
	--		select distinct distributorId, cast(OrderDate as date) OrderDate, OrderRefNo from DCMS.tblRefillOrderDtls'+@GroupCode+'  o
	--		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--		where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(OrderDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
	--	) t group by distributorId, t.OrderDate
	--) b on md.AlDate=b.OrderDate and b.DistributorID='+convert(nvarchar(20),@DistributorId)+' 
	--left Outer join 
	--(
	--	select distributorId, t.DelDate, count(t.OrderRefNo) Delivered From (
	--		select distinct distributorId, cast(actualdeliverydate as date) DelDate, OrderRefNo from DCMS.tblRefillOrderDtls o
	--		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--		where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(ActualDeliveryDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
	--		union
	--		select distinct distributorId, cast(actualdeliverydate as date), OrderRefNo from DCMS.tblRefillOrderDtls'+@GroupCode+' o 
	--		inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
	--		where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(ActualDeliveryDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
	--	) t group by distributorId, t.DelDate
	--) d on md.AlDate=d.DelDate and d.DistributorID='+convert(nvarchar(20),@DistributorId)+' 	
	--Order by MD.AlDate
	--'	)

	--print @str
	--exec(@str)

	--select * from #ret order by AlDate

	--drop table #ret
END


GO
/****** Object:  StoredProcedure [SDS].[usp_grp_GetDateWiseOrderCount_Old]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_grp_GetDateWiseOrderCount]
--	Description		:	To get Date wise Order Count Total,Delivered
--	Author			:	swpnil
--				    Modifications
--	18-Jan-2020			Rajendra		updated
**************************************************************/
--		sds.usp_grp_GetDateWiseOrderCount 15139, '2019-01-01', '2019-01-30'

CREATE  PROCEDURE [SDS].[usp_grp_GetDateWiseOrderCount_Old]
--declare
@DistributorId int,
@FromDate datetime,
@ToDate datetime
	--set @DistributorId =15139; set @FromDate='2019-12-01'; set @ToDate='2019-12-30'
AS

BEGIN
	set FMTONLY OFF
	--- show data for last 30 days instead of 01st of month to till date.
	set @ToDate= getdate(); set @FromDate=DATEADD(dd,-30,getdate()); 	print @fromdate
	
	DECLARE @GroupCode VARCHAR(3)='', @str varchar(max)=''				
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	IF OBJECT_ID('tempdb..#ret') IS NOT NULL DROP TABLE #ret
	create table #ret(DistributorID int, AlDate date, ReceivedOrders int, OrderDelivered int)

		set @str= (' insert into #ret
	SELECT	'+convert(nvarchar(20),@DistributorId)+'  DistributorID, MD.AlDate,ISNULL(b.Booked,0) as ReceivedOrders,ISNULL(d.Delivered,0) OrderDelivered	
	FROM	[SDS].[fn_GetTotalDateInMonth]('''+convert(nvarchar(50), @fromdate,101)+''','''+convert(nvarchar(50), @todate,101)+''')  MD 
	left outer join 	
	(
		select distributorId, t.OrderDate, count(t.OrderRefNo) Booked From (
			select distinct distributorId, cast(OrderDate as date) OrderDate, OrderRefNo from DCMS.tblRefillOrderDtls o
			inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
			where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(OrderDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
			union
			select distinct distributorId, cast(OrderDate as date) OrderDate, OrderRefNo from DCMS.tblRefillOrderDtls'+@GroupCode+'  o
			inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
			where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(OrderDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
		) t group by distributorId, t.OrderDate
	) b on md.AlDate=b.OrderDate and b.DistributorID='+convert(nvarchar(20),@DistributorId)+' 
	left Outer join 
	(
		select distributorId, t.DelDate, count(t.OrderRefNo) Delivered From (
			select distinct distributorId, cast(actualdeliverydate as date) DelDate, OrderRefNo from DCMS.tblRefillOrderDtls o
			inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
			where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(ActualDeliveryDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
			union
			select distinct distributorId, cast(actualdeliverydate as date), OrderRefNo from DCMS.tblRefillOrderDtls'+@GroupCode+' o 
			inner join sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' 
			where distributorId='+convert(nvarchar(20),@DistributorId)+'  and (cast(ActualDeliveryDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
		) t group by distributorId, t.DelDate
	) d on md.AlDate=d.DelDate and d.DistributorID='+convert(nvarchar(20),@DistributorId)+' 	
	Order by MD.AlDate
	'	)

	print @str
	exec(@str)

	select * from #ret order by AlDate

	drop table #ret
END


GO
/****** Object:  StoredProcedure [SDS].[usp_grp_GetDateWiseOrderCountForSA]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [SDS].[usp_grp_GetDateWiseOrderCountForSA]   
--declare
@SACode nvarchar(20),
@FromDate datetime,
@ToDate datetime
	--set @SACode =338; set @FromDate='2020-01-01'; set @ToDate='2020-01-31'
AS

BEGIN
	set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)='', @str varchar(max)=''
				
		----SELECT @GroupCode = SACode FROM DCMS.tblDistributorMaster dm WITH (NOLOCK)  WHERE dm.SACode = @SACode 
		--if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
		
		create table  #result (id int identity(1,1), SACode nvarchar(50), ALDate nvarchar(50), RecOrders int, DelOrders int)

	set @str= (' insert into #result(SACode,ALDate,RecOrders,DelOrders) 
	SELECT	'+convert(nvarchar(20),@SACode)+' SACode, MD.AlDate,ISNULL(b.ReceivedOrders,0) as ReceivedOrders,
			ISNULL(d.DeliveredOrders,0) OrderDelivered	
	FROM	[SDS].[fn_GetTotalDateInMonth]('''+convert(nvarchar(50), @fromdate,101)+''','''+convert(nvarchar(50), @ToDate,101)+''')  MD 
	left outer join 	(
	select b.DistributorID, cast(b.OrderDate as date) OrderDate, count(b.OrderRefNo) ReceivedOrders from DCMS.tblRefillOrderDtls b WITH (NOLOCK)
	inner join DCMS.tblDistributorMaster dm WITH (NOLOCK) on dm.DistributorId=b.DistributorID
	where dm.SACode='+@SACode+' 
	and (cast(b.OrderDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
	group by b.DistributorID, cast(b.OrderDate as date)
	) b on md.AlDate=b.OrderDate 
	left outer join 	(
	select th.DistributorID, cast(tdh.ActualDeliveryDate as date) DeliveryDate, count(tdh.OrderRefNo) DeliveredOrders 
	from sds.tblTripPlanningDetailsHistory tdh inner join sds.tblTripPlanningHistory th on th.tripId=tdh.TripId
	inner join DCMS.tblDistributorMaster dm WITH (NOLOCK) on dm.DistributorId=th.DistributorID
	where dm.SACode='+@SACode+' 
	and (cast(tdh.ActualDeliveryDate as date) between cast('''+convert(nvarchar(50), @fromdate,101)+''' as date) and cast('''+convert(nvarchar(50), @todate,101)+''' as date))
	group by th.DistributorID, cast(tdh.ActualDeliveryDate as date)
	) d on md.AlDate=d.DeliveryDate inner join DCMS.tblDistributorMaster dm1 WITH (NOLOCK) on dm1.DistributorId=b.DistributorID  and dm1.SACode='+@SACode+'
	Order by MD.AlDate ')			

	print @str
	exec(@str)

	select * from #result
	drop table #result

END
GO
/****** Object:  StoredProcedure [SDS].[usp_InsertIssueTrackerLogin]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_InsertIssueTrackerLogin
--	Description		:	To Insert Issue Tracker login Details

--	Author			:	Swapnil	25-Aug-2020	

--	Date Modified		Modified By	     Modifications
--	25-Aug-2020			Swapnil         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_InsertIssueTrackerLogin]

@DealerCode nvarchar(50),
@ProfileId nvarchar(50),
@ResultId  nvarchar(50) output
AS
BEGIN

		set @ResultId=0

		declare @IdentityId int =0;

		--INSERT INTO SDS.tblCurrentLocation(DistributorId,StaffRefNo,Latitude,Longitude,LocationDateTime,InsertedDateTime)
		--VALUES(@DistributorId,@StaffRefNo,@Latitude,@Longitude,@LocationDateTime,GETDATE())
		
		set @ProfileId = concat(datepart(year,getdate()),Right('0'+RTRIM(MONTH(getdate())),2),Right('0'+RTRIM(DAY(getdate())),2),datepart(Hour,getdate()),datepart(minute,getdate()),datepart(second,getdate())) 
			
		INSERT INTO [CRMDBAWS].CRMSDS.[tblSDSLogin] ([DealerCode],[ProfileId],[InsertedOn],[LastLoggedIn])
	    VALUES(@DealerCode,@ProfileId,GETDATE(),GETDATE())
		 set @ResultId=@ProfileId
		
END



GO
/****** Object:  StoredProcedure [SDS].[usp_LatestVitranGCUpdateInOut]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_LatestVitranGCUpdateInOut]    
--declare     
@DistributorID int,    
@consumerDtlstbl sds.ConLatLongInOutDisttbl ReadOnly    
as    
BEGIN     
	declare @RtnValue int=0 
	UPDATE sds.tblConsumerLocationHistoryNew     
	SET VitranLat1InArea = nc.InArea,    
		VitranLat1InCluster = nc.InCluster,    
		VitranLat1InClusterId = nc.InClusterId,    
		VitranLat1inTradingArea = nc.InTradingArea,    
		LastUpdatedDatetime = getdate(),    
		VitranLat1InsideChkDate=getdate()   
	FROM sds.tblConsumerLocationHistoryNew cl with (nolock) 
	inner join @consumerDtlstbl nc on cl.UniqueConsumerId=nc.UniqueConsumerId and cl.DistributorID=@DistributorID 
	Where DistributorID=@DistributorID   
	
	set @RtnValue=@@ROWCOUNT    
END    
    
    
GO
/****** Object:  StoredProcedure [SDS].[usp_MobPendingAcceptStockTrans]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_MobPendingAcceptStockTrans]
--	Description		:	To Get all stock transfer list which is send by delivery boy and want to accept and accepted by godown keeper

--	Author			:	Prasanna	19-Feb-2018

--	Date Modified		Modified By	     Modifications
--	19-FEB-2018			Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_MobPendingAcceptStockTrans]
@DistributorId int,
@GodownKeeperId numeric(17,0),
@FromDate datetime=null,
@ToDate DateTime=null
AS
BEGIN

	IF(@FromDate is null and @ToDate is null)
	BEGIN
		SELECT	s.StockTransferId, s.DistributorId, s.DeliveryBoyId,
		(select SDS.fn_CamelCase(tdsm.StaffName) from DCMS.tblDistributorStaffDetails tdsm with(nolock) where tdsm.StaffRefNo=s.DeliveryBoyId)as DeliveryBoyName,
				s.TransferDate,vm.VehicleNo, s.IsAccepted, s.AcceptedBy, s.AcceptedDatetime
		FROM	SDS.tblStockTransfer s with(nolock) inner join
				SDS.tblVehicleMaster vm with(nolock) on vm.VehicleId = s.VehicleId
		WHERE	s.DistributorId = @DistributorId AND s.TransferedDeliveryBoyID=@GodownKeeperId AND s.TransferedTo = 'G' and s.IsAccepted is null
	END
	ELSE
	BEGIN
		SELECT	s.StockTransferId, s.DistributorId, s.DeliveryBoyId,
		(select SDS.fn_CamelCase( tdsm.StaffName) from DCMS.tblDistributorStaffDetails tdsm with(nolock) where tdsm.StaffRefNo=s.DeliveryBoyId)as DeliveryBoyName,
				s.TransferDate,vm.VehicleNo, s.IsAccepted, s.AcceptedBy, s.AcceptedDatetime
		FROM	SDS.tblStockTransfer s with(nolock) inner join
				SDS.tblVehicleMaster vm with(nolock) on vm.VehicleId = s.VehicleId
		WHERE	s.DistributorId = @DistributorId AND s.TransferedDeliveryBoyID=@GodownKeeperId AND s.TransferedTo = 'G' and s.IsAccepted is not null
				and CAST(s.TransferDate as date) BETWEEN CAST(@FromDate as date) and CAST(@ToDate as date)

	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_MobStockAllotmentHistory]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: NDAPP].[usp_MobStockAllotmentHistory]
--	Description		:	To View the Stock Allotment details by distributor Id

--	Author			:	Prasanna	22-February-2018

--	Date Modified		Modified By	     Modifications
--	22-February-2018	Prasanna	         Created
**************************************************************/

--usp_GetAllStockAllotmentByDeliveryBoy

CREATE PROCEDURE [SDS].[usp_MobStockAllotmentHistory]
 
	@DistributorId int,
	@StaffRefId numeric(18,0),
	@Status nvarchar(10),
	@FromDate datetime=null,
	@ToDate DateTime=null
AS
BEGIN

	IF(@Status='GK')
	BEGIN
		SELECT	sa.DistributorId, sa.StockAllotmentId, sa.StockAllotmentNo,sa.DeliveryBoyId,SDS.fn_CamelCase( ds.StaffName) AS DeliveryBoyName, sa.AllotmentDate, v.VehicleNo, sa.IsAccepted, sa.AcceptedDatetime
				,sa.GodownKeeperId,gk.StaffName AS GodownKeeper
				,icm.ItemID,icm.ItemDescription,icm.ItemShortDescription,
				sum(ISNULL(tsad.Quantity,0)) as FilledQuantity,sum(ISNULL(tsad.EmptyQty,0)) as EmptyQuantity,
				sum(ISNULL(tsad.Quantity,0)+ISNULL(tsad.EmptyQty,0)) as TotalQuantity


		FROM	SDS.tblStockAllotment sa WITH(NOLOCK) INNER JOIN
				 
				DCMS.tblDistributorStaffDetails ds WITH(NOLOCK) ON ds.StaffRefNo = sa.DeliveryBoyId INNER JOIN
				SDS.tblVehicleMaster v WITH(NOLOCK) ON v.VehicleId = sa.VehicleId LEFT outer join
				DCMS.tblDistributorStaffDetails gk WITH(NOLOCK) ON gk.StaffRefNo = sa.GodownKeeperId left outer join 
				sds.tblStockAllotmentDetails tsad on tsad.StockAllotmentId=sa.StockAllotmentId left outer join
				SDS.tblItemCodeMaster icm on icm.ItemID = tsad.ItemID
		WHERE	sa.DistributorId = @DistributorId AND sa.GodownKeeperId=@StaffRefId
		and CAST(sa.AllotmentDate as DATE) BETWEEN CAST(ISNULL(@FromDate,sa.AllotmentDate) as DATE) AND CAST(ISNULL(@ToDate,sa.AllotmentDate) as DATE)
		
		group by sa.DistributorId, sa.StockAllotmentId, sa.StockAllotmentNo,sa.DeliveryBoyId, ds.StaffName, sa.AllotmentDate, v.VehicleNo, sa.IsAccepted, sa.AcceptedDatetime
				,sa.GodownKeeperId,gk.StaffName,icm.ItemID,icm.ItemDescription,icm.ItemShortDescription
	END
	ELSE IF(@Status='DB')
	BEGIN

			SELECT	sa.DistributorId, sa.StockAllotmentId, sa.StockAllotmentNo,sa.DeliveryBoyId,SDS.fn_CamelCase( ds.StaffName ) AS DeliveryBoyName, sa.AllotmentDate, v.VehicleNo, sa.IsAccepted, sa.AcceptedDatetime
					,sa.GodownKeeperId,gk.StaffName AS GodownKeeper

					,icm.ItemID,icm.ItemDescription,icm.ItemShortDescription,
				    sum(ISNULL(tsad.Quantity,0)) as FilledQuantity,sum(ISNULL(tsad.EmptyQty,0)) as EmptyQuantity,
				    sum(ISNULL(tsad.Quantity,0)+ISNULL(tsad.EmptyQty,0)) as TotalQuantity

			FROM	SDS.tblStockAllotment sa WITH(NOLOCK) INNER JOIN
					DCMS.tblDistributorStaffDetails ds WITH(NOLOCK) ON ds.StaffRefNo = sa.DeliveryBoyId INNER JOIN
					SDS.tblVehicleMaster v WITH(NOLOCK) ON v.VehicleId = sa.VehicleId LEFT outer join
					DCMS.tblDistributorStaffDetails gk WITH(NOLOCK) ON gk.StaffRefNo = sa.GodownKeeperId left outer join 
					sds.tblStockAllotmentDetails tsad on tsad.StockAllotmentId=sa.StockAllotmentId left outer join
					SDS.tblItemCodeMaster icm on icm.ItemID = tsad.ItemID
			WHERE	sa.DistributorId = @DistributorId AND sa.DeliveryBoyId=@StaffRefId
			and CAST(sa.AllotmentDate as DATE) BETWEEN CAST(ISNULL(@FromDate,sa.AllotmentDate) as DATE) AND CAST(ISNULL(@ToDate,sa.AllotmentDate) as DATE)

			group by sa.DistributorId, sa.StockAllotmentId, sa.StockAllotmentNo,sa.DeliveryBoyId, ds.StaffName, sa.AllotmentDate, v.VehicleNo, sa.IsAccepted, sa.AcceptedDatetime
				,sa.GodownKeeperId,gk.StaffName,icm.ItemID,icm.ItemDescription,icm.ItemShortDescription
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_OnboardingApproveReject]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_OnboardingApproveReject 14145, 341, 2,'',1,0
CREATE PROC [SDS].[usp_OnboardingApproveReject]
--declare
@DistributorId	int,
@UserId	bigint,
@StepStatus int,
@Remark	varchar(max),
@ForStep	int,
@RetValue int output
--set @DistributorId=14145 set @UserId=341 set @StepStatus=2 set @Remark=''set @ForStep=1
as

BEGIN

	if not exists(select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId)
	Begin
		insert into sds.tblOnBoardingCompleted(DistributorId,UserId,Step1,Step2,Step3,Step4,Step5,Step6,Step7,Step8,Step1Remark,Step2Remark,Step3Remark,
		Step4Remark,Step5Remark,Step6Remark,Step7Remark,Step8Remark,IsOnBoardingStage1,IsOnBoardingStage2,LastUpdatedOn)
		values (@DistributorId,@UserId,0,0,0,0,0,0,0,0,'','','','','','','','',0,0, getdate())
	End
		
		--select * from sds.tblOnBoardingCompleted where DistributorId=@DistributorId

	if(isnull(@ForStep,0)=1)
	Begin
		update sds.tblOnBoardingCompleted set step1=@StepStatus,Step1Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=2)
	Begin
--print @ForStep
		update sds.tblOnBoardingCompleted set step2=@StepStatus,Step2Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=3)
	Begin
		update sds.tblOnBoardingCompleted set Step3=@StepStatus,Step3Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=4)
	Begin
		update sds.tblOnBoardingCompleted set Step4=@StepStatus,Step4Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=5)
	Begin
		update sds.tblOnBoardingCompleted set step5=@StepStatus,Step5Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=6)
	Begin
		update sds.tblOnBoardingCompleted set Step6=@StepStatus,Step6Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=7)
	Begin
		update sds.tblOnBoardingCompleted set Step7=@StepStatus,Step7Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=8)
	Begin
		update sds.tblOnBoardingCompleted set Step8=@StepStatus,Step8Remark=@Remark,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End

	else
		set @RetValue=-1

	if exists (select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId and step1=2 and step2=2 and step3=2 and step4=2 and step5=2 and step6=2 and step7=2 and step8=2)
	Begin
		update sds.tblOnBoardingCompleted set IsOnBoardingStage1=2,IsOnBoardingStage2=2,LastUpdatedOn=getdate() where DistributorId=@DistributorId
	End
	else if exists (select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId and (step1=3 or step2=3 or step3=3 or step4=3 or step5=3 or step6=3 or step7=3 or Step8=3))
	Begin
		update sds.tblOnBoardingCompleted set IsOnBoardingStage1=3,IsOnBoardingStage2=0,LastUpdatedOn=getdate() where DistributorId=@DistributorId
	End
	else
	Begin
		update sds.tblOnBoardingCompleted set IsOnBoardingStage1=1,IsOnBoardingStage2=0,LastUpdatedOn=getdate() where DistributorId=@DistributorId
	End

	--	select * from sds.tblOnBoardingCompleted where DistributorId=@DistributorId

	--print @RetValue
	return @RetValue
END



GO
/****** Object:  StoredProcedure [SDS].[usp_OnboardingCardCounts]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_OnboardingCardCounts]
--declare 
@SACode nvarchar(20)
--set @SACode='341'
as
Begin
set fmtonly off
declare @tblCounts table(id int identity(1,1), SAcode Nvarchar(20), TotalDistributor int, ActiveDistributor int, InActiveDistributor int, 
Stage1Incompleted int,Stage1PendingForApproval int,Stage1Approved int,Stage1Rejected int)

insert into @tblCounts (SAcode, TotalDistributor, ActiveDistributor, InActiveDistributor)
select @SACode, count(d.DistributorId) Total,
sum(case when isnull(u.RefNo,'0')<>'0' then 1 else 0 end) Activated,
count(d.DistributorId) -sum(case when isnull(u.RefNo,'0')<>'0' then 1 else 0 end) NotActivated  
from dcms.tblDistributorMaster d left outer join sds.tblUser u on d.DistributorId=u.RefNo and u.RoleId=3 and isnull(u.Status,'N')='Y'
where (SACode=@SACode or isnull(@SACode,'0')='0' or isnull(@SACode,'0')='')

declare @incomplete int, @PendingApproval int, @Approved int, @Rejected int
select  	@incomplete=isnull(sum(case when isnull(b.IsOnBoardingStage1,0)=0 then 1 else 0 end),0),
@PendingApproval =isnull(sum(case when isnull(b.IsOnBoardingStage1,0)=1 then 1 else 0 end),0),
@Approved=isnull(sum(case when isnull(b.IsOnBoardingStage1,0)=2 then 1 else 0 end),0),
@Rejected=isnull(sum(case when isnull(b.IsOnBoardingStage1,0)=3 then 1 else 0 end),0)

from dcms.tblDistributorMaster d left outer join sds.tblUser u on d.DistributorId=u.RefNo and u.RoleId=3 and isnull(u.Status,'N')='Y'
left outer join sds.tblOnBoardingCompleted b on u.RefNo=b.DistributorId 
left outer join sds.tblOnboardingStatus bs on b.IsOnBoardingStage1=bs.value and bs.ForType='STAGE1'
where (SACode=@SACode or isnull(@SACode,'0')='0' or isnull(@SACode,'0')='') and isnull(u.Status,'N')='Y'

update @tblCounts set Stage1Incompleted=isnull(@incomplete,0), Stage1PendingForApproval=isnull(@PendingApproval,0), 
Stage1Approved=isnull(@Approved,0), Stage1Rejected=isnull(@Rejected,0)

select SAcode, TotalDistributor, ActiveDistributor, InActiveDistributor,Stage1Incompleted,Stage1PendingForApproval,Stage1Approved,Stage1Rejected from @tblCounts
END
GO
/****** Object:  StoredProcedure [SDS].[usp_OnboardingEditRequestUpdate]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----		sds.usp_OnboardingEditRequestUpdate 15139,4

CREATE proc [SDS].[usp_OnboardingEditRequestUpdate]
--Declare
@DistributorId	int,
@StepStatus int,
@ForStep int,
@RetValue int output
--set @DistributorId=15139; set @StepStatus=2; set @ForStep=2
as

BEGIN
	Set FMTONLY OFF
	if exists(select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId)
	Begin
	if (isnull(@ForStep,0)>0 and isnull(@ForStep,0)<9)
		declare @str varchar(max)=('update sds.tblOnBoardingCompleted set Step'+convert(nvarchar(10),@ForStep)+ '= '+ convert(nvarchar(10), @StepStatus)
		+',LastUpdatedOn=getdate() where DistributorId='+convert(nvarchar(10),@DistributorId))

		print @str
		exec (@str)

		set @RetValue=@DistributorId
	End
	else
	Begin			
		set @RetValue=-1
	End
		
	return @RetValue
END



GO
/****** Object:  StoredProcedure [SDS].[usp_OnboardingStage2Update]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_OnboardingStage2Update 14145, 2

CREATE proc [SDS].[usp_OnboardingStage2Update]
--declare
@DistributorId	int,
@Stage2Status int,
@RetValue int output
--set @DistributorId=14145  set @Stage2Status=2 
as

BEGIN

	if exists(select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId and IsOnBoardingStage1=2)
	Begin
		update sds.tblOnBoardingCompleted set IsOnBoardingStage2=@Stage2Status,LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else
	Begin
		set @RetValue=-1
	End
	
	--print @RetValue
	return @RetValue
END


GO
/****** Object:  StoredProcedure [SDS].[usp_OnboardingStepStatusOnEdit]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_OnboardingStepStatusOnEdit]
--declare
@DistributorId	int,
@ForStep	int,
@RetValue int output
--set @DistributorId=14145 set @StepStatus=1 set @ForStep=1

as

BEGIN
	if(isnull(@ForStep,0)=1)
	Begin
		update sds.tblOnBoardingCompleted set step1=1, Step2=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=2)
	Begin
		update sds.tblOnBoardingCompleted set Step2=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End 
	else if(isnull(@ForStep,0)=3)
	Begin
		update sds.tblOnBoardingCompleted set Step3=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=4)
	Begin
		update sds.tblOnBoardingCompleted set Step4=1, Step5=1, step6=1, step8=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=5)
	Begin
		update sds.tblOnBoardingCompleted set Step5=1, step6=1, Step8=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=6)
	Begin
		update sds.tblOnBoardingCompleted set Step6=1, Step8=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End
	else if(isnull(@ForStep,0)=7)
	Begin
		update sds.tblOnBoardingCompleted set step7=1, Step8=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End	
	else if(isnull(@ForStep,0)=8)
	Begin
		update sds.tblOnBoardingCompleted set Step8=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		set @RetValue=@DistributorId
	End	
	else
		set @RetValue= -1

	if (@RetValue>0)
	BEGIN
		if exists (select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId and isnull(IsOnBoardingStage1,0)=0)
			update sds.tblOnBoardingCompleted set IsOnBoardingStage1=0, LastUpdatedOn=getdate() where DistributorId=@DistributorId
		else if exists (select 1 from sds.tblOnBoardingCompleted where DistributorId=@DistributorId and isnull(IsOnBoardingStage1,0) in (1,2,3,4,5))
			update sds.tblOnBoardingCompleted set IsOnBoardingStage1=1, LastUpdatedOn=getdate() where DistributorId=@DistributorId
	END
	Return @RetValue 

END




GO
/****** Object:  StoredProcedure [SDS].[usp_OnBoardingUpdate]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----		sds.usp_OnBoardingUpdate 14193, 1,0

CREATE proc [SDS].[usp_OnBoardingUpdate]
--declare
@DistributorId int,
@IsOnBoardingStage1 int,
@IsOnBoardingStage2 int

--set @DistributorId=8320; set @IsOnBoardingStage1=1; set @IsOnBoardingStage2=0
as

Begin
	Set FMTONLY OFF
	--- Check Data Added or not
	declare @Result table (Id int identity(1,1),StepNo int, MasterName nvarchar(200), MasterMsg nvarchar(max), CanContinue int)
	
	---- Check vehicle entries done
	if not exists(select 1 from sds.tblVehicleMaster where DistributorId=@DistributorId and Active='Y')
	Begin
		insert into @Result values(1,'Step 1: Vehicle Details', 'Vehicles Not Added.', 0)
		----- Vehicle Delivery Boy Mapping Not done
		if not exists(select * from sds.tblVehicleDeliveryBoyMapping where DistributorId=@DistributorId and Active='Y')
			insert into @Result values(2,'Step 2: Vehicle-Del. Boy Mapping', 'Vehicle-Delivery Boy Mapping Not Done.', 0)
	End

	----- Vehicle Delivery Boy Mapping Not done
	if exists(SELECT v.VehicleId, v.VehicleNo FROM SDS.tblVehicleMaster AS v LEFT OUTER JOIN SDS.tblVehicleDeliveryBoyMapping AS vd ON v.VehicleId = vd.VehicleId
				WHERE (v.DistributorId = @DistributorId) AND (v.Active = 'Y') AND (ISNULL(vd.DeliveryBoyId, 0) = 0))
	Begin
		insert into @Result 
			SELECT 2,'Step 2: Vehicle-Del. Boy Mapping', v.VehicleNo +': Delivery boy not mapped to this Vehicle',0 FROM SDS.tblVehicleMaster AS v 
			LEFT OUTER JOIN SDS.tblVehicleDeliveryBoyMapping AS vd ON v.VehicleId = vd.VehicleId
			WHERE (v.DistributorId = @DistributorId) AND (v.Active = 'Y') AND (ISNULL(vd.DeliveryBoyId, 0) = 0)
	End
	
	----- Check Godown Master with location
	if not exists(select 1 from sds.tblDistributorGodown g left outer join sds.tblDistributorGodownStaffMapping gkm on g.GodownId=gkm.GodownId 
			where g.DistributorId=@DistributorId and g.ActiveFlag='Y' and g.Latitude is not null and isnull(gkm.GodownKeeperId,0)>0)
	Begin
		insert into @Result --values(3,'Step 3: Godown Master', 'Godown Location and Godown Keeper not Mapped.', 0)
		select 3,'Step 3: Godown Details', 'Godown No: '+ convert(nvarchar(250), GoDownNo) +' does not have location', 0 
		from DCMS.tblDistributorGodown g where g.DistributorId=@DistributorId and g.ActiveFlag='Y' and g.Latitude is null
				
		insert into @Result
		select 3,'Step 3: Godown Details', 'Godown No: '+ convert(nvarchar(250), GoDownNo) +' Godown keeper is not assigned to this godown.' , 0
		from DCMS.tblDistributorGodown g left outer join sds.tblDistributorGodownStaffMapping gk on g.GodownId=gk.GodownId 
		where g.DistributorId=@DistributorId and g.ActiveFlag='Y' and isnull(gk.GodownKeeperId,0)=0
	End
	
	----- Cluster Area Mapping Not done
	if exists(select 1 from sds.tblClusterMaster c left outer join sds.tblAreaClusterMapping ac on c.ClusterId=ac.AreaClusterId where c.DistributorId=@DistributorId and C.IsActive='Y' and ac.AreaRefNo is null)
		insert into @Result
		select 8,'Step 8: Cluster Mapping', 'CDCMS Area not mapped to these Cluster(s) : '+
		isnull((STUFF((select ', ' + SDS.fn_CamelCase(c.AreaClusterName) from sds.tblClusterMaster c 
		left outer join sds.tblAreaClusterMapping ac on c.ClusterId=ac.AreaClusterId 
		where c.DistributorId=@DistributorId and C.IsActive='Y' and ac.AreaRefNo is null FOR XML PATH('')),1,1,'')),''), 0

	if exists(select 1 from sds.tblClusterMaster c left outer join sds.tblDeliveryBoyClusterMapping dc on c.ClusterId=dc.ClusterId where c.DistributorId=@DistributorId and C.IsActive='Y' and dc.StaffRefNo is null)
		insert into @Result
		select 8,'Step 8: Cluster Mapping', 'Delivery boy not mapped to these Cluster(s) : '+ 
		isnull((STUFF((select ', ' + SDS.fn_CamelCase(c.AreaClusterName) from sds.tblClusterMaster c left outer join sds.tblDeliveryBoyClusterMapping dc on c.ClusterId=dc.ClusterId 
		where c.DistributorId=@DistributorId and C.IsActive='Y' and dc.StaffRefNo is null  FOR XML PATH('')),1,1,'')),''), 0

	if exists(select 1 from DCMS.tblDistributorAreaMaster da left outer join sds.tblAreaClusterMapping ca on da.AreaRefNo=ca.AreaRefNo where da.DistributorId=@DistributorId and da.StatusFlag='Y' and ca.AreaRefNo is null)
		insert into @Result
		select 8,'Step 8: Cluster Mapping',   +'These CDCMS area(s) are not mapped with cluster : '+ 
		isnull((STUFF((select ', ' + SDS.fn_CamelCase(da.AreaName) from DCMS.tblDistributorAreaMaster da left outer join sds.tblAreaClusterMapping ca on da.AreaRefNo=ca.AreaRefNo
		where da.DistributorId=@DistributorId and da.StatusFlag='Y' and ca.AreaRefNo is null  FOR XML PATH('')),1,1,'')),''), 0

	if not exists(select 1 from @result where CanContinue=0)
	Begin			

	---- Get Distributor System stock and Item wise stock...
		exec sds.usp_DistributorStockUpdateFromDCMS @DistributorId,'Admin'
		
	---- Save Backlog for Distriutor and cluster
		exec sds.usp_DistributorBacklogAdd @DistributorID			--- Distributor wise
		exec sds.usp_ClusterwiseBacklogAdd @DistributorID,0			--- Cluster wise
		exec sds.usp_AreawiseBacklogAddEdit @DistributorID,0		--- Area wise
				
	---- Update On Boarding Completed Flag
		if(isnull(@IsOnBoardingStage1,0)>0)
			update sds.tblOnBoardingCompleted set IsOnBoardingStage1=@IsOnBoardingStage1 where DistributorId=@DistributorId	
		if(isnull(@IsOnBoardingStage2,0)>0)
			update sds.tblOnBoardingCompleted set IsOnBoardingStage2=@IsOnBoardingStage2 where DistributorId=@DistributorId	
	End
	
	select * from @Result

End



GO
/****** Object:  StoredProcedure [SDS].[usp_OnBoardingUpdate_ACLDB]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_OnBoardingUpdate_ACLDB 88888

CREATE proc [SDS].[usp_OnBoardingUpdate_ACLDB]
--declare
@DistributorId int

--set @DistributorId=14193; 
as
Begin
	Set FMTONLY OFF
	declare @Result table (Id int identity(1,1),StepNo int, MasterName nvarchar(200), MasterMsg nvarchar(max), CanContinue int)
	
	-- check Distributor Tahshil mapping
	if Not exists(select 1 from sds.tblDistributorDeliveryTaluka where DistributorId=@DistributorId and isnull(TalukaCode,'')<>'')
	Begin
		insert into @Result values(4,'Step 4: Distributor Tehsil/Ward Mapping', 'Tehsil/Taluka not mapped.', 0)
	End	

	-----  Trading area
	if not exists(select 1 from sds.tblDistributorTradingAreaCoordinates m inner join sds.tblDistributorTradingAreaMajorAreaMapping d on m.DistributorId=d.DistributorId where m.DistributorId=@DistributorId)
		insert into @Result values(5,'Step 5: Define Trading Area', 'Trading area is not defined.', 0)
	
	----- Clusters Not created
	if not exists(select 1 from sds.tblDistributorClusterCoordinates where DistributorId=@DistributorId)
		insert into @Result values(6,'Step 6: Create Clusters', 'Clusters Not Created.', 0)	




	select * from @Result

End



GO
/****** Object:  StoredProcedure [SDS].[usp_OrderDeliveredDeliveryBoyWise]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
/**************************************************************											
--	Procedure Name	:	usp_OrderDeliveredDeliveryBoyWise
--	Description		:	Update submitted cylinder quantity after order delivered.
--	Parameters		:	@OrderID int - Input Parameter OrderID update quantity against orderId 
						@SubmittedQuantity int - Input Parameter SubmittedQuantity update after order delvery.
--	Return Value	:	Return Row affected.
--						
--	Author			:	Prasanna	16-Jan-2018

--	17-FEB-2018			swapnil			Modifications
--	16-Jan-2018			Prasanna				Created
**************************************************************/
	
CREATE PROCEDURE [SDS].[usp_OrderDeliveredDeliveryBoyWise]
	@OrderID bigint,
	@ItemID int,
	@FilledQuantity int,
	@EmptyQuantity int,
	@DeliveredDate datetime,
	@Latitude nvarchar(10),
	@Longitude nvarchar(10)
AS
BEGIN
	declare @DeliveryBoyId numeric(17,0),@FilledStock int=0,@RemainingItem int=0,@ItemPrice money=0
	select @DeliveryBoyId=DeliveryBoyRefNo from tblOrder where OrderID=@OrderID
	
	SELECT @FilledStock=FilledQuantity FROM SDS.tblDeliveryBoyStock with(nolock) WHERE DeliveryBoyId = @DeliveryBoyId AND ItemId = @ItemId
	DECLARE @InsertedCount int=103
	
	IF(@FilledStock >= @FilledQuantity)
	BEGIN
			select @RemainingItem=ItemID, @ItemPrice=Price from SDS.tblOrderItemDetails where OrderID=@OrderID and ItemID=@ItemID and FilledQuantity<OrderQuantity
			if(@RemainingItem<>0)
			Begin
					--Use to updated OrderItemDetails table 
					UPDATE SDS.tblOrderItemDetails 
					SET FilledQuantity =ISNULL(FilledQuantity,0)+@FilledQuantity,
						EmptyQuantity =ISNULL(EmptyQuantity,0)+@EmptyQuantity,
						TotalPrice=@ItemPrice*@FilledQuantity
					WHERE OrderID=@OrderID and ItemID=@ItemID
									
					--use to updated DeliveryBoy Stock
					UPDATE SDS.tblDeliveryBoyStock
					SET FilledQuantity = ISNULL(FilledQuantity,0)-@FilledQuantity,
					EmptyQuantity=ISNULL(EmptyQuantity,0)+@EmptyQuantity
					,LastUpdatedDate = GETDATE()
					WHERE DeliveryBoyId = @DeliveryBoyId AND ItemId = @ItemId and FilledQuantity<>0
					declare @Comprecord int =0
						IF(@DeliveredDate IS NOT NULL)
						BEGIN
							UPDATE SDS.tblOrder
							SET OrderStatus ='DELIVERED',DeliveredDate=@DeliveredDate,DeliveryBoyLatitude=@Latitude,DeliveryBoyLongitude=@Longitude
							WHERE OrderID=@OrderID
							if(@@ROWCOUNT > 0)
							BEGIN
								SET @InsertedCount=101
							END
						END
						IF(@DeliveredDate IS NULL)
						BEGIN
							UPDATE SDS.tblOrder
							SET OrderStatus ='DELIVERED',DeliveredDate=GETDATE(),DeliveryBoyLatitude=@Latitude,DeliveryBoyLongitude=@Longitude
							WHERE OrderID=@OrderID
							if(@@ROWCOUNT > 0)
							BEGIN
								SET @InsertedCount=101
							END
						END
			END
			ELSE
			BEGIN
					SET @InsertedCount=105
			END
	END
	ELSE
	BEGIN
	 SET @InsertedCount = 104
	END
SELECT @InsertedCount AS InsertedCount
END



GO
/****** Object:  StoredProcedure [SDS].[usp_ParameterTripBkgSummary]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ParameterTripBkgSummary]

as
BEGIN
set FMTONLY OFF
	IF OBJECT_ID('tempdb..#summ') IS NOT NULL DROP TABLE #summ;
	create table #summ (id int identity, DId int,DCode varchar(20),DName varchar(200),
	ClusterId bigint,ClusterName varchar(200),TotalBkg int,ValidBkg int, PMUYBkg int,NONPMUYBkg int,PrepaidBkg int,SBCBkg int,DBCBkg int,PendingSV int, Refill int, LossReq int,
	BkgSourceDistri int,BkgSourceCSC int,BkgSourcePortal int,BkgSourceCustConn int,BkgSourceIVRS int,BkgSourceEComm int,BkgSourceChatBot int,
	BkgSourceVitran int,BkgSourceHPPay  int, BkgInstant int, BkgHome int, BkgShop int,Suvidha int)

	declare @didtbl table(id int identity, did int)
	insert into @didtbl(did) select d.DistributorId from DCMS.tblDistributorMaster d inner join SDS.tblOnBoardingCompleted b on d.DistributorId=b.DistributorId
	where b.IsOnBoardingStage1=2 and d.StatusCode='A' and b.DistributorId in (14193,14145,9128,8118,15139)--,6659,6676)

	declare @c int=1, @c1 int,@did int,@GroupCode varchar(5), @str nvarchar(max)
	select @c1=max(id) from @didtbl

	while(@c<=@c1)
	Begin
		set @GroupCode=''; set @str=''
		select @did=did from @didtbl where id=@c
		SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @did
		if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
		if (isnull(@GroupCode,'')<>'')
		Begin
			set @str='Insert into #summ(DId,DCode,DName,ClusterId,ClusterName,TotalBkg,ValidBkg,PMUYBkg,NONPMUYBkg,PrepaidBkg,SBCBkg,DBCBkg,PendingSV, Refill, LossReq,BkgSourceDistri,BkgSourceCSC,
			BkgSourcePortal,BkgSourceCustConn,BkgSourceIVRS,BkgSourceEComm,BkgSourceChatBot,BkgSourceVitran,BkgSourceHPPay,BkgInstant,BkgHome, BkgShop,Suvidha)
			select d.DistributorId,d.JDEDistributorCode,d.DistributorName,t.ClusterId,t.AreaClusterName,count(distinct o.OrderRefNo),
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId then 1 else 0 end)Valid,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.NatureCode=16 then 1 else 0 end)PMUY,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.NatureCode<>16 then 1 else 0 end)NONPMUY,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.Prepaid=''Y'' then 1 else 0 end)Prepaid,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.SingleDouble=''S'' then 1 else 0 end)SBC, 
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.SingleDouble=''D'' then 1 else 0 end)DBC, 
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderTypeCode=''PSV'' then 1 else 0 end)PSV,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderTypeCode=''RFL'' then 1 else 0 end)RFL,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderTypeCode=''LR'' then 1 else 0 end)LR,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=1 then 1 else 0 end)Distri,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=2 then 1 else 0 end)CSC,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=3 then 1 else 0 end)Portal,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=4 then 1 else 0 end)CustConn,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=5 then 1 else 0 end)IVRS,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=6 then 1 else 0 end)EComm,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=7 then 1 else 0 end)ChatBot,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=8 then 1 else 0 end)Vitran,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.OrderSourceCode=9 then 1 else 0 end)HPPay,
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.DeliveryMode=''I'' then 1 else 0 end),
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.DeliveryMode=''H'' then 1 else 0 end),
		sum(case when c.Latitude is not null and c.InCluster=1 and c.ClusterId=t.ClusterId and o.DeliveryMode=''S'' then 1 else 0 end),
		0 as Suvidha
		from DCMS.tblDistributorMaster d inner join SDS.tblClusterMaster t on d.DistributorId=t.DistributorId
		inner join SDS.tblAreaClusterMapping ac on t.ClusterId=ac.AreaClusterId
		inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o with (nolock) on d.DistributorId=o.DistributorID and ac.AreaRefNo=o.AreaRefNo
		inner join DCMS.tblDistributorAreaMaster a with (nolock) on o.AreaRefNo=a.AreaRefNo
		inner join SDS.tblConsumerDetails c with (nolock) on d.DistributorId=c.DistributorID and c.UniqueConsumerId=o.UniqueConsumerId 
		Where d.DistributorId = '+convert(nvarchar(25),@did)+'
		group by d.DistributorId,d.JDEDistributorCode,d.DistributorName,t.ClusterId,t.AreaClusterName'
			Print (@str)
			exec(@str)
		End
	set @c=@c+1
	End

	Select id, DId as DistributorId,DCode as JDEDistributorCode,DName as DistributorName,
	ClusterId,ClusterName,TotalBkg,ValidBkg, PMUYBkg,NONPMUYBkg,PrepaidBkg,SBCBkg,DBCBkg,PendingSV, Refill, LossReq,
	BkgSourceDistri,BkgSourceCSC,BkgSourcePortal,BkgSourceCustConn,BkgSourceIVRS,BkgSourceEComm,BkgSourceChatBot,
	BkgSourceVitran,BkgSourceHPPay, BkgInstant, BkgHome, BkgShop, Suvidha
	from #summ order by ValidBkg desc
	drop table #summ
END
GO
/****** Object:  StoredProcedure [SDS].[usp_PendingBookingforCurrentDataSave]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_PendingBookingforCurrentDataSave]
--declare
@GroupCode varchar(5),
@BkgDt sds.BkgDataDt Readonly

as
--set @GroupCode='BA'
----OrderRefNo,DistributorID,UniqueConsumerId,NatureCode,AreaRefNo,OrderNo,OrderDate,OrderTypeCode,DeliveryMode,OrderStatusCode,OrderQuantity,ExpectedDeliveryDate,
----PriceCode,OrderSourceCode,Prepaid,
----ActualDeliveryDate,ReturnQty,CancelReasonCode,CancelDate,SingleDouble
--insert into @BkgDt(OrderRefNo,DistributorID,UniqueConsumerId,NatureCode,AreaRefNo,OrderNo,OrderDate,OrderTypeCode,DeliveryMode,OrderStatusCode,
--OrderQuantity,ExpectedDeliveryDate,PriceCode,OrderSourceCode,Prepaid,ActualDeliveryDate,ReturnQty,CancelReasonCode,CancelDate,SingleDouble) 
--values(5201419300030884, 14193, 9110828800032004, 1, 1141419300000015, 598981, '2020-03-18 16:06:54', 'RFL', 'H', 'OPEN', 1, '2020-03-18 16:06:54',  22,  5,  'N',
--'','','','','')

BEGIN
	IF OBJECT_ID('tempdb..#Bkg') IS NOT NULL DROP TABLE #Bkg
	select * into #Bkg from @BkgDt
	
	declare @RetVal int=0,  @Str varchar(max)=''
	set @Str=' 
		insert into DCMS.tblRefillOrderDtls$'+@GroupCode+'(OrderRefNo, DistributorID, UniqueConsumerId, NatureCode, AreaRefNo, OrderNo, OrderDate, OrderTypeCode, 
			DeliveryMode, OrderStatusCode, OrderQuantity, ExpectedDeliveryDate, ActualDeliveryDate, PriceCode, ReturnQty, CancelReasonCode, CancelDate, 
			SchDataInsertedOn, OrderSourceCode, Prepaid, SingleDouble)
		select o1.OrderRefNo, o1.DistributorID, o1.UniqueConsumerId, o1.NatureCode, o1.AreaRefNo, o1.OrderNo, o1.OrderDate, o1.OrderTypeCode, 
			o1.DeliveryMode, o1.OrderStatusCode, o1.OrderQuantity, nullif(o1.ExpectedDeliveryDate,''1900-01-01''), nullif(o1.ActualDeliveryDate,''1900-01-01''), 
			o1.PriceCode, o1.ReturnQty, o1.CancelReasonCode, nullif(o1.CancelDate,''1900-01-01''), getdate(), o1.OrderSourceCode, o1.Prepaid, o1.SingleDouble 			
		from #Bkg o1 left outer join DCMS.tblRefillOrderDtls$'+@GroupCode+' o2 with (nolock) on o1.DistributorID=o2.DistributorID and o1.OrderRefNo=o2.OrderRefNo
		where o2.OrderRefNo is null	'

		--Print(@Str)
		exec(@str)
		set @RetVal=SCOPE_IDENTITY()
		return @RetVal

	drop table #Bkg
END
GO
/****** Object:  StoredProcedure [SDS].[usp_RaiseRequestForEditCluster]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_RaiseRequestForEditCluster]
--declare
@DistributorID int,
@ClusterId int ,
@Flag int,
@FlagFor nvarchar(250),
@RetValue int output
AS 
BEGIN
	SET @RetValue=0
	IF exists(select 1 from SDS.tblRequestForClusterEdit where DistributorID=@DistributorID and ClusterId=@ClusterId and @FlagFor='DC' )
		BEGIN
			UPDATE SDS.tblRequestForClusterEdit
			SET Flag=@Flag,
				UpdatedDate=GETDATE()
			WHERE DistributorID=@DistributorID and ClusterId=@ClusterId
			SET @RetValue=@@ROWCOUNT
		END
	ELSE
		BEGIN
			UPDATE SDS.tblRequestForClusterEdit
			SET Flag=@Flag,
				UpdatedDate=GETDATE()
			WHERE DistributorID=@DistributorID and ClusterId=@ClusterId and FlagFor=@FlagFor
			SET @RetValue=@@ROWCOUNT 
		END
END
GO
/****** Object:  StoredProcedure [SDS].[usp_RefreshTokenAddEdit]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_RefreshTokenAddEdit]
@ClientKey	nvarchar(MAX),
@RefreshValue	nvarchar(MAX),
@CreatedDate	datetime,
@UserId	bigint,
@LastUpdateDate	datetime,
@ExpiryTime	datetime,
@Action nvarchar(25)

as

declare @RtnValue bigint = 0
if(upper(@action)='ADD')
Begin
	if exists(select 1 from sds.tblRefreshToken where UserId=@UserId)
	Begin
		delete from sds.tblRefreshToken  where UserId=@UserId 
	End

	insert into sds.tblRefreshToken (ClientKey,RefreshValue,CreatedDate,UserId,LastUpdateDate,ExpiryTime)
	values (@ClientKey,@RefreshValue,@CreatedDate,@UserId,getdate(),@ExpiryTime)
	set @RtnValue=SCOPE_IDENTITY()
	
	select @RtnValue RtnValue, ClientKey, RefreshValue, CreatedDate, UserId, LastUpdateDate, ExpiryTime from sds.tblRefreshToken where UserId=@UserId
End
else if (upper(@action)='GET')
Begin
	select @RtnValue as RtnValue, ClientKey, RefreshValue, CreatedDate, UserId, LastUpdateDate, ExpiryTime from sds.tblRefreshToken where UserId=@UserId
End



GO
/****** Object:  StoredProcedure [SDS].[usp_Report_OfficerEmails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- [SDS].[usp_Report_OfficerEmails] 'SO',0  
CREATE PROC [SDS].[usp_Report_OfficerEmails]   
--declare  
@Role nvarchar(10)='RO',   
@EmployeeNo int=0  
AS  
BEGIN  
	select top 1  o.EmployeeName,o.EmployeeNo,o.OfficerRole,  
	--SO Email  
	isnull((STUFF((select distinct ';' + s.Email from SDS.tblScheduler s  
	where s.ActiveFlag='Y' and s.[User] in('SO') FOR XML PATH('')),1,1,'')),'') AS ToEmail, 
	--OtherEmail  
	--isnull((STUFF((select distinct ';' + s.Email from SDS.tblOfficerDetails o   
	--inner join SDS.tblScheduler s on o.AreaCode= s.RefCode  
	--where s.ActiveFlag='Y' and s.[User] in('RO','ZO') and o.OfficerRole in('RO','ZO')   
	--and (o.EmployeeNo=@EmployeeNo or @EmployeeNo=0) FOR XML PATH('')),1,1,'')),'') +';'+  

	--RO Email  
	isnull((STUFF((select distinct ';' + s.Email from SDS.tblScheduler s  
	where s.ActiveFlag='Y' and s.[User] in('RO') FOR XML PATH('')),1,1,'')),'') +';'+

	--RO Email  
	isnull((STUFF((select distinct ';' + s.Email from SDS.tblScheduler s  
	where s.ActiveFlag='Y' and s.[User] in('ZO') FOR XML PATH('')),1,1,'')),'') +';'+

  	--HO Email  
	isnull((STUFF((select distinct ';' + s.Email from SDS.tblScheduler s  
	where s.ActiveFlag='Y' and s.[User] in('HO') FOR XML PATH('')),1,1,'')),'') AS CCEmail 
	--'anilshinde@aadyamconsultant.com' AS CCEmail

from SDS.tblOfficerDetails o left outer join SDS.[tblScheduler] s on o.OfficerRole=s.[User]  
where s.[User] in('HO','RO','SO') and o.OfficerRole in('HO','RO','SO') and (o.EmployeeNo=@EmployeeNo or @EmployeeNo=0)  
  
END
GO
/****** Object:  StoredProcedure [SDS].[usp_ROMasterList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [SDS].[usp_ROMasterList] 
@ZOCode nvarchar(max),	 -- 0 for all
@ActiveFlag varchar(5)	 -- 'ALL' for all

as
Begin
	SELECT ro.ROCode,SDS.fn_CamelCase( ro.ROName)  as ROName, ro.ZOCode, ro.ActiveFlag,SDS.fn_CamelCase( ro.LastUpdateBy)as LastUpdateBy, 
		ro.LastUpdateDateTime,SDS.fn_CamelCase( zo.ZOName)as ZOName
	FROM SDS.tblROMaster AS ro INNER JOIN  SDS.tblZOMaster AS zo ON ro.ZOCode = zo.ZOCode 
	where (ro.ZOCode in (select value from sds.fn_StringSplit(@ZOCode,',')) or @ZOCode='0' or @ZOCode='') and (ro.ActiveFlag=@ActiveFlag or upper(@ActiveFlag)='ALL')
order by ROName
End

GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetClusterWisePerformance]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_Rpt_GetClusterWisePerformance]
--declare
@DistributorId bigint,
@ClusterId bigint,
@FromDate datetime,
@ToDate datetime

----set @DistributorId=14193; set @ClusterId=0

as

BEGIN
	SET FMTONLY OFF
	IF OBJECT_ID('tempdb..#DelBoy') IS NOT NULL DROP TABLE #DelBoy
	create table #DelBoy(DistributorId int, ClusterId bigint, ClusterName nvarchar(200),DelBoyId numeric(17,0), DelName nvarchar(200), 
	VehicleId bigint, VehicleNo nvarchar(25),
	ExpectedTrips int, GeneratedTrips int, AllotedTrips int, CompletedTrips int, ExpectedBookings int,
	ScheduledBookings int, DeliveredBookings int, NotAvailableBookings int, DeniedBookings int, Remark nvarchar(100))

	declare @NoOfDays int
	select @NoOfDays=datediff(dd,@FromDate,@ToDate)

	insert into #DelBoy(DistributorId, ClusterId, ClusterName,DelBoyId, DelName, VehicleId, VehicleNo,ExpectedTrips, 
	GeneratedTrips, AllotedTrips, CompletedTrips,ExpectedBookings,ScheduledBookings, DeliveredBookings, NotAvailableBookings, DeniedBookings, Remark)
	SELECT c.DistributorId, c.ClusterId,  c.AreaClusterName, dc.StaffRefNo,del.StaffName, vd.VehicleId, v.VehicleNo, --dc.NoOfTrip NoOfTripPerDay, @NoOfDays NoOfDays, 
	isnull(dc.NoOfTrip,0)*@NoOfDays ExpectedTrips,0,0,0, (isnull(dc.NoOfTrip,0)*@NoOfDays)*isnull(v.RTOCapacity,0),0,0,0,0,''
	FROM            SDS.tblClusterMaster AS c
	left outer join SDS.tblDeliveryBoyClusterMapping dc on c.ClusterId=dc.ClusterId
	inner join DCMS.tblDistributorStaffDetails del with(nolock) on dc.StaffRefNo=del.StaffRefNo
	left outer join sds.tblVehicleDeliveryBoyMapping vd on dc.StaffRefNo=vd.DeliveryBoyId
	left outer join sds.tblVehicleMaster v on vd.VehicleId=v.VehicleId
	where c.IsActive='Y' and c.DistributorId=@DistributorId and (c.ClusterId=@ClusterId or @ClusterId=0)

	update #DelBoy set GeneratedTrips=isnull(t1.Generated,0), AllotedTrips=isnull(t1.Alloted,0), CompletedTrips=isnull(Completed,0)
	from (
	select t.ClusterId, count(TripId) Generated, sum(case upper(TripStatus) when 'ALLOTED' then 1 when 'STARTED' then 1 when 'COMPLETED' then 1 when 'BREAKDOWN' then 1  else 0 end) Alloted,
	sum(case tripstatus when 'COMPLETED' then 1 else 0 end) Completed 
	from sds.tblTripPlanning t 
	where DistributorId=@DistributorId and (t.ClusterId=@ClusterId or @ClusterId=0) and (t.TripDate between @FromDate and @ToDate)
	group by t.ClusterId
	) t1 inner join #DelBoy r on t1.ClusterId=r.ClusterId

	update #DelBoy set GeneratedTrips=isnull(GeneratedTrips,0)+isnull(t1.Generated,0), 
	AllotedTrips=isnull(AllotedTrips,0)+isnull(t1.Alloted,0), 
	CompletedTrips=isnull(CompletedTrips,0)+isnull(Completed,0)
	from (
	select t.ClusterId, count(TripId) Generated, sum(case upper(TripStatus) when 'ALLOTED' then 1 when 'STARTED' then 1 when 'COMPLETED' then 1 when 'BREAKDOWN' then 1  else 0 end) Alloted,
	sum(case tripstatus when 'Completed' then 1 else 0 end) Completed 
	from sds.tblTripPlanningHistory t 
	where DistributorId=@DistributorId and (t.ClusterId=@ClusterId or @ClusterId=0) and (t.TripDate between @FromDate and @ToDate)
	group by t.ClusterId
	) t1 inner join #DelBoy r on t1.ClusterId=r.ClusterId

	update #DelBoy set ScheduledBookings=isnull(t1.Scheduled,0), DeliveredBookings=isnull(t1.Delivered,0), 
	NotAvailableBookings=isnull(t1.NotAvailable,0), DeniedBookings=isnull(t1.Denied,0)
	from (
	select t.ClusterId, count(d.OrderRefNo) Scheduled, 
	sum(case upper(d.OrderStatus) when 'DELIVER' then 1 else 0 end) Delivered,
	sum(case tripstatus when 'DENIED' then 1 else 0 end) Denied,
	sum(case tripstatus when 'NOTAVAILABLE' then 1 else 0 end) NotAvailable
	from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails d on t.TripId=d.TripId 
	where DistributorId=@DistributorId and (t.ClusterId=@ClusterId or @ClusterId=0) and (t.TripDate between @FromDate and @ToDate)
	group by t.ClusterId
	) t1 inner join #DelBoy r on t1.ClusterId=r.ClusterId

	update #DelBoy set ScheduledBookings=isnull(ScheduledBookings,0)+isnull(t1.Scheduled,0), 
	DeliveredBookings=isnull(DeliveredBookings,0)+ isnull(t1.Delivered,0), 
	NotAvailableBookings=isnull(NotAvailableBookings,0)+isnull(t1.NotAvailable,0), 
	DeniedBookings=isnull(DeniedBookings,0)+isnull(t1.Denied,0)
	from (
	select t.ClusterId, count(d.OrderRefNo) Scheduled, 
	sum(case upper(d.OrderStatus) when 'DELIVER' then 1 else 0 end) Delivered,
	sum(case tripstatus when 'DENIED' then 1 else 0 end) Denied,
	sum(case tripstatus when 'NOTAVAILABLE' then 1 else 0 end) NotAvailable
	from sds.tblTripPlanningHistory t inner join sds.tblTripPlanningDetailsHistory d on t.TripId=d.TripId 
	where DistributorId=@DistributorId and (t.ClusterId=@ClusterId or @ClusterId=0) and (t.TripDate between @FromDate and @ToDate)    
	group by t.ClusterId
	) t1 inner join #DelBoy r on t1.ClusterId=r.ClusterId

	
	Select * from #DelBoy

	drop table #DelBoy
END




GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetDeliveryBoyPerformance]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_Rpt_GetDeliveryBoyPerformance]
--declare
@DistributorId bigint,
@DelBoyId numeric(17,0),
@FromDate datetime,
@ToDate datetime

----set @DistributorId=14193; set @DelBoyId=0

as

BEGIN
	SET FMTONLY OFF
	IF OBJECT_ID('tempdb..#DelBoy') IS NOT NULL DROP TABLE #DelBoy
	create table #DelBoy(DistributorId int, DelBoyId numeric(17,0), DelName nvarchar(200), ClusterId bigint, ClusterName nvarchar(200), 
	VehicleId bigint, VehicleNo nvarchar(25),
	ExpectedTrips int, GeneratedTrips int, AllotedTrips int, CompletedTrips int, ExpectedBookings int,
	ScheduledBookings int, DeliveredBookings int, NotAvailableBookings int, DeniedBookings int, Remark nvarchar(100))

	declare @NoOfDays int
	select @NoOfDays=datediff(dd,@FromDate,@ToDate)

	insert into #DelBoy(DistributorId, DelBoyId, DelName, ClusterId, ClusterName, VehicleId, VehicleNo,ExpectedTrips, 
	GeneratedTrips, AllotedTrips, CompletedTrips,ExpectedBookings,ScheduledBookings, DeliveredBookings, NotAvailableBookings, DeniedBookings, Remark)
	SELECT        del.DistributorId, del.StaffRefNo, del.StaffName, c.ClusterId, c.AreaClusterName,  vd.VehicleId, v.VehicleNo, 
	ISNULL(dc.NoOfTrip, 0) * @NoOfDays AS ExpectedTrips, 0, 0, 0, ISNULL(dc.NoOfTrip, 0)* @NoOfDays * ISNULL(v.RTOCapacity, 0), 0, 0, 0, 0, '' 
	FROM DCMS.tblDistributorStaffDetails AS del with(nolock)
	LEFT OUTER JOIN SDS.tblDeliveryBoyClusterMapping AS dc ON del.StaffRefNo = dc.StaffRefNo 
	LEFT OUTER JOIN SDS.tblClusterMaster AS c on dc.ClusterId=c.ClusterId
	Left OUTER JOIN SDS.tblVehicleDeliveryBoyMapping AS vd ON del.StaffRefNo = vd.DeliveryBoyId
	left outer join SDS.tblVehicleMaster AS v ON vd.VehicleId= v.VehicleId    
	WHERE (del.DistributorId = @DistributorId) AND (del.StaffRefNo = @DelBoyId or isnull(@DelBoyId,0)=0)
	and dc.NoOfTrip>0
	
	--SELECT c.DistributorId, c.ClusterId,  c.AreaClusterName, dc.StaffRefNo,del.StaffName, vd.VehicleId, v.VehicleNo, 
	--isnull(dc.NoOfTrip,0)*@NoOfDays ExpectedTrips,0,0,0, (isnull(dc.NoOfTrip,0)*@NoOfDays)*isnull(v.RTOCapacity,0),0,0,0,0,''
	--FROM            SDS.tblClusterMaster AS c
	--left outer join SDS.tblDeliveryBoyClusterMapping dc on c.ClusterId=dc.ClusterId
	--inner join DCMS.tblDistributorStaffDetails del with(nolock) on dc.StaffRefNo=del.StaffRefNo
	--left outer join sds.tblVehicleDeliveryBoyMapping vd on dc.StaffRefNo=vd.DeliveryBoyId
	--left outer join sds.tblVehicleMaster v on vd.VehicleId=v.VehicleId
	--where c.IsActive='Y' and c.DistributorId=@DistributorId and (c.ClusterId=@ClusterId or @ClusterId=0)

	update #DelBoy set GeneratedTrips=isnull(t1.Generated,0), AllotedTrips=isnull(t1.Alloted,0), CompletedTrips=isnull(Completed,0)
	from (
	select t.StaffRefNo, count(TripId) Generated, sum(case upper(TripStatus) when 'ALLOTED' then 1 when 'STARTED' then 1 when 'COMPLETED' then 1 when 'BREAKDOWN' then 1  else 0 end) Alloted,
	sum(case tripstatus when 'COMPLETED' then 1 else 0 end) Completed 
	from sds.tblTripPlanning t 
	where DistributorId=@DistributorId and (t.StaffRefNo=@DelBoyId or @DelBoyId=0) and (t.TripDate between @FromDate and @ToDate)
	group by t.StaffRefNo
	) t1 inner join #DelBoy r on t1.StaffRefNo=r.DelBoyId

	update #DelBoy set GeneratedTrips=isnull(GeneratedTrips,0)+isnull(t1.Generated,0), 
	AllotedTrips=isnull(AllotedTrips,0)+isnull(t1.Alloted,0), 
	CompletedTrips=isnull(CompletedTrips,0)+isnull(Completed,0)
	from (
	select t.StaffRefNo, count(TripId) Generated, sum(case upper(TripStatus) when 'ALLOTED' then 1 when 'STARTED' then 1 when 'COMPLETED' then 1 when 'BREAKDOWN' then 1  else 0 end) Alloted,
	sum(case tripstatus when 'Completed' then 1 else 0 end) Completed 
	from sds.tblTripPlanningHistory t 
	where DistributorId=@DistributorId and (t.StaffRefNo=@DelBoyId or @DelBoyId=0) and (t.TripDate between @FromDate and @ToDate)
	group by t.StaffRefNo
	) t1 inner join #DelBoy r on t1.StaffRefNo=r.DelBoyId

	update #DelBoy set ScheduledBookings=isnull(t1.Scheduled,0), DeliveredBookings=isnull(t1.Delivered,0), 
	NotAvailableBookings=isnull(t1.NotAvailable,0), DeniedBookings=isnull(t1.Denied,0)
	from (
	select t.StaffRefNo, count(d.OrderRefNo) Scheduled, 
	sum(case upper(d.OrderStatus) when 'DELIVER' then 1 else 0 end) Delivered,
	sum(case tripstatus when 'DENIED' then 1 else 0 end) Denied,
	sum(case tripstatus when 'NOTAVAILABLE' then 1 else 0 end) NotAvailable
	from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails d on t.TripId=d.TripId 
	where DistributorId=@DistributorId and (t.StaffRefNo=@DelBoyId or @DelBoyId=0) and (t.TripDate between @FromDate and @ToDate)
	group by t.StaffRefNo
	) t1 inner join #DelBoy r on t1.StaffRefNo=r.DelBoyId

	update #DelBoy set ScheduledBookings=isnull(ScheduledBookings,0)+isnull(t1.Scheduled,0), 
	DeliveredBookings=isnull(DeliveredBookings,0)+ isnull(t1.Delivered,0), 
	NotAvailableBookings=isnull(NotAvailableBookings,0)+isnull(t1.NotAvailable,0), 
	DeniedBookings=isnull(DeniedBookings,0)+isnull(t1.Denied,0)
	from (
	select t.StaffRefNo, count(d.OrderRefNo) Scheduled, 
	sum(case upper(d.OrderStatus) when 'DELIVER' then 1 else 0 end) Delivered,
	sum(case tripstatus when 'DENIED' then 1 else 0 end) Denied,
	sum(case tripstatus when 'NOTAVAILABLE' then 1 else 0 end) NotAvailable
	from sds.tblTripPlanningHistory t inner join sds.tblTripPlanningDetailsHistory d on t.TripId=d.TripId 
	where DistributorId=@DistributorId and (t.StaffRefNo=@DelBoyId or @DelBoyId=0) and (t.TripDate between @FromDate and @ToDate)    
	group by t.StaffRefNo
	) t1 inner join #DelBoy r on t1.StaffRefNo=r.DelBoyId

	
	Select * from #DelBoy

	drop table #DelBoy
END




GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetDistributorOnBoardingStatus]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************	
--	Stored Procedure Name	: [usp_Rpt_GetDistributorOnBoardingStatus]
--	Description	 :	get Dealer On Boarding Status
--	Author	 :	Swapnil	22-12-2019
--	Date Modified	Modified By	     Modifications
--  17---03-2020	 Rajendra	     Updated
**************************************************************/
--	 sds.usp_Rpt_GetDistributorOnBoardingStatus '341', 0

CREATE PROCEDURE [SDS].[usp_Rpt_GetDistributorOnBoardingStatus]
--declare
@SACode nvarchar(25),
@DistributorId int=0
--set @SACode=341; set @DistributorId=0
AS
BEGIN

set FMTONLY OFF

declare @tblDistri table (id int identity(1,1),DistributorId int, JDEDistributorCode nvarchar(20), DistributorName nvarchar(200),SAcode nvarchar(20), 
Step1 int,Step2 int,Step3 int,Step4 int,Step5 int,Step6 int,Step7 int,Step8 int, Step1Remark varchar(max),Step2Remark varchar(max),Step3Remark varchar(max),
Step4Remark varchar(max),Step5Remark varchar(max),Step6Remark varchar(max),Step7Remark varchar(max),Step8Remark varchar(max),
Verified int, notVerified int, NotverifiedPercent decimal(10,2),Stage1Status int,Stage1StatusText nvarchar(20),Stage2Status int,stage2Statustext nvarchar(20))

insert into @tblDistri(DistributorId, JDEDistributorCode, DistributorName,SAcode,Step1,Step2,Step3,Step4,Step5,Step6,Step7,Step8,Step1Remark,Step2Remark,Step3Remark,
Step4Remark,Step5Remark,Step6Remark,Step7Remark,Step8Remark, Verified, notVerified, NotverifiedPercent,Stage1Status,Stage1StatusText,Stage2Status,stage2Statustext)

SELECT d.DistributorId, d.JDEDistributorCode,SDS.fn_CamelCase( d.DistributorName) as DistributorName,
d.SACode,0,0,0,0,0,0,0,0,b.Step1Remark,b.Step2Remark,b.Step3Remark,b.Step4Remark,b.Step5Remark,b.Step6Remark,b.Step7Remark,b.Step8Remark,
0,0,0,b.IsOnBoardingStage1, obs.Statustext,b.IsOnBoardingStage2, obs1.Statustext	
FROM SDS.tblUser AS u INNER JOIN
DCMS.tblDistributorMaster AS d ON u.RefNo = d.DistributorId and u.RoleId=3 and isnull(u.Status,'N')='Y' LEFT OUTER JOIN
SDS.tblOnBoardingCompleted AS b ON d.DistributorId = b.DistributorId LEFT OUTER JOIN
sds.tblOnboardingStatus AS 	 Obs on Obs.value= b.IsOnBoardingStage1 and obs.ForType='STAGE1' LEFT OUTER JOIN
sds.tblOnboardingStatus AS 	 Obs1 on Obs1.value= b.IsOnBoardingStage2  and Obs1.ForType='STAGE2'
WHERE	   upper(isnull(d.StatusCode,''))='A' and (d.DistributorName not like 'INACTIVE%')
and (d.DistributorName not like 'ND%') and (d.SACode=@SACode or @SACode='0')
and (d.DistributorId=isnull(@DistributorId,0) or isnull(@DistributorId,0)=0)
order By d.DistributorName

declare @DId int, @c int, @c1 int
select @c1=isnull(max(id),0) from @tblDistri 
set @c=1

While (@c<=@c1)
Begin
set @DId =0
select @DId=DistributorId from @tblDistri where id=@c

-- Check Vehicles
if exists(select 1 from sds.tblVehicleMaster where DistributorId=@DId and Active='Y')
Begin
update @tblDistri set Step1=1 where DistributorId=@DId 
End

-- Check DeliveryBoy vehicle mapping
if not exists(select v.VehicleId, m.VehicleId from sds.tblVehicleMaster v left outer join sds.tblVehicleDeliveryBoyMapping m on v.VehicleId=m.VehicleId
where v.DistributorId=@DId and m.VehicleId is null and v.Active='Y')
Begin
update @tblDistri set Step2=1 where DistributorId=@DId and step1=1
End
----- Check Godown Master ith location
if exists(select 1 from sds.tblDistributorGodown g inner join sds.tblDistributorGodownStaffMapping gk on g.godownid=gk.godownid
where g.DistributorId=@DId and g.ActiveFlag='Y' and g.Latitude is not null and isnull(gk.GodownKeeperId,0)<>0)
Begin
update @tblDistri set Step3=1 where DistributorId=@DId
End

---- check Distributor Tahshil mapping
--if exists(select 1 from sds.tblDistributorDeliveryTaluka where DistributorId=@DId and isnull(TalukaCode,'')<>'')
--Begin
--	update @tblDistri set Step4=1 where DistributorId=@DId
--End
---- check Trading area 
--if exists(select 1 from sds.tblDistributorTradingAreaCoordinates m inner join sds.tblDistributorTradingAreaMajorAreaMapping d on m.DistributorId=d.DistributorId where m.DistributorId=@DId)
--Begin
--	update @tblDistri set Step5=1 where DistributorId=@DId
--End
---- check cluasters 
--if exists(select 1 from sds.tblClusterMaster c inner join sds.tblDistributorClusterCoordinates cc on c.ClusterId=cc.AreaClusterId where c.DistributorId=@DId and IsActive='Y')
--Begin
--	update @tblDistri set Step6=1 where DistributorId=@DId
--End

-- check POD area declaration
if not exists(select c.ClusterId,c.Regionid,pd.arearefno from sds.tblClusterMaster c left outer join sds.tblAreaClusterMapping cm on c.ClusterId=cm.AreaClusterId 
left outer join sds.tblPODWeekdaysDetails pd on cm.AreaRefNo=pd.AreaRefNo where c.DistributorId=@DId and c.Regionid=2 and pd.AreaRefNo is null)
Begin
update @tblDistri set Step7=1 where DistributorId=@DId
End

-- check cluster master, area cluster mapping and cluster delivery boy mapping
if not exists(select 1 from DCMS.tblDistributorAreaMaster where DistributorID=@DId and StatusFlag='Y' and AreaRefNo not in (
select AreaRefNo from sds.tblAreaClusterMapping where DistributorId=@DId and IsActive='Y'))
Begin
if not exists(select * from sds.tblclustermaster where distributorId=@DId and IsActive='Y' and clusterId not in 
(select clusterId from sds.tblDeliveryBoyClusterMapping where distributorId=@DId))
Begin
update @tblDistri set Step8=1 where DistributorId=@DId
End
End

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step1,0) >1)
update @tblDistri set Step1= (select  Step1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step1,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step2,0) >1)
update @tblDistri set Step2= (select  Step2 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step2,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step3,0) >1)
update @tblDistri set Step3= (select  step3 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step3,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step4,0) >1)
update @tblDistri set Step4= (select  step4 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step4,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step5,0) >1)
update @tblDistri set Step5= (select  Step5 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step5,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step6,0) >1)
update @tblDistri set Step6= (select  step6 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step6,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step7,0) >1)
update @tblDistri set Step7= (select  step7 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step7,0) >1) where DistributorId=@DId

if exists(select  1 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(Step8,0) >1)
update @tblDistri set Step8= (select  step8 from  SDS.tblOnBoardingCompleted where DistributorId = @DId and isnull(step8,0) >1) where DistributorId=@DId

declare @tot int, @verified int, @NotVerified int
select @tot=count(UniqueConsumerId), @verified=sum(case when isnull(IsVerified,0)=1 then 1 else 0 end), 
@NotVerified=sum(case  when isnull(IsVerified,0)=0 then 1 else 0 end)  
from sds.tblConsumerDetails where DistributorID=@DId

--select @tot,@verified,@NotVerified

update @tblDistri set Verified=isnull(@verified,0), notVerified=isnull(@NotVerified,0), 
NotverifiedPercent=isnull((convert(decimal(10,2), round( @NotVerified*100.00/isnull(nullif(@tot,0),1),2))),0.00) where DistributorId=@DId

set @c=@c+1
End

select * from  @tblDistri order by JDEDistributorCode
END




GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetDistributorOnBoardingStatus_ACLDB]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/**************************************************************											
--	Stored Procedure Name	: [usp_Rpt_GetDistributorOnBoardingStatus]
--	Description		:	get Dealer On Boarding Status
--	Author			:	Swapnil	22-12-2019
--	Date Modified	Modified By	     Modifications
--  17---03-2020		Rajendra	     Updated
**************************************************************/
--		sds.usp_Rpt_GetDistributorOnBoardingStatus_ACLDB '9128,8288,14331,14145,15139,8263,88888'

CREATE PROCEDURE [SDS].[usp_Rpt_GetDistributorOnBoardingStatus_ACLDB]
--declare
@DistributorId nvarchar(max)=''
--set @DistributorId='9128,8288,14331,14145,15139,8263,88888'
AS
BEGIN			

set FMTONLY OFF

	declare @tblDistri table (id int identity(1,1),DistributorId int,Step4 int,Step5 int,Step6 int)

	insert into @tblDistri(DistributorId, Step4,Step5,Step6)
	select value,0,0,0 from sds.fn_StringSplit(@DistributorId,',')
	
	declare @DId int, @c int, @c1 int
	select @c1=isnull(max(id),0) from @tblDistri 
	set @c=1

	While (@c<=@c1)
	Begin
		set @DId =0
		select @DId=DistributorId from @tblDistri where id=@c		

		-- check Distributor Tahshil mapping
		if exists(select 1 from sds.tblDistributorDeliveryTaluka where DistributorId=@DId and isnull(TalukaCode,'')<>'')
		Begin
			update @tblDistri set Step4=1 where DistributorId=@DId
		End
		-- check Trading area 
		if exists(select 1 from sds.tblDistributorTradingAreaCoordinates m inner join sds.tblDistributorTradingAreaMajorAreaMapping d on m.DistributorId=d.DistributorId where m.DistributorId=@DId)
		Begin
			update @tblDistri set Step5=1 where DistributorId=@DId
		End
		-- check cluasters 
		if exists(select 1 from sds.tblDistributorClusterCoordinates cc where cc.DistributorId=@DId and cc.ActiveStatus='Y')
		Begin
			update @tblDistri set Step6=1 where DistributorId=@DId
		End
		
	set @c=@c+1
	End
	
	select * from  @tblDistri 
END

SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetDuplicateAddressData]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_Rpt_GetDuplicateAddressData]
--	Description		:	Return duplicated MIS report data

--	Author			:	29-05-2020

		Date			     Modifications
--	29-05-2020			Prasanna        Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_Rpt_GetDuplicateAddressData]

AS
BEGIN
	     
		SELECT DistributorName,DistributorCode,a.DistributorID,ConsumerHolding,ISNULL(OldAvailable,0) AS AvailableCoordinates,ISNULL((ConsumerHolding - OldAvailable),0) AS BalanceTargeted,
		ISNULL(SameAddress,0) AS SameAddress,ISNULL(UtilisedHits,0) AS UtilisedHits,ISNULL((SameAddress - UtilisedHits),0) AS SavedHits
		FROM (
			SELECT dm.DistributorName,dm.JDEDistributorCode AS DistributorCode,c.DistributorID,COUNT(1) AS ConsumerHolding,
			SUM(CASE WHEN c.Latitude IS NOT NULL THEN 1 ELSE 0 END) AS OldAvailable
			FROM [SDS].[tblConsumerDetails] c INNER JOIN
			[DCMS].[tblDistributorMaster] dm ON dm.DistributorId=c.DistributorID
			WHERE c.ConsumerStatus='Active'
			GROUP BY dm.DistributorName,dm.JDEDistributorCode,c.DistributorID
		) AS a LEFT OUTER JOIN
		(
			SELECT da.DistributorId,
			SUM(ISNULL(da.DuplicateAddressCount,0)) AS SameAddress,
			COUNT(da.DistributorId) as UtilisedHits
			FROM [SDS].[tblDuplicateAddress] da
			GROUP BY DistributorId
		) AS b ON a.DistributorID=b.DistributorId

END


GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetGoogleAPIHitDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [SDS].[usp_Rpt_GetGoogleAPIHitDetails] 
--declare
@SACode nvarchar(20)='',
@FromDate datetime = '2020-05-01',
@ToDate datetime='2020-05-29',
@APIName nvarchar(50)=''

--set @SACode='';set @FromDate='2020-05-01';set @ToDate='2020-05-29'; set @APIName=''

As

BEGIN
set FMTONLY OFF
declare @RptData table(id int identity, LoginUserRefId nvarchar(20), Code Nvarchar(20), Name nvarchar(200), 
ExpectedHits nvarchar(50), TodaysHits int, YesterdaysHits int, PreviousHits int)

insert into @RptData(LoginUserRefId, Code, Name, ExpectedHits, TodaysHits, YesterdaysHits, PreviousHits)
select gh.LoginUserRefId, 
case when gh.RoleId=3 then d.JDEDistributorCode when gh.RoleId=7 then s.SACode else '' end as UserCode, 
case when gh.RoleId=3 then d.DistributorName when gh.RoleId=7 then s.SAName else '' end as UserName, '',
sum(case when cast(EntryDate as date)=cast(getdate() as date) then isnull(HitsCount,0) else 0 end) TodaysHits,
sum(case when cast(EntryDate as date)=cast(dateadd(dd,-1,getdate()) as date) then isnull(HitsCount,0) else 0 end) YesterdaysHits,
sum(case when cast(EntryDate as date)<cast(dateadd(dd,-1,getdate()) as date) then isnull(HitsCount,0) else 0 end) PreviousHits
from sds.tblGoogleAPIHitsHIstory gh left outer join dcms.tblDistributorMaster d on gh.LoginUserRefId=d.DistributorId and gh.RoleId=3
left outer join sds.tblSAMaster s on gh.LoginUserRefId=s.SACode and gh.RoleId=7
where (lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim(@APIName))) or lower(ltrim(rtrim(@APIName)))='')
and (d.SACode=@SACode or isnull(@sacode,'')='' or s.SACode=@SACode)
group by gh.LoginUserRefId,d.JDEDistributorCode, d.DistributorName,gh.RoleId,s.SACode,s.SAName

select Id, LoginUserRefId, Code, Name, ExpectedHits, TodaysHits, YesterdaysHits, PreviousHits from @RptData
END

GO
/****** Object:  StoredProcedure [SDS].[usp_Rpt_GetGoogleAPIHitSummary]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_Rpt_GetGoogleAPIHitSummary ''

CREATE proc [SDS].[usp_Rpt_GetGoogleAPIHitSummary]
--declare
@SACode nvarchar(20)
--set @SACode='341'

as
Begin
set FMTONLY OFF
	declare @RptData table(id int identity, TextFor nvarchar(50), MapsJavaScriptHits int, DistancematrixtHits int, GeocodingHits int)

	insert into @RptData
	select 'Total',
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Maps JavaScript API'))) then isnull(HitsCount,0) else 0 end) MapsJavaScriptHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Distance Matrix API'))) then isnull(HitsCount,0) else 0 end) DistancematrixtHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Geocoding API'))) then isnull(HitsCount,0) else 0 end) GeocodingHits
	from sds.tblGoogleAPIHitsHIstory gh left outer join dcms.tblDistributorMaster d on gh.LoginUserRefId=d.DistributorId and gh.RoleId=3
	left outer join sds.tblSAMaster s on gh.LoginUserRefId=s.SACode and gh.RoleId=7
	where (d.SACode=@SACode or isnull(@sacode,'')='' or s.SACode=@SACode)


	insert into @RptData
	select 'Today',
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Maps JavaScript API'))) then isnull(HitsCount,0) else 0 end) MapsJavaScriptHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Distance Matrix API'))) then isnull(HitsCount,0) else 0 end) DistancematrixtHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Geocoding API'))) then isnull(HitsCount,0) else 0 end) GeocodingHits
	from sds.tblGoogleAPIHitsHIstory gh left outer join dcms.tblDistributorMaster d on gh.LoginUserRefId=d.DistributorId and gh.RoleId=3
	left outer join sds.tblSAMaster s on gh.LoginUserRefId=s.SACode and gh.RoleId=7
	where (d.SACode=@SACode or isnull(@sacode,'')='' or s.SACode=@SACode) and (cast(EntryDate as date)=cast(getdate() as date))

	insert into @RptData
	select 'Yesterday',
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Maps JavaScript API'))) then isnull(HitsCount,0) else 0 end) MapsJavaScriptHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Distance Matrix API'))) then isnull(HitsCount,0) else 0 end) DistancematrixtHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Geocoding API'))) then isnull(HitsCount,0) else 0 end) GeocodingHits
	from sds.tblGoogleAPIHitsHIstory gh left outer join dcms.tblDistributorMaster d on gh.LoginUserRefId=d.DistributorId and gh.RoleId=3
	left outer join sds.tblSAMaster s on gh.LoginUserRefId=s.SACode and gh.RoleId=7
	where (d.SACode=@SACode or isnull(@sacode,'')='' or s.SACode=@SACode) and (cast(EntryDate as date)=cast(dateadd(dd,-1,getdate()) as date))


	insert into @RptData
	select 'Previous',
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Maps JavaScript API'))) then isnull(HitsCount,0) else 0 end) MapsJavaScriptHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Distance Matrix API'))) then isnull(HitsCount,0) else 0 end) DistancematrixtHits,
	sum(case when lower(ltrim(rtrim(GoogleAPIName)))=lower(ltrim(rtrim('Geocoding API'))) then isnull(HitsCount,0) else 0 end) GeocodingHits
	from sds.tblGoogleAPIHitsHIstory gh left outer join dcms.tblDistributorMaster d on gh.LoginUserRefId=d.DistributorId and gh.RoleId=3
	left outer join sds.tblSAMaster s on gh.LoginUserRefId=s.SACode and gh.RoleId=7
	where (d.SACode=@SACode or isnull(@sacode,'')='' or s.SACode=@SACode) and (cast(EntryDate as date)<cast(dateadd(dd,-1,getdate()) as date))

	select Id,TextFor, isnull(MapsJavaScriptHits,0) MapsJavaScriptHits, isnull(DistancematrixtHits,0) DistancematrixtHits, isnull(GeocodingHits,0) GeocodingHits from @RptData

END

GO
/****** Object:  StoredProcedure [SDS].[usp_RptTripDetailsSummary]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_RptTripDetailsSummary 14193,'2019-10-01',getdate()

CREATE proc [SDS].[usp_RptTripDetailsSummary]
--declare 
@DistributorId int,
@FromDate datetime,
@ToDate datetime
--set @DistributorId=14193; set @FromDate='2019-10-01'; set @ToDate=getdate()

as
BEGIN
	Set FMTONLY OFF
	SELECT t.DistributorId, t.TripId, t.TripNo, t.TripDate,  t.ClusterId, c.AreaClusterName, t.VehicleId, v.VehicleNo, t.StaffRefNo, t.StaffName, 
		t.TripStatus, t.TripStartDate, t.TripEndDate, count(d.OrderRefNo) AS OrderCount,
		sum(case d.OrderStatus when 'Deliver' then 1 else 0 end) Delivered, 
		sum(case d.OrderStatus when 'Denied' then 1 else 0 end) Denied, 
		sum(case d.OrderStatus when 'NotAvailable' then 1 else 0 end) NotAvailable
	FROM SDS.tblTripPlanning AS t INNER JOIN
		SDS.tblTripPlanningDetails AS d ON t.TripId = d.TripId LEFT OUTER JOIN
		SDS.tblClusterMaster AS c ON t.ClusterId = c.ClusterId LEFT OUTER JOIN
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId
	Where t.DistributorId=@DistributorId and cast(t.TripDate as date)>=cast(@FromDate as date) and cast(t.TripDate as date)<=cast(@ToDate as date) 
	GROUP BY t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.ClusterId, c.AreaClusterName, t.VehicleId, v.VehicleNo, 
		t.StaffRefNo, t.StaffName, t.TotalOrders, t.TripStatus, t.TripStartDate, t.TripEndDate

	union

	SELECT t.DistributorId, t.TripId, t.TripNo, t.TripDate,  t.ClusterId, c.AreaClusterName, t.VehicleId, v.VehicleNo, t.StaffRefNo, t.StaffName, 
		t.TripStatus, t.TripStartDate, t.TripEndDate, count(d.OrderRefNo) AS OrderCount,
		sum(case d.OrderStatus when 'Deliver' then 1 else 0 end) Delivered, 
		sum(case d.OrderStatus when 'Denied' then 1 else 0 end) Denied, 
		sum(case d.OrderStatus when 'NotAvailable' then 1 else 0 end) NotAvailable
	FROM SDS.tblTripPlanningHistory AS t INNER JOIN
		SDS.tblTripPlanningDetailsHistory AS d ON t.TripId = d.TripId LEFT OUTER JOIN
		SDS.tblClusterMaster AS c ON t.ClusterId = c.ClusterId LEFT OUTER JOIN
		SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId
	Where t.DistributorId=@DistributorId and cast(t.TripDate as date)>=cast(@FromDate as date) and cast(t.TripDate as date)<=cast(@ToDate as date) 
		and t.TripId not in (select TripId from SDS.tblTripPlanning)
	GROUP BY t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.ClusterId, c.AreaClusterName, t.VehicleId, v.VehicleNo, 
		t.StaffRefNo, t.StaffName, t.TotalOrders, t.TripStatus, t.TripStartDate, t.TripEndDate
	order by t.TripDate desc, t.TripNo
END



GO
/****** Object:  StoredProcedure [SDS].[usp_SADashboardCounts]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE  [SDS].[usp_SADashboardCounts] 
--declare 
@SACode varchar(20) 
--set @SACode=341
as

BEGIN
declare @TransferBooking int,@VehicleBreakdown int,@PendingOrders int, @MaxBKCnt int, @TodaySchedued int, @TodayDelivered int 

 select @TransferBooking = count(TransferId) from sds.tblTransferBooking where  IsTransfer='Y' and
 cast(getdate() as date) between cast(fromdate as date) and  cast(isnull(todate, cast(getdate() as date)) as date) and SACode =@SACode

 select @VehicleBreakdown =  SUM(BreakdownId) from SDS.tblBreakDown BD inner join  DCMS.tblDistributorMaster DM
     with(nolock) on BD.DistributorId = DM.distributorId where DM.SACode = @SACode

 Select @PendingOrders= Sum(TotalPendingOrder) from
(select distinct(DistributorId),isnull(TotalPendingOrder,0) TotalPendingOrder From SDS.tblDistributorWiseBacklog DB1 
where EntryDate =(select max(EntryDate) from SDS.tblDistributorWiseBacklog DB2 where DB2.DistributorId = DB1.DistributorId)
and DistributorId in (select DistributorId from DCMS.tblDistributorMaster where SACode = @SACode) 
) Temp

 Select @MaxBKCnt= count(DistributorId) from
(select distinct(DistributorId),BackLog From SDS.tblDistributorWiseBacklog DB1 
where EntryDate =(select max(EntryDate) from SDS.tblDistributorWiseBacklog DB2 where DB2.DistributorId = DB1.DistributorId)
and DistributorId in (select DistributorId from DCMS.tblDistributorMaster where SACode = @SACode) 
) Temp	 

 select @TodaySchedued=count(d.OrderRefNo)
  from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails d on t.TripId=d.TripId
 inner join DCMS.tblDistributorMaster dm on t.DistributorId=dm.DistributorId and dm.SACode=@SACode
 where cast(t.tripdate as date)= cast(getdate() as date) and dm.SACode=@SACode

 select @TodayDelivered=count(OrderRefNo) from sds.tblTripPlanningDetails d inner join sds.tbltripplanning t on d.TripId=t.TripId 
 inner join DCMS.tblDistributorMaster dm on t.DistributorId=dm.DistributorId and dm.SACode=@SACode
where OrderStatus='Deliver' and cast(ActualDeliveryDate as date)=cast(getdate() as date) and dm.SACode=@SACode

select  isnull(@PendingOrders,0) as PendingOrders, isnull(@TodaySchedued,0) TodaysScheduled, isnull(@TodayDelivered,0) TodayDelivered,
isnull(@MaxBKCnt,0) BackLog_5Cnt, isnull(@TransferBooking,0) as TransferBooking

END
GO
/****** Object:  StoredProcedure [SDS].[usp_SAMasterList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_SAMasterList] 
@ZOCode nvarchar(max),		-- '0' for all
@ROCode nvarchar(max),		-- '0' for all
@ActiveFlag varchar(5)		-- 'ALL' for all

as
Begin
SELECT distinct s.SACode,SDS.fn_CamelCase(  s.SAName) as SAName, s.ROCode,SDS.fn_CamelCase( r.ROName ) as ROName, s.ZOCode,SDS.fn_CamelCase( z.ZOName ) as ZOName, 
isnull(u.Status, 'N') as ActiveFlag,SDS.fn_CamelCase( s.LastUpdateBy ) as LastUpdateBy, s.LastUpdateDateTime
FROM SDS.tblSAMaster AS s 
INNER JOIN SDS.tblZOMaster AS z ON s.ZOCode = z.ZOCode 
INNER JOIN SDS.tblROMaster AS r ON s.ROCode = r.ROCode
Left outer join SDS.tblUser u with (nolock) on s.SACode=u.RefNo and RoleId=7
where (s.ActiveFlag=@ActiveFlag or upper(@ActiveFlag)='ALL')
and (s.ZOCode in (select value from sds.fn_StringSplit(@ZOCode,',')) or @ZOCode='0') and (s.ROCode in (select value from sds.fn_StringSplit(@ROCode,',')) or @ROCode='0')
order by SAName
End

GO
/****** Object:  StoredProcedure [SDS].[usp_SaveClassRoomMaster]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_SaveClassRoomMaster]

@SessionName NVARCHAR(100),
@VideoTitle NVARCHAR(200),
@VideoName NVARCHAR(100),
@PosterImageName NVARCHAR(100),
@Language CHAR(1),
@IsActive CHAR(1),
@DistributorId INT,
@Flag nvarchar(20)

as

BEGIN
	IF(@Flag='SELECT')
	BEGIN
		SELECT [Id],[SessionName],[VideoTitle],[VideoName],[PosterImageName],isnull([Language],'H') [Language],[IsActive],[LastUpdateDateTime] 
		FROM [SDS].[tblClassRoomMaster]
		WHERE IsActive=@IsActive or @IsActive = 'A'
	END
	ELSE IF(@Flag='SAVE')
	BEGIN
		DECLARE @InsertedCnt INT =0 
		IF NOT EXISTS (SELECT 1 FROM [SDS].[tblClassRoomMaster] WHERE [SessionName]=@SessionName)
		BEGIN
			INSERT INTO [SDS].[tblClassRoomMaster]
					([SessionName],[VideoTitle],[VideoName],[PosterImageName],[Language],[IsActive],[LastUpdateDateTime])
			VALUES
				   (@SessionName,@VideoTitle,@VideoName,@PosterImageName,@Language,@IsActive,GETDATE())
			SET @InsertedCnt = @@IDENTITY
		END
		ELSE
		BEGIN		
			UPDATE [SDS].[tblClassRoomMaster]
			SET [VideoTitle]=@VideoTitle,[VideoName]=@VideoName,[PosterImageName]=@PosterImageName,[Language]=@Language,[IsActive]=@IsActive,[LastUpdateDateTime]=GETDATE()
			WHERE [SessionName]=@SessionName
			SET @InsertedCnt = @@ROWCOUNT
		END
		IF(@InsertedCnt > 0)
		BEGIN
			SELECT [Id],[SessionName],[VideoTitle],[VideoName],[PosterImageName],[Language],[IsActive],[LastUpdateDateTime] 
			FROM [SDS].[tblClassRoomMaster]
			WHERE [SessionName]=@SessionName 
		END
	END
	ELSE IF(@Flag='DISTALLOTED')
	BEGIN
		SELECT cr.[Id],[SessionName],[VideoTitle],[VideoName],[PosterImageName],[Language],[IsActive],cr.[LastUpdateDateTime] 
		FROM [SDS].[tblClassRoomMaster] cr INNER JOIN
		[SDS].[tblDistributorClassRoomLog] dcr ON dcr.ClassRoomMasterId=cr.Id
		WHERE IsActive=@IsActive AND dcr.DistributorId=@DistributorId AND dcr.ActiveForOnBoarding = 'N'
	END
END





GO
/****** Object:  StoredProcedure [SDS].[usp_SaveConsumerForTripInCase4]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_SaveConsumerForTripInCase4]   
--declare  
@ClusterId bigint,  
@CaseNo nvarchar(50),  
@TripDate datetime,  
@DistributorId int,  
@StaffRefNo numeric(17,0),  
@VehicleId bigint,  
@TripStatus varchar(50),  
@CreatedBy varchar(50),  
@OrderNotbl sds.OrderForDensity readonly,  
@TripId bigint output  
  
as  
--begin  
--set @ClusterId=115; set @CaseNo='OA'; set @TripDate='2021-09-21'; set @DistributorId=14193; set @StaffRefNo=11414193000000072; set @VehicleId=10111; set @TripStatus='0'; set @CreatedBy=1;  
  
-- insert into @OrderNotbl values (0, 1, 1, 1181419300000003, 1201419300028955, 1151013800000359, 1, 11, 0,null)   
-- insert into @OrderNotbl values (1, 1, 2, 1181419300000003, 5201419300031176, 1140819100001010, 1, 0, 0,null)   
-- insert into @OrderNotbl values (2, 1, 3, 1181419300000003, 5201419300029702, 9110842900035045, 2, 0, 0,'')   
-- insert into @OrderNotbl values (3, 1, 4, 1181419300000003, 5201419300030354, 1131005600000733, 2, 0, 0,'')  
  
--end  
  
BEGIN  
 -- case No  DA - Density then ageing (density groups)  
 --   AD - Ageing then density (density from oldest booking)  
 --   FIFO - Ageing (pick old bookings and create shortest route)  
 -- case No 4 OA - Only Ageing  
  
 SET @TripId = 0  
 declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint,   
 @GroupCode VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''  
 declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)  
  
 select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId  
 select @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo  
 select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo  
 select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId  
 SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId  
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
--select @VehCapacity, @NoOfTrips  
  
 select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl  
  
 if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  
 --select @NoOfTrips  
 set @cnt=1  
 if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))  
 Begin   
  --select 1  
  while (@cnt<=@NoOfTrips)  
  Begin  
   --select @cnt  
   set @TripDtlsId=0;   
   INSERT INTO SDS.tblDensityAnalysis(CaseNo,TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TripStatus,CreatedDate,AddiStaffRefNo,AddiStaffName,GodownId,GLatitude,GLongitude)  
   VALUES(@CaseNo,'0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)  
  
   SET @TripId = SCOPE_IDENTITY()  
  
   if (isnull(@TripId,0)>0)  
   Begin      
    ---- Insert Trip Details for included orders  
    insert into sds.tblDensityAnalysisDetails(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,  
    KM_Air,KM_Road,DelTripSequenceNo,DelTripSequenceNo_OA,DensityFrom)  
    select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),  
     (select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,  
     (select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad,  
    0,nt.DelTripSequenceNo, isnull(nullif(ltrim(rtrim(nt.DensityFrom)),''),0)  
    from @OrderNotbl nt left outer join   
    (select d.orderrefNo from sds.tblDensityAnalysisDetails d inner join sds.tblDensityAnalysis t on d.tripId=t.tripId   
    where CaseNo=@CaseNo and cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo  
    where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo  
  
    set @TripDtlsId=@@rowcount  
  
    set @strquery=( '  
    update sds.tblDensityAnalysisDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,  
    ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode      
    from sds.tblDensityAnalysisDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo  
    inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode  
    WHERE o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'')   
    and t1.TripId=' + convert(nvarchar(30),@TripId))  
  
    print @strquery  
    exec (@strquery)  
   End    
  
  set @cnt=@cnt+1  
  End  
   
  set @cnt=1  
  if exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')  
  Begin   
   while (@cnt<=@NoOfTrips)  
   Begin  
    SELECT @TodayCount = COUNT(1) FROM sds.tblDensityAnalysis with(nolock)   
    WHERE DistributorId = @DistributorId and CaseNo=@CaseNo AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'  
    SET @TodayCount = @TodayCount+1  
   
    SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)  
    print @TripNo  
  
    update sds.tblDensityAnalysis set TripNo=@TripNo   
    where TripId=(select top 1 t.tripid from sds.tblDensityAnalysisDetails d inner join sds.tblDensityAnalysis t on t.TripId=d.TripId   
      where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)  
  
   set @cnt=@cnt+1  
   End  
  End    
  else  
  Begin  
   set @TripId=-2  
  End  
  --Assign Delivery sequence No  
  if exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))  
  Begin  
   IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups  
   create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int,   
   OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)  
  
   insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days,   
    OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)  
   SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId,   
    dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,  
    Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo  
   FROM SDS.tblDensityAnalysis AS da INNER JOIN SDS.tblDensityAnalysisDetails AS dad ON da.TripId = dad.TripId  
   where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)  
    and (isnull(da.CaseNo,'')=@CaseNo)  
   GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo  
     
   declare @OldBkgDt datetime, @NoofTrips1 int, @c int =1, @MinDensity int,@10DaysOld int = 0,@5DaysOld int = 0, @2DaysOld int = 0,@Upto2Days int =0;  
   select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId  
   --select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)  
     
   if(@CaseNo = 'OA')  
   begin  
    While (@c<=@NoofTrips1)  
    Begin  
     update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = @c AND isnull (DelTripSequenceNo,0)=0  
     set @c=@c+1  
    End   
    update sds.tblDensityAnalysisDetails set DelTripSequenceNo_OA =o.DelTripSequenceNo  
    from sds.tblDensityAnalysisDetails t1 inner join sds.tblDensityAnalysis da on t1.TripId=da.tripid  
    inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date)   
    and o.DensityGroupNo=t1.DensityGroupNo  
    WHERE da.CaseNo=@CaseNo and o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)  
   end  
    
  End  
 End  
 select @TripId  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveConsumerLocationHistorylog]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_SaveConsumerLocationHistorylog]
--declare
 @UniqueConsumerId NUMERIC(17,0),
 @DistributorID INT,
 @Latitude NVARCHAR(50),
 @Longitude NVARCHAR(50),
 @Source NVARCHAR(50),
 @Distance decimal(18,10),
 @Action varchar(10),
 @AddedBy nvarchar(50)

 AS 
 BEGIN
	 INSERT INTO SDS.tblConsumerLocationHistoryLogs(UniqueConsumerId,DistributorID,Latitude,
	 Longitude,[Source],Distance,[Action],AddedBy,AddedOn,LastUpdatedDate)
	 VALUES(@UniqueConsumerId,@DistributorID,@Latitude,@Longitude,@Source,@Distance,
	 @Action,@AddedBy,GETDATE(),GETDATE())
 END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveCoOrdinatesOfDuplicateAddress]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************             
-- Stored Procedure Name : [usp_SaveCoOrdinatesOfDuplicateAddress]  
-- Description  : Save and return duplicate address for save same location  
-- Author   : 07-Dec-2019  
Modifications  
-- 07-Dec-2019   Prasanna        Created  
**************************************************************/  
CREATE PROCEDURE [SDS].[usp_SaveCoOrdinatesOfDuplicateAddress]  
@DistributorId int,  
@Address nvarchar(MAX),  
@DuplicateAddCount int,  
@Latitude nvarchar(50),  
@Longitude nvarchar(50),  
@Flag nvarchar(10)  
  
AS  
  
BEGIN  
	IF(@Flag='ALL')  
	BEGIN  
		INSERT INTO [SDS].[tblConsumerDetails]([UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[ConsumerStatus],[MobileNo],[Address],[Pin],  
		[AreaRefNo],[AreaName],[Latitude],[Longitude],[Source],[MstLastUpdateDateTime],[AddrLastUpdateDateTime],[ConLastUpdateDateTime],[LastUpdatedDatetime])  
       
		SELECT c.UniqueConsumerId,c.DistributorID,c.ConsumerNo,c.ConsumerName,c.ConsumerStatus,c.MobileNo,     
		RTRIM(LTRIM(SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3))) AS Address,  
		c.Pin,c.AreaRefNo,ar.AreaName,@Latitude,@Longitude,'AUTO',c.LastUpdateDateTime,c.LastUpdateDateTime,c.LastUpdateDateTime,GETDATE()  
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) LEFT OUTER JOIN   
		SDS.tblConsumerDetails cd WITH (NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId LEFT OUTER JOIN  
		DCMS.tblDistributorAreaMaster AS ar WITH (NOLOCK) on c.AreaRefNo=ar.AreaRefNo  
		WHERE c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 =@Address AND Latitude IS NULL   
		AND Longitude IS NULL AND Source IS NULL AND cd.UniqueConsumerId IS NULL  

		-- Insert new consumer data to consumer location table...
		Begin
			UPDATE sds.tblConsumerLocationHistory SET AutoLatitude = cd.Latitude,AutoLongitude = cd.Longitude,AutoLastUpdateDateTime=getdate(),LastUpdatedDatetime = getdate()
			FROM  sds.tblConsumerLocationHistory cl WITH(NOLOCK) 
			inner join sds.tblConsumerDetails cd WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId and cl.DistributorID=cd.DistributorID
			where ltrim(rtrim(lower(cd.Address))) =ltrim(rtrim(lower(@Address))) --cl.DistributorID=@DistributorID

			insert into SDS.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)
			select cd.UniqueConsumerId,cd.DistributorID,cd.Latitude,cd.Longitude,getdate(),getdate() 
			from sds.tblConsumerDetails cd
			where ltrim(rtrim(lower(cd.Address))) =ltrim(rtrim(lower(@Address)))	--cd.DistributorID=@DistributorID 
			and cd.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory)
		End
  
		SELECT @Address AS Address,0 AS NoOfCount,@Latitude Latitude,@Longitude Longitude  
	END  
	ELSE IF(@Flag='DISTWISE' AND @DistributorId <> 0)  
	BEGIN  
		INSERT INTO [SDS].[tblConsumerDetails]([UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[ConsumerStatus],[MobileNo],[Address],[Pin],  
		[AreaRefNo],[AreaName],[Latitude],[Longitude],[Source],[MstLastUpdateDateTime],[AddrLastUpdateDateTime],[ConLastUpdateDateTime],[LastUpdatedDatetime])  
       
		SELECT c.UniqueConsumerId,c.DistributorID,c.ConsumerNo,c.ConsumerName,c.ConsumerStatus,c.MobileNo,     
		RTRIM(LTRIM(SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3))) AS Address,  
		c.Pin,c.AreaRefNo,ar.AreaName,@Latitude,@Longitude,'AUTO',c.LastUpdateDateTime,c.LastUpdateDateTime,c.LastUpdateDateTime,GETDATE()  
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) LEFT OUTER JOIN   
		SDS.tblConsumerDetails cd WITH (NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId LEFT OUTER JOIN  
		DCMS.tblDistributorAreaMaster AS ar WITH (NOLOCK) on c.AreaRefNo=ar.AreaRefNo  
		WHERE C.DistributorID=@DistributorId AND c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 =@Address AND Latitude IS NULL   
		AND Longitude IS NULL AND Source IS NULL AND cd.UniqueConsumerId IS NULL  
  
		-- Update/Insert new consumer data to consumer location table...
		Begin
			UPDATE sds.tblConsumerLocationHistory SET AutoLatitude = cd.Latitude,AutoLongitude = cd.Longitude,AutoLastUpdateDateTime=getdate(),LastUpdatedDatetime = getdate()
			FROM  sds.tblConsumerLocationHistory cl WITH(NOLOCK) 
			inner join sds.tblConsumerDetails cd WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId and cl.DistributorID=cd.DistributorID
			where ltrim(rtrim(lower(cd.Address))) =ltrim(rtrim(lower(@Address))) and cl.DistributorID=@DistributorID

			insert into SDS.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)
			select cd.UniqueConsumerId,cd.DistributorID,cd.Latitude,cd.Longitude,getdate(),getdate() 
			from sds.tblConsumerDetails cd
			where ltrim(rtrim(lower(cd.Address))) =ltrim(rtrim(lower(@Address))) and cd.DistributorID=@DistributorID 
			and cd.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory where DistributorID=@DistributorID)
		End

		IF NOT EXISTS(SELECT 1 FROM [SDS].[tblDuplicateAddress] WHERE [DuplicateAddress]=@Address AND DistributorId=@DistributorId)  
		BEGIN  
			INSERT INTO [SDS].[tblDuplicateAddress] ([DistributorId],[DuplicateAddress],[DuplicateAddressCount],[Latitude],[Longitude],[InsertedDateTime])  
			VALUES (@DistributorId,@Address,@DuplicateAddCount,@Latitude,@Longitude,GETDATE())  
		END  
		SELECT @Address AS Address,0 AS NoOfCount,@Latitude Latitude,@Longitude Longitude  
	END  
	ELSE IF(@Flag='DISTWISE' AND @DistributorId=0)  
	BEGIN  
		INSERT INTO [SDS].[tblConsumerDetails] ([UniqueConsumerId],[DistributorID],[ConsumerNo],[ConsumerName],[ConsumerStatus],[MobileNo],[Address],[Pin],  
		[AreaRefNo],[AreaName],[Latitude],[Longitude],[Source],[MstLastUpdateDateTime],[AddrLastUpdateDateTime],[ConLastUpdateDateTime],[LastUpdatedDatetime])  
       
		SELECT c.UniqueConsumerId,c.DistributorID,c.ConsumerNo,c.ConsumerName,c.ConsumerStatus,c.MobileNo,     
		RTRIM(LTRIM(SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3))) AS Address,  
		c.Pin,c.AreaRefNo,ar.AreaName,@Latitude,@Longitude,'AUTO',c.LastUpdateDateTime,c.LastUpdateDateTime,c.LastUpdateDateTime,GETDATE()  
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) LEFT OUTER JOIN   
		SDS.tblConsumerDetails cd WITH (NOLOCK) on c.UniqueConsumerId=cd.UniqueConsumerId LEFT OUTER JOIN  
		DCMS.tblDistributorAreaMaster AS ar WITH (NOLOCK) on c.AreaRefNo=ar.AreaRefNo  
		WHERE c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 =@Address AND Latitude IS NULL   
		AND Longitude IS NULL AND Source IS NULL AND cd.UniqueConsumerId IS NULL  
		
		-- Update/Insert new consumer data to consumer location table...
		Begin
			UPDATE sds.tblConsumerLocationHistory SET AutoLatitude = cd.Latitude,AutoLongitude = cd.Longitude,AutoLastUpdateDateTime=getdate(),LastUpdatedDatetime = getdate()
			FROM  sds.tblConsumerLocationHistory cl WITH(NOLOCK) 
			inner join sds.tblConsumerDetails cd WITH(NOLOCK) on cl.UniqueConsumerId=cd.UniqueConsumerId and cl.DistributorID=cd.DistributorID
			where ltrim(rtrim(lower(cd.Address))) =ltrim(rtrim(lower(@Address))) --and cl.DistributorID=@DistributorID

			insert into SDS.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)
			select cd.UniqueConsumerId,cd.DistributorID,cd.Latitude,cd.Longitude,getdate(),getdate() 
			from sds.tblConsumerDetails cd
			where ltrim(rtrim(lower(cd.Address))) =ltrim(rtrim(lower(@Address))) --and cd.DistributorID=@DistributorID 
			and cd.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory)
		End

		SELECT @Address AS Address,0 AS NoOfCount,@Latitude Latitude,@Longitude Longitude  
	END  
	ELSE IF(@DistributorId=0 AND @Flag='')  
	BEGIN   
		SELECT RTRIM(LTRIM(SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3))) AS Address,COUNT(1) AS NoOfCount,'' Latitude,'' Longitude  
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) LEFT OUTER JOIN SDS.tblConsumerDetails cd on c.UniqueConsumerId=cd.UniqueConsumerId  
		WHERE c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 IS NOT NULL AND Latitude IS NULL   
		AND Longitude IS NULL AND Source IS NULL AND cd.UniqueConsumerId IS NULL  
		GROUP BY c.AddressLine1, c.AddressLine2 , c.AddressLine3  
		HAVING  COUNT(1) > 1  
		ORDER BY COUNT(1) DESC 
	END  
	ELSE IF(@DistributorId<>0 AND @Flag='')  
	BEGIN             
		insert into SDS.tblConsumerDetails(UniqueConsumerId, DistributorID, ConsumerNo, ConsumerName, ConsumerStatus, MobileNo, Address, Pin, AreaRefNo, AreaName, 
		Latitude, Longitude, PlaceId, Source, MstLastUpdateDateTime, AddrLastUpdateDateTime, ConLastUpdateDateTime, LastUpdatedDatetime)  
    
		SELECT c.UniqueConsumerId, c.DistributorID, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo,   
		RTRIM(LTRIM(SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3))) AS Address,  
		c.Pin,c.AreaRefNo,ar.AreaName,l.Latitude,l.Longitude,'' placeId, l.Source, c.LastUpdateDateTime, c.LastUpdateDateTime, c.LastUpdateDateTime, getdate()  
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) left outer join DCMS.tblConsumerLocation AS l WITH (NOLOCK) ON c.UniqueConsumerId = l.UniqueConsumerId  
		LEFT OUTER JOIN DCMS.tblDistributorAreaMaster AS ar WITH (NOLOCK) on c.AreaRefNo=ar.AreaRefNo  
		left outer join sds.tblConsumerDetails cd with (nolock) on cd.UniqueConsumerId=c.UniqueConsumerId  
		where c.DistributorID=@DistributorId and cd.UniqueConsumerId is null and isnull(l.Latitude,'')<>'' and isnull(l.Longitude,'')<>''  
    
		BEGIN
			----Update source wise existing consumers  
			-- Auto  
			update sds.tblConsumerLocationHistory set AutoLatitude= s.Latitude, AutoLongitude= s.Longitude,  AutoLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()  
			from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID   
			where  upper(s.Source)='AUTO' and isnull(t1.AutoLatitude,'')='' and isnull(s.Latitude,'')<>''  
  
			-- VITARAN  
			update sds.tblConsumerLocationHistory set VITARANLatitude= s.Latitude, VITARANLongitude= s.Longitude,  VITARANLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()  
			from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID  
			where ( upper(s.Source)='VITARAN' or upper(s.Source)='SARVEKSHAN' or upper(s.Source)='VITRANOFFLINE') and isnull(t1.VITARANLatitude,'')='' and isnull(s.Latitude,'')<>''  
  
			-- MANUAL  
			update sds.tblConsumerLocationHistory set MANUALLatitude= s.Latitude, MANUALLongitude= s.Longitude,  MANUALLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()  
			from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID  
			where  upper(s.Source)='MANUAL' and isnull(t1.MANUALLatitude,'')='' and isnull(s.Latitude,'')<>''  
			-- EZYGAS  
			update sds.tblConsumerLocationHistory set EZYGASLatitude= s.Latitude, EZYGASLongitude= s.Longitude,  EZYGASLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()  
			from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID  
			where  upper(s.Source)='EZYGAS' and isnull(t1.EZYGASLatitude,'')='' and isnull(s.Latitude,'')<>''  
			-- MIAPP  
			update sds.tblConsumerLocationHistory set MILatitude= s.Latitude, MILongitude= s.Longitude,  MILastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()  
			from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID  
			where  (upper(s.Source)='MIAPP' or upper(s.Source)='MI' or upper(s.Source)='MIAPP_U') and isnull(t1.MILatitude,'')='' and isnull(s.Latitude,'')<>''  
  
			---- Insert source wise new consumers  
			--Auto  
			insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)  
			select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails   
			where  upper(Source)='AUTO' and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )  
  
			--VITARAN  
			insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,VITARANLatitude,VITARANLongitude,VITARANLastUpdateDateTime,LastUpdatedDatetime)  
			select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails   
			where  ( upper(Source)='VITARAN' or upper(Source)='SARVEKSHAN' or upper(Source)='VITRANOFFLINE')   
			and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )  
  
			--MANUAL  
			insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,MANUALLatitude,MANUALLongitude,MANUALLastUpdateDateTime,LastUpdatedDatetime)  
			select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails   
			where  upper(Source)='MANUAL' and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )  
  
			--EZYGAS  
			insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,EZYGASLatitude,EZYGASLongitude,EZYGASLastUpdateDateTime,LastUpdatedDatetime)  
			select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails   
			where  upper(Source)='EZYGAS' and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )  
  
			--MI APP  
			insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,MILatitude,MILongitude,MILastUpdateDateTime,LastUpdatedDatetime)  
			select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails   
			where  (upper(Source)='MIAPP' or upper(Source)='MI' or upper(Source)='MIAPP_U')   
			and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )  
  
		END 

		SELECT RTRIM(LTRIM(SDS.fn_CamelCase(c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3))) AS Address,COUNT(1) AS NoOfCount,'' Latitude,'' Longitude  
		FROM DCMS.tblConsumerMaster AS c WITH (NOLOCK) LEFT OUTER JOIN SDS.tblConsumerDetails cd on c.UniqueConsumerId=cd.UniqueConsumerId  
		WHERE c.DistributorID=@DistributorId AND c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 IS NOT NULL AND Latitude IS NULL   
		AND Longitude IS NULL AND Source IS NULL AND cd.UniqueConsumerId IS NULL  
		GROUP BY c.AddressLine1, c.AddressLine2 , c.AddressLine3  
		HAVING  COUNT(1) > 1  
		ORDER BY COUNT(1) DESC  
  
	END  
	ELSE IF(@Flag='DPLCTADD')--Duplicate Address  
	BEGIN  
		SELECT DuplicateAddress AS Address,DuplicateAddressCount AS NoOfCount,Latitude,Longitude FROM [SDS].[tblDuplicateAddress]   
	END  
    
END  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveDistAndClustId]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create proc [SDS].[usp_SaveDistAndClustId]
@DistributorId int, 
@ClusterId int,
@resultId bigint output    

As
Begin
   set @resultId=0; 
   INSERT INTO SDS.tblSaveDistandClustId(DistributorId,ClusterId )     
	 VALUES(@DistributorId,@ClusterId)    
      
	SET @resultId = SCOPE_IDENTITY()
End
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveDistGCUpdateSummry]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [SDS].[usp_SaveDistGCUpdateSummry]
--declare
@DistributorID int,
@TotalGC int ,
@ProcessedGC int,
@Inside int,
@Outside int,
@FailedToProcess int
AS 
BEGIN
	INSERT INTO SDS.tblDistWiseUpdatedGCSmmry(DistributorID,TotalGC,ProcessedGC,Inside,Outside,FailedToProcess,UpdatedDate)
	select @DistributorID ,@TotalGC,@ProcessedGC,@Inside,@Outside,@FailedToProcess,GETDATE()
END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveDistLatestGCUpdateSummry]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [SDS].[usp_SaveDistLatestGCUpdateSummry]
--declare
@DistributorID int,
@TotalGC int ,
@ProcessedGC int,
@Inside int,
@Outside int,
@FailedToProcess int
AS 
BEGIN
	INSERT INTO SDS.tblDistWiseUpdatedLatstGCSmmry(DistributorID,TotalGC,ProcessedGC,Inside,Outside,FailedToProcess,UpdatedDate)
	select @DistributorID ,@TotalGC,@ProcessedGC,@Inside,@Outside,@FailedToProcess,GETDATE()
END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveDistributorClassRoomLog]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_SaveDistributorClassRoomLog]

@DistributorId int,
@AllotedDateTime datetime,
@StartDateTime datetime,
@EndDateTime datetime,
@Duration decimal(5,2),
@DistributorIds nvarchar(max),
@ClassRoomMasterId numeric(18),
@Flag nvarchar(10)

as

BEGIN
	IF(@Flag='ALLOT')
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM [SDS].[tblDistributorClassRoomLog] WHERE [DistributorId]=@DistributorId)
		BEGIN
			INSERT INTO [SDS].[tblDistributorClassRoomLog]
				   ([DistributorId],[AllotedDateTime],[ClassRoomMasterId],[ActiveForOnBoarding],[LastUpdateDateTime],[CreatedDateTime])
			 VALUES
				   (@DistributorId,@AllotedDateTime,@ClassRoomMasterId,'N',GETDATE(),GETDATE())
		END
		ELSE
		BEGIN		
			UPDATE [SDS].[tblDistributorClassRoomLog]
			SET [AllotedDateTime]=@AllotedDateTime,[LastUpdateDateTime]=GETDATE(),[ClassRoomMasterId]=@ClassRoomMasterId
			WHERE [DistributorId]=@DistributorId
		END

	END
	ELSE IF(@Flag='START')
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM [SDS].[tblDistributorClassRoomLog] WHERE [DistributorId]=@DistributorId)
		BEGIN
			INSERT INTO [SDS].[tblDistributorClassRoomLog]
				   ([DistributorId],[StartDateTime],[EndDateTime],[Duration],[ActiveForOnBoarding],[LastUpdateDateTime],[CreatedDateTime])
			 VALUES
				   (@DistributorId,@StartDateTime,@EndDateTime,@Duration,'N',GETDATE(),GETDATE())
		END
		ELSE
		BEGIN		
			UPDATE [SDS].[tblDistributorClassRoomLog]
			SET [StartDateTime]=@StartDateTime,[EndDateTime]=@EndDateTime,[Duration]=@Duration,[LastUpdateDateTime]=GETDATE()
			WHERE [DistributorId]=@DistributorId
		END
	END
	ELSE IF(@Flag='END')
	BEGIN
			UPDATE [SDS].[tblDistributorClassRoomLog]
			SET [EndDateTime]=@EndDateTime,[Duration]=@Duration,ActiveForOnBoarding='Y',[LastUpdateDateTime]=GETDATE()
			WHERE [DistributorId]=@DistributorId
	END
	ELSE IF(@Flag='DELETE')
	BEGIN
			DELETE FROM [SDS].[tblDistributorClassRoomLog]			
			WHERE [DistributorId] IN (select value from sds.fn_StringSplit(@DistributorIds,','))
	END
END







GO
/****** Object:  StoredProcedure [SDS].[usp_SaveEmailSchSendDate]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_SaveEmailSchSendDate]
AS
BEGIN
	
	IF EXISTS (SELECT 1 FROM [SDS].[tblAppConfiguration] WHERE [Key]='LastEmailSend')
	BEGIN
	UPDATE [SDS].[tblAppConfiguration]
	SET [LastUpdatedOn] = GETDATE()
	WHERE [Key]='LastEmailSend'
	END

END


GO
/****** Object:  StoredProcedure [SDS].[usp_SaveEzyGasConsumerLocation]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
/**************************************************************             
-- Stored Procedure Name : usp_SaveEzyGasConsumerLocation  
-- Description  : To Insert Ezy Gas consumer location   
  
-- Author   : Prasanna 29-Jan-2020  
  
-- Date Modified  Modified By      Modifications  
-- 29-Jan-2020   Prasanna         Created  
**************************************************************/  
  
CREATE PROCEDURE [SDS].[usp_SaveEzyGasConsumerLocation]  
 @DistributorId int,  
 @UniqueConsumerId numeric(18,0),  
 @Latitude nvarchar(50),  
 @Longitude nvarchar(50)  
AS  
BEGIN  
  DECLARE @Id BIGINT  
  INSERT INTO [SDS].[tblConsumerLocationBackup](DistributorID,UniqueConsumerId,Latitude,Longitude,Source,LastUpdatedDatetime)  
  SELECT @DistributorId,@UniqueConsumerId,Latitude,Longitude,Source,GETDATE()  
  FROM [SDS].[tblConsumerDetails] WHERE DistributorId=@DistributorId AND UniqueConsumerId=@UniqueConsumerId  
  SET @Id = @@Identity  
  
  IF(@Id > 0)  
  BEGIN  
   UPDATE [SDS].[tblConsumerDetails]  SET Latitude=@Latitude,Longitude=@Longitude,Source='AUTO',LastUpdatedDatetime=GETDATE()  
   WHERE DistributorId=@DistributorId AND UniqueConsumerId=@UniqueConsumerId  
   SET @Id =@@ROWCOUNT  
	UPDATE sds.tblConsumerLocationHistory SET AUTOLatitude = @Latitude, AUTOLongitude = @Longitude,AUTOLastUpdateDateTime=getdate(),LastUpdatedDatetime = getdate()  
	where UniqueConsumerId=@UniqueConsumerId and DistributorID=@DistributorID  
  END  
  
  SELECT @Id AS InsertedRow  
END  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveInvalidClusterJson]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_SaveInvalidClusterJson]
--declare
@DistributorId int,
@ClusterId int
AS
BEGIN
	INSERT INTO [SDS].[tblInvalidClusterJson](DistributorId,ClusterId,LastUpdateOn)
	VALUES (@DistributorId,@ClusterId,GETDATE())	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_savelogdetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_savelogdetails]
--DECLARE
@DistributorId INT,
@DistributorName VARCHAR(400),
@ClusterId INT,
@ClusterName VARCHAR(400),
@MethodOrSPName VARCHAR(MAX),
@Time NUMERIC(25,0)
--	SET @DistributorId =14145;SET @DistributorName='Moreshwar';SET @ClusterId=115;SET @ClusterName='ABC';SET @MethodOrSPName='Save Consumers';SET @Time=123455667788;
AS

BEGIN
	--SELECT * FROM [SDS].[tblSaveLogs]
	INSERT INTO [SDS].[tblSaveLogs] VALUES(@DistributorId,@DistributorName,@ClusterId,@ClusterName,@MethodOrSPName,@Time,GETDATE());
END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveMissingAreas]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_SaveMissingAreas]
@AreaCode NVARCHAR(50),
@AreaName NVARCHAR(500),
@TalukaCode NVARCHAR(50),
@AreaJSON NVARCHAR(MAX)
AS
BEGIN
	
	DECLARE @AffectedRow INT,@JSONInserted INT=0

	INSERT INTO [SDS].[tblAreaMaster]
           ([AreaCode],[AreaName],[TalukaCode],[ActiveFlag],[LastUpdateBy],[LastUpdateTime])
     VALUES
           (@AreaCode,@AreaName,@TalukaCode,1,'ABC',GETDATE())
	
	SET @AffectedRow = @@ROWCOUNT 

	IF(@AffectedRow > 0)
	BEGIN
		INSERT INTO [SDS].[tblGeoCoordinateMaster]
           ([AreaCode],[AreaJSON],[LastUpdateDateTime])
		VALUES
           (@AreaCode,@AreaJSON,GETDATE())
		SET @JSONInserted = @@ROWCOUNT
	END
	RETURN @JSONInserted 
END


GO
/****** Object:  StoredProcedure [SDS].[usp_SaveOverLappClusterDtls]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_SaveOverLappClusterDtls]
-- declare
@OverLappClusterDt sds.OverLappClusterDt readonly,
@RetVal int output
as
BEGIN
	set @RetVal=0;

	delete from sds.tblOverLappClusterDtls where cast(LastUpdatedDate as date) < cast(GETDATE()as date)

	insert into sds.tblOverLappClusterDtls(SourceDistributorId,SourceClusterId,DestDistributorId,DestClusterId,
	InsideCount,UniqueConsumerId,SourceAreaRefNo,OrderRefNo,OrderDate,LastUpdatedDate)
	select dt.SourceDistributorId,dt.SourceClusterId,dt.DestDistributorId,dt.DestClusterId,dt.InsideCount,
	dt.UniqueConsumerId,dt.SourceAreaRefNo,dt.OrderRefNo,dt.OrderDate,getdate()
	from @OverLappClusterDt dt 
	--left outer join	sds.tblOverLappClusterDtls ol on dt.UniqueConsumerId=ol.UniqueConsumerId and dt.OrderRefNo=ol.OrderRefNo
	--where ol.UniqueConsumerId is null
	set @RetVal=@@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveSchedulerStatusSummary]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_SaveSchedulerStatusSummary]
@Distributorid int,
@SchedulerName nvarchar(100),
@Status nvarchar(100),
@FlagFor nvarchar(50),
@RetValue int output
AS

BEGIN
	set @RetValue=0;
	if exists(select 1 from SDS.tblSchedulerStatusSummary where Distributorid=@Distributorid and SchedulerName=@SchedulerName 
		and cast(StartDate as date)=cast(getdate() as date) and EndDate is null)
	Begin
		Update SDS.tblSchedulerStatusSummary set EndDate=getdate(), CompStatus=1, UpdatedDate=getdate()
		where Distributorid=@Distributorid and SchedulerName=@SchedulerName and StartDate is not null and EndDate is null
		set @RetValue=SCOPE_IDENTITY();
	End
	Else
	Begin
		INSERT INTO SDS.tblSchedulerStatusSummary(DistributorId,SchedulerName,StartDate,UpdatedDate)
		values( @Distributorid,@SchedulerName,GETDATE(),GETDATE())
		set @RetValue=SCOPE_IDENTITY();
	End
END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveSchedulerStatusSummry_Old]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_SaveSchedulerStatusSummry_Old]
@Distributorid int,
@SchedulerName nvarchar(100),
@Status nvarchar(100),
@FlagFor nvarchar(50),
@RetValue int output
AS

BEGIN
	set @RetValue=0;
	If (upper(@FlagFor)='GC')
	Begin
		if exists(select 1 from SDS.tblSchedulerStatusSummary where Distributorid=@Distributorid and SchedulerName=@SchedulerName 
			and cast(StartDate as date)=cast(getdate() as date) and EndDate is null)
		Begin
			Update SDS.tblSchedulerStatusSummary set EndDate=getdate(), CompStatus=1, UpdatedDate=getdate()
			where Distributorid=@Distributorid and SchedulerName=@SchedulerName and StartDate is not null and EndDate is null
			set @RetValue=SCOPE_IDENTITY();
		End
		Else
		Begin
			INSERT INTO SDS.tblSchedulerStatusSummary(DistributorId,SchedulerName,StartDate,UpdatedDate)
			values( @Distributorid,@SchedulerName,GETDATE(),GETDATE())
			set @RetValue=SCOPE_IDENTITY();
		End
	End
	ELSE
	BEGIN
		INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,DataCount,UpdatedDate)
		SELECT @Distributorid,@SchedulerName,1,0,GETDATE()
		set @RetValue=SCOPE_IDENTITY();
	END

	If (upper(@FlagFor)='LATESTGC')
		BEGIN
		 IF(upper(@Status)='START' OR upper(@Status)='END')
			 BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,StartDate,EndDate,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,GETDATE(),GETDATE(),GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		 ELSE
			BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,DataCount,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,0,GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		END
	If (upper(@FlagFor)='SECONDGC')
		BEGIN
		 IF(upper(@Status)='START' OR upper(@Status)='END')
			 BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,StartDate,EndDate,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,GETDATE(),GETDATE(),GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		 ELSE
			BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,DataCount,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,0,GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		END

	If (upper(@FlagFor)='STOCK')
		BEGIN
		 IF(upper(@Status)='START' OR upper(@Status)='END')
			 BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,StartDate,EndDate,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,GETDATE(),GETDATE(),GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		 ELSE
			BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,DataCount,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,0,GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		END
	If (upper(@FlagFor)='BACKLOG')
		BEGIN
		 IF(upper(@Status)='START' OR upper(@Status)='END')
			 BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,StartDate,EndDate,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,GETDATE(),GETDATE(),GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		 ELSE
			BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,DataCount,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,0,GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		END

	If (upper(@FlagFor)='TRIP')
		BEGIN
		 IF(upper(@Status)='START' OR upper(@Status)='END')
			BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,StartDate,EndDate,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,GETDATE(),GETDATE(),GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		 ELSE
			BEGIN
				INSERT INTO SDS.tblSchedulerStatusSummary (DistributorId,SchedulerName,CompStatus,DataCount,UpdatedDate)
				SELECT @Distributorid,@SchedulerName,1,0,GETDATE()
				set @RetValue=SCOPE_IDENTITY();
			END
		END
	RETURN @RetValue
END
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveTripAuditLog]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: usp_AddEditAuditLog
--	Description		:	To Insert Mobile App log in database

--	Author			:	Prasanna

--	Date Modified		Modified By	     Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/

create PROCEDURE [SDS].[usp_SaveTripAuditLog]
	@LogID numeric(17,0),
	@ServiceId int,
	@DistributorId int,
	@GodownkeeperId numeric(17,0),
	@DeliveryBoyId numeric(17,0),
	@LogFor nvarchar(150),
	@LogData nvarchar(max),
	@LogStatus nvarchar(50),
	@LogDatetime datetime,
	@LogException nvarchar(max)
AS
BEGIN
	DECLARE @IdentityId numeric(17,0)
	IF(@LogID = 0)
	BEGIN		
		INSERT INTO SDS.tblTripAuditLog(ServiceId,DistributorId,GodownkeeperId,DeliveryBoyId,LogFor,LogData,LogStatus,LogDatetime,LogException,UpdatedDatetime)
		VALUES(@ServiceId,@DistributorId,@GodownkeeperId,@DeliveryBoyId,@LogFor,@LogData,@LogStatus,@LogDatetime,@LogException,GETDATE())	
		SET @IdentityId = @@IDENTITY
	END
	IF(@LogID > 0)
	BEGIN
		IF(@DistributorId > 0)
		BEGIN
			UPDATE SDS.tblTripAuditLog 
			SET DistributorId=@DistributorId,DeliveryBoyId=@DeliveryBoyId,GodownkeeperId=@GodownkeeperId,
				LogStatus=@LogStatus,LogException=@LogException,UpdatedDatetime=GETDATE()
			WHERE LogID=@LogID
		END
		ELSE
		BEGIN	
			UPDATE SDS.tblTripAuditLog 
			SET LogStatus=@LogStatus,LogException=@LogException,UpdatedDatetime=GETDATE()
			WHERE LogID=@LogID
		END
	END
	SELECT @IdentityId AS IdentityId
END



GO
/****** Object:  StoredProcedure [SDS].[usp_SaveTripLocation]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
CREATE proc [SDS].[usp_SaveTripLocation]    
--declare    
@DistributorId int=0,    
@TripId bigint=0,    
@StaffRefNo numeric(17,0),    
@DateTime datetime=null,    
@Latitude nvarchar(100),    
@Longitude nvarchar(100),  
@UniqueConsumerId nvarchar(20)=null,    
@resultId bigint output    
    
--set @DistributorId=14145; set @TripId=27771;set @StaffRefNo=1151414500000003;set @DateTime='2021-12-15 10:36:44.717';set @Latitude='18.54001649697791';    
--set @Longitude ='73.78413497232819';    
AS    
BEGIN    
    set @resultId=0;    
	if (isnull(@Latitude,'')='' or isnull(@Longitude,'')='' and isnull(@StaffRefNo,0)=0)
	Begin
		return -1
	End
	else
	Begin
	select @DistributorId = DistributorId from DCMS.tblDistributorStaffDetails where StaffRefNo = @StaffRefNo
	 INSERT INTO SDS.tblDelBoyLocationSave(DistributorId,TripId,StaffRefNo,DateTime,Latitude,Longitude,UniqueConsumerId)     
	 VALUES(@DistributorId,@TripId,@StaffRefNo,getdate(),@Latitude,@Longitude,@UniqueConsumerId)    
      
	  set @resultId=SCOPE_IDENTITY()    
    End
 return @resultId    
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveTripPlanningDataForProd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [SDS].[usp_SaveTripPlanningDataForProd]    
--DECLARE  
@DistributorId	int,
@BackLogdays	int,
@VehicleId	bigint,
@VehicleNo	nvarchar(50),
@TripId	bigint,
@TripNo	nvarchar(50),
@TripDate	nvarchar(50),
@SequenceNo	int,
@ClusterId	bigint,
@StaffRefNo	numeric(18, 0),
@StaffName	nvarchar(100),
@UniqueConsumerId	numeric(18, 0),
@OrderRefNo	numeric(18, 0),
@OrderDate	nvarchar(50),
@OrderNo	int,
@ConsumerNo	int,
@ConsumerName	nvarchar(100),
@AreaName	nvarchar(100),
@AreaRefNo	numeric(18, 0),
@NatureCode	varchar(2),
@PriceCode	int,
@Latitude	nvarchar(200),
@Longitude	nvarchar(200),
@GodownId	nvarchar(50),
@GLatitude	nvarchar(100),
@GLongitude	nvarchar(100),
@VehCapacity	int,
@NoOfTrips	int,
@Orderstatus nvarchar(50),
@RetValue BIGINT OUTPUT    
--SET @DistributorId=14193; SET @ClusterId=0;    
AS    
BEGIN        
    
 SET @RetValue=0    
    
    
 If NOT EXISTS(select 1 from SDS.tblTripPlanningDetaForProd where UniqueConsumerId=@UniqueConsumerId)    
 BEGIN    
 INSERT INTO SDS.tblTripPlanningDetaForProd (DistributorId,BackLogdays,VehicleId,VehicleNo,TripId,TripNo,TripDate,SequenceNo,    
 ClusterId,StaffRefNo,StaffName,CreatedDate,UniqueConsumerId,OrderRefNo,OrderDate,OrderNo,ConsumerNo,ConsumerName,AreaName,AreaRefNo,NatureCode,    
 PriceCode,Latitude,Longitude,GodownId,GLatitude,GLongitude,VehCapacity,NoOfTrips,Orderstatus)    
    
 values(@DistributorId,@BackLogdays,@VehicleId,@VehicleNo,@TripId,@TripNo,@TripDate,@SequenceNo,    
 @ClusterId,@StaffRefNo,@StaffName,GETDATE(),@UniqueConsumerId,@OrderRefNo,@OrderDate,@OrderNo,@ConsumerNo,@ConsumerName,@AreaName,@AreaRefNo,@NatureCode,    
 @PriceCode,@Latitude,@Longitude,@GodownId,@GLatitude,@GLongitude,@VehCapacity,@NoOfTrips,@Orderstatus)    
    
 SET @RetValue=SCOPE_IDENTITY()    
 END    
    
 ELSE    
 BEGIN    
  SET @RetValue= -1    
 END    
    
 RETURN @RetValue    
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_SaveTripPlanningDataForProd_Old]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [SDS].[usp_SaveTripPlanningDataForProd_Old]    
--DECLARE        
@DistributorId INT,      
@ClusterId BIGINT,    
@TripProdData SDS.TripProdData READONLY,    
@RetValue BIGINT OUTPUT    
--SET @DistributorId=14193; SET @ClusterId=0;    
AS    
BEGIN    
    
 SET FMTONLY OFF    
    
 SET @RetValue=0    
    
    
 If NOT EXISTS(select 1 from SDS.tblTripPlanningDetaForProd where DistributorId=@DistributorId and ClusterId= @ClusterId and Cast(CreatedDate as date)= Cast(GETDate() as date))    
 BEGIN    
 INSERT INTO SDS.tblTripPlanningDetaForProd (DistributorId,BackLogdays,VehicleId,VehicleNo,TripId,TripNo,TripDate,SequenceNo,    
 ClusterId,StaffRefNo,StaffName,CreatedDate,UniqueConsumerId,OrderRefNo,OrderDate,OrderNo,ConsumerNo,ConsumerName,AreaName,AreaRefNo,NatureCode,    
 PriceCode,Latitude,Longitude,GodownId,GLatitude,GLongitude,VehCapacity,NoOfTrips,Orderstatus)    
    
 SELECT DistributorId,BackLogdays,VehicleId,VehicleNo,TripId,TripNo,TripDate,SequenceNo,    
 ClusterId,StaffRefNo,StaffName,GETDATE(),UniqueConsumerId,OrderRefNo,OrderDate,OrderNo,ConsumerNo,ConsumerName,AreaName,AreaRefNo,NatureCode,    
 PriceCode,Latitude,Longitude,GodownId,GLatitude,GLongitude,VehCapacity,NoOfTrips,Orderstatus    
 FROM @TripProdData    
    
 SET @RetValue=SCOPE_IDENTITY()    
 END    
    
 ELSE    
 BEGIN    
  SET @RetValue= -1    
 END    
    
 RETURN @RetValue    
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_SAwiseSDSSummaryForSAATHI]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 ----	SDS.usp_SAwiseSDSSummaryForSAATHI 335

CREATE PROC [SDS].[usp_SAwiseSDSSummaryForSAATHI]
--declare
@SACode varchar(10)
--set @DistributorId=6659 set @ActiveFlag='Y'
as
BEGIN
	SELECT d.SACode, d.DistributorId, d.JDEDistributorCode, d.DistributorName, count(cd.UniqueConsumerId) TotalConsumer,
	sum(case when (isnull(cd.InCluster,0)=1 and ac.AreaClusterId=cd.ClusterId) then 1 else 0 end) InCluster,
	sum(case when (cd.Latitude is not null and (isnull(cd.InCluster,0)=0 or ac.AreaClusterId<>cd.ClusterId)) then 1 else 0 end) OutCluster,
	sum(case when (cd.Latitude is null) then 1 else 0 end) NotAvailable
	FROM DCMS.tblDistributorMaster d inner join SDS.tblClusterMaster AS c WITH(NOLOCK) on d.DistributorId=c.DistributorId 
	LEFT OUTER JOIN	SDS.tblDeliveryBoyClusterMapping AS dc WITH(NOLOCK) ON c.ClusterId = dc.ClusterId 
	LEFT OUTER JOIN	DCMS.tblDistributorStaffDetails AS st with(nolock) ON dc.StaffRefNo = st.StaffRefNo  
	LEFT OUTER JOIN SDS.tblAreaClusterMapping ac WITH(NOLOCK) on c.ClusterId = ac.AreaClusterId
	LEFT OUTER JOIN SDS.tblConsumerDetails as cd WITH(NOLOCK) ON ac.AreaRefNo = cd.AreaRefNo
	where d.SACode=@SACode and cd.ConsumerStatus='Active'	
	group by d.SACode, d.DistributorId, d.JDEDistributorCode, d.DistributorName
	order by d.DistributorName	
END
GO
/****** Object:  StoredProcedure [SDS].[usp_Sch_UpdateConsumerGCFromCDCMS]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_Sch_UpdateConsumerGCFromCDCMS]
--declare
@ConLocHisttbl sds.ConLocHisttbl readonly,
@ResuldId bigint output
as
BEGIN

		set @ResuldId=0;
			Merge SDS.tblConsumerLocationHistory as target
			using  @ConLocHisttbl as source
			on
			target.UniqueConsumerId=source.UniqueConsumerId and target.DistributorID=source.DistributorID 
			When matched and source.UniqueConsumerId=target.UniqueConsumerId
			Then
			update 
			set   target.VitaranLatitude= ISNULL(source.VitaranLatitude,target.VitaranLatitude),
				  target.VitaranLongitude= ISNULL(source.VitaranLongitude,target.VitaranLongitude),
				  target.VitaranLastUpdateDateTime= ISNULL(source.VitaranLastUpdateDateTime,target.VitaranLastUpdateDateTime),
				  target.MILatitude= ISNULL(source.MILatitude,target.MILatitude),
				  target.MILongitude= ISNULL(source.MILongitude,target.MILongitude),
				  target.MILastUpdateDateTime= ISNULL(source.MILastUpdateDateTime,target.MILastUpdateDateTime),
				  target.AutoLatitude= ISNULL(source.AutoLatitude,target.AutoLatitude),
				  target.AutoLongitude= ISNULL(source.AutoLongitude,target.AutoLongitude),
				  target.AutoLastUpdateDateTime= ISNULL(source.AutoLastUpdateDateTime,target.AutoLastUpdateDateTime),
				  target.ManualLatitude= ISNULL(source.ManualLatitude,target.ManualLatitude),
				  target.ManualLongitude= ISNULL(source.ManualLongitude,target.ManualLongitude),
				  target.ManualLastUpdateDateTime= ISNULL(source.ManualLastUpdateDateTime,target.ManualLastUpdateDateTime),
				  target.EzygasLatitude= ISNULL(source.EzygasLatitude,target.EzygasLatitude),
				  target.EzygasLongitude= ISNULL(source.EzygasLongitude,target.EzygasLongitude),
				  target.EzygasLastUpdateDateTime= ISNULL(source.EzygasLastUpdateDateTime,target.EzygasLastUpdateDateTime),
				  target.HPPayLatitude= ISNULL(source.HPPayLatitude,target.HPPayLatitude),
				  target.HPPayLongitude= ISNULL(source.HPPayLongitude,target.HPPayLongitude),
				  target.HPPayLastUpdateDateTime= ISNULL(source.HPPayLastUpdateDateTime,target.HPPayLastUpdateDateTime),
				  target.LastUpdatedDatetime=GetDate()

			When not matched by target --and source.UniqueConsumerId=target.UniqueConsumerId
			Then
			INSERT (UniqueConsumerId,DistributorID,VitaranLatitude,VitaranLongitude,VitaranLastUpdateDateTime,MILatitude,MILongitude,MILastUpdateDateTime,AutoLatitude,AutoLongitude,
			AutoLastUpdateDateTime,ManualLatitude,ManualLongitude,ManualLastUpdateDateTime,EzygasLatitude,EzygasLongitude,EzygasLastUpdateDateTime,HPPayLatitude,HPPayLongitude,
			HPPayLastUpdateDateTime,LastUpdatedDatetime) VALUES (source.UniqueConsumerId,source.DistributorID,source.VitaranLatitude,source.VitaranLongitude,
			source.VitaranLastUpdateDateTime,source.MILatitude,source.MILongitude,source.MILastUpdateDateTime,source.AutoLatitude,source.AutoLongitude,source.AutoLastUpdateDateTime,
			source.ManualLatitude,source.ManualLongitude,source.ManualLastUpdateDateTime,source.EzygasLatitude,source.EzygasLongitude,source.EzygasLastUpdateDateTime,source.HPPayLatitude,source.HPPayLongitude,
			source.HPPayLastUpdateDateTime,source.LastUpdatedDatetime);

			set @ResuldId= @@ROWCOUNT;
END



GO
/****** Object:  StoredProcedure [SDS].[usp_SDS_AddResetPasswordDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [SDS].[usp_SDS_AddResetPasswordDetails]
	@DistributorCode nvarchar(50),
	@DistributorId int,
	@flag int,
	@ResetId INT OUTPUT
as
begin

if(@flag =1)
BEGIN
		insert into SDS.tbl_ResetPassword(DistributorId,DistributorCode,CreatedDate) 
	    values(@DistributorId,@DistributorCode,GETDATE())
	    
	   SET @ResetId = SCOPE_IDENTITY()
	   END

	   ELSE if(@flag =0)
	   BEGIN
	   UPDATE SDS.tbl_ResetPassword SET 
	   ResetDate = GETDATE(),
	   ResetStatus = 'Y'
	     SET @ResetId = @@rowcount
	   END
End



GO
/****** Object:  StoredProcedure [SDS].[usp_SDS_GetDistributorDetailsByDistCode]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [SDS].[usp_SDS_GetDistributorDetailsByDistCode]
@DistributorCode nvarchar(50)
as
BEGIN
SELECT	dm.DistributorId,dm.JDEDistributorCode,dm.DistributorName,dm.IsDistributorLive,dm.AddressLine1,
			dm.AddressLine2,dm.AddressLine3,dm.StateCode,dm.Pin,dm.PhoneNo,dm.MobileNo,
			dm.EmergencyContactNo,dm.Email,dm.SACode,dm.StatusCode
  FROM		DCMS.tblDistributorMaster dm with(nolock)
  WHERE		dm.JDEDistributorCode = @DistributorCode

END


GO
/****** Object:  StoredProcedure [SDS].[usp_SearchConsumersByNamePrefix]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_SearchConsumersByNamePrefix]
	@ConsumerNamePrefix VARCHAR(100),
	@DistributorID int 
	
AS
BEGIN
		
IF(PATINDEX('%[0-9]%', @ConsumerNamePrefix) = 0)
BEGIN
	SELECT UniqueConsumerId,SDS.fn_CamelCase(ConsumerName) as ConsumerName,ConsumerNo
	FROM SDS.tblConsumerDetails
	WHERE ConsumerStatus='Active' AND (ConsumerName LIKE '%'+@ConsumerNamePrefix +'%') and DistributorID =@DistributorID
END
ELSE
BEGIN
		
	SELECT UniqueConsumerId,SDS.fn_CamelCase(ConsumerName ) as ConsumerName,ConsumerNo
	FROM SDS.tblConsumerDetails
	WHERE ConsumerStatus='Active' AND (ConsumerNo LIKE '%'+@ConsumerNamePrefix +'%') and DistributorID =@DistributorID
END
END


GO
/****** Object:  StoredProcedure [SDS].[usp_SecondGCDataUpdate]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Proc [SDS].[usp_SecondGCDataUpdate]   
--declare  
@DistributorId int=0  
  
as  
BEGIN  
	declare @RetVal int=0  
	create table #GC2(id int identity, DistributorID int, UniqueConsumerId numeric(17,0),VitranLatitude1 nvarchar(50),VitranLongitude1 nvarchar(50),   
	VitranLastUpdateDateTime1 datetime, VitranLat1InCluster int,VitranLat1InClusterId bigint, VitranLat1InArea int, VitranLat1inTradingArea int)  
   
	insert into #GC2(DistributorID, UniqueConsumerId,VitranLatitude1,VitranLongitude1,VitranLastUpdateDateTime1,VitranLat1InCluster,  
	VitranLat1InClusterId, VitranLat1InArea, VitranLat1inTradingArea)  
	select cl.DistributorID, cl.UniqueConsumerId,cl.VitranLatitude1,cl.VitranLongitude1,cl.VitranLastUpdateDateTime1, cl.VitranLat1InCluster,  
	cl.VitranLat1InClusterId,cl.VitranLat1InArea, cl.VitranLat1inTradingArea   
	from SDS.tblConsumerDetails cd with (nolock)  
	inner join SDS.tblConsumerLocationHistoryNew cl with (nolock) on cd.DistributorID=cl.DistributorID and cd.UniqueConsumerId=cl.UniqueConsumerId  
	left outer join SDS.tblAreaClusterMapping ac with (nolock) on cd.AreaRefNo=ac.AreaRefNo  
	Where (cd.Latitude is not null and (cd.InCluster=0 or cd.ClusterId<>ac.AreaClusterId))  ---First outside  
	and (cl.VitranLat1InCluster=1 and cl.VitranLat1InClusterId=ac.AreaClusterId)  ---Second Inside  
	and (cd.DistributorID=@DistributorId or isnull(@DistributorId,0)=0)  
  
	UPDATE sds.tblConsumerDetails       
	SET Latitude = gc.VitranLatitude1,      
	Longitude = gc.VitranLongitude1,   
	Source = 'VITRANDC',     
	InArea = gc.VitranLat1InArea,      
	InCluster = gc.VitranLat1InCluster,      
	ClusterId = gc.VitranLat1InClusterId,      
	InTradingArea = gc.VitranLat1inTradingArea,  
	TripGCDate = gc.VitranLastUpdateDateTime1,  
	IsTripGCChanged =1,  
	TripGCChangeDate =getdate(),  
	LastUpdatedDatetime = getdate()   
	FROM sds.tblConsumerDetails t2 inner join  #GC2 gc on t2.DistributorID=gc.DistributorID and t2.UniqueConsumerId=gc.UniqueConsumerId  
   
	set @RetVal=@@ROWCOUNT  
    
	insert into sds.tblConsumerLocationHistoryLogs(UniqueConsumerId, DistributorID, Latitude, Longitude, Source, Distance, Action, AddedBy, AddedOn, LastUpdatedDate)  
	Select UniqueConsumerId, DistributorID, VitranLatitude1, VitranLongitude1, 'Latest Vitran', 0, 'Auto Second Inside GC', 0, getdate(), getdate()  
	From #GC2  
  
	insert into SDS.tblSecGCUpdateSummary(DistributorID,SecGCUpdateCnt,UpdatedDate)   
	select DistributorID,count(UniqueConsumerId),getdate() from #GC2 group by DistributorID  
  
    
	--Calculate Distance from Godown and Office  
	declare @GLat varchar(50), @GLong  varchar(50), @officeLat  varchar(50), @OfficeLong varchar(50)  
	select @GLat=Latitude, @GLong=Longitude from SDS.tblDistributorGodown   
	where DistributorId=@DistributorID and ActiveFlag='Y' and Latitude is not null and Longitude is not null order by GodownId desc  
	select @officeLat=DLat, @OfficeLong=DLong from SDS.tblDistributorLocation where DistributorId=@DistributorID and DLat is not null and DLong is not null   
  
	--Update Distance from Godown  
	if(@GLat is not null and @GLong is not null and (convert(decimal(12,9),@GLat) between -90.0 and 90.0) and (convert(decimal(12,9),@GLong) between -180.0 and 180.0))
	Begin  
		UPDATE sds.tblConsumerDetails     
		SET DistanceFromGodown=((geography:: Point(isnull(@GLat,0), isnull(@GLong,0),4326)).STDistance(geography::Point(isnull(newc.VitranLatitude1,0),isnull(newc.VitranLongitude1,0), 4326)))    
		FROM   sds.tblConsumerDetails t2 inner join  #GC2 newc  on t2.UniqueConsumerId=newc.UniqueConsumerId   
		where t2.DistributorId=@DistributorID and newc.VitranLatitude1 is not null or newc.VitranLongitude1 is not null  
		and (convert(decimal(12,9),newc.VitranLatitude1) between -90.0 and 90.0) and (convert(decimal(12,9),newc.VitranLongitude1) between -180.0 and 180.0)
	End  
  
	--Update Distance from Office  
	if(@officeLat is not null and @OfficeLong is not null and (convert(decimal(12,9),@officeLat) between -90.0 and 90.0) and (convert(decimal(12,9),@OfficeLong) between -180.0 and 180.0))
	Begin  
		UPDATE sds.tblConsumerDetails     
		SET DistanceFromAgency=((geography:: Point(isnull(@officeLat,0), isnull(@OfficeLong,0),4326)).STDistance(geography::Point(isnull(newc.VitranLatitude1,0),isnull(newc.VitranLongitude1,0), 4326)))    
		FROM   sds.tblConsumerDetails t2 inner join  #GC2 newc  on t2.UniqueConsumerId=newc.UniqueConsumerId   
		where t2.DistributorId=@DistributorID and newc.VitranLatitude1 is not null or newc.VitranLongitude1 is not null 
		and (convert(decimal(12,9),newc.VitranLatitude1) between -90.0 and 90.0) and (convert(decimal(12,9),newc.VitranLongitude1) between -180.0 and 180.0) 
	End  
   
	UPDATE SDS.tblConsumerLocationHistoryNew SET Distance=0   
	from  SDS.tblConsumerLocationHistoryNew Cl inner join  #GC2 newc on cl.UniqueConsumerId=newc.UniqueConsumerId   
	where cl.DistributorID=@DistributorID  and newc.VitranLatitude1 is not null or newc.VitranLongitude1 is not null;  
   
drop table #GC2  
Return @RetVal  
End   
GO
/****** Object:  StoredProcedure [SDS].[usp_StatewiseAreaSummary]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_StatewiseAreaSummary]

as

BEGIN

	SELECT A.StateCode,A.StateName,A.DistrictCodes,ISNULL(SUM(A.Districts), 0) Districts,ISNULL(SUM(A.Talukas), 0) Talukas,ISNULL(SUM(A.Villages), 0) Villages FROM
	(
		SELECT s.StateCode, UPPER(s.StateName) as StateName,ISNULL(Count(DISTINCT(d.DistrictCode)), 0) as Districts,
	  isnull((STUFF((select ', ' + SDS.fn_CamelCase(isnull(dm.DistrictCode,'')) from sds.[tblStateMaster] sm 
		inner join sds.[tblDistrictMaster] dm  WITH(NOLOCK) on sm.StateCode=dm.StateCode where sm.StateCode ='RJ' and dm.DistrictCode = 'RJJaipurDT' AND dm.DistrictName not like '%CITY%' FOR XML PATH('')),1,1,'')),'') AS DistrictCodes,
	  ISNULL(Count(DISTINCT(t.TalukaCode)),0) as Talukas, ISNULL(Count(a.AreaCode),0) as Villages
	  FROM [SDS].[tblAreaMaster] a inner join 
	  [SDS].[tblTalukaMaster] t on a.TalukaCode = t.TalukaCode inner join
	  [SDS].[tblDistrictMaster] d on d.DistrictCode = t.DistrictCode inner join
	  [SDS].[tblStateMaster] s on d.StateCode = s.StateCode 
	  where s.ActiveFlag = '1' and s.StateCode = 'RJ' and d.DistrictCode = 'RJJaipurDT'
	  group by s.StateName, s.StateCode,d.DistrictName
	 ) A
	GROUP BY A.StateCode,A.StateName,A.DistrictCodes

END


GO
/****** Object:  StoredProcedure [SDS].[usp_StockAllotmentAdd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- SDS.usp_StockAllotmentAdd 14193,11711419300000008,53,'2019-06-14',16,0
CREATE PROCEDURE [SDS].[usp_StockAllotmentAdd]
@DistributorId int,
@DeliveryBoyId numeric(17,0),
@GodownKeeperId numeric(17,0),
@AllotmentDate datetime,
@VehicleId bigint,
@StockAllotmentId bigint OUTPUT
AS
BEGIN
	-- Generate New Stock Allotment No.
	DECLARE @TodayStockCount int=0,@StockAllotmentNoStr nvarchar(25), @StockAllotmentNo bigint =0
	
	SELECT @TodayStockCount = COUNT(1) FROM sds.tblStockAllotment with(nolock) WHERE DistributorId = @DistributorId AND CAST(AllotmentDate as DATE) = CAST(@AllotmentDate as DATE)
	SET @TodayStockCount = @TodayStockCount+1
	print @TodayStockCount
	
	SET @StockAllotmentNoStr = '1'+ RIGHT('0'+ CAST(YEAR(@AllotmentDate) AS nvarchar(4)),4) + RIGHT('0'+ CAST(MONTH(@AllotmentDate) AS varchar(2)),2) + RIGHT('0'+CAST(DAY(@AllotmentDate) AS varchar(2)),2) + 
	RIGHT('00000'+ISNULL(CAST(@DistributorId as VARCHAR),''),5) + REPLICATE('0',3-LEN(RTRIM(CONVERT(varchar(8000),@TodayStockCount)))) + CONVERT(varchar(8000),@TodayStockCount)
	
	SET @StockAllotmentNo = CAST(@StockAllotmentNoStr as bigint)
	print @StockAllotmentNo

	--Add Stock Allotment Master
	insert into sds.tblStockAllotment(StockAllotmentNo,DistributorId,DeliveryBoyId,GodownKeeperId,AllotmentBy,AllotmentDate,VehicleId,LastUpdatedBy,LastUpdateDate)
	values(@StockAllotmentNo,@DistributorId,@DeliveryBoyId,@GodownKeeperId,'G',@AllotmentDate,@VehicleId,'G',getdate())

	set @StockAllotmentId= scope_identity()
END



GO
/****** Object:  StoredProcedure [SDS].[usp_StockAllotmentDetailsAdd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_StockAllotmentDetailsAdd]
@StockAllotmentId bigint,
@ItemId int,
@Quantity int,
@InsertedId bigint output
AS
BEGIN
	SET @InsertedId = 0
	
	INSERT INTO SDS.tblStockAllotmentDetails(StockAllotmentId,ItemId,Quantity,EmptyQty,LastUpdatedBy,LastUpdatedDate)
	VALUES(@StockAllotmentId,@ItemId,@Quantity,0,'G',GETDATE())
	
	SET @InsertedId = SCOPE_IDENTITY()
	
	IF(@InsertedId > 0 AND @Quantity > 0)
	BEGIN
		DECLARE @DistributorId int=0, @ToDelBoyId numeric(17,0)=0, @StockTransferId bigint=0, @FromDelBoy numeric(17,0)=0,@UpdatedBy nvarchar(50)=''
			
		SELECT @DistributorId =DistributorId, @ToDelBoyId=DeliveryBoyId,@StockTransferId=StockTransferId,
		@FromDelBoy=GodownKeeperId FROM SDS.tblStockAllotment with(nolock) WHERE StockAllotmentId = @StockAllotmentId
		
		----insert/update Delivery Boy Stock with 0,0		
		exec sds.usp_DeliveryBoyStockUpdate @ToDelBoyId,@ItemId,0,0,'G',0

		-- Update Distributor-Godown stock
		set @Quantity =@Quantity*-1
		
		if(isnull(@StockTransferId,0)=0)  -- for edit mode user can edit stock allotment entry done against trasfer
		Begin
			set @UpdatedBy= 'Allotment-'+convert(nvarchar(20),@FromDelBoy)
			exec sds.usp_DistributorStockUpdate @DistributorId,@ItemID,@Quantity,0,0,@UpdatedBy,0
		End 
		Else
		Begin
		set @UpdatedBy= 'Transfer-'+convert(nvarchar(20),@FromDelBoy)
			exec sds.usp_DeliveryBoyStockUpdate @FromDelBoy,@ItemId,@Quantity,0,@UpdatedBy,0
		End
		
		
		
		
		-- Old code
		--declare @IsAccepted char(1),@StockTransferId bigint,@TBDeliveryBoyId bigint
		--select @IsAccepted=IsAccepted,@StockTransferId=StockTransferId,@TBDeliveryBoyId=GodownKeeperId from sds.tblStockAllotment where StockAllotmentId=@StockAllotmentId
	
		--IF(@StockTransferId is null)
		--Begin
		--	--update stock for distributor
		--	UPDATE SDS.tblDistributorStock SET FilledQuantity= ISNULL(FilledQuantity,0) - @Quantity, LatsUpdatedDate = GETDATE()
		--	WHERE DistributorId = @DistributorId AND ItemID = @ItemID
		--END
		--ELSE
		--BEGIN
		--	declare @DbFilledStock int,@DBEmptyStock int
	
		--	select @DbFilledStock=(FilledQuantity-@Quantity),@DBEmptyStock=(EmptyQuantity-0) from SDS.tblDeliveryBoyStock 
		--	where ItemId=@ItemId and DeliveryBoyId=@TBDeliveryBoyId
	
		--	if(@DbFilledStock>=0 AND @DBEmptyStock>=0)
		--	BEGIN
		--		update SDS.tblDeliveryBoyStock set FilledQuantity=@DbFilledStock,EmptyQuantity=@DBEmptyStock
		--		where  ItemId=@ItemId and DeliveryBoyId=@TBDeliveryBoyId
		
		--		INSERT INTO SDS.tblStockTransferDetails(StockTransferId,ItemId,FilledQty,EmptyQty,LastUpdatedBy,LastUpdateDate)
		--		VALUES(@StockTransferId,@ItemId,@Quantity,'0','G',GETDATE())
		--		--SET @InsertedId = SCOPE_IDENTITY()
		--	END
		--END
	END

end



GO
/****** Object:  StoredProcedure [SDS].[usp_TradingAreaCoordinatesAddEdit]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Add Trading AreaCoordinates

create proc [SDS].[usp_TradingAreaCoordinatesAddEdit] 
@DistributorId	int,
@AreaJSON	nvarchar(MAX),
@ActiveStatus	char(10),
@RtnValue	bigint output

as
BEGIN
	if not exists(select 1 from sds.tblDistributorTradingAreaCoordinates where DistributorId=@DistributorId)
	Begin
		insert into sds.tblDistributorTradingAreaCoordinates(DistributorId,AreaJSON,ActiveStatus,LastUpdateDateTime)
		values(@DistributorId,@AreaJSON,@ActiveStatus,getdate())

		set @RtnValue=SCOPE_IDENTITY()
	End
	Else
	Begin
		Update sds.tblDistributorTradingAreaCoordinates
		set AreaJSON=@AreaJSON,
			ActiveStatus=@ActiveStatus,
			LastUpdateDateTime=getdate()
		Where DistributorId=@DistributorId

		set @RtnValue=@DistributorId
	End
END




GO
/****** Object:  StoredProcedure [SDS].[usp_TransferBookingAdd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_TransferBookingAdd 5,14193,1024,14110,'2019-11-14 15:04','Y',null,338,'EDIT',0

create PROC [SDS].[usp_TransferBookingAdd]
@TransferId	bigint,
@SACode nvarchar(20),
@FromDistributorId	bigint,
@FromClusterId	bigint,
@ToDistributorId	bigint,
@ToClusterId bigint,
@FromDate	datetime,
@ToDate	datetime,
@IsTransfer	char(1),
@AddedBy	nvarchar(20),
@Action nvarchar(10),
@RetValue  bigint output

as

BEGIN
	set @RetValue=0
	if(@Action='ADD')
	Begin
		if not exists(select 1 from sds.tblTransferBooking where FromDistributorId=@FromDistributorId and FromClusterId=@FromClusterId and IsTransfer='Y')
		Begin
			insert into sds.tblTransferBooking(SACode, FromDistributorId,FromClusterId,ToDistributorId,ToClusterId,FromDate,ToDate,IsTransfer,AddedBy,LastUpdatedDate)
			values(@SACode, @FromDistributorId,@FromClusterId,@ToDistributorId,@ToClusterId,@FromDate,@ToDate,@IsTransfer,@AddedBy,getdate())

			set @RetValue=SCOPE_IDENTITY()
		End
		else
		Begin
			set @RetValue=-1
		End
	End
	else if(@Action='EDIT')
	Begin
		if not exists(select 1 from sds.tblTransferBooking where FromDistributorId=@FromDistributorId and FromClusterId=@FromClusterId and IsTransfer='Y' and TransferId<>@TransferId)
		Begin
			update sds.tblTransferBooking
			set FromDistributorId=@FromDistributorId,
				FromClusterId=@FromClusterId,
				ToDistributorId=@ToDistributorId,
				ToClusterId=@ToClusterId,
				FromDate=@FromDate,
				IsTransfer=@IsTransfer,
				ToDate=@ToDate,
				LastUpdatedDate=getdate()
			where TransferId=@TransferId
			
			set @RetValue=@TransferId
		End
		else
		Begin
			set @RetValue=-1
		End
	End
	else if(@Action='DELETE')
	Begin
		if exists(select 1 from sds.tblTransferBooking where TransferId=@TransferId)
		Begin
			delete from sds.tblTransferBooking where TransferId=@TransferId			
			set @RetValue=@TransferId
		End
		else
		Begin
			set @RetValue=-1
		End
	End
	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_TransferBookingAddNew]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_TransferBookingAddNew]
--declare
@SACode nvarchar(20),
@SourceDistributorId int,
@SourceClusterId bigint,
@DestDistributorId int,
@DestClusterId bigint,
@TransferBkgDt sds.TransferBookingDt readonly,
@RetValue int output
as
BEGIN
	set @RetValue=0
	insert into sds.tblTransferBookingNew(SACode,SourceDistributorId,SourceClusterId,UniqueConsumerId,
	Latitude,Longitude,OrderRefNo,SourceAreaRefNo,DestDistributorId,DestClusterId,UpdatedBy,LastUpdatedDate)
	select @SACode,@SourceDistributorId,@SourceClusterId,dt.UniqueConsumerId,dt.Latitude,dt.Longitude,dt.OrderRefNo,
	dt.SourceAreaRefNo,@DestDistributorId,@DestClusterId,'SDS',getdate()
	from @TransferBkgDt dt left outer join 
	sds.tblTransferBookingNew tb with(nolock) on dt.UniqueConsumerId=tb.UniqueConsumerId and dt.OrderRefNo=tb.OrderRefNo
	where tb.OrderRefNo is null
	set @RetValue=@@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TransStockItem]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_TransStockItem]
--	Description		:	To Get Transfer Stock Item By StockTransferId

--	Author			:	Prasanna

-- use				: To get all transfer stock details of specific deliveryboy

--	Date Modified		Modified By	     Modifications
--	04-April-2019		Prasanna			Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_TransStockItem]
	@StockTransferId bigint

AS
BEGIN
	BEGIN
			SELECT icm.ItemDescription,icm.ItemShortDescription,std.FilledQty,std.EmptyQty,std.[DefectiveQty],icm.ItemID
			FROM SDS.tblStockTransferDetails std LEFT OUTER JOIN 
			SDS.tblItemCodeMaster icm	ON icm.ItemID=std.ItemId
			WHERE std.StockTransferId=@StockTransferId
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_TripCaseImpactConclusionList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		sds.usp_TripCaseImpactConclusionList 0,''

CREATE proc [SDS].[usp_TripCaseImpactConclusionList] 
@CaseId int,
@ImpactConclusion char(1)

as

BEGIN
	SELECT        ImpId, CaseId, DescriptionText DescriptionText, ImpactConclusion, LastUpdatedDate
FROM            SDS.tblTripCaseImpactConclusionDetails
	where (CaseId=@CaseId or @CaseId=0) and (upper(ImpactConclusion)=upper(@ImpactConclusion) or @ImpactConclusion='')
	order by caseId asc, ImpactConclusion desc 
END

GO
/****** Object:  StoredProcedure [SDS].[usp_TripDataDensityAnalysisDelSeq]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_TripDataDensityAnalysisDelSeq]
--declare
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForDensity readonly,
@TripId bigint output

as
------begin
	--set @ClusterId=70; set @CaseNo='DA'; set @TripDate='2021-05-30'; set @DistributorId=14193; set @StaffRefNo=11711419300000004; set @VehicleId=10095; 
	--set @TripStatus='0'; set @CreatedBy=1;

	--insert into @OrderNotbl values (0, 1, 0, 1141419300000000, 5201419300030990, 1151419300000810, 0, 0, 0, 0)
	--insert into @OrderNotbl values (1, 1, 0, 1141419300000000, 5201419300030720, 9110828800023190, 0, 0, 0, 0)
	--insert into @OrderNotbl values (2, 1, 0, 1141419300000000, 5201419300030920, 1140526700002770, 0, 0, 0, 0)
	--insert into @OrderNotbl values (3, 1, 0, 1141419300000000, 5201419300028650, 1181419300000140, 0, 0, 0, 0)
	--insert into @OrderNotbl values (4, 1, 0, 1141419300000000, 5201419300031010, 9111005600031700, 1, 0, 0, 0)
	--insert into @OrderNotbl values (5, 1, 0, 1141419300000000, 5201419300030770, 9110828800028380, 2, 0, 0, 0)
	--insert into @OrderNotbl values (6, 1, 0, 1141419300000000, 5201419300030870, 1140810900002320, 3, 0, 0, 0)
	--insert into @OrderNotbl values (7, 1, 0, 1141419300000000, 5201419300031050, 1140828800000430, 5, 0, 0, 0)
	--insert into @OrderNotbl values (8, 1, 0, 1141419300000000, 5201419300031160, 1161419300000120, 5, 0, 0, 0)
	--insert into @OrderNotbl values (9, 1, 0, 1141419300000000, 5201419300031010, 1140828800000680, 7, 0, 0, 0)
	--insert into @OrderNotbl values (10, 1, 0, 1141419300000000, 5201419300030840, 9110828800027170, 9, 0, 0, 0)


------end

BEGIN
SET FMTONLY OFF
	--declare @TripId bigint
	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='', @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
--select @VehCapacity, @NoOfTrips

	select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl

	-- Delete old data for same distributor 
	delete from sds.tblTripDensityDtls where TripId in (select tripId from sds.tblTripDensityHdr where DistributorId=@DistributorId and ClusterId=@ClusterId )
	delete from sds.tblTripDensityHdr where DistributorId=@DistributorId and ClusterId=@ClusterId 
		
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	--if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			--select @cnt
			set @TripDtlsId=0;	
			INSERT INTO sds.tblTripDensityHdr(CaseNo,TripDate,DistributorId,ClusterId,StaffRefNo,VehicleId,TripStatus,GodownId,GLatitude,GLongitude)
			VALUES(@CaseNo,@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@VehicleId,@TripStatus,@Gdid, @GdLati, @GdLongi)

			 set @TripId = scope_identity()

			if (isnull(@TripId,0)>0)
			Begin 			
				---- Insert Trip Details for included orders
				insert into sds.tblTripDensityDtls(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,DelTripSequenceNo,KM_Air,KM_Road)
				select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,nt.DelTripSequenceNo,
			 	(select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,
			 	(select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad				
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblTripDensityDtls d inner join sds.tblTripDensityHdr h on d.tripId=h.tripId 
				where h.DistributorId=@DistributorId and h.CaseNo=@CaseNo and cast(h.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo
				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update sds.tblTripDensityDtls set PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				OrderStatus=o.OrderStatusCode				
				from sds.tblTripDensityDtls t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
				and t1.TripId=' + convert(nvarchar(30),@TripId))
				
				--'--inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode'
				
				print @strquery
				exec (@strquery)
			End		

		set @cnt=@cnt+1
		End
	
		set @cnt=1
	
		-- Assign Delivery Sequence for Case 1 Density and Ageing...
		if exists(select 1 from sds.tblTripDensityHdr where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
		Begin
			IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups
			create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int, 
			OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)

			insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
				OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)
			SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, 
				dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,
				Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo
			FROM sds.tblTripDensityHdr AS da INNER JOIN sds.tblTripDensityDtls AS dad ON da.TripId = dad.TripId
			where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)
				and (isnull(da.CaseNo,'')=@CaseNo)
			GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo
			
			declare @OldBkgDt datetime, @NoofTrips1 int, @MaxBkg10 int=0,@MaxBkg5 int=0,@MaxBkg2 int=0,@MaxBkg int=0, @c int =1
			select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId
			select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
		
			While (@c<=@NoofTrips1)
			Begin
				if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)>1)
				Begin
				---- Older than 10 days
					set @MaxBkg10 =0; select @MaxBkg10=max(OlderThan10Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
		
					if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0)=1)
					Begin
						--select @MaxBkg10, ' older then 10 days'
						update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0
					End
					Else
					Begin
					---- Older than 5 days
						set @MaxBkg5 =0; select @MaxBkg5=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
								and OlderThan10Days=@MaxBkg10 and isnull(DelTripSequenceNo,0)=0
						if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0)=1)
						Begin
						--select @MaxBkg5,' older then 5 days'
							update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0
						End
						else
						Begin
						---- Older than 2 days
							set @MaxBkg2 =0; select @MaxBkg2=max(OlderThan2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and isnull(DelTripSequenceNo,0)=0
							if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0)=1)
							Begin
								--select @MaxBkg2, ' older then 2 days'
								update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
											and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0
							End
							else
							Begin
							---- Upto 2 days 
								set @MaxBkg =0; select @MaxBkg=max(Upto2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
											and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and isnull(DelTripSequenceNo,0)=0
								if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
								and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and Upto2Days=@MaxBkg and Upto2Days>0)=1)
								Begin
									--select @MaxBkg, 'upto 2 days'
									update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
									and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg and Upto2Days>0
								End
								else
								Begin
									--select 'Last '
									update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo=
										(select top 1 DensityGroupNo from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
										and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg order by KM_Air)
								End
							End
						End
					End
				End 
				else 
				Begin
					--select @OldBkgDt
					update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
				End
			set @c=@c+1
			End  

			update sds.tblTripDensityDtls set DelTripSequenceNo =o.DelTripSequenceNo
				from sds.tblTripDensityDtls t1 inner join sds.tblTripDensityHdr da on t1.TripId=da.TripId
				inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date) 
				and o.DensityGroupNo=t1.DensityGroupNo
				WHERE	o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)
	
			drop table #DensityGroups
		End
	
	End

select @TripId

	--SELECT d.TripId, d.CaseNo, d.TripDate, d.DistributorId, d.ClusterId, d.StaffRefNo, 
	--d.VehicleId, d.GodownId, d.GLatitude, d.GLongitude, dd.TripPlanningDetId, dd.DensityGroupNo, dd.KM_Air, dd.KM_Road, 
	--dd.DelTripSequenceNo, dd.SequenceNo, dd.OrderRefNo, dd.UniqueConsumerId, dd.PriceCode, 
	--dd.AreaRefNo, dd.OrderNo, dd.OrderDate, dd.OrderStatus
	--FROM sds.tblTripDensityHdr d inner join sds.tblTripDensityDtls dd on d.TripId=dd.TripId
	--where d.DistributorId=@DistributorId and d.CaseNo=@CaseNo and cast(d.TripDate as date)=cast(@TripDate as date) 
	--and isnull(DelTripSequenceNo,0)>0



	--SELECT         d.TripId, d.CaseNo, d.TripDate, d.DistributorId, d.ClusterId, d.StaffRefNo, 
	--d.VehicleId, d.GodownId, d.GLatitude, d.GLongitude, dd.TripPlanningDetId, dd.DensityGroupNo, dd.KM_Air, dd.KM_Road, 
	--dd.DelTripSequenceNo, dd.SequenceNo, dd.OrderRefNo, dd.UniqueConsumerId, dd.PriceCode, 
	--dd.AreaRefNo, dd.OrderNo, dd.OrderDate, dd.OrderStatus
	--FROM SDS.tblDensityAnalysis AS d INNER JOIN SDS.tblDensityAnalysisDetails AS dd ON d.TripId = dd.TripId
	--where d.DistributorId=@DistributorId and d.CaseNo=@CaseNo --and cast(d.TripDate as date)=cast(@TripDate as date) 
	--and isnull(DelTripSequenceNo,0)>0

	

END






GO
/****** Object:  StoredProcedure [SDS].[usp_TripDataDensityAnalysisDelSeq_Old]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_TripDataDensityAnalysisDelSeq_Old]
--declare
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForDensity readonly

as
------begin
--	set @ClusterId=70; set @CaseNo='DA'; set @TripDate='2021-05-30'; set @DistributorId=14193; set @StaffRefNo=11711419300000004; set @VehicleId=10095; 
--	set @TripStatus='0'; set @CreatedBy=1;

--	insert into @OrderNotbl values (0, 1, 0, 1141419300000000, 5201419300030990, 1151419300000810, 0, 0, 0, 0)
--	insert into @OrderNotbl values (1, 1, 0, 1141419300000000, 5201419300030720, 9110828800023190, 0, 0, 0, 0)
--	insert into @OrderNotbl values (2, 1, 0, 1141419300000000, 5201419300030920, 1140526700002770, 0, 0, 0, 0)
--	insert into @OrderNotbl values (3, 1, 0, 1141419300000000, 5201419300028650, 1181419300000140, 0, 0, 0, 0)
--	insert into @OrderNotbl values (4, 1, 0, 1141419300000000, 5201419300031010, 9111005600031700, 1, 0, 0, 0)
--	insert into @OrderNotbl values (5, 1, 0, 1141419300000000, 5201419300030770, 9110828800028380, 2, 0, 0, 0)
--	insert into @OrderNotbl values (6, 1, 0, 1141419300000000, 5201419300030870, 1140810900002320, 3, 0, 0, 0)
--	insert into @OrderNotbl values (7, 1, 0, 1141419300000000, 5201419300031050, 1140828800000430, 5, 0, 0, 0)
--	insert into @OrderNotbl values (8, 1, 0, 1141419300000000, 5201419300031160, 1161419300000120, 5, 0, 0, 0)
--	insert into @OrderNotbl values (9, 1, 0, 1141419300000000, 5201419300031010, 1140828800000680, 7, 0, 0, 0)
--	insert into @OrderNotbl values (10, 1, 0, 1141419300000000, 5201419300030840, 9110828800027170, 9, 0, 0, 0)


------end

BEGIN
SET FMTONLY OFF
	declare @TripId bigint
	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='', @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
--select @VehCapacity, @NoOfTrips

	select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl

	IF OBJECT_ID('tempdb..#DenHdr') IS NOT NULL DROP TABLE #DenHdr
	create table #DenHdr(id int identity,CaseNo	nvarchar(50),TripDate datetime,DistributorId int,ClusterId bigint, StaffRefNo numeric(17, 0),
		VehicleId bigint,TripStatus	varchar(50),GodownId nvarchar(20),GLatitude nvarchar(50),GLongitude nvarchar(50))
	IF OBJECT_ID('tempdb..#DenDtls') IS NOT NULL DROP TABLE #DenDtls
	create table #DenDtls(id int identity, TripPlanningDetId bigint,TripId bigint,DensityGroupNo int,KM_Air int,KM_Road int,DelTripSequenceNo int, SequenceNo int,
	OrderRefNo numeric(17, 0),UniqueConsumerId numeric(17, 0),PriceCode int,AreaRefNo numeric(17, 0),OrderNo int,OrderDate datetime,OrderStatus varchar(50))
		
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	--if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			--select @cnt
			set @TripDtlsId=0;	
			INSERT INTO #DenHdr(CaseNo,TripDate,DistributorId,ClusterId,StaffRefNo,VehicleId,TripStatus,GodownId,GLatitude,GLongitude)
			VALUES(@CaseNo,@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@VehicleId,@TripStatus,@Gdid, @GdLati, @GdLongi)

			 select @TripId = max(id) from #DenHdr

			if (isnull(@TripId,0)>0)
			Begin 			
				---- Insert Trip Details for included orders
				insert into #DenDtls(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,DelTripSequenceNo,KM_Air,KM_Road)
				select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,nt.DelTripSequenceNo,
			 	(select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,
			 	(select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad				
				from @OrderNotbl nt 
				where nt.DensityGroupNo=@cnt order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update #DenDtls set PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				OrderStatus=o.OrderStatusCode				
				from #DenDtls t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
				and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End		

		set @cnt=@cnt+1
		End
	
		set @cnt=1
	
		-- Assign Delivery Sequence for Case 1 Density and Ageing...
		if exists(select 1 from #DenHdr where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId)
		Begin
			IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups
			create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int, 
			OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)

			insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
				OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)
			SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, 
				dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,
				Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo
			FROM #DenHdr AS da INNER JOIN #DenDtls AS dad ON da.Id = dad.TripId
			where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)
				and (isnull(da.CaseNo,'')=@CaseNo)
			GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo
			
			declare @OldBkgDt datetime, @NoofTrips1 int, @MaxBkg10 int=0,@MaxBkg5 int=0,@MaxBkg2 int=0,@MaxBkg int=0, @c int =1
			select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId
			select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
		
			While (@c<=@NoofTrips1)
			Begin
				if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)>1)
				Begin
				---- Older than 10 days
					set @MaxBkg10 =0; select @MaxBkg10=max(OlderThan10Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
		
					if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0)=1)
					Begin
						--select @MaxBkg10, ' older then 10 days'
						update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan10Days>0
					End
					Else
					Begin
					---- Older than 5 days
						set @MaxBkg5 =0; select @MaxBkg5=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
								and OlderThan10Days=@MaxBkg10 and isnull(DelTripSequenceNo,0)=0
						if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
									and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0)=1)
						Begin
						--select @MaxBkg5,' older then 5 days'
							update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan5Days>0
						End
						else
						Begin
						---- Older than 2 days
							set @MaxBkg2 =0; select @MaxBkg2=max(OlderThan2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and isnull(DelTripSequenceNo,0)=0
							if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
										and isnull(DelTripSequenceNo,0)=0 and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0)=1)
							Begin
								--select @MaxBkg2, ' older then 2 days'
								update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
											and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and OlderThan2Days>0
							End
							else
							Begin
							---- Upto 2 days 
								set @MaxBkg =0; select @MaxBkg=max(Upto2Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) 
											and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and isnull(DelTripSequenceNo,0)=0
								if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
								and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg2 and Upto2Days=@MaxBkg and Upto2Days>0)=1)
								Begin
									--select @MaxBkg, 'upto 2 days'
									update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
									and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg and Upto2Days>0
								End
								else
								Begin
									--select 'Last '
									update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo=
										(select top 1 DensityGroupNo from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0 
										and OlderThan10Days=@MaxBkg10 and OlderThan5Days=@MaxBkg5 and OlderThan2Days=@MaxBkg and Upto2Days=@MaxBkg order by KM_Air)
								End
							End
						End
					End
				End 
				else 
				Begin
					--select @OldBkgDt
					update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
				End
			set @c=@c+1
			End  

			update #DenDtls set DelTripSequenceNo =o.DelTripSequenceNo
				from #DenDtls t1 inner join #DenHdr da on t1.TripId=da.id
				inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date) 
				and o.DensityGroupNo=t1.DensityGroupNo
				WHERE	o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)
	
			drop table #DensityGroups
		End
	
	End

	SELECT        d.id as TripId, d.CaseNo, d.TripDate, d.DistributorId, d.ClusterId, d.StaffRefNo, 
	d.VehicleId, d.GodownId, d.GLatitude, d.GLongitude, dd.id as TripPlanningDetId, dd.DensityGroupNo, dd.KM_Air, dd.KM_Road, 
	dd.DelTripSequenceNo, dd.SequenceNo, dd.OrderRefNo, dd.UniqueConsumerId, dd.PriceCode, 
	dd.AreaRefNo, dd.OrderNo, dd.OrderDate, dd.OrderStatus
	FROM #DenHdr d inner join #DenDtls dd on d.id=dd.tripid
	where d.DistributorId=@DistributorId and d.CaseNo=@CaseNo and cast(d.TripDate as date)=cast(@TripDate as date) 
	and isnull(DelTripSequenceNo,0)>0


	--SELECT         d.TripId, d.CaseNo, d.TripDate, d.DistributorId, d.ClusterId, d.StaffRefNo, 
	--d.VehicleId, d.GodownId, d.GLatitude, d.GLongitude, dd.TripPlanningDetId, dd.DensityGroupNo, dd.KM_Air, dd.KM_Road, 
	--dd.DelTripSequenceNo, dd.SequenceNo, dd.OrderRefNo, dd.UniqueConsumerId, dd.PriceCode, 
	--dd.AreaRefNo, dd.OrderNo, dd.OrderDate, dd.OrderStatus
	--FROM SDS.tblDensityAnalysis AS d INNER JOIN SDS.tblDensityAnalysisDetails AS dd ON d.TripId = dd.TripId
	--where d.DistributorId=@DistributorId and d.CaseNo=@CaseNo --and cast(d.TripDate as date)=cast(@TripDate as date) 
	--and isnull(DelTripSequenceNo,0)>0

	drop table #DenDtls
	drop table #DenHdr

END






GO
/****** Object:  StoredProcedure [SDS].[usp_TripDataDensityAnalysisDelSeqForCaseAD]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [SDS].[usp_TripDataDensityAnalysisDelSeqForCaseAD]
--declare
@ClusterId bigint,
@CaseNo nvarchar(50),
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForDensity readonly,
@TripId bigint output

as

BEGIN
SET FMTONLY OFF
	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='', @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	--select @VehCapacity, @NoOfTrips

	select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl
	-- Delete old data for same distributor 
	delete from sds.tblTripDensityDtls where TripId in (select tripId from sds.tblTripDensityHdr where DistributorId=@DistributorId and ClusterId=@ClusterId )
	delete from sds.tblTripDensityHdr where DistributorId=@DistributorId and ClusterId=@ClusterId 
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	--if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			--select @cnt
			set @TripDtlsId=0;	
			INSERT INTO sds.tblTripDensityHdr(CaseNo,TripDate,DistributorId,ClusterId,StaffRefNo,VehicleId,TripStatus,GodownId,GLatitude,GLongitude)
			VALUES(@CaseNo,@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@VehicleId,@TripStatus,@Gdid, @GdLati, @GdLongi)

			set @TripId = scope_identity()
			
			if (isnull(@TripId,0)>0)
			Begin 			
				---- Insert Trip Details for included orders
				insert into sds.tblTripDensityDtls(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,DelTripSequenceNo,KM_Air,KM_Road)
				select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,nt.DelTripSequenceNo,
			 	(select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,
			 	(select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad				
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblTripDensityDtls d inner join sds.tblTripDensityHdr h on d.tripId=h.tripId 
				where h.DistributorId=@DistributorId and h.CaseNo=@CaseNo and cast(h.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo
				set @TripDtlsId=@@rowcount
				
				set @strquery=( '
				update sds.tblTripDensityDtls set PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				OrderStatus=o.OrderStatusCode				
				from sds.tblTripDensityDtls t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') 
				and t1.TripId=' + convert(nvarchar(30),@TripId))				
				--print @strquery
				exec (@strquery)
			End		

		set @cnt=@cnt+1
		End
	
		set @cnt=1
	
		-- Assign Delivery Sequence for Case 3 Ageing and Density...
		if exists(select 1 from sds.tblTripDensityHdr where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
		Begin
			IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups
			create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int, 
			OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)

			insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days, 
				OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)
			SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId, 
				dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,
				sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,
				Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo
			FROM sds.tblTripDensityHdr AS da INNER JOIN sds.tblTripDensityDtls AS dad ON da.TripId = dad.TripId
			where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)
				and (isnull(da.CaseNo,'')=@CaseNo)
			GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo
			
			declare @OldBkgDt datetime, @NoofTrips1 int, @c int =1, @MinDensity int,@10DaysOld int = 0,@5DaysOld int = 0, @2DaysOld int = 0,@Upto2Days int =0;
			select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId
			select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)
		
			While (@c<=@NoofTrips1)
			Begin
				--Check older booking date
				if((select count(DensityGroupNo) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)>1 )
				BEGIN
					-- Check older than 10 days
					set @10DaysOld =0; 
					select @10DaysOld=max(OlderThan10Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
					IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and isnull(DelTripSequenceNo,0)=0)>1))
						BEGIN
							-- Check older than 5 days
							set @5DaysOld =0; 
							select @5DaysOld=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) AND OlderThan10Days = @10DaysOld 
							and isnull(DelTripSequenceNo,0)=0
							IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld and isnull(DelTripSequenceNo,0)=0)>1))
							BEGIN
								-- Check older than 2 days
								set @2DaysOld =0; 
								select @2DaysOld=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) AND OlderThan10Days = @10DaysOld 
								AND OlderThan5Days = @5DaysOld and isnull(DelTripSequenceNo,0)=0
								IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld 
								and  isnull(DelTripSequenceNo,0)=0)>1))
								BEGIN
									-- Check upto 2 days
									set @2DaysOld =0; 
									select @2DaysOld=max(OlderThan5Days) from #DensityGroups where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) AND OlderThan10Days = @10DaysOld 
									AND OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld and isnull(DelTripSequenceNo,0)=0
									IF(((select count(DensityGroupNo) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld 
									and Upto2Days = @Upto2Days and isnull(DelTripSequenceNo,0)=0)>1))
									BEGIN
										--Check density
										set @MinDensity=0;
										select @MinDensity = (select min(KM_Air) from #DensityGroups where OlderThan10Days = @10DaysOld and OlderThan5Days = @5DaysOld 
										and OlderThan2Days = @2DaysOld and Upto2Days = @Upto2Days and isnull(DelTripSequenceNo,0)=0)
										if((select count(DensityGroupNo) from @OrderNotbl where KMAir = @MinDensity)>1)
										BEGIN
											update #DensityGroups set DelTripSequenceNo=@c where  isnull(DelTripSequenceNo,0)=0 AND 
											DensityGroupNo = (select TOP 1 DensityGroupNo from @OrderNotbl where KMAir = @MinDensity)
										END
										ELSE
										BEGIN
											update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
											cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
											and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld and Upto2Days = @Upto2Days and isnull(DelTripSequenceNo,0)=0)
										END
									END
									ELSE
									BEGIN
										update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
											cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
											and OlderThan5Days = @5DaysOld and OlderThan2Days = @2DaysOld and isnull(DelTripSequenceNo,0)=0)
									END
								END
								ELSE
								BEGIN
									update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
											cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
											and OlderThan5Days = @5DaysOld and isnull(DelTripSequenceNo,0)=0)
								END
							END
							ELSE
							BEGIN
								update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
											cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and OlderThan10Days = @10DaysOld 
											and isnull(DelTripSequenceNo,0)=0)
							END
						END
						ELSE
						BEGIN
							update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = (select top 1 DensityGroupNo from #DensityGroups where 
											cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0)
						END
					--UPDATE #DensityGroups SET DelTripSequenceNo=@c WHERE DensityGroupNo = @c AND CAST(OldestBookingDate AS DATE) = CAST(@OldBkgDt AS DATE) AND ISNULL(DelTripSequenceNo,0)=0 
				END
				else 
				Begin
					--select @OldBkgDt
					update #DensityGroups set DelTripSequenceNo=@c where cast(OldestBookingDate as date)=cast(@OldBkgDt as date) and isnull(DelTripSequenceNo,0)=0
				End
			set @c=@c+1
			End  
			update sds.tblTripDensityDtls set DelTripSequenceNo =o.DelTripSequenceNo
				from sds.tblTripDensityDtls t1 inner join sds.tblTripDensityHdr da on t1.TripId=da.TripId
				inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date) 
				and o.DensityGroupNo=t1.DensityGroupNo
				WHERE	o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)
			
			drop table #DensityGroups
		End
	End
select @TripId
END






GO
/****** Object:  StoredProcedure [SDS].[usp_TripDataDensityAnalysisDelSeqForCaseOD]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [SDS].[usp_TripDataDensityAnalysisDelSeqForCaseOD]  
--declare  
@ClusterId bigint,  
@CaseNo nvarchar(50),  
@TripDate datetime,  
@DistributorId int,  
@StaffRefNo numeric(17,0),  
@VehicleId bigint,  
@TripStatus varchar(50),  
@CreatedBy varchar(50),  
@OrderNotbl sds.OrderForDensity readonly,  
@TripId bigint output  
  
as  
  
BEGIN  
SET FMTONLY OFF  
 SET @TripId = 0  
 declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint,   
 @GroupCode VARCHAR(3)='', @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)  
  
 select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId  
 SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId  
 SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
 --select @VehCapacity, @NoOfTrips  
  
 select @NoOfTrips=isnull(max(DensityGroupNo),0) from @OrderNotbl  
 -- Delete old data for same distributor   
 delete from sds.tblTripDensityDtls where TripId in (select tripId from sds.tblTripDensityHdr where DistributorId=@DistributorId and ClusterId=@ClusterId )  
 delete from sds.tblTripDensityHdr where DistributorId=@DistributorId and ClusterId=@ClusterId   
 if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode  
 --select @NoOfTrips  
 set @cnt=1  
 --if not exists(select 1 from sds.tblDensityAnalysis where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))  
 Begin   
  --select 1  
  while (@cnt<=@NoOfTrips)  
  Begin  
   --select @cnt  
   set @TripDtlsId=0;   
   INSERT INTO sds.tblTripDensityHdr(CaseNo,TripDate,DistributorId,ClusterId,StaffRefNo,VehicleId,TripStatus,GodownId,GLatitude,GLongitude)  
   VALUES(@CaseNo,@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@VehicleId,@TripStatus,@Gdid, @GdLati, @GdLongi)  
  
   set @TripId = scope_identity()  
     
   if (isnull(@TripId,0)>0)  
   Begin      
    ---- Insert Trip Details for included orders  
    insert into sds.tblTripDensityDtls(TripId,DensityGroupNo,SequenceNo,OrderRefNo,UniqueConsumerId,DelTripSequenceNo,KM_Air,KM_Road)  
    select @TripId,nt.DensityGroupNo, nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,nt.DelTripSequenceNo,  
     (select max(KMAir) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMAir,  
     (select max(KMRoad) from @OrderNotbl where DensityGroupNo=nt.DensityGroupNo) KMRoad      
    from @OrderNotbl nt left outer join   
    (select d.orderrefNo from sds.tblTripDensityDtls d inner join sds.tblTripDensityHdr h on d.tripId=h.tripId   
    where h.DistributorId=@DistributorId and h.CaseNo=@CaseNo and cast(h.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo  
    where nt.DensityGroupNo=@cnt and ot.OrderRefNo is null order by nt.SequenceNo  
    set @TripDtlsId=@@rowcount  
      
    set @strquery=( '  
    update sds.tblTripDensityDtls set PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,  
    OrderStatus=o.OrderStatusCode      
    from sds.tblTripDensityDtls t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo  
    WHERE o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'')   
    and t1.TripId=' + convert(nvarchar(30),@TripId))      
    --print @strquery  
    exec (@strquery)  
   End    
  
  set @cnt=@cnt+1  
  End  
   
  set @cnt=1  
   
  -- Assign Delivery Sequence for Case 3 Ageing and Density...  
  if exists(select 1 from sds.tblTripDensityHdr where DistributorId=@DistributorId and CaseNo=@CaseNo and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))  
  Begin  
   IF OBJECT_ID('tempdb..#DensityGroups') IS NOT NULL DROP TABLE #DensityGroups  
   create table #DensityGroups(CaseNo nvarchar(50), TripDate datetime, DistributorId int, ClusterId bigint, DensityGroupNo int, NoOfBookings int,   
   OldestBookingDate datetime,OlderThan10Days int, OlderThan5Days int, OlderThan2Days int, Upto2Days int,KM_Air int, DelTripSequenceNo int)  
  
   insert into #DensityGroups(CaseNo, TripDate, DistributorId, ClusterId, DensityGroupNo, NoOfBookings, OldestBookingDate,OlderThan10Days, OlderThan5Days,   
    OlderThan2Days, Upto2Days,KM_Air, DelTripSequenceNo)  
   SELECT da.CaseNo, cast(da.TripDate as date) TripDate, da.DistributorId, da.ClusterId,   
    dad.DensityGroupNo, COUNT(dad.OrderRefNo) AS NoOfBookings, MIN(dad.OrderDate) AS OldestBookingDate,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)>10) then 1 else 0 end) OlderThan10Days,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)>5 and datediff(dd,dad.OrderDate,@TripDate)<=10) then 1 else 0 end) OlderThan5Days,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)>2 and datediff(dd,dad.OrderDate,@TripDate)<=5) then 1 else 0 end) OlderThan2Days,  
    sum(case when (datediff(dd,dad.OrderDate,@TripDate)<=2) then 1 else 0 end) Upto2Days,  
    Isnull(max(dad.KM_Air),0) KM_Air, dad.DelTripSequenceNo  
   FROM sds.tblTripDensityHdr AS da INNER JOIN sds.tblTripDensityDtls AS dad ON da.TripId = dad.TripId  
   where da.DistributorId=@DistributorId and (da.ClusterId=@ClusterId) and cast(da.TripDate as date)=cast(@TripDate as date)  
    and (isnull(da.CaseNo,'')=@CaseNo)  
   GROUP BY da.CaseNo, cast(da.TripDate as date), da.DistributorId, da.ClusterId, dad.DensityGroupNo, dad.DelTripSequenceNo  
     
   declare @OldBkgDt datetime, @NoofTrips1 int, @c int =1, @MinDensity int,@10DaysOld int = 0,@5DaysOld int = 0, @2DaysOld int = 0,@Upto2Days int =0;  
   select @NoofTrips1=NoOfTrip from sds.tblDeliveryBoyClusterMapping where ClusterId=@ClusterId  
   select @OldBkgDt= min(cast(OldestBookingDate as date))  from #DensityGroups where isnull(DelTripSequenceNo,0)=0 --group by cast(OldestBookingDate as date)  
   select @MinDensity = (select min(KMAir) from @OrderNotbl)  
   select @5DaysOld = (select max(OlderThan5Days) from #DensityGroups)  
   select @2DaysOld = (select max(OlderThan2Days) from #DensityGroups)  
   SELECT @Upto2Days = (select max(Upto2Days) from #DensityGroups)  
    
   While (@c<=@NoofTrips1)  
   Begin  
    --set density group no  
    update #DensityGroups set DelTripSequenceNo=@c where DensityGroupNo = @c and isnull(DelTripSequenceNo,0)=0  
   set @c=@c+1  
   End    
   update sds.tblTripDensityDtls set DelTripSequenceNo =o.DelTripSequenceNo  
    from sds.tblTripDensityDtls t1 inner join sds.tblTripDensityHdr da on t1.TripId=da.TripId  
    inner join #DensityGroups o on o.DistributorID=da.DistributorId and o.ClusterId=da.ClusterId and cast(o.TripDate as date)=cast(da.TripDate as date)   
    and o.DensityGroupNo=t1.DensityGroupNo  
    WHERE o.DistributorId=@DistributorId and o.ClusterId=@ClusterId and cast(o.TripDate as date)=cast(@TripDate as date)  
     
   drop table #DensityGroups  
  End  
 End  
select @TripId  
END  
  
  
  
  
  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_TripDistributorsAddRemove]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_TripDistributorsAddRemove]
@DistributorId int,
@Flag varchar(10),
@RetValue int output
as
BEGIN
	set @RetValue=0
	if (@Flag='ADD')
	Begin
		if not exists(select * from sds.tblTripDistributors where DistributorId=@DistributorId)
		Begin
			insert into sds.tblTripDistributors(DistributorId,JDEDistributorCode,DistributorName,LastUpdatedDate)
			select DistributorId,JDEDistributorCode,DistributorName,getdate() from DCMS.tblDistributorMaster where DistributorId=@DistributorId
			set @RetValue=SCOPE_IDENTITY()
		End
		else
			set @RetValue=-1
	End
	else if(@Flag='DELETE')
	Begin
		delete from sds.tblTripDistributors where DistributorId=@DistributorId
		set @RetValue=1
	End
	else
		set @RetValue=-1
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TripExpectedStockAdd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--- Save Expected Stock for a day for trip planning

CREATE PROCEDURE [SDS].[usp_TripExpectedStockAdd]
@DistributorId int,
@ExpStockDate datetime,
@PriceCode numeric(17,0),
@ExpStockQty int,
@LastUpdateBy varchar(20),
@RtnResult int Output

AS
BEGIN
	declare @ItemCode int
	select @ItemCode=ItemCode from DCMS.tblItemPriceCodeMap with(nolock)  where PriceCode=@PriceCode

	IF NOT EXISTS(SELECT 1 FROM SDS.tblTripExpectedStock es with(nolock) WHERE es.PriceCode = @PriceCode AND es.DistributorId = @DistributorId AND CAST(es.ExpStockDate as DATE) = CAST(@ExpStockDate as DATE))
		BEGIN
			INSERT INTO SDS.tblTripExpectedStock(DistributorID,ExpStockDate,PriceCode,ItemId,ExpStockQty,LastUpdateBy,LastUpdateDateTime)
			VALUES (@DistributorID,@ExpStockDate,@PriceCode,@ItemCode,@ExpStockQty,@LastUpdateBy,getdate())
			set @RtnResult =@DistributorId
		END
	ELSE
		BEGIN
			UPDATE	SDS.tblTripExpectedStock
			SET		ExpStockQty = @ExpStockQty,
					LastUpdateBy=@LastUpdateBy,
					LastUpdateDateTime = GETDATE()
			WHERE	PriceCode = @PriceCode AND DistributorId = @DistributorId AND CAST(ExpStockDate as DATE) = CAST(@ExpStockDate as DATE)
			SET @RtnResult =@@ROWCOUNT
		END

END



GO
/****** Object:  StoredProcedure [SDS].[usp_TripGenerationReport]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Proc [SDS].[usp_TripGenerationReport]  
  
As  
BEGIN    
SET FMTONLY OFF    
 IF OBJECT_ID('tempdb..#Rpt') IS NOT NULL DROP TABLE #Rpt    
 create table #Rpt(id int identity,DistributorId int, DistributorCode nvarchar(50), DistributorName nvarchar(200),PendOrders Int, ValidOrders int, PossDel int,   
 TripsGen int, TripsComp int, TripsPending int)  
   
 insert into #Rpt(DistributorId, DistributorCode, DistributorName,PossDel)  
 Select d.DistributorId,d.JDEDistributorCode,d.DistributorName, sum(isnull(dc.NoOfTrip,0)*isnull(v.RTOCapacity,0)) PossDel  
 From DCMS.tblDistributorMaster d inner join SDS.tblClusterMaster c on d.DistributorId=c.DistributorId  
 inner join SDS.tblDeliveryBoyClusterMapping dc on c.ClusterId=dc.ClusterId  
 left outer join sds.tblVehicleDeliveryBoyMapping vd on dc.StaffRefNo=vd.DeliveryBoyId    
 left outer join sds.tblVehicleMaster v on vd.VehicleId=v.VehicleId  
 inner join SDS.tblOnBoardingCompleted ob with (nolock) on d.DistributorId=ob.DistributorId  
 where isnull(IsDistributorLive,'')='Y' and (d.DistributorName not like 'INACTIVE%') and (d.DistributorName not like 'ND%')  
 and ob.IsOnBoardingStage1=2  
 Group by d.DistributorId,d.JDEDistributorCode,d.DistributorName  
  
 --Pending and Incluster Booking  
 declare @c int=1, @c1 int, @Did int  
 select @c1=max(id) from #Rpt  
  
 IF OBJECT_ID('tempdb..#BKgs') IS NOT NULL DROP TABLE #BKgs      
 create table #BKgs(id int identity,DistributorId int, TotalBookings int, InCluster int)  
  
 while (@c<=@c1)  
 Begin  
  --truncate table #PendValidBKgs  
  select @Did=DistributorId from #Rpt where id =@c  
  
  DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)=''      
  SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @Did      
  if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode      
      
  set @strquery=( ' insert into #BKgs (DistributorId, TotalBookings, InCluster)       
  select c.DistributorId, count(o.UniqueConsumerId) TotalBookings,      
   sum(case when (isnull(cd.InCluster,0)=1 and c.ClusterId=cd.ClusterId) then 1 else 0 end) InCluster     
  from sds.tblClusterMaster c WITH (NOLOCK) left outer join SDS.tblAreaClusterMapping acm with(nolock) on c.ClusterId=acm.AreaClusterId      
   left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on acm.AreaRefNo=o.AreaRefNo      
   INNER JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode       
   INNER JOIN sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y''      
   left outer join SDS.tblConsumerDetails cd with(nolock) on cd.UniqueConsumerId = o.UniqueConsumerId   
  where c.IsActive=''Y'' and cd.ConsumerStatus=''Active'' AND (o.OrderStatusCode IN (''0'', ''OPEN'', ''AGEN'', ''APRN''))   
   and c.DistributorId= '+convert(nvarchar(25),@Did)+'   
  group by c.DistributorId ' )      
 --print @strquery      
 exec (@strquery)  
 set @c=@c+1  
 End  
  
 update #Rpt set PendOrders=p.TotalBookings, ValidOrders=p.InCluster  
 from #Rpt r inner join #BKgs p on r.DistributorId=p.DistributorId  
  
 update #Rpt set TripsGen=isnull(t1.TripGenerated,0), TripsComp=isnull(TripCompleted,0),   
 TripsPending=isnull(t1.TripGenerated,0) - isnull(TripCompleted,0)    
 from #Rpt r Left outer Join (    
  select DistributorId, count(TripId) TripGenerated, sum(case tripstatus when 'COMPLETED' then 1 else 0 end) TripCompleted     
  from sds.tblTripPlanning t   
  where cast(t.TripDate as date) =cast(getdate() as date)    
  group by t.DistributorId    
 ) t1  on t1.DistributorId=r.DistributorId    
     
 Select zo.ZOCode,zo.ZOName,ro.ROCode,ro.ROName, d.SACode, sa.SAName,r.DistributorCode,r.DistributorName,c.CityName,  
 isnull(r.PendOrders,0) PendOrders,isnull(r.ValidOrders,0) ValidOrders,isnull(r.PossDel,0) PossDel,isnull(r.TripsGen,0) TripsGen,isnull(r.TripsComp,0) TripsComp,  
 isnull(r.TripsPending,0) TripsPending,CASE WHEN td.DistributorId IS NOT NULL THEN 1 ELSE 0 END AS IsActive  
 FROM SDS.tblZOMaster zo WITH(NOLOCK) INNER JOIN  
  SDS.tblROMaster ro WITH(NOLOCK) ON ro.ZOCode=zo.ZOCode INNER JOIN  
  SDS.tblSAMaster sa WITH(NOLOCK) ON sa.ROCode=ro.ROCode INNER JOIN   
  HPCLDCMS.DCMS.tblDistributorMaster d WITH(NOLOCK) ON sa.SACode collate database_Default =d.SACode INNER JOIN  
  DCMS.tblCityMaster c WITH(NOLOCK) on d.CityCode = c.CityCode INNER JOIN  
  #Rpt r on d.DistributorId = r.DistributorId
  LEFT OUTER JOIN SDS.tblTripDistributors td with(nolock) on d.DistributorId = td.DistributorId
  Order by  TripsGen desc   
    
 drop table #BKgs  
 drop table #Rpt   
     
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_TripNotIncludedConsumerList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_TripNotIncludedConsumerList]
--declare
@DistributorId int,
@ClusterId bigint,
@TripDate datetime
--set @DistributorId=15139; set @ClusterId=43; set @TripDate='2020-02-13'

as

BEGIN

	SELECT   ni.TripPlanNotIncludedId, t.DistributorId, ni.TripDate, t.ClusterId, cl.AreaClusterName, ni.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, 
		c.MobileNo,	c.Address, c.Pin, c.Latitude, c.Longitude, c.Source, ni.OrderRefNo,  ni.OrderNo,  ni.OrderDate, c.AreaRefNo, c.AreaName, 
		isnull(ni.IsUpdated,0) IsUpdated, isnull(c.InCluster,0) InCluster, isnull(c.inTradingArea,0) inTradingArea, isnull(c.IsVerified,0) IsVerified
	FROM SDS.tblTripPlanningNotIncluded AS ni INNER JOIN SDS.tblConsumerDetails AS c ON ni.UniqueConsumerId = c.UniqueConsumerId INNER JOIN
		SDS.tblTripPlanning AS t ON t.TripId = ni.TripId INNER JOIN SDS.tblClusterMaster AS cl ON t.ClusterId = cl.ClusterId
	WHERE (t.DistributorId = @DistributorId) AND (t.ClusterId = @ClusterId or @ClusterId = 0) and cast(ni.TripDate as date) =cast(@TripDate as date)

END


GO
/****** Object:  StoredProcedure [SDS].[usp_TripPlanningCardData]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [SDS].[usp_TripPlanningCardData] --14193,'2021-09-06',73
--declare
@DistributorId int,
@TripDate datetime,
@ClusterId bigint
--set @DistributorId=14193; set @TripDate='2023-12-11'; set @ClusterId=0
as

SET FMTONLY OFF

-----Get Pending Orders and Backlog
Begin
	set FMTONLY OFF
	DECLARE @GroupCode VARCHAR(3)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	IF OBJECT_ID('tempdb..#TotOdr') IS NOT NULL DROP TABLE #TotOdr
	create table #TotOdr(ClusterId int, PendingOrders int)
	IF OBJECT_ID('tempdb..#TotSale') IS NOT NULL DROP TABLE #TotSale
	create table #TotSale(ClusterId int, TotalSale int, AvgDailySale float)
	IF OBJECT_ID('tempdb..#Tottrp') IS NOT NULL DROP TABLE #Tottrp
	create table #Tottrp(DistributorId int, areaclusterId bigint, TrpSale int)

	declare @Str varchar(max)= 'insert into #TotOdr
	select ac.areaclusterId, count(OrderRefNo) PendingOrders  
	from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo
	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	and (o.OrderStatusCode in ( ''AGEN'',''APRN'',''OPEN'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
	group by ac.areaclusterId'--and cast(o.orderdate as date)>=DATEadd(dd,-(select NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	print (@Str)
	exec (@Str)
	insert into #Tottrp(DistributorId, areaclusterId, TrpSale)
	select ac.DistributorId,ac.areaclusterId, count(o.OrderRefNo) TrpSale
	from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
	where (ac.DistributorId=@DistributorId) 
	and (o.OrderStatusCode in ( 'DLVD')) and (ac.areaclusterId=@ClusterId or convert(nvarchar(20),@ClusterId)=0)
	and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	group by ac.DistributorId, ac.areaclusterId

	declare @Str1 varchar(max)= 'insert into #TotSale
	select ac.areaclusterId, count(o.OrderRefNo)+TrpSale TotalSale,
	round((count(o.OrderRefNo)+ TrpSale)/(select top 1 convert(float,NoOfDaysForBacklog) from SDS.tblAppConfigData),2) AvgSale
	from sds.tblAreaClusterMapping ac left outer join DCMS.tblRefillOrderDtls'+@GroupCode+'  o WITH (NOLOCK) on ac.AreaRefNo=o.AreaRefNo 
	left outer join #Tottrp r2 on o.DistributorId=r2.DistributorId and ac.areaclusterId=r2.areaclusterId
	where (ac.DistributorId='+convert(nvarchar(20),@DistributorId) +') 
	and (o.OrderStatusCode in ( ''DLVD'')) and (ac.areaclusterId='+convert(nvarchar(20),@ClusterId) +' or '+convert(nvarchar(20),@ClusterId) +'=0)
	and cast(o.ActualDeliveryDate as date)>=DATEadd(dd,-(select top 1 NoOfDaysForBacklog from SDS.tblAppConfigData),getdate())
	group by ac.areaclusterId,TrpSale'
	print (@Str1)
	exec (@Str1)
End---------------------------

SELECT  t.DistributorId, t.ClusterId,SDS.fn_CamelCase( c.AreaClusterName ) as AreaClusterName, 
isnull(o.PendingOrders,0) PendingOrders, ceiling (isnull(o.PendingOrders,0)/convert(float,isnull(nullif(v.RTOCapacity,0),1))) WithTrips,
isnull(dc.NoOfTrip,0)*isnull(v.RTOCapacity,0) MaxDeliveries, 
isnull(dc.NoOfTrip,0) NoOfTrips, round(isnull(s.AvgDailySale,0),0) AvgDailySale,round(Isnull(isnull(o.PendingOrders,0)/isnull(nullif(s.AvgDailySale,0),1),0),2) BackLog, 
(isnull(dc.NoOfTrip,0)) - (ceiling (isnull(o.PendingOrders,0)/convert(float,isnull(nullif(v.RTOCapacity,0),1)))) AvailableTrips,
t.VehicleId, v.VehicleNo, v.RTOCapacity, t.StaffRefNo, SDS.fn_CamelCase(t.StaffName) as StaffName, 
t.TripId, t.TripNo, t.TripDate,   t.TotalOrders, t.TripStatus, td.PriceCode, 
case when (td.IsPODHD='POD') then 'POD Area' else SDS.fn_CamelCase(td.ItemDesc) end as ItemDesc , count( td.TripPlanningDetId) OrderCount,
(select count(TripPlanningDetId) from  SDS.tblTripPlanningDetails where FromDistributorId>0 and TripId=t.TripId group by tripId) TransferedBooking, 
(select count( distinct tripid) from SDS.tblTripPlanning where ClusterId=t.clusterId  and cast(TripDate as date)=cast(@TripDate as date)) GeneratedTrips, 
(select count (distinct OrderRefNo) NotIncludedCount from sds.tblTripPlanningNotIncluded ni inner join sds.tblTripPlanning t1 on t1.tripid=ni.tripid
where t1.DistributorId = t.DistributorId and ClusterId=t.clusterId  and cast(t1.TripDate as date)=cast(@TripDate as date)) NotIncludedCount,
isnull(t.GodownId, '0') GodownId, g.GodownAddress GodownAddress, t.GLatitude GodownLat, t.GLongitude GodownLong, isnull(upper(IsExtraTrip),'N') as IsExtraTrip,
isnull(ct.TripId,0) as CurrentTripId, isnull(ct.TripNo,'0') as CurrentTripNo
into #Result
  
FROM SDS.tblClusterMaster AS c left outer join SDS.tblDeliveryBoyClusterMapping AS dc on c.clusterId=dc.ClusterId 
	LEFT OUTER JOIN SDS.tblTripPlanning AS t INNER JOIN
	SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId INNER JOIN
	SDS.tblTripPlanningDetails AS td ON t.TripId = td.TripId ON c.ClusterId = t.ClusterId
	left outer join #TotOdr o on c.ClusterId=o.ClusterId 
	left outer join #TotSale s on c.ClusterId=s.ClusterId
	left outer join sds.tblDistributorGodown g on c.GodownId=g.GodownId
	left outer join   
	(  
	select ClusterId, TripId, replace(TripNo,'TRP/0','') as TripNo from SDS.tblTripPlanning   
	where DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date) and TripStartDate is not null and TripEndDate is null  
	) ct on ct.ClusterId=c.ClusterId  

where t.DistributorId =@DistributorId and cast(t.TripDate as date)=cast(@TripDate as date)
	and (t.ClusterId=@ClusterId or @ClusterId=0)
group by t.ClusterId, c.AreaClusterName, t.TripId, t.TripNo, t.TripDate, t.DistributorId, t.StaffRefNo, t.VehicleId, t.TotalOrders,
	 t.TripStatus,  v.VehicleNo, v.RTOCapacity, t.StaffName, td.PriceCode, td.ItemDesc, o.PendingOrders, s.AvgDailySale,dc.NoOfTrip,td.IsPODHD,
	 t.GodownId, g.GodownAddress, t.GLatitude, t.GLongitude,IsExtraTrip,isnull(ct.TripId,0), isnull(ct.TripNo,'0')

select r.*, 
case when BackLog <=1.5 then 'Excellent' when (BackLog >1.5 and BackLog <=2) then 'Good' when (BackLog >2 and BackLog <=3) Then 'Average'
when (BackLog >3) then 'Bad' End DelPerformance,
case when AvailableTrips>=0 then 'Less Booking, Trips Available' else 'Shortfall of Trips' End TripsAvailRemark,
case when AvailableTrips=0 then 'No Trips Can Be Used For Another Cluster.'
when AvailableTrips> 0 then convert(nvarchar(3),AvailableTrips) + ' Trips Can Be Used For Another Cluster.'
else 'Infrastructure Insufficient ' End Remark
from #Result r order by r.AreaClusterName

drop table #TotOdr
drop table #TotSale
drop table #Tottrp
drop table #Result




GO
/****** Object:  StoredProcedure [SDS].[usp_TripPlanningDataForProd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
------[SDS].[usp_TripPlanningDataForProd] 14145, 113  
CREATE PROCEDURE [SDS].[usp_TripPlanningDataForProd]    
--DECLARE    
@DistributorId INT,  
@ClusterId BIGINT  
--SET @DistributorId=14145; SET @ClusterId=0;  
  
AS    
BEGIN     
	SET FMTONLY OFF    
	DECLARE @GroupCode VARCHAR(3)='',@strquery VARCHAR(max),@SameClusterFlag NVARCHAR(10),@StrCond NVARCHAR(1000)  
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId  
	IF (ISNULL(@GroupCode,'')='') SET @GroupCode='' ELSE SET @GroupCode='$'+@GroupCode  
    
	SELECT @SameClusterFlag=ISNULL([Value],'Y') FROM SDS.tblAppConfiguration WHERE [key]='Trip-InSameCluster'  
	IF (@SameClusterFlag='Y') SET @StrCond='  AND dc.ClusterId = c.ClusterId '  ELSE SET  @StrCond=' '    
    
	IF OBJECT_ID('tempdb..#odrDtls') IS NOT NULL DROP TABLE #odrDtls    
	CREATE TABLE #odrDtls(id INT IDENTITY,DistributorID INT,BackLogdays INT,VehicleId BIGINT,VehicleNo NVARCHAR(50),ClusterId BIGINT,    
	StaffRefNo NUMERIC(17, 0),AreaRefNo NUMERIC(17, 0),OrderRefNo NUMERIC(17, 0),OrderNo INT,OrderDate DATETIME,CreatedDate DATETIME,  
	UniqueConsumerId NUMERIC(17, 0),ConsumerNo INT,ConsumerName VARCHAR(100),AreaName VARCHAR(100),Latitude NVARCHAR(50),Longitude NVARCHAR(50),  
	NatureCode VARCHAR(2),PriceCode INT,VehCapacity INT,NoOfTrips INT, orderStatus NVARCHAR(10),tripid bigint,TripNo nvarchar(10),TripDate datetime,  
	StaffName nvarchar(250), GodownId nvarchar(20),GLatitude nvarchar(50), GLongitude nvarchar(50), SequenceNo int)    
     
	--	DECLARE @Sourcestr NVARCHAR(1000)='',@Sourcestr2 NVARCHAR(1000)=''  
	--	BEGIN  ---for trip only    
	--SET @Sourcestr= (SELECT ISNULL((STUFF((SELECT ', ' + CASE WHEN LOWER(SourceName)= 'hppay' THEN 'NULLIF(HPPayLatitude,'''')'     
	--WHEN LOWER(SourceName)= 'vitaran' THEN 'NULLIF(VitaranLatitude,'''')' WHEN LOWER(SourceName)= 'miapp' THEN 'NULLIF(MILatitude,'''')'    
	--WHEN LOWER(SourceName)= 'auto' THEN 'NULLIF(AutoLatitude,'''')' WHEN LOWER(SourceName)= 'manual' THEN 'NULLIF(ManualLatitude,'''')'    
	--WHEN LOWER(SourceName)= 'ezygas' THEN 'NULLIF(EzygasLatitude,'''')' END FROM SDS.tblConsumerGCSequenceNo  
	--WHERE DistributorId=0 ORDER BY TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)  
    
	--SET @Sourcestr2= (SELECT ISNULL((STUFF((SELECT ', ' + CASE WHEN LOWER(SourceName)= 'hppay' THEN 'NULLIF(HPPayLongitude,'''')'     
	--when LOWER(SourceName)= 'vitaran' THEN 'nullif(VitaranLongitude,'''')' WHEN LOWER(SourceName)= 'miapp' THEN 'NULLIF(MILongitude,'''')'    
	--when LOWER(SourceName)= 'auto' THEN 'nullif(AutoLongitude,'''')' WHEN LOWER(SourceName)= 'manual' THEN 'NULLIF(ManualLongitude,'''')'    
	--when LOWER(SourceName)= 'ezygas' THEN 'nullif(EzygasLongitude,'''')' END FROM SDS.tblConsumerGCSequenceNo  
	--WHERE DistributorId=0 ORDER BY TripSequenceNo FOR XML PATH('')),1,1,'')),'') AS SelectArea)  
	--End  
    
	SET @strquery=( '    
	INSERT INTO #odrDtls (DistributorID,BackLogdays,VehicleId,VehicleNo,ClusterId,StaffRefNo,AreaRefNo,OrderRefNo,OrderNo,OrderDate,CreatedDate,    
	UniqueConsumerId,ConsumerNo,ConsumerName,AreaName,Latitude,Longitude,NatureCode,PriceCode,VehCapacity,NoOfTrips,orderStatus,  
	tripid,TripNo,TripDate,StaffName, GodownId,GLatitude, GLongitude, SequenceNo)    
     
	SELECT o.DistributorID,datediff(d,o.OrderDate,getdate()) DaysDelay,vd.VehicleId,v.VehicleNo,dc.ClusterId,    
		dc.StaffRefNo,o.AreaRefNo,o.OrderRefNo,o.OrderNo,o.OrderDate,GETDATE(),o.UniqueConsumerId,c.ConsumerNo,c.ConsumerName,da.AreaName,     
		c.Latitude, c.Longitude, o.NatureCode,o.PriceCode,v.RTOCapacity,dc.NoOfTrip,o.OrderStatusCode,  
		trp.tripid,trp.TripNo,trp.TripDate,dl.StaffName, trp.GodownId,trp.GLatitude, trp.GLongitude, trp.SequenceNo   
	FROM DCMS.tblRefillOrderDtls'+@GroupCode+' o WITH (NOLOCK) INNER JOIN     
		SDS.tblConsumerDetails c WITH (NOLOCK) ON c.UniqueConsumerId=o.UniqueConsumerId INNER JOIN    
		DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode=i.PriceCode INNER JOIN    
		SDS.tblactiveitems ai WITH (NOLOCK) ON o.pricecode=ai.pricecode AND ISNULL(ai.Active,''N'')=''Y'' INNER JOIN    
		SDS.tblAreaClusterMapping acm WITH (NOLOCK) ON acm.AreaRefNo=o.AreaRefNo INNER JOIN    
		SDS.tblDeliveryBoyClusterMapping dc WITH (NOLOCK) ON dc.ClusterId=acm.AreaClusterId INNER JOIN    
		SDS.tblVehicleDeliveryBoyMapping vd WITH (NOLOCK) ON dc.StaffRefNo=vd.DeliveryBoyId INNER JOIN    
		SDS.tblVehicleMaster v WITH (NOLOCK) ON v.VehicleId=vd.VehicleId INNER JOIN    
		DCMS.tblDistributorAreaMaster da WITH (NOLOCK) ON da.AreaRefNo=o.AreaRefNo LEFT OUTER JOIN    
		SDS.tblCDCMSAreaPODDetails pod ON o.AreaRefNo=pod.AreaRefNo AND o.DistributorID=pod.DistributorId   
		left outer join DCMS.tblDistributorStaffDetails dl on dc.StaffRefNo=dl.StaffRefNo     
		left outer join   
		(	select t.DistributorId,t.ClusterId,t.TripId, t.TripNo, t.TripDate,  t.StaffName,t.GodownId, t.GLatitude, t.GLongitude, 
			td.SequenceNo, td.UniqueConsumerId,td.OrderRefNo  
			from sds.tblTripPlanning t inner join sds.tblTripPlanningdetails td on t.TripId=td.TripId  
			where t.DistributorId='+ CONVERT(NVARCHAR(25),@DistributorId) +' 
			and ( t.ClusterId='+ CONVERT(NVARCHAR(25),@ClusterId) +' or '+ CONVERT(NVARCHAR(25),@ClusterId) +'=0) and cast(TripDate as date)=cast(getdate() as date)
		) trp on o.DistributorId=trp.DistributorId and dc.ClusterId=trp.ClusterId and o.OrderRefNo=trp.OrderRefNo  
   
	WHERE c.ConsumerStatus=''Active'' AND o.DistributorID = '+ CONVERT(NVARCHAR(25),@DistributorId) +  
		' AND ( dc.ClusterId='+ CONVERT(NVARCHAR(25),@ClusterId) +' or '+ CONVERT(NVARCHAR(25),@ClusterId) +'=0) 
		AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') AND i.ItemCode IN (SELECT ItemId FROM SDS.tblDistributorItemPrice WHERE DistributorID = '
		+ CONVERT(NVARCHAR(25),@DistributorId) +')     AND UPPER(LTRIM(RTRIM(ISNULL(pod.DeliveryType,''''))))<>''POD''')  
    
	SET @strquery=@strquery + @StrCond  
	PRINT @strquery  
	EXEC (@strquery)  
  
	select DistributorID, BackLogdays, ClusterId, StaffRefNo, StaffName, VehicleId, VehicleNo, VehCapacity, NoOfTrips, AreaRefNo, AreaName,   
	OrderRefNo, OrderNo, OrderDate, orderStatus, UniqueConsumerId, ConsumerNo, ConsumerName, Latitude, Longitude, NatureCode, PriceCode,   
	tripid, TripNo, TripDate, SequenceNo, GodownId, GLatitude, GLongitude  
	from #odrDtls  
  
DROP TABLE #odrDtls  
   
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TripPlanningSaveExtraTrip]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_TripPlanningSaveExtraTrip]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@VehCapacity int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForTrip readonly,
@TripId bigint output

as

BEGIN

--insert into @OrderNotbl(0,0,1141419300000001,5201419300026548,9110828800019916,0,0)
--insert into @OrderNotbl(1,0,1141419300000001,5201419300030286,9110828800029425,0,0)
--insert into @OrderNotbl(2,0,1141419300000002,1201419300029999,9110828800017814,0,0)
--insert into @OrderNotbl(3,0,1141419300000001,5201419300031151,1161419300000657,0,0)
--insert into @OrderNotbl(4,0,1141419300000001,5201419300030749,1150995400001083,0,0)
--insert into @OrderNotbl(5,0,1141419300000002,5201419300031091,9110828800032231,0,0)
--insert into @OrderNotbl(6,0,1141419300000001,1201419300030023,9110828800026318,0,0)
--insert into @OrderNotbl(7,0,1141419300000001,5201419300030187,1130828800000300,0,0)
--insert into @OrderNotbl(8,0,1141419300000001,5201419300030659,9110828800023145,0,0)
--insert into @OrderNotbl(9,0,1141419300000001,1201419300029953,1120828800000567,0,0)
--insert into @OrderNotbl(10,0,1141419300000001,1201419300030001,9110828800018644,0,0)
--insert into @OrderNotbl(11,0,1141419300000001,5201419300031116,1151419300000723,0,0)
--insert into @OrderNotbl(12,0,1141419300000001,1201419300029994,9110828800015817,0,0)
--insert into @OrderNotbl(13,0,1141419300000001,1201419300029987,9110828800011020,0,0)
--insert into @OrderNotbl(14,0,1141419300000001,5201419300030565,1130014400000053,0,0)
--insert into @OrderNotbl(15,0,1141419300000001,5201419300031044,9110616800051540,0,0)
--insert into @OrderNotbl(16,0,1141419300000001,1201419300030402,9110828800026387,0,0)
--insert into @OrderNotbl(17,0,1141419300000001,1201419300030404,9110828800026384,0,0)
--insert into @OrderNotbl(18,0,1141419300000001,5201419300030681,1140828800000730,0,0)
--insert into @OrderNotbl(19,0,1141419300000001,5201419300028869,9110925400014903,0,0)

	SET @TripId = 0
	declare @NoOfTrips int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='',@GroupCode2 VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50), @TotalOrders int

	--select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
	--select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping 
	--where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
	select @TotalOrders=count(orderrefNo) from @OrderNotbl

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	--set @cnt=1
	--if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
	--select 1
	--while (@cnt<=@NoOfTrips)
	--Begin
	set @TripDtlsId=0;	
	INSERT INTO SDS.tblTripPlanning(TripNo, TripDate, DistributorId, ClusterId, StaffRefNo, StaffName, VehicleId, TotalOrders, TripStatus, 
	CreatedDate, AddiStaffRefNo, AddiStaffName, GodownId,GLatitude,GLongitude,IsExtraTrip)
	VALUES('0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),
	isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi,'Y')

	SET @TripId = SCOPE_IDENTITY()

	if (isnull(@TripId,0)>0)
	Begin 			
	---- Insert Trip Details for included orders
		insert into sds.tblTripPlanningDetails(TripId,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,FromDistributorId,FromClusterId,IsPODHD)
		select top (@VehCapacity) @TripId,nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),nt.FromDistributorId,nt.FromClusterId,'HD'
		from @OrderNotbl nt left outer join 
		(	select d.orderrefNo from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on d.tripId=t.tripId  
		where cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
		where ot.OrderRefNo is null order by nt.SequenceNo

		set @TripDtlsId=@@rowcount

		set @strquery=( '
		update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
		ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
		from sds.tblTripPlanningDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
		inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode				
		WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

		print @strquery
		exec (@strquery)
		
		---	Transfer Booking Update
		declare @FromDistributorId int, @FromClusterId bigint
		if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
		Begin
			select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
			SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
			if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

			set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode					
				WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

			print @strquery
			exec (@strquery)
		End

		if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
		Begin 
			delete from sds.tblTripPlanning where TripId=@TripId 
			set @TripId=-1
		End	
		else
			set @TripId=@TripId
	End

	--set @cnt=@cnt+1
	--End
	
	Begin		---------	Not included orders
		if (isnull(@TripId,0)>0)
		Begin 	
			declare @tCount int, @tminDate datetime, @strNInc varchar(max)='', @strNIncTB varchar(max)=''  
			select @tCount=count(d.TripPlanningDetId), @tminDate=min(d.OrderDate) from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails d on t.Tripid=d.TripId
			where t.clusterId=@ClusterId and cast(t.TripDate as date)=cast(@tripdate as date)

			if (isnull(@tCount,0)<(@VehCapacity*@nooftrips))	set @tminDate=getdate()

			SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
			if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

			set @strNInc=(' 
			insert into sds.tblTripPlanningNotIncluded(TripId,TripDate,OrderRefNo,UniqueConsumerId,PriceCode,AreaRefNo,OrderNo,
			OrderDate,Latitude,Longitude,FromDistributorId,FromClusterId,IsUpdated,LastUpdatedDate)
		
			SELECT	'+convert(nvarchar(20),@TripId)+', '''+convert(nvarchar(50),@TripDate,101)+''',o.OrderRefNo,o.UniqueConsumerId,o.PriceCode,o.AreaRefNo,
				o.OrderNo, o.OrderDate, c.Latitude, c.Longitude, 0, 0, 0, getdate()
			FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) LEFT OUTER JOIN 
			SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
			DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN 
			sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
			SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
			SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId left outer JOIN 
			sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId
			left outer join 
			(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
			on t.TripId=d.TripId and cast(t.TripDate as date)=cast('''+convert(nvarchar(50),@TripDate,101)+''' as date)
			) t on t.OrderRefNo = o.OrderRefNo	
			WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
			AND dc.ClusterId = '+convert(nvarchar(25),@ClusterId)+'  
			and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
			and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
			and o.OrderDate<='''+convert(nvarchar(50),@tminDate,101)+''' AND t.OrderRefNo IS NULL    ')
								
			--print @strNInc
			exec (@strNInc)

			-----	Not included Transfer Booking Update				
																																		
			if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
			Begin
				select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
				SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
				if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

				set @strNIncTB=(' 
				insert into sds.tblTripPlanningNotIncluded(TripId,TripDate,OrderRefNo,UniqueConsumerId,PriceCode,AreaRefNo,OrderNo,
				OrderDate, Latitude, Longitude, FromDistributorId,FromClusterId,IsUpdated,LastUpdatedDate)
		
				SELECT	'+convert(nvarchar(20),@TripId)+', '''+convert(nvarchar(50),@TripDate,101)+''',o.OrderRefNo,o.UniqueConsumerId,o.PriceCode,o.AreaRefNo,
					o.OrderNo, o.OrderDate, c.Latitude, c.Longitude, 0, 0, 0, getdate()
				FROM DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) LEFT OUTER JOIN 
					SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
					DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN 
					sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
					SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
					SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId left outer JOIN 
					sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId
					left outer join 
					(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
					on t.TripId=d.TripId and cast(t.TripDate as date)=cast('''+convert(nvarchar(50),@TripDate,101)+''' as date)
					) t on t.OrderRefNo = o.OrderRefNo	
				WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@FromDistributorId)+' 
					AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
					AND dc.ClusterId = '+convert(nvarchar(25),@FromClusterId)+' 
					and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@FromDistributorId)+')
					and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
					and o.OrderDate<='''+convert(nvarchar(50),@tminDate,101)+''' AND t.OrderRefNo IS NULL    ')
								
			--print @strNIncTB
			exec (@strNIncTB)

			End

		End
	End ---- End Trip Details for included orders
	
	--set @cnt=1
	if exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId 
		and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
	Begin	
		--while (@cnt<=@NoOfTrips)
		--Begin
		SELECT @TodayCount = COUNT(1) FROM sds.tblTripPlanning with(nolock) 
		WHERE DistributorId = @DistributorId AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
		SET @TodayCount = @TodayCount+1
	
		SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
		print @TripNo

		update sds.tblTripPlanning set TripNo=@TripNo 
		where TripId=(select top 1 t.tripid from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on t.TripId=d.TripId 
		where DistributorId=@DistributorId and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

		--set @cnt=@cnt+1
		--End
	End		
	--else
	--Begin
	--	set @TripId=-2
	--End
	End
	return @TripId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TripsCorrectTripNos]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_TripsCorrectTripNos]
--declare
@TripDate datetime

--set @TripDate='2021-02-05'

as

BEGIN
	set FMTONLY OFF
	declare @i int,@j int,@DistributorId int, @ClusterId bigint, @NoOfTrips int,@TripId bigint,@cnt int,@TodayCount int, @TripNo nvarchar(50)

	declare @tblDistCluster table(id int identity(1,1), DistributorId int,ClusterId bigint)
	insert into @tblDistCluster(DistributorId,ClusterId) select distinct DistributorId,ClusterId from sds.tblTripPlanning where cast(TripDate as date)=cast(@TripDate as date) and  isnull(TripNo,'0')='0'
	--declare @tblresult table(id int identity(1,1), DistributorId int,ClusterId bigint,clusterName nvarchar(200), Tripid bigint, TripNo nvarchar(10))

	set @i=1; select @j=max(id) from @tblDistCluster

	while (@i<=@j)
	Begin
		set @DistributorId=0; set @ClusterId=0; set @NoOfTrips=0
		select @DistributorId=DistributorId, @ClusterId=ClusterId from @tblDistCluster where id=@i
		select @NoOfTrips=isnull(NoOfTrip,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId

		if exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date) and  isnull(TripNo,'0')='0')
		Begin	
			set @cnt=1
			while (@cnt<=@NoOfTrips)
			Begin
				SELECT @TodayCount = COUNT(TripId) FROM sds.tblTripPlanning with(nolock) 
				WHERE DistributorId = @DistributorId AND ClusterId=@ClusterId and CAST(TripDate as DATE) = CAST(@TripDate as DATE) and  isnull(TripNo,'0')<>'0'

				SET @TodayCount = @TodayCount+1
				SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)

				set @TripId=(select top 1 t.tripid from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on t.TripId=d.TripId 
							where DistributorId=@DistributorId and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

				update sds.tblTripPlanning set TripNo=@TripNo where TripId=@TripId

				--insert into @tblresult(DistributorId,ClusterId, tripid, TripNo) values (@DistributorId, @ClusterId, @TripId, @TripNo)
				--update @tblresult set clusterName=(select AreaClusterName from sds.tblClusterMaster where DistributorId=@DistributorId and ClusterId=@ClusterId) where DistributorId=@DistributorId and ClusterId=@ClusterId
			
			set @cnt=@cnt+1
			End
		End
	set @i=@i+1
	End

	--select * from @tblresult order by DistributorId, ClusterId, TripNo

END

GO
/****** Object:  StoredProcedure [SDS].[usp_TripSummaryDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
CREATE proc [SDS].[usp_TripSummaryDetails]  
--declare   
@DistributorId int,  
@Tripdate datetime  
--set @DistributorId=14193; set @Tripdate= getdate();--'2020-02-19'  
  
as  
  
BEGIN  
 set FMTONLY OFF  
  
 declare @TripDtls  Table(ClusterId bigint, ClusterName nvarchar(100), StaffrefNo nvarchar(25), StaffName nvarchar(100), VehicleId bigint, VehicleNo Nvarchar(50),  
 TotalTrips int, TotalOrders int, CompletedTrips int, CurrentTripId bigint, CurrentTrip nvarchar(50), CompletedOrders int, PendingOrders int)  
  
 insert into @TripDtls(ClusterId, ClusterName, staffrefNo, StaffName, VehicleId, VehicleNo,TotalTrips,
 CompletedTrips,CurrentTripId,CurrentTrip,TotalOrders, completedOrders, PendingOrders)  
 SELECT c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, v.VehicleNo,count(distinct t.TripId),  
 sum( case when t.TripEndDate is not null then 1 else 0 end ), isnull(ct.TripId,0),isnull(ct.TripNo,'-'), 
 odr.TotalOrders, odr.completedOrders,   
 isnull(odr.TotalOrders,0)- isnull(odr.completedOrders,0)   
 FROM sds.tblClusterMaster c left outer join 
 SDS.tblTripPlanning AS t on c.ClusterId=t.ClusterId LEFT OUTER JOIN
 SDS.tblVehicleMaster AS v ON t.VehicleId = v.VehicleId  
 left outer join   
 (  
  select ClusterId, TripId, TripNo from SDS.tblTripPlanning   
  where DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date) --and TripStartDate is not null 
  and TripEndDate is null  
 ) ct on ct.ClusterId=c.ClusterId  and ct.TripId=t.TripId 
 left outer join   
 (  
  select t.ClusterId,t.TripId, count(d.OrderRefNo) TotalOrders,sum(case d.OrderStatus when 'DLVD' then 1 when 'Deliver' then 1 when 'NotAvailable' then 1 when 'Denied' then 1 else 0 end) completedOrders  
  from SDS.tblTripPlanning AS t inner join SDS.tblTripPlanningDetails d on t.TripId = d.TripId  
  where t.DistributorId=@DistributorId and cast(t.TripDate as date)=cast(@Tripdate as date)  
  group by t.ClusterId,t.TripId 
 ) odr on c.ClusterId=odr.ClusterId and t.TripId=odr.TripId
 where t.DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date)  
 group by  c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, v.VehicleNo,ct.TripId,ct.TripNo, odr.TotalOrders, odr.completedOrders  
   
 select ClusterId, ClusterName, StaffrefNo, StaffName, VehicleId, VehicleNo, TotalTrips, TotalOrders, CompletedTrips, 
 CurrentTripId, CurrentTrip, CompletedOrders, PendingOrders from @TripDtls  

END  
GO
/****** Object:  StoredProcedure [SDS].[usp_TripSummaryDetailsNew]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  sds.usp_TripSummaryDetailsNew 14193, '2024-04-08' ,0   
      
CREATE proc [SDS].[usp_TripSummaryDetailsNew]  
--declare     
@DistributorId int,    
@Tripdate datetime,  
@ClusterId bigint  
--set @DistributorId=14193; set @Tripdate= getdate(); set @ClusterId=70; --'2020-02-19'    
    
as    
    
BEGIN    
set FMTONLY OFF    
    
	declare @TripDtls  Table(ClusterId bigint, ClusterName nvarchar(100), StaffrefNo nvarchar(25), StaffName nvarchar(100), VehicleId bigint, 
	TripId bigint, TripNo varchar(20), TripStatus Varchar(25), TripStartDate datetime, TripEndDate Datetime,
	ClusterPendingBkg int, TotalTripOrders int,	DeliveredOdr int, PendingNotAttdOdr int, SkippedOdr int, TotalPendingOdr int)    

	----TotalTrips int, TotalOrders int, CompletedTrips int, CurrentTripId bigint, CurrentTrip nvarchar(50), CompletedOrders int, PendingOrders int)    

	insert into @TripDtls(ClusterId, ClusterName, staffrefNo, StaffName, VehicleId, TripId,TripNo,TripStatus, TripStartDate,TripEndDate,
	ClusterPendingBkg,TotalTripOrders,DeliveredOdr,PendingNotAttdOdr,SkippedOdr,TotalPendingOdr)    

	SELECT c.ClusterId, c.AreaClusterName ClusterName, t.staffrefNo, t.StaffName, t.VehicleId, t.TripId,t.TripNo, 
		t.TripStatus, t.TripStartDate, t.TripEndDate, pb.PendingOrders ClusterPendingBkg, count(d.orderrefno) TotalTripOrders,
		sum(case when d.OrderStatus in ('DLVD','Deliver') then 1 else 0 end) DeliveredOdr,
		sum(case when d.OrderStatus in ('0','OPEN','AGEN','APRN') then 1 else 0 end) PendingNotAttdOdr,
		sum(case when d.OrderStatus='SKIP' then 1 else 0 end) SkippedOdr,
		sum(case when d.OrderStatus in ('0','OPEN','AGEN','APRN','SKIP') then 1 else 0 end) TotalPendingOdr
	FROM sds.tblClusterMaster c inner join SDS.tblTripPlanning AS t on c.ClusterId=t.ClusterId 		 
		inner join SDS.tblTripPlanningDetails d on t.TripId = d.TripId
		left outer join (	select distinct DistributorId, clusterId, isnull(TotalPendingOrder,0) PendingOrders  
		  from sds.tblDistributorClusterwiseBacklog cb   
		  where DistributorId=@DistributorId and (clusterid=@ClusterId or @ClusterId=0) 
		  and EntryDate=(select max(entrydate) from sds.tblDistributorClusterwiseBacklog where DistributorId=@DistributorId and clusterId=cb.clusterId)   
		) pb on pb.DistributorId=c.DistributorId and pb.clusterId=c.ClusterId	
	
	where t.DistributorId=@DistributorId and cast(tripDate as date)=cast(@Tripdate as date) and (c.ClusterId=@ClusterId or @ClusterId=0)  
	group by  c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, t.VehicleId, 
	t.TripId,t.TripNo, t.TripStatus, t.TripStartDate,t.TripEndDate,pb.PendingOrders 

	select ClusterId, ClusterName, StaffrefNo, StaffName, VehicleId, TripId, TripNo, TripStatus, TripStartDate, TripEndDate,
	ClusterPendingBkg, TotalTripOrders,	DeliveredOdr, PendingNotAttdOdr, SkippedOdr, TotalPendingOdr from @TripDtls

END    
GO
/****** Object:  StoredProcedure [SDS].[usp_TripSummaryForSAATHI]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  sds.usp_TripSummaryForSAATHI 14193, 0   
      
CREATE proc [SDS].[usp_TripSummaryForSAATHI]  
--declare     
@DistributorId int,   
@ClusterId bigint  
--set @DistributorId=14193; set @ClusterId=0; --'2020-02-19'    

as

BEGIN    
set FMTONLY OFF
    
	declare @Trip Table(DistributorId int,ClusterId bigint, ClusterName nvarchar(100), StaffrefNo nvarchar(25), StaffName nvarchar(100), 
	TotalTripOrders int, DeliveredOdr int, PendingNotAttdOdr int, SkippedOdr int, TotalPendingOdr int)   

	insert into @Trip(DistributorId, ClusterId, ClusterName, staffrefNo, StaffName, TotalTripOrders, DeliveredOdr, PendingNotAttdOdr, SkippedOdr, TotalPendingOdr)    
	SELECT c.DistributorId, c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName, count(d.OrderRefNo) TotalTripOrders,
		sum(case when d.OrderStatus in ('DLVD','Deliver') then 1 else 0 end) DeliveredOdr,
		sum(case when d.OrderStatus in ('0','OPEN','AGEN','APRN') then 1 else 0 end) PendingNotAttdOdr,
		sum(case when d.OrderStatus='SKIP' then 1 else 0 end) SkippedOdr,
		sum(case when d.OrderStatus in ('0','OPEN','AGEN','APRN','SKIP') then 1 else 0 end) TotalPendingOdr
	FROM sds.tblClusterMaster c with (nolock) inner join SDS.tblTripPlanning AS t with(nolock) on c.ClusterId=t.ClusterId 		 
		inner join SDS.tblTripPlanningDetails d with (nolock) on t.TripId = d.TripId		
	where t.DistributorId=@DistributorId and cast(tripDate as date)=cast(getdate() as date) and (c.ClusterId=@ClusterId or @ClusterId=0)  
	group by  c.DistributorId,c.ClusterId, c.AreaClusterName, t.staffrefNo, t.StaffName

	select DistributorId,ClusterId, ClusterName, TotalTripOrders, DeliveredOdr, PendingNotAttdOdr, SkippedOdr, TotalPendingOdr 
	from @Trip

END    
GO
/****** Object:  StoredProcedure [SDS].[usp_TripSummaryForSAATHIIsDisLive]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
CREATE proc [SDS].[usp_TripSummaryForSAATHIIsDisLive] 
--declare     
@JDEDistributorCode nvarchar(200)
--set @JDEDistributorCode=''; 
as
BEGIN   
    SELECT convert(int, dl.DistributorId) as DistributorId,dl.JDEDistributorCode,dl.IsDealerLive 
	FROM HPCLDCMS.INTERFACE.tblSDSDealers as dl WHERE JDEDistributorCode=@JDEDistributorCode
END    



GO
/****** Object:  StoredProcedure [SDS].[usp_TriptKMSave]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_TriptKMSave]    
--declare    
@TripIdIn bigint , 
@TripDate datetime,   
@DistributorId int ,    
@TotalKM_SDS decimal(18,2) ,    
@TotalTime_SDS decimal(18,2) ,    
@TotalKM_DelBoy int ,    
@TotalTime_DelBoy decimal(18,2) ,    
@ClusterId bigint ,    
@StaffRefNo numeric(17, 0) ,    
@StaffName nvarchar(200) ,    
@VehicleId bigint ,    
@TotalOrders int ,    
@TripId bigint output    
   
AS    
BEGIN    
    
SET @TripId = 0    
     
 IF NOT EXISTS(SELECT 1 FROM SDS.tblTripKMDetails  with (nolock) WHERE TripId=@TripIdIn and DistributorId=@DistributorId and cast(CreatedDate as date)=cast(@TripDate as date))    
 BEGIN    
 INSERT INTO SDS.tblTripKMDetails (TripId,DistributorId,TotalKM_SDS,TotalTime_SDS,TotalKM_DelBoy,TotalTime_DelBoy,
  ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,CreatedDate,UpdatedDate)    
 VALUES    
  (@TripIdIn, @DistributorId, @TotalKM_SDS, @TotalTime_SDS, @TotalKM_DelBoy, @TotalTime_DelBoy,   
  @ClusterId, @StaffRefNo, @StaffName, @VehicleId, @TotalOrders,@TripDate,GETDATE() )    
END    
    
SET @TripId = SCOPE_IDENTITY()    
    
       
return @TripId    
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningCancelTrip]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_TriptPlanningCancelTrip] 
--DECLARE 
@DistributorId int, 
@ClusterId bigint, 
@TripId bigint, 
@RetValue int 
--SET @DistributorId=14193; SET @ClusterId=70; SET @TripId=0; 
as 
BEGIN 
	DECLARE @TripIds varchar(1000); 
 
	set @RetValue=0 
	if (@TripId>0) 
	BEGIN 
		IF EXISTS(SELECT 1 FROM SDS.tblTripPlanning WHERE TripId = @TripId AND DistributorId=@DistributorId and ClusterId = @ClusterId 
		and CAST(TripDate AS Date) = CAST(GetDate() AS Date) AND (upper(TripStatus) <> upper('TripStarted') AND upper(TripStatus) <> upper('Completed'))) 
		BEGIN 
			DELETE FROM SDS.tblTripPlanningDetails WHERE TripId = (select TripId FROM SDS.tblTripPlanning 
			WHERE DistributorId=@DistributorId and ClusterId= @ClusterId and TripId = @TripId and CAST(TripDate AS Date) = CAST(GetDate() AS Date)) 
 
			DELETE FROM SDS.TblTripPlanningNotIncluded WHERE TripId = (select TripId FROM SDS.tblTripPlanning 
			WHERE DistributorId=@DistributorId and ClusterId= @ClusterId and TripId = @TripId and CAST(TripDate AS Date) = CAST(GetDate() AS Date)) 
 
			DELETE FROM SDS.tblTripPlanning WHERE DistributorId=@DistributorId and ClusterId= @ClusterId and TripId = @TripId and CAST(TripDate AS Date) = CAST(GetDate() AS Date) 
		set @RetValue=1 
		END 
		ELSE 
		BEGIN 
			SET @RetValue = -1 
		END 
	END 
	else 
	BEGIN 
		set @TripIds = (select TOP 1 STUFF((SELECT ', ' + CAST(TripId AS VARCHAR(10)) [text()] FROM [SDS].[tblTripPlanning] t 
		WHERE DistributorId=@DistributorId and ClusterId = @ClusterId and CAST(TripDate AS Date) = CAST(GetDate() AS Date) 
		AND (upper(TripStatus) <> upper('TripStarted') AND upper(TripStatus) <> upper('Completed')) 
		FOR XML PATH(''), TYPE) 
		.value('.','NVARCHAR(MAX)'),1,2,' ') TripIdList 
		FROM [SDS].[tblTripPlanning] WHERE DistributorId=@DistributorId and ClusterId = @ClusterId AND CAST(TripDate AS DATE)= CAST(GetDate() AS DATE)) 
		--select @TripIds 
		IF (@TripIds <> '') 
		BEGIN 
			exec ('DELETE FROM SDS.tblTripPlanningDetails WHERE TripId IN (' + @TripIds +')') 
			exec ('DELETE FROM SDS.TblTripPlanningNotIncluded WHERE TripId IN (' + @TripIds +')') 
 			exec ('DELETE FROM SDS.tblTripPlanning WHERE TripId IN (' + @TripIds +')') 
		set @RetValue=1 
		END 
		ELSE 
		BEGIN 
			SET @RetValue = -1 
		END 
	END 
	IF NOT EXISTS(SELECT 1 FROM SDS.tblTripPlanning WHERE CAST(TripDate AS DATE) = CAST(GETDATE() AS DATE) AND DistributorId = @DistributorId) 
	BEGIN 
		DELETE FROM SDS.tblDistributorWiseActiveTripCase WHERE CAST(TripDate AS DATE) = CAST(GETDATE() AS DATE) AND DistributorId = @DistributorId 
	END 
	Select @RetValue 
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningPODSave]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_TriptPlanningPODSave]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TotalOrders int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@tblPODDtls sds.OrderForTrip readonly,
@TripId bigint output

as
--Begin
--set @ClusterId=43				set @TripDate = N'2020-03-04'		set	@DistributorId = 15139
--set @StaffRefNo = 11611513900000018	set @VehicleId = 10057		set @TripStatus = N'0'		set @CreatedBy = N'0'; set @TripId=0
---------------------data for trip save from route created 	

--insert into @tblPODDtls(SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (1,1161513900000035,0,0,0,0)
--insert into @tblPODDtls(SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (2,1161513900000018,0,0,0,0)
--insert into @tblPODDtls(SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (3,1161513900000029,0,0,0,0)
--End
BEGIN

	SET @TripId = 0
	declare @TripNo nvarchar(50), @TripDtlsId bigint, @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0), @AddiDelBoyName nvarchar(200)
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId

	if exists(select 1 from sds.tblClusterMaster where ClusterId=@ClusterId and regionId=2 and isnull(IsActive,'N')='Y')
	Begin
		if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
		Begin
			SET @TripNo = 'TRP/01'		--- As there will be only one trip for POD area cluster.
			print @TripNo
	
			set @TripDtlsId=0;
			INSERT INTO SDS.tblTripPlanning(TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,TripStatus,CreatedDate,AddiStaffRefNo,AddiStaffName)
			VALUES(@TripNo,@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),@AddiDelBoyId,@AddiDelBoyName)

			SET @TripId = SCOPE_IDENTITY()
			--select @TripId
			if (isnull(@TripId,0)>0)
			Begin
				insert into sds.tblTripPlanningDetails(TripId,SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId, OrderStatus,CreatedBy,CreatedDate,FromDistributorId,FromClusterId,IsPODHD)
				select @TripId,nt.SequenceNo,nt.AreaRefNo,0,0, 0,@CreatedBy,getdate(),nt.FromDistributorId,nt.FromClusterId,'POD'
				from @tblPODDtls nt left outer join 
				(select d.AreaRefNo from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on d.tripId=t.tripId 
					where cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.AreaRefNo=ot.AreaRefNo
				where ot.AreaRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount	
			End
			if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
			Begin 
				delete from sds.tblTripPlanning where TripId=@TripId 
				set @TripId=-1
			End	
			else
				set @TripId=@TripId
		End
		else
		Begin
			set @TripId=-2
		End
	End
	else	set @TripId=-3
	select @TripId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningSave]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_TriptPlanningSave]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TotalOrders int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForTrip readonly,
@TripId bigint output
as

--set @ClusterId =73;set @TripDate =getdate();set @DistributorId =14193;set @StaffRefNo='1141419300000007';set @VehicleId =10093;set @TotalOrders =0;
--set @TripStatus =null; set @CreatedBy =null;

BEGIN

SET FMTONLY OFF
--insert into @OrderNotbl values(0	,18	,1141419300000024,5201419300029630,1151419300000258,0,0);
--insert into @OrderNotbl values(1	,17	,1141419300000024,5201419300028236,9110828800014951,0,0);
--insert into @OrderNotbl values(2	,20	,1141419300000024,5201419300030500,9111005600032945,0,0);
--insert into @OrderNotbl values(3	,1	,1161419300000002,1201419300030228,1130828800000230,0,0);
--insert into @OrderNotbl values(4	,2	,1161419300000002,5201419300024191,1110833800043746,0,0);
--insert into @OrderNotbl values(5	,3	,1141419300000024,5201419300025524,1141247100000087,0,0);
--insert into @OrderNotbl values(6	,4	,1141419300000024,5201419300030218,1201419300000004,0,0);
--insert into @OrderNotbl values(7	,5	,1141419300000024,6201419300026911,1141005600000447,0,0);
--insert into @OrderNotbl values(8	,6	,1141419300000024,5201419300030680,1150077500000804,0,0);
--insert into @OrderNotbl values(9	,7	,1141419300000024,6201419300029871,9110833800027474,0,0);
--insert into @OrderNotbl values(10	,16	,1141419300000024,5201419300028785,1181419300000385,0,0);
--insert into @OrderNotbl values(11	,15	,1141419300000024,5201419300030494,9110995400028641,0,0);
--insert into @OrderNotbl values(12	,14	,1141419300000024,6201419300028615,9100912800052955,0,0);
--insert into @OrderNotbl values(13	,13	,1141419300000024,5201419300030715,9111005600025015,0,0);
--insert into @OrderNotbl values(14	,12	,1141419300000024,5201419300029726,9110828800014656,0,0);
--insert into @OrderNotbl values(15	,11	,1141419300000024,6201419300027629,1110828800032461,0,0);
--insert into @OrderNotbl values(16	,10	,1141419300000024,6201419300029860,1130828800001366,0,0);
--insert into @OrderNotbl values(17	,19	,1141419300000024,1201419300030009,9110828800022360,0,0);
--insert into @OrderNotbl values(18	,21	,1161419300000002,5201419300029338,9110665900134617,0,0);
--insert into @OrderNotbl values(19	,22	,1141419300000024,5201419300030601,1161419300000499,0,0);
--insert into @OrderNotbl values(20	,8	,1141419300000024,5201419300030335,9110840300012747,0,0);
--insert into @OrderNotbl values(21	,9	,1141419300000024,5201419300028129,1191419300001365,0,0);
--insert into @OrderNotbl values(22	,23	,1141419300000024,5201419300026225,1191419300000638,0,0);
--insert into @OrderNotbl values(23	,27	,1161419300000002,5201419300029690,1191419300000279,0,0);
--insert into @OrderNotbl values(24	,26	,1161419300000002,5201419300030130,1171468100000257,0,0);
--insert into @OrderNotbl values(25	,25	,1161419300000002,5201419300030451,1191419300001212,0,0);
--insert into @OrderNotbl values(26	,24	,1141419300000024,5201419300030608,9110841900032156,0,0);
--insert into @OrderNotbl values(27	,28	,1161419300000002,1201419300030589,1141005600002391,0,0);

	Insert into SDS.tblOrderForTripTempToSaveDT  select @ClusterId,@TripDate,@DistributorId,@StaffRefNo,@VehicleId,@TotalOrders, pk_id,
	SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId,Getdate() from @OrderNotbl

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='',@GroupCode2 VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster WITH(NOLOCK) where VehicleId=@VehicleId
	select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping WITH(NOLOCK) 
	where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster WITH(NOLOCK) where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips

	---New Changes 16-08-2024 by NK
	IF OBJECT_ID('tempdb..#TripOrd') IS NOT NULL DROP TABLE #TripOrd
	create table #TripOrd(DistributorID int,OrderRefNo numeric(17,0),Naturecode nvarchar(10), PriceCode int,AreaRefNo numeric(17,0),OrderNo int,OrderDate datetime,
	ItemDescription nvarchar(100),OrderQuantity int,OrderStatusCode nvarchar(30),ExpectedDeliveryDate datetime,TotalPrice int)

	set @strquery=('insert into #TripOrd(DistributorID,OrderRefNo,Naturecode, PriceCode,AreaRefNo,OrderNo,OrderDate,ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,TotalPrice)
	select o.DistributorID,o.OrderRefNo,o.naturecode,o.PriceCode,o.AreaRefNo,o.OrderNo,o.OrderDate,i.ItemDescription,o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,0				
	from DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode				
	WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') ')

	print @strquery
	exec (@strquery)

	set @cnt=1
	if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(GETDATE() as date)
		and TripStatus<>'TripStarted' and TripStatus='Completed')
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblTripPlanning(TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,TripStatus,CreatedDate,AddiStaffRefNo,
			AddiStaffName,GodownId,GLatitude,GLongitude)
			VALUES('0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),
			isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
			---- Insert Trip Details for included orders
				insert into sds.tblTripPlanningDetails(TripId,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				FromDistributorId,FromClusterId,IsPODHD)
				select top (@VehCapacity) @TripId,nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
				nt.FromDistributorId,nt.FromClusterId,'HD'
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblTripPlanningDetails d WITH(NOLOCK) inner join sds.tblTripPlanning t WITH(NOLOCK) on d.tripId=t.tripId 
				where cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				--set @strquery=( '
				--update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				--ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				--from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				--inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode				
				--WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				--print @strquery
				--exec (@strquery)

				--New Change By NK
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=o.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join #TripOrd o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo							
				WHERE	o.DistributorID = @DistributorId AND o.OrderStatusCode IN ('OPEN','AGEN','APRN') 
				and t1.TripId=@TripId				
		
			---	Transfer Booking Update
			declare @FromDistributorId int, @FromClusterId bigint
			if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
			Begin
				select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
				SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
				if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

				set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode					
				WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End

			if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
			Begin 
				delete from sds.tblTripPlanning where TripId=@TripId 
				set @TripId=-1
			End	
			else
				set @TripId=@TripId
		End

		set @cnt=@cnt+1
	End

	select @TripId=max(Tripid) from sds.tblTripPlanning with(nolock) where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(tripdate as date)=cast(getdate() as date)
	
	---Not Included Data Save Code Removed for Trip Issue By Rajendra G
		
	set @cnt=1
	if exists(select 1 from sds.tblTripPlanning with(nolock) where DistributorId=@DistributorId and ClusterId=@ClusterId 
	and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
	Begin	
		while (@cnt<=@NoOfTrips)
		Begin
			SELECT @TodayCount = COUNT(1) FROM sds.tblTripPlanning with(nolock) 
			WHERE DistributorId = @DistributorId AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
			SET @TodayCount = @TodayCount+1
	
			SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
			print @TripNo

			update sds.tblTripPlanning set TripNo=@TripNo 
			where TripId=(select top 1 t.tripid from sds.tblTripPlanningDetails d with(nolock) inner join sds.tblTripPlanning t with(nolock) on t.TripId=d.TripId 
			where DistributorId=@DistributorId and ClusterId=@ClusterId AND CAST(t.TripDate as DATE) = CAST(@TripDate as DATE) 
			and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

			set @cnt=@cnt+1
		End
	End		
	else
	Begin
		set @TripId=-2
	End
	End
	select @TripId
	drop table #TripOrd
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningSave_New_NK]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_TriptPlanningSave_New_NK]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TotalOrders int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForTrip readonly,
@TripId bigint output
as

--set @ClusterId =73;set @TripDate =getdate();set @DistributorId =14193;set @StaffRefNo='1141419300000007';set @VehicleId =10093;set @TotalOrders =0;
--set @TripStatus =null; set @CreatedBy =null;

BEGIN

SET FMTONLY OFF
--insert into @OrderNotbl values(0	,18	,1141419300000024,5201419300029630,1151419300000258,0,0);
--insert into @OrderNotbl values(1	,17	,1141419300000024,5201419300028236,9110828800014951,0,0);
--insert into @OrderNotbl values(2	,20	,1141419300000024,5201419300030500,9111005600032945,0,0);
--insert into @OrderNotbl values(3	,1	,1161419300000002,1201419300030228,1130828800000230,0,0);
--insert into @OrderNotbl values(4	,2	,1161419300000002,5201419300024191,1110833800043746,0,0);
--insert into @OrderNotbl values(5	,3	,1141419300000024,5201419300025524,1141247100000087,0,0);
--insert into @OrderNotbl values(6	,4	,1141419300000024,5201419300030218,1201419300000004,0,0);
--insert into @OrderNotbl values(7	,5	,1141419300000024,6201419300026911,1141005600000447,0,0);
--insert into @OrderNotbl values(8	,6	,1141419300000024,5201419300030680,1150077500000804,0,0);
--insert into @OrderNotbl values(9	,7	,1141419300000024,6201419300029871,9110833800027474,0,0);
--insert into @OrderNotbl values(10	,16	,1141419300000024,5201419300028785,1181419300000385,0,0);
--insert into @OrderNotbl values(11	,15	,1141419300000024,5201419300030494,9110995400028641,0,0);
--insert into @OrderNotbl values(12	,14	,1141419300000024,6201419300028615,9100912800052955,0,0);
--insert into @OrderNotbl values(13	,13	,1141419300000024,5201419300030715,9111005600025015,0,0);
--insert into @OrderNotbl values(14	,12	,1141419300000024,5201419300029726,9110828800014656,0,0);
--insert into @OrderNotbl values(15	,11	,1141419300000024,6201419300027629,1110828800032461,0,0);
--insert into @OrderNotbl values(16	,10	,1141419300000024,6201419300029860,1130828800001366,0,0);
--insert into @OrderNotbl values(17	,19	,1141419300000024,1201419300030009,9110828800022360,0,0);
--insert into @OrderNotbl values(18	,21	,1161419300000002,5201419300029338,9110665900134617,0,0);
--insert into @OrderNotbl values(19	,22	,1141419300000024,5201419300030601,1161419300000499,0,0);
--insert into @OrderNotbl values(20	,8	,1141419300000024,5201419300030335,9110840300012747,0,0);
--insert into @OrderNotbl values(21	,9	,1141419300000024,5201419300028129,1191419300001365,0,0);
--insert into @OrderNotbl values(22	,23	,1141419300000024,5201419300026225,1191419300000638,0,0);
--insert into @OrderNotbl values(23	,27	,1161419300000002,5201419300029690,1191419300000279,0,0);
--insert into @OrderNotbl values(24	,26	,1161419300000002,5201419300030130,1171468100000257,0,0);
--insert into @OrderNotbl values(25	,25	,1161419300000002,5201419300030451,1191419300001212,0,0);
--insert into @OrderNotbl values(26	,24	,1141419300000024,5201419300030608,9110841900032156,0,0);
--insert into @OrderNotbl values(27	,28	,1161419300000002,1201419300030589,1141005600002391,0,0);

	Insert into SDS.tblOrderForTripTempToSaveDT  select @ClusterId,@TripDate,@DistributorId,@StaffRefNo,@VehicleId,@TotalOrders, pk_id,
	SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId,Getdate() from @OrderNotbl

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='',@GroupCode2 VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster WITH(NOLOCK) where VehicleId=@VehicleId
	select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping WITH(NOLOCK) 
	where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster WITH(NOLOCK) where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips

	IF OBJECT_ID('tempdb..#TripOrd') IS NOT NULL DROP TABLE #TripOrd
	create table #TripOrd(DistributorID int,OrderRefNo numeric(17,0),Naturecode nvarchar(5), PriceCode int,AreaRefNo numeric(17,0),OrderNo int,OrderDate datetime,ItemDescription nvarchar(10),OrderQuantity int,
	OrderStatusCode nvarchar(10),ExpectedDeliveryDate datetime,TotalPrice int)

	set @strquery=('insert into #TripOrd(DistributorID,OrderRefNo,Naturecode, PriceCode,AreaRefNo,OrderNo,OrderDate,ItemDescription,OrderQuantity,OrderStatusCode,ExpectedDeliveryDate,TotalPrice)
	select o.DistributorID,o.OrderRefNo,o.naturecode,o.PriceCode,o.AreaRefNo,o.OrderNo,o.OrderDate,i.ItemDescription,o.OrderQuantity,o.OrderStatusCode,o.ExpectedDeliveryDate,0				
	from DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode				
	WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') ')

	print @strquery
	exec (@strquery)

	set @cnt=1
	if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(GETDATE() as date)
		and TripStatus<>'TripStarted' and TripStatus='Completed')
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblTripPlanning(TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,TripStatus,CreatedDate,AddiStaffRefNo,
			AddiStaffName,GodownId,GLatitude,GLongitude)
			VALUES('0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),
			isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
			---- Insert Trip Details for included orders
				insert into sds.tblTripPlanningDetails(TripId,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				FromDistributorId,FromClusterId,IsPODHD)
				select top (@VehCapacity) @TripId,nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
				nt.FromDistributorId,nt.FromClusterId,'HD'
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblTripPlanningDetails d WITH(NOLOCK) inner join sds.tblTripPlanning t WITH(NOLOCK) on d.tripId=t.tripId 
				where cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount				

				--update sds.tblTripPlanningDetails set naturecode=t.Naturecode,PriceCode=t.PriceCode,AreaRefNo=t.AreaRefNo,OrderNo=t.OrderNo,OrderDate=t.OrderDate,
				--ItemDesc=t.ItemDescription,OrderQuantity=t.OrderQuantity,OrderStatus=t.OrderStatusCode,ExpectedDeliveryDate=t.ExpectedDeliveryDate,TotalPrice=t.TotalPrice				
				--from #TripOrd t where TripId=@TripId			

				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=o.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join #TripOrd o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo							
				WHERE	o.DistributorID = @DistributorId AND o.OrderStatusCode IN ('OPEN','AGEN','APRN') 
				and t1.TripId=@TripId				
		
			---	Transfer Booking Update
			declare @FromDistributorId int, @FromClusterId bigint
			if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
			Begin
				select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
				SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
				if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

				set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode					
				WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End

			if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
			Begin 
				delete from sds.tblTripPlanning where TripId=@TripId 
				set @TripId=-1
			End	
			else
				set @TripId=@TripId
		End

		set @cnt=@cnt+1
	End

	select @TripId=max(Tripid) from sds.tblTripPlanning with(nolock) where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(tripdate as date)=cast(getdate() as date)
	
	---Not Included Data Save Code Removed for Trip Issue By Rajendra G
		
	set @cnt=1
	if exists(select 1 from sds.tblTripPlanning with(nolock) where DistributorId=@DistributorId and ClusterId=@ClusterId 
	and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
	Begin	
		while (@cnt<=@NoOfTrips)
		Begin
			SELECT @TodayCount = COUNT(1) FROM sds.tblTripPlanning with(nolock) 
			WHERE DistributorId = @DistributorId AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
			SET @TodayCount = @TodayCount+1
	
			SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
			print @TripNo

			update sds.tblTripPlanning set TripNo=@TripNo 
			where TripId=(select top 1 t.tripid from sds.tblTripPlanningDetails d with(nolock) inner join sds.tblTripPlanning t with(nolock) on t.TripId=d.TripId 
			where DistributorId=@DistributorId and ClusterId=@ClusterId AND CAST(t.TripDate as DATE) = CAST(@TripDate as DATE) 
			and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

			set @cnt=@cnt+1
		End
	End		
	else
	Begin
		set @TripId=-2
	End
	End
		drop table #TripOrd
	select @TripId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningSave_OldNotInclChng_11Jan]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_TriptPlanningSave_OldNotInclChng_11Jan]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TotalOrders int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForTrip readonly,
@TripId bigint output
as

--set @ClusterId =73;set @TripDate =getdate();set @DistributorId =14193;set @StaffRefNo='1141419300000007';set @VehicleId =10093;set @TotalOrders =0;
--set @TripStatus =null; set @CreatedBy =null;

BEGIN

SET FMTONLY OFF
--insert into @OrderNotbl values(0	,18	,1141419300000024,5201419300029630,1151419300000258,0,0);
--insert into @OrderNotbl values(1	,17	,1141419300000024,5201419300028236,9110828800014951,0,0);
--insert into @OrderNotbl values(2	,20	,1141419300000024,5201419300030500,9111005600032945,0,0);
--insert into @OrderNotbl values(3	,1	,1161419300000002,1201419300030228,1130828800000230,0,0);
--insert into @OrderNotbl values(4	,2	,1161419300000002,5201419300024191,1110833800043746,0,0);
--insert into @OrderNotbl values(5	,3	,1141419300000024,5201419300025524,1141247100000087,0,0);
--insert into @OrderNotbl values(6	,4	,1141419300000024,5201419300030218,1201419300000004,0,0);
--insert into @OrderNotbl values(7	,5	,1141419300000024,6201419300026911,1141005600000447,0,0);
--insert into @OrderNotbl values(8	,6	,1141419300000024,5201419300030680,1150077500000804,0,0);
--insert into @OrderNotbl values(9	,7	,1141419300000024,6201419300029871,9110833800027474,0,0);
--insert into @OrderNotbl values(10	,16	,1141419300000024,5201419300028785,1181419300000385,0,0);
--insert into @OrderNotbl values(11	,15	,1141419300000024,5201419300030494,9110995400028641,0,0);
--insert into @OrderNotbl values(12	,14	,1141419300000024,6201419300028615,9100912800052955,0,0);
--insert into @OrderNotbl values(13	,13	,1141419300000024,5201419300030715,9111005600025015,0,0);
--insert into @OrderNotbl values(14	,12	,1141419300000024,5201419300029726,9110828800014656,0,0);
--insert into @OrderNotbl values(15	,11	,1141419300000024,6201419300027629,1110828800032461,0,0);
--insert into @OrderNotbl values(16	,10	,1141419300000024,6201419300029860,1130828800001366,0,0);
--insert into @OrderNotbl values(17	,19	,1141419300000024,1201419300030009,9110828800022360,0,0);
--insert into @OrderNotbl values(18	,21	,1161419300000002,5201419300029338,9110665900134617,0,0);
--insert into @OrderNotbl values(19	,22	,1141419300000024,5201419300030601,1161419300000499,0,0);
--insert into @OrderNotbl values(20	,8	,1141419300000024,5201419300030335,9110840300012747,0,0);
--insert into @OrderNotbl values(21	,9	,1141419300000024,5201419300028129,1191419300001365,0,0);
--insert into @OrderNotbl values(22	,23	,1141419300000024,5201419300026225,1191419300000638,0,0);
--insert into @OrderNotbl values(23	,27	,1161419300000002,5201419300029690,1191419300000279,0,0);
--insert into @OrderNotbl values(24	,26	,1161419300000002,5201419300030130,1171468100000257,0,0);
--insert into @OrderNotbl values(25	,25	,1161419300000002,5201419300030451,1191419300001212,0,0);
--insert into @OrderNotbl values(26	,24	,1141419300000024,5201419300030608,9110841900032156,0,0);
--insert into @OrderNotbl values(27	,28	,1161419300000002,1201419300030589,1141005600002391,0,0);

	Insert into SDS.tblOrderForTripTempToSaveDT  select @ClusterId,@TripDate,@DistributorId,@StaffRefNo,@VehicleId,@TotalOrders, pk_id,
	SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId,Getdate() from @OrderNotbl

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='',@GroupCode2 VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster WITH(NOLOCK) where VehicleId=@VehicleId
	select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping WITH(NOLOCK) 
	where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster WITH(NOLOCK) where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(GETDATE() as date)
		and TripStatus<>'TripStarted' and TripStatus='Completed')
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblTripPlanning(TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,TripStatus,CreatedDate,AddiStaffRefNo,
			AddiStaffName,GodownId,GLatitude,GLongitude)
			VALUES('0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),
			isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi)

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
			---- Insert Trip Details for included orders
				insert into sds.tblTripPlanningDetails(TripId,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				FromDistributorId,FromClusterId,IsPODHD)
				select top (@VehCapacity) @TripId,nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
				nt.FromDistributorId,nt.FromClusterId,'HD'
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblTripPlanningDetails d WITH(NOLOCK) inner join sds.tblTripPlanning t WITH(NOLOCK) on d.tripId=t.tripId 
				where cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
				where ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode				
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
		
			---	Transfer Booking Update
			declare @FromDistributorId int, @FromClusterId bigint
			if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
			Begin
				select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
				SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
				if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

				set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode					
				WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End

			if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
			Begin 
				delete from sds.tblTripPlanning where TripId=@TripId 
				set @TripId=-1
			End	
			else
				set @TripId=@TripId
		End

		set @cnt=@cnt+1
	End

	select @TripId=max(Tripid) from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(tripdate as date)=cast(getdate() as date)

	Begin		---------	Not included orders
	--select 2
if (isnull(@TripId,0)>0)
Begin 	
declare @tCount int, @tminDate datetime, @strNInc varchar(max)='', @strNIncTB varchar(max)=''  
select @tCount=count(d.TripPlanningDetId), @tminDate=min(d.OrderDate) from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails d on t.Tripid=d.TripId
where t.clusterId=@ClusterId and cast(t.TripDate as date)=cast(@tripdate as date)
				
select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	
if (isnull(@tCount,0)<(@VehCapacity*@nooftrips))	set @tminDate=getdate()

SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

set @strNInc=(' 
insert into sds.tblTripPlanningNotIncluded(TripId,TripDate,OrderRefNo,UniqueConsumerId,PriceCode,AreaRefNo,OrderNo,
OrderDate,Latitude,Longitude,FromDistributorId,FromClusterId,IsUpdated,LastUpdatedDate)
		
SELECT	'+convert(nvarchar(20),@TripId)+', '''+convert(nvarchar(50),@TripDate,101)+''',o.OrderRefNo,o.UniqueConsumerId,o.PriceCode,o.AreaRefNo,o.OrderNo,
o.OrderDate, sds.fn_ConsumerLatitude(c.UniqueConsumerId,''T'') Latitude, sds.fn_ConsumerLongitude(c.UniqueConsumerId,''T'') Longitude,	0, 0, 0, getdate()
FROM DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) LEFT OUTER JOIN SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN 
sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId left outer JOIN 
sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId
left outer join 
(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
on t.TripId=d.TripId and cast(t.TripDate as date)=cast('''+convert(nvarchar(50),@TripDate,101)+''' as date)
) t on t.OrderRefNo = o.OrderRefNo	
WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@DistributorId)+' AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
AND dc.ClusterId = '+convert(nvarchar(25),@ClusterId)+'  
and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@DistributorId)+')
and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
and o.OrderDate<='''+convert(nvarchar(50),@tminDate,101)+''' AND t.OrderRefNo IS NULL    ')
								
--print @strNInc
exec (@strNInc)

-----	Not included Transfer Booking Update				
																																		
if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
Begin
select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

set @strNIncTB=(' 
insert into sds.tblTripPlanningNotIncluded(TripId,TripDate,OrderRefNo,UniqueConsumerId,PriceCode,AreaRefNo,OrderNo,
OrderDate,Latitude,Longitude,FromDistributorId,FromClusterId,IsUpdated,LastUpdatedDate)
		
SELECT	'+convert(nvarchar(20),@TripId)+', '''+convert(nvarchar(50),@TripDate,101)+''',o.OrderRefNo,o.UniqueConsumerId,o.PriceCode,o.AreaRefNo,o.OrderNo,
o.OrderDate, sds.fn_ConsumerLatitude(c.UniqueConsumerId,''T'') Latitude, sds.fn_ConsumerLongitude(c.UniqueConsumerId,''T'') Longitude, 0, 0, 0, getdate()
FROM DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) LEFT OUTER JOIN SDS.tblConsumerDetails c with(nolock) on c.UniqueConsumerId = o.UniqueConsumerId INNER JOIN
DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode INNER JOIN 
sds.tblactiveitems ai with (nolock) on o.pricecode=ai.pricecode and isnull(ai.Active,''N'')=''Y'' INNER JOIN
SDS.tblAreaClusterMapping acm with(nolock) on acm.AreaRefNo = o.AreaRefNo INNER JOIN
SDS.tblDeliveryBoyClusterMapping dc with(nolock) on dc.ClusterId = acm.AreaClusterId left outer JOIN 
sds.tblCDCMSAreaPODDetails pod on o.AreaRefNo=pod.AreaRefNo and o.DistributorID=pod.DistributorId
left outer join 
(select d.OrderRefNo from SDS.tblTripPlanning t with(nolock) inner join SDS.tblTripPlanningDetails d with(nolock) 
on t.TripId=d.TripId and cast(t.TripDate as date)=cast('''+convert(nvarchar(50),@TripDate,101)+''' as date)
) t on t.OrderRefNo = o.OrderRefNo	
WHERE	c.ConsumerStatus=''Active'' and o.DistributorID = '+convert(nvarchar(25),@FromDistributorId)+' AND o.OrderStatusCode IN (''0'',''OPEN'',''AGEN'',''APRN'') 
AND dc.ClusterId = '+convert(nvarchar(25),@FromClusterId)+' 
and i.ItemCode in (select ItemId from sds.tblDistributorItemPrice where DistributorID = '+convert(nvarchar(25),@FromDistributorId)+')
and upper(ltrim(rtrim(isnull(pod.DeliveryType,''''))))<>''POD''
and o.OrderDate<='''+convert(nvarchar(50),@tminDate,101)+''' AND t.OrderRefNo IS NULL    ')
								
--print @strNIncTB
exec (@strNIncTB)

End

End
End ---- End Trip Details for included orders
	
set @cnt=1
if exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
Begin	
while (@cnt<=@NoOfTrips)
Begin
SELECT @TodayCount = COUNT(1) FROM sds.tblTripPlanning with(nolock) 
WHERE DistributorId = @DistributorId AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
SET @TodayCount = @TodayCount+1
	
SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
print @TripNo

update sds.tblTripPlanning set TripNo=@TripNo 
where TripId=(select top 1 t.tripid from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on t.TripId=d.TripId 
where DistributorId=@DistributorId and ClusterId=@ClusterId and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

set @cnt=@cnt+1
End
End		
else
Begin
set @TripId=-2
End
End
select @TripId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningSave_WithNewPara]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_TriptPlanningSave_WithNewPara]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TotalOrders int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForTrip readonly,
@TripId bigint output
as

--set @ClusterId =73;set @TripDate =getdate();set @DistributorId =14193;set @StaffRefNo='1141419300000007';set @VehicleId =10093;set @TotalOrders =0;
--set @TripStatus =null; set @CreatedBy =null;

BEGIN

SET FMTONLY OFF

	Insert into SDS.tblOrderForTripTempToSaveDT  select @ClusterId,@TripDate,@DistributorId,@StaffRefNo,@VehicleId,@TotalOrders, pk_id,
	SequenceNo,AreaRefNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId,Getdate() from @OrderNotbl

	SET @TripId = 0
	declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
	@GroupCode VARCHAR(3)='',@GroupCode2 VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''
	declare @Gdid nvarchar(20), @GdLati nvarchar(50), @GdLongi nvarchar(50)

	select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster WITH(NOLOCK) where VehicleId=@VehicleId
	select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping WITH(NOLOCK) 
	where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
	select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
	select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
	SELECT @Gdid=GodownId, @GdLati=Latitude, @GdLongi=Longitude FROM SDS.tblClusterMaster WITH(NOLOCK) where ClusterId=@ClusterId
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId

	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	--select @NoOfTrips
	set @cnt=1
	if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(GETDATE() as date)
		and TripStatus<>'TripStarted' and TripStatus='Completed')
	Begin	
		--select 1
		while (@cnt<=@NoOfTrips)
		Begin
			set @TripDtlsId=0;	
			INSERT INTO SDS.tblTripPlanning(TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,TripStatus,CreatedDate,AddiStaffRefNo,
			AddiStaffName,GodownId,GLatitude,GLongitude,IsExtraTrip)
			VALUES('0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),
			isnull(@AddiDelBoyName,''),@Gdid, @GdLati, @GdLongi,'Y')

			SET @TripId = SCOPE_IDENTITY()

			if (isnull(@TripId,0)>0)
			Begin 			
			---- Insert Trip Details for included orders
				insert into sds.tblTripPlanningDetails(TripId,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,
				FromDistributorId,FromClusterId,IsPODHD)
				select top (@VehCapacity) @TripId,nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),
				nt.FromDistributorId,nt.FromClusterId,'HD'
				from @OrderNotbl nt left outer join 
				(select d.orderrefNo from sds.tblTripPlanningDetails d WITH(NOLOCK) inner join sds.tblTripPlanning t WITH(NOLOCK) on d.tripId=t.tripId 
				where cast(t.tripDate as date)=cast(@TripDate as date) and t.IsExtraTrip='Y' and t.DistributorId=@DistributorId and t.ClusterId=@ClusterId)

				--and t.DistributorId=@DistributorId and t.ClusterId=@ClusterId) 
				ot on nt.OrderRefNo=ot.OrderRefNo
				where ot.OrderRefNo is null order by nt.SequenceNo

				set @TripDtlsId=@@rowcount

				set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode				
				WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
		
			---	Transfer Booking Update
			declare @FromDistributorId int, @FromClusterId bigint
			if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
			Begin
				select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
				SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
				if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

				set @strquery=( '
				update sds.tblTripPlanningDetails set naturecode=o.naturecode,PriceCode=o.PriceCode,AreaRefNo=o.AreaRefNo,OrderNo=o.OrderNo,OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,OrderQuantity=o.OrderQuantity,OrderStatus=o.OrderStatusCode,ExpectedDeliveryDate=o.ExpectedDeliveryDate,TotalPrice=0				
				from sds.tblTripPlanningDetails t1 WITH(NOLOCK) inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode					
				WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End

			if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
			Begin 
				delete from sds.tblTripPlanning where TripId=@TripId 
				set @TripId=-1
			End	
			else
				set @TripId=@TripId
		End

		set @cnt=@cnt+1
	End

	select @TripId=max(Tripid) from sds.tblTripPlanning with(nolock) where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(tripdate as date)=cast(getdate() as date)
	
	---Not Included Data Save Code Removed for Trip Issue By Rajendra G
		
	set @cnt=1
	if exists(select 1 from sds.tblTripPlanning with(nolock) where DistributorId=@DistributorId and ClusterId=@ClusterId 
	and cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
	Begin	
		while (@cnt<=@NoOfTrips)
		Begin
			SELECT @TodayCount = COUNT(1) FROM sds.tblTripPlanning with(nolock) 
			WHERE DistributorId = @DistributorId AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
			SET @TodayCount = @TodayCount+1
	
			SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
			print @TripNo

			update sds.tblTripPlanning set TripNo=@TripNo 
			where TripId=(select top 1 t.tripid from sds.tblTripPlanningDetails d with(nolock) inner join sds.tblTripPlanning t with(nolock) on t.TripId=d.TripId 
			where DistributorId=@DistributorId and ClusterId=@ClusterId AND CAST(t.TripDate as DATE) = CAST(@TripDate as DATE) 
			and isnull(t.TripNo,'0')='0' order by d.SequenceNo)

			set @cnt=@cnt+1
		End
	End		
	else
	Begin
		set @TripId=-2
	End
	End
	select @TripId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningSave_withoutNoincluded]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_TriptPlanningSave_withoutNoincluded]
--declare
@ClusterId bigint,
@TripDate datetime,
@DistributorId int,
@StaffRefNo numeric(17,0),
@VehicleId bigint,
@TotalOrders int,
@TripStatus varchar(50),
@CreatedBy varchar(50),
@OrderNotbl sds.OrderForTrip readonly,
@TripId bigint output
as

--Begin
--set @ClusterId=42				set @TripDate = N'2020-07-14'		set	@DistributorId = 15139
--set @StaffRefNo = 11611513900000020	set @VehicleId = 10060		set @TripStatus = N'0'		set @CreatedBy = N'0'; set @TripId=0
-----------------------data for trip save from route created 	

--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (1,1,5201513900025557,1191513900000251,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (2,2,5201513900026205, 1131232900000897,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (3,3,5201513900025801, 1181513900000002,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (4,4,5201513900026032, 9110996300016049,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (5,5,5201513900026268, 1161513900000089,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (6,6,1201513900026436, 1110916600028344,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (7,7,5201513900025039, 9110827100141335,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (8,8,1201513900026461, 1131232900001639,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (9,9,5201513900024723, 9110810400001719,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (10,10,5201513900022842, 1161513900000467,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (11,11,5201513900025160, 1150811300000112,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (12,12,1201513900026392, 1140826300000951,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (13,13,1201513900026454, 1131232900000101,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (14,14,5201513900026215, 1110911900001720,0,0)
--insert into @OrderNotbl(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (15,15,5201513900026233, 1131232900000901,0,0)

----insert into @NotIncluded(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (1,1,6201513900006220,9100826300012250,0,0)
----insert into @NotIncluded(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (2,2,6201513900006220,9100826300005160,0,0)
----insert into @NotIncluded(pk_id,SequenceNo,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId) values (3,3,6201513900010260,1150826300000560,0,0)

--	print 1
--end

BEGIN

SET @TripId = 0
declare @NoOfTrips int, @VehCapacity int, @TripNo nvarchar(50),  @cnt int, @TodayCount int, @strquery varchar(max), @TripDtlsId bigint, 
@GroupCode VARCHAR(3)='',@GroupCode2 VARCHAR(3)='', @StaffName nvarchar(200), @AddiDelBoyId numeric(17,0)=0, @AddiDelBoyName nvarchar(200)=''

select @VehCapacity=isnull(RTOCapacity,0) from sds.tblvehicleMaster where VehicleId=@VehicleId
select @NoOfTrips=isnull(NoOfTrip,0), @AddiDelBoyId=isnull(AdditionalStaffRefNo,0) from sds.tblDeliveryBoyClusterMapping where IsActive='Y' and ClusterId=@ClusterId and StaffRefNo=@StaffRefNo
select @StaffName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@StaffRefNo
select @AddiDelBoyName=StaffName from DCMS.tblDistributorStaffDetails WITH(NOLOCK) where StaffRefNo=@AddiDelBoyId
				
SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
--select @NoOfTrips
set @cnt=1
	if not exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and cast(TripDate as date)=cast(@TripDate as date))
	Begin	
	--select 1
	while (@cnt<=@NoOfTrips)
	Begin
		set @TripDtlsId=0;	
		INSERT INTO SDS.tblTripPlanning(TripNo,TripDate,DistributorId,ClusterId,StaffRefNo,StaffName,VehicleId,TotalOrders,TripStatus,CreatedDate,AddiStaffRefNo,AddiStaffName)
		VALUES('0',@TripDate,@DistributorId,@ClusterId,@StaffRefNo,@StaffName,@VehicleId,@TotalOrders,@TripStatus,getdate(),isnull(@AddiDelBoyId,0),isnull(@AddiDelBoyName,''))

		SET @TripId = SCOPE_IDENTITY()
		--select @TripId
		if (isnull(@TripId,0)>0)
		Begin 			
			---- Insert Trip Details for included orders
			insert into sds.tblTripPlanningDetails(TripId,SequenceNo,OrderRefNo,UniqueConsumerId,OrderStatus,CreatedBy,CreatedDate,FromDistributorId,FromClusterId)
			select top (@VehCapacity) @TripId,nt.SequenceNo, nt.OrderRefNo,nt.UniqueConsumerId,0,@CreatedBy,getdate(),nt.FromDistributorId,nt.FromClusterId
			from @OrderNotbl nt left outer join 
			(select d.orderrefNo from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on d.tripId=t.tripId 
			where cast(t.tripDate as date)=cast(@TripDate as date)) ot on nt.OrderRefNo=ot.OrderRefNo
			where ot.OrderRefNo is null order by nt.SequenceNo

			set @TripDtlsId=@@rowcount

			set @strquery=( '
			update sds.tblTripPlanningDetails  
			set naturecode=o.naturecode,
				PriceCode=o.PriceCode,
				AreaRefNo=o.AreaRefNo,
				OrderNo=o.OrderNo,
				OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,
				OrderQuantity=o.OrderQuantity,
				OrderStatus=o.OrderStatusCode,
				ExpectedDeliveryDate=o.ExpectedDeliveryDate,
				TotalPrice=0				
			from sds.tblTripPlanningDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
			inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode
			WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

			print @strquery
			exec (@strquery)
		
			---	Transfer Booking Update
			declare @FromDistributorId int, @FromClusterId bigint
			if exists( select 1 from @OrderNotbl where isnull(FromDistributorId,0)>0)
			Begin
				select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @OrderNotbl where isnull(FromDistributorId,0)>0
			 
				SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
				if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

				set @strquery=( '
				update sds.tblTripPlanningDetails  
				set naturecode=o.naturecode,
				PriceCode=o.PriceCode,
				AreaRefNo=o.AreaRefNo,
				OrderNo=o.OrderNo,
				OrderDate=o.OrderDate,
				ItemDesc=i.ItemDescription,
				OrderQuantity=o.OrderQuantity,
				OrderStatus=o.OrderStatusCode,
				ExpectedDeliveryDate=o.ExpectedDeliveryDate,
				TotalPrice=0				
				from sds.tblTripPlanningDetails t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
				inner join DCMS.tblItemPriceCodeMap i WITH(NOLOCK) on o.PriceCode=i.PriceCode
				WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' AND o.OrderStatusCode IN (''OPEN'',''AGEN'',''APRN'') and t1.TripId=' + convert(nvarchar(30),@TripId))

				print @strquery
				exec (@strquery)
			End

			if not exists(select 1 from sds.tblTripPlanningDetails where TripId=@TripId) 
			Begin 
				delete from sds.tblTripPlanning where TripId=@TripId 
				set @TripId=-1
			End	
			else
			set @TripId=@TripId

			----- End Trip Details for included orders
		End
		

		--Begin		---------	Not included orders
		--if (isnull(@TripId,0)>0)
		--Begin 			
		--	---- Insert Orders and consumer Details for not included orders
		--	insert into sds.tblTripPlanningNotIncluded(TripId,TripDate,OrderRefNo,UniqueConsumerId,FromDistributorId,FromClusterId, LastUpdatedDate)
		--	select @TripId,@TripDate,ni.OrderRefNo,ni.UniqueConsumerId,ni.FromDistributorId,ni.FromClusterId,getdate()
		--	from @NotIncluded ni left outer join (select d.orderrefNo from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on d.tripId=t.tripId 
		--	where cast(t.tripDate as date)=cast(@TripDate as date)) ot on ni.OrderRefNo=ot.OrderRefNo
		--	left outer join (select d.orderrefNo from sds.tblTripPlanningNotIncluded d inner join sds.tblTripPlanning t on d.tripId=t.tripId 
		--	where cast(t.tripDate as date)=cast(@TripDate as date)) n on ni.OrderRefNo=n.OrderRefNo
		--	where ot.OrderRefNo is null and n.OrderRefNo is null
								
		--	set @GroupCode=''; 
		--	declare @strNInc varchar(max)=''
		--	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
		--	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

		--	set @strNInc=( '
		--	update sds.tblTripPlanningNotIncluded  
		--	set PriceCode=o.PriceCode,
		--	AreaRefNo=o.AreaRefNo,
		--	OrderNo=o.OrderNo,
		--	OrderDate=o.OrderDate
		--	from sds.tblTripPlanningNotIncluded t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
		--	WHERE	o.DistributorID = '+convert(nvarchar(20),@DistributorId)+' AND t1.TripId=' + convert(nvarchar(30),@TripId))

		--	print @strNInc
		--	exec (@strNInc)

		--	-----	Not included Transfer Booking Update				
		--	--if exists( select 1 from @NotIncluded where isnull(FromDistributorId,0)>0)
		--	--	Begin
		--	--		select @FromDistributorId=FromDistributorId, @FromClusterId=FromClusterId from @NotIncluded where isnull(FromDistributorId,0)>0
			 
		--	--		SELECT @GroupCode2 = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @FromDistributorId
		--	--		if(isnull(@GroupCode2,'')='') set @GroupCode2='' else set @GroupCode2='$'+@GroupCode2

		--	--		set @strquery=( '
		--	--		update sds.tblTripPlanningNotIncluded  
		--	--		set PriceCode=o.PriceCode,
		--	--		AreaRefNo=o.AreaRefNo,
		--	--		OrderNo=o.OrderNo,
		--	--		OrderDate=o.OrderDate				
		--	--		from sds.tblTripPlanningNotIncluded t1 inner join DCMS.tblRefillOrderDtls'+@GroupCode2 +' o WITH (NOLOCK) on o.OrderRefNo=t1.OrderRefNo
		--	--		WHERE	o.DistributorID = '+convert(nvarchar(20),@FromDistributorId)+' and t1.TripId=' + convert(nvarchar(30),@TripId))

		--	--		print @strquery
		--	--		exec (@strquery)
		--	--	End

		--End
		--End
		
	set @cnt=@cnt+1
	End
	
	set @cnt=1
	if exists(select 1 from sds.tblTripPlanning where DistributorId=@DistributorId and ClusterId=@ClusterId and 
	cast(TripDate as date)=cast(@TripDate as date) and isnull(TripNo,'0')='0')
	Begin	
		while (@cnt<=@NoOfTrips)
		Begin
			SELECT @TodayCount = COUNT(1) FROM sds.tblTripPlanning with(nolock) 
			WHERE DistributorId = @DistributorId AND CAST(TripDate as DATE) = CAST(@TripDate as DATE) and ClusterId=@ClusterId and isnull(TripNo,'0')<>'0'
			SET @TodayCount = @TodayCount+1
	
			SET @TripNo = 'TRP/'+ REPLICATE('0',2-LEN(RTRIM(CONVERT(varchar(50),@TodayCount)))) + CONVERT(varchar(50),@TodayCount)
			print @TripNo

			update sds.tblTripPlanning set TripNo=@TripNo 
			where TripId=(	select top 1 t.tripid from sds.tblTripPlanningDetails d inner join sds.tblTripPlanning t on t.TripId=d.TripId 
			where isnull(t.TripNo,'0')='0' order by d.orderdate)

		set @cnt=@cnt+1
		End
	End		
	else
	Begin
		set @TripId=-2
	End
End
select @TripId
END
GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningToInterfaceAdd]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---		sds.usp_TriptPlanningToInterfaceAdd 14145, '2021-02-16'

CREATE proc [SDS].[usp_TriptPlanningToInterfaceAdd]
--declare 
@DistributorId int,
@TripDate datetime
--set @DistributorId=14145; set @TripDate='2021-01-30'; 

as

BEGIN

declare @NewBatchNo nvarchar(20), @NextNo bigint=0, @Rowcount1 int,@Rowcount2 int, @RetValue int

--[HPGASUAT\MSSQLHPGASUAT,1581].[HPGASDBUAT].[INTERFACE].
-- [HPGASUAT\MSSQLHPGASUAT,1581].[HPGASDBUAT].[INTERFACE].

	select @NextNo=isnull(max(convert(bigint,replace(isnull(TripBatchId,0),'SDS',''))),0)+1 from [HPCLDCMS].[INTERFACE].tblTripBatchHeaderSDS 
	select @NewBatchNo= 'SDS' +replicate('0',12-LEN(@NextNo)) +convert(nvarchar(10), (@NextNo)) 
	--SDS000000000012	
	
	if exists(select td.TripId from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
	where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date) and t.TripId not in (select convert(bigint, replace(TripId,'S','')) from [HPCLDCMS].[INTERFACE].tblDistributorTripDetails))
	Begin
		-- Distributor trip Details
		insert into [HPCLDCMS].[INTERFACE].tblDistributorTripDetails(DistributorId, TripId, TripDate, TripStartTime, TripEndTime, TotalDeliveries, TotalDelivered, 
			StaffRefNo, VehicleId, LastUpdateBy, LastUpdatedServer, LastUpdatedProgram, LastUpdatedOn)
		select t.DistributorId,'S' +replicate('0',6-LEN(t.TripId)) +convert(nvarchar(10), (t.TripId)),t.TripDate, isnull(t.TripStartDate,'1900-01-01 00:00'), isnull(t.TripEndDate,'1900-01-01 00:00'), count(td.TripPlanningDetId) TotalDeliveries, 0 TotalDelivered, StaffRefNo, VehicleId, 
		'SDSADMIN' LastUpdateBy, 'MSSQL2014DEV\SQLSVR2014DEV' LastUpdatedServer, 'SDS' LastUpdatedProgram, getdate() LastUpdatedOn 
		from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
		where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date) and t.TripId not in (select convert(bigint, replace(TripId,'S','')) from [HPCLDCMS].[INTERFACE].tblDistributorTripDetails)
		group by t.DistributorId,t.TripId,t.TripDate, t.TripStartDate, t.TripEndDate, StaffRefNo, VehicleId
	End
	
	if exists(select td.OrderRefNo from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId where DistributorId=@DistributorId 
		and cast(TripDate as date)=cast(@TripDate as date) and td.OrderRefNo not in (select OrderRefNo from [HPCLDCMS].[INTERFACE].tblTripBatchDetailSDS))
	Begin
	print @NewBatchNo
		insert into [HPCLDCMS].[INTERFACE].tblTripBatchHeaderSDS (TripBatchId, TripBatchSource, TripNumberOfRecords, NoOfRecordsProcessed,NoOfRecordsAllotted,NoOfRecordsinError, TripBatchDate, ProcessFlag, 
			StatusCode, LastUpdateBy, LastUpdatedServer, LastUpdatedProgram, LastUpdatedOn)
		select @NewBatchNo TripBatchId, 'S' BatchSource, 
			(select count(td.TripPlanningDetId) from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
				where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date)) TripNumberOfRecords, 0 NoOfRecordsProcessed,
		0 NoOfRecordsAllotted,0 NoOfRecordsinError, @TripDate, 'N' ProcessFlag, 10 StatusCode, 'SDSADMIN' LastUpdateBy, 'MSSQL2014DEV\SQLSVR2014DEV' LastUpdatedServer, 'SDS' LastUpdatedProgram, getdate() LastUpdatedOn  
	
	-- Add Details data for INTERFACE.tblTripBatchDetailSDS
		insert into [HPCLDCMS].[INTERFACE].tblTripBatchDetailSDS(TripBatchId, TripBatchSource, TripBatchSlno, DistributorId, TripId, TripSlno, TripDtlsId, TripDate, 
			OrderRefNo, ClusterId, FromDistributorId, FromClusterId, OrderStatus, ProcessFlag, StatusCode, LastUpdateBy, LastUpdatedServer, LastUpdatedProgram, LastUpdatedOn)
		select @NewBatchNo TripBatchId, 'S' BatchSource, ROW_NUMBER() over(ORDER BY t.TripId) TripBatchSlno,t.DistributorId, 'S' +replicate('0',6-LEN(t.TripId)) +convert(nvarchar(10), (t.TripId)), td.SequenceNo TripSLNo,
		td.TripPlanningDetId TripDtlsId, t.tripdate,td.OrderRefNo, t.clusterId, td.FromDistributorId,td.FromClusterId,td.OrderStatus, 'N' ProcessFlag,
		10 StatusCode, 'SDSADMIN' LastUpdateBy, 'MSSQL2014DEV\SQLSVR2014DEV' LastUpdatedServer, 'SDS' LastUpdatedProgram, getdate() LastUpdatedOn  
		from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
		where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date) and td.OrderRefNo not in (select OrderRefNo from [HPCLDCMS].[INTERFACE].tblTripBatchDetailSDS)
		
		-- Add Details data for INTERFACE.tblTripBatchHeaderSDS
		--if exists(select 1 from [HPCLDCMS].[INTERFACE].tblTripBatchDetailSDS where TripBatchId=@NewBatchNo )
		End
	
END
	




GO
/****** Object:  StoredProcedure [SDS].[usp_TriptPlanningToInterfaceAdd_Old]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_TriptPlanningToInterfaceAdd_Old]
--declare 
@DistributorId int,
@TripDate datetime,
@RetValue bigint output

--set @DistributorId=14193; set @TripDate='2020-11-10'; 

as

BEGIN

	-- Add Header data for INTERFACE.tblTripBatchHeaderSDS
	declare @NewBatchNo nvarchar(20), @NextNo bigint=0, @Rowcount1 int,@Rowcount2 int

	select @NextNo=isnull(max(convert(bigint,replace(isnull(TripBatchId,0),'SDS',''))),0)+1 from HPCLDCMS.INTERFACE.tblTripBatchHeaderSDS 
	select @NewBatchNo= 'SDS' +replicate('0',12-LEN(@NextNo)) +convert(nvarchar(10), (@NextNo)) 
	--SDS000000000012

	insert into HPCLDCMS.INTERFACE.tblTripBatchHeaderSDS (TripBatchId, TripBatchSource, TripNumberOfRecords, NoOfRecordsProcessed,NoOfRecordsAllotted,NoOfRecordsinError, TripBatchDate, ProcessFlag, 
		StatusCode, LastUpdateBy, LastUpdatedServer, LastUpdatedProgram, LastUpdatedOn)
	select @NewBatchNo TripBatchId, 'S' BatchSource, 
	(select count(td.TripPlanningDetId) from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
			where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date)) TripNumberOdRecords, 0 NoOfRecordsProcessed,
	0 NoOfRecordsAllotted,0 NoOfRecordsinError, @TripDate, 'N' ProcessFlag, 10 StatusCode, 'Username' LastUpdateBy, 'Servername' LastUpdatedServer, 'SDS' LastUpdatedProgram, getdate() LastUpdatedOn  
	
	set @RetValue=@@rowcount;
	--select @RetValue
	if (@RetValue>0)
	Begin
	-- Add Details data for INTERFACE.tblTripBatchHeaderSDS
		insert into HPCLDCMS.INTERFACE.tblTripBatchDetailSDS(TripBatchId, TripBatchSource, TripBatchSlno, DistributorId, TripId, TripSlno, TripDtlsId, TripDate, 
			OrderRefNo, ClusterId, FromDistributorId, FromClusterId, OrderStatus, ProcessFlag, StatusCode, LastUpdateBy, LastUpdatedServer, LastUpdatedProgram, LastUpdatedOn)
		select @NewBatchNo TripBatchId, 'S' BatchSource, ROW_NUMBER() over(ORDER BY t.TripId) TripBatchSlno,t.DistributorId, t.TripId, td.SequenceNo TripSLNo,
		td.TripPlanningDetId TripDtlsId, t.tripdate,td.OrderRefNo, t.clusterId, td.FromDistributorId,td.FromClusterId,td.OrderStatus, 'N' ProcessFlag,
		10 StatusCode, 'Username' LastUpdateBy, 'Servername' LastUpdatedServer, 'SDS' LastUpdatedProgram, getdate() LastUpdatedOn  
		from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
		where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date) and td.OrderRefNo not in (select OrderRefNo from HPCLDCMS.INTERFACE.tblTripBatchDetailSDS)
	
		set @Rowcount1=@@rowcount;
		
		if (isnull(@Rowcount1,0)>0)
		Begin
			-- Distributor trip Details
			insert into HPCLDCMS.INTERFACE.tblDistributorTripDetails(DistributorId, TripId, TripDate, TripStartTime, TripEndTime, TotalDeliveries, TotalDelivered, 
				StaffRefNo, VehicleId, LastUpdateBy, LastUpdatedServer, LastUpdatedProgram, LastUpdatedOn)
			select t.DistributorId,t.TripId,t.TripDate, isnull(t.TripStartDate,'1900-01-01 00:00'), isnull(t.TripEndDate,'1900-01-01 00:00'), count(td.TripPlanningDetId) TotalDeliveries, 0 TotalDelivered, StaffRefNo, VehicleId, 
			'Username' LastUpdateBy, 'Servername' LastUpdatedServer, 'SDS' LastUpdatedProgram, getdate() LastUpdatedOn 
			from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails td on t.TripId=td.TripId
			where DistributorId=@DistributorId and cast(TripDate as date)=cast(@TripDate as date) and t.TripId not in (select TripId from HPCLDCMS.INTERFACE.tblDistributorTripDetails)
			group by t.DistributorId,t.TripId,t.TripDate, t.TripStartDate, t.TripEndDate, StaffRefNo, VehicleId
			
			set @Rowcount2=@@rowcount;
		End
	End

	if (isnull(@Rowcount1,0)=0 or isnull(@Rowcount2,0)=0)
	Begin		
		delete from HPCLDCMS.INTERFACE.tblDistributorTripDetails where DistributorId=@DistributorId and TripId in (select TripId from HPCLDCMS.INTERFACE.tblTripBatchDetailSDS where TripBatchId=@NewBatchNo)
		delete from HPCLDCMS.INTERFACE.tblTripBatchHeaderSDS where TripBatchId=@NewBatchNo
		delete from HPCLDCMS.INTERFACE.tblTripBatchDetailSDS where TripBatchId=@NewBatchNo

		set @RetValue=-1
	End

	return @RetValue
END

GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateCDCMSConsumerLocHistLog]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--sds.usp_UpdateCDCMSConsumerLocHistLog 14145

CREATE Proc [SDS].[usp_UpdateCDCMSConsumerLocHistLog]
--Declare 
@DistributorId int--=14145

as

BEGIN
	SET FMTONLY OFF

	IF OBJECT_ID('tempdb..#tbldt') IS NOT NULL DROP TABLE #tbldt
	IF OBJECT_ID('tempdb..#tblLoc') IS NOT NULL DROP TABLE #tblLoc

	-------- GetCDCMSConsumerLocation
	select * into #tblLoc from HPCLDCMS.ESV.tblConsumerLocation cl with (nolock) --where CAST(cl.UpdatedDate AS DATE)>=CAST(getdate()-1 AS DATE)
	
	SELECT cm.DistributorID,cl.UniqueConsumerId,cl.Latitude,cl.Longitude,UpdatedDate,UpdatedBy,cl.Source as NewSource, 0 as IsV1Received
	into #tbldt
	FROM #tblLoc cl INNER JOIN DCMS.tblConsumerMaster cm ON cm.UniqueConsumerId=cl.UniqueConsumerId 
	WHERE cm.DistributorID=@DistributorId 

	--Save Consumer Location History Log Table
	INSERT INTO SDS.tblConsumerLocationHistoryLogs(UniqueConsumerId,DistributorID,Latitude,
	Longitude,[Source],Distance,[Action],AddedBy,AddedOn,LastUpdatedDate)
	select dt.UniqueConsumerId,dt.DistributorID,dt.Latitude,dt.Longitude,dt.[NewSource],0,
	'Scheduler',0,GETDATE(),dt.UpdatedDate from #tbldt dt where dt.[NewSource] in ('MIAPP','HPPAY','VITRANDC','VITRANCAP','VITRANSAFE')
		
drop table #tbldt
DROP TABLE #tblLoc

END
GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateConsCoordinates]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_UpdateConsCoordinates]
--	Description		:	Update consumer co ordinates from MI and Ezy gas

--	Author			:	09-Dec-2019

					     Modifications
--	09-Dec-2019			Prasanna        Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_UpdateConsCoordinates]
@DistributorId int
AS
BEGIN

	    UPDATE [SDS].[tblConsumerDetails]
		SET Latitude= cl.Latitude,Longitude = cl.Longitude,Source=cl.Source
		FROM [SDS].[tblConsumerDetails] cd
		INNER JOIN [HPCLDCMS].[ESV].[tblConsumerLocation] cl ON CAST(cl.UniqueConsumerId AS numeric(17,0))=cd.UniqueConsumerId 
		WHERE cd.DistributorID=@DistributorId AND cd.Latitude IS NULL AND cd.Longitude IS NULL
		
END



GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateConsumerAutoLocation]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_UpdateConsumerAutoLocation]
--declare 
@DistributorID int,
@AreaRefNo numeric(17, 0),
@consumerDtlstbl sds.consLatLongInOuttbl ReadOnly
as
BEGIN	
	Begin				--		Update Existing 
		UPDATE  [SDS].[tblConsumerLocationHistory]
		SET 
			[AutoLatitude]=t1.Latitude,
			[AutoLongitude]=t1.Longitude,
			[AutoLastUpdateDateTime]=getdate()

		FROM   sds.tblConsumerDetails t2 inner join 
		(
			SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
			c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
			newc.Latitude, newc.Longitude, newc.InArea,newc.InCluster,newc.inTradingArea, c.LastUpdateDateTime as MstLastUpdateDateTime, 
			c.LastUpdateDateTime as AddrLastUpdateDateTime, c.LastUpdateDateTime as ConLastUpdateDateTime, newc.InClusterId
			FROM @consumerDtlstbl newc 
			inner join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
			inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
			where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
			and newc.UniqueConsumerId in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID )--and (upper(source)='AUTO' or isnull(source,'')=''))
		) t1 on t2.UniqueConsumerId=t1.UniqueConsumerId and t2.DistributorID=t1.DistributorID
		--WHERE  (upper(t2.source) = 'AUTO' or isnull(t2.source,'')='')
	End

	Begin			-- Insert which are not added previosly
		declare @RtnValue int =0
		insert into [SDS].[tblConsumerLocationHistory]
		(UniqueConsumerId,DistributorID,[AutoLatitude],[AutoLongitude],[AutoLastUpdateDateTime],[LastUpdatedDatetime])

		SELECT  newc.UniqueConsumerId,c.DistributorID,newc.Latitude, newc.Longitude,c.LastUpdateDateTime, getdate()
		
		FROM @consumerDtlstbl newc 
		INNER join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
		inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
		where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
		and newc.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID)

		set @RtnValue=@@ROWCOUNT
		--select @RtnValue as RtnValue
	End
	
END




GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateConsumerDtlsToLoc]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [SDS].[usp_UpdateConsumerDtlsToLoc]
--declare 
@distributorId int
--set @distributorId=14145
as

BEGIN
	if exists (select count(UniqueConsumerId) from sds.tblConsumerDetails where distributorId=@distributorId 
	and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory where distributorId=@distributorId))
	Begin
		insert into sds.tblConsumerLocationHistory (UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)
		select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails where distributorId=@distributorId 
		and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory where distributorId=@distributorId)
	End
--if exists (select count(UniqueConsumerId) from sds.tblConsumerLocationHistory where distributorId=@distributorId
--and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails where distributorId=@distributorId))
--BEGIN
--	insert into sds.tblConsumerDetails (UniqueConsumerId,DistributorID,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,
--		AreaName,Latitude,Longitude,PlaceId,Source,InArea,InCluster,inTradingArea,ClusterId,IsVerified,AddressConfirmed,AreaConfirmed,LocationConfirmed,
--		MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime,DistanceFromAgency,DistanceFromGodown)
	
--	select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() 
--	from sds.tblConsumerLocationHistory 

--	where distributorId=@distributorId 
--	and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory where distributorId=@distributorId)
--END
--if exists (select count(UniqueConsumerId) from DCMS.tblConsumerMaster  where distributorId=@distributorId 
--and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails where distributorId=@distributorId) )
--Begin
--	insert into sds.tblConsumerDetails(DistributorID,UniqueConsumerId,ConsumerNo,ConsumerName,ConsumerStatus,MobileNo,Address,Pin,AreaRefNo,AreaName,
--	Latitude,Longitude,InArea,InCluster,inTradingArea,ClusterId,Source,MstLastUpdateDateTime,AddrLastUpdateDateTime,ConLastUpdateDateTime,LastUpdatedDatetime,
--	IsVerified,AddressConfirmed,AreaConfirmed,LocationConfirmed,DistanceFromAgency,DistanceFromGodown)

--	SELECT c.DistributorID, newc.UniqueConsumerId, c.ConsumerNo, c.ConsumerName, c.ConsumerStatus, c.MobileNo, 
--	c.AddressLine1 +' '+ c.AddressLine2 +' '+ c.AddressLine3 as ConsumerAddress,  c.Pin, c.AreaRefNo, ar.AreaName,
--	newc.Latitude, newc.Longitude, newc.InArea, newc.InCluster, newc.inTradingArea ,InClusterId, 'AUTO', c.LastUpdateDateTime, c.LastUpdateDateTime, c.LastUpdateDateTime, getdate()
--	,newc.InCluster,newc.InCluster,newc.InCluster,newc.InCluster,newc.DistanceAgency,newc.DistanceGodown
--	FROM DCMS.tblConsumerMaster newc 
--	INNER join DCMS.tblConsumerMaster AS c with(nolock) on newc.UniqueConsumerId=c.UniqueConsumerId
--	inner join DCMS.tblDistributorAreaMaster AS ar with(nolock) on c.AreaRefNo=ar.AreaRefNo	
--	where c.DistributorID=@DistributorID and (c.AreaRefNo=@AreaRefNo or @AreaRefNo=0)
--	and newc.UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerDetails WITH(NOLOCK) where DistributorID=@DistributorID)

--	set @RtnValue=@@ROWCOUNT
--End
END

GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateConsumerDtlsTOLocation]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_UpdateConsumerDtlsTOLocation]
@DistributorId Int

as

----Update source wise existing consumers
-- Auto
update sds.tblConsumerLocationHistory set AutoLatitude= s.Latitude, AutoLongitude= s.Longitude,  AutoLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()
from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID 
where  upper(s.Source)='AUTO' and isnull(t1.AutoLatitude,'')='' and isnull(s.Latitude,'')<>''

-- VITARAN
update sds.tblConsumerLocationHistory set VITARANLatitude= s.Latitude, VITARANLongitude= s.Longitude,  VITARANLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()
from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID
where ( upper(s.Source)='VITARAN' or upper(s.Source)='SARVEKSHAN' or upper(s.Source)='VITRANOFFLINE') and isnull(t1.VITARANLatitude,'')='' and isnull(s.Latitude,'')<>''

-- MANUAL
update sds.tblConsumerLocationHistory set MANUALLatitude= s.Latitude, MANUALLongitude= s.Longitude,  MANUALLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()
from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID
where  upper(s.Source)='MANUAL' and isnull(t1.MANUALLatitude,'')='' and isnull(s.Latitude,'')<>''
-- EZYGAS
update sds.tblConsumerLocationHistory set EZYGASLatitude= s.Latitude, EZYGASLongitude= s.Longitude,  EZYGASLastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()
from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID
where  upper(s.Source)='EZYGAS' and isnull(t1.EZYGASLatitude,'')='' and isnull(s.Latitude,'')<>''
-- MIAPP
update sds.tblConsumerLocationHistory set MILatitude= s.Latitude, MILongitude= s.Longitude,  MILastUpdateDateTime= getdate(), LastUpdatedDatetime=getdate()
from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId and t1.DistributorID=s.DistributorID
where  (upper(s.Source)='MIAPP' or upper(s.Source)='MI' or upper(s.Source)='MIAPP_U') and isnull(t1.MILatitude,'')='' and isnull(s.Latitude,'')<>''

---- Insert source wise new consumers
--Auto
insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,AutoLatitude,AutoLongitude,AutoLastUpdateDateTime,LastUpdatedDatetime)
select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails 
where  upper(Source)='AUTO' and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )

--VITARAN
insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,VITARANLatitude,VITARANLongitude,VITARANLastUpdateDateTime,LastUpdatedDatetime)
select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails 
where  ( upper(Source)='VITARAN' or upper(Source)='SARVEKSHAN' or upper(Source)='VITRANOFFLINE') 
and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )

--MANUAL
insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,MANUALLatitude,MANUALLongitude,MANUALLastUpdateDateTime,LastUpdatedDatetime)
select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails 
where  upper(Source)='MANUAL' and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )

--EZYGAS
insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,EZYGASLatitude,EZYGASLongitude,EZYGASLastUpdateDateTime,LastUpdatedDatetime)
select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails 
where  upper(Source)='EZYGAS' and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )

--MI APP
insert into sds.tblConsumerLocationHistory(UniqueConsumerId,DistributorID,MILatitude,MILongitude,MILastUpdateDateTime,LastUpdatedDatetime)
select UniqueConsumerId,DistributorID,Latitude,Longitude,getdate(),getdate() from sds.tblConsumerDetails 
where  (upper(Source)='MIAPP' or upper(Source)='MI' or upper(Source)='MIAPP_U') 
and UniqueConsumerId not in (select UniqueConsumerId from sds.tblConsumerLocationHistory )





--select t1.UniqueConsumerId,s.UniqueConsumerId,t1.AutoLatitude, s.Latitude,s.Source 
--from sds.tblConsumerLocationHistory t1 inner join sds.tblConsumerDetails s on t1.UniqueConsumerId=s.UniqueConsumerId
--where upper(s.Source)='AUTO' and t1.AutoLatitude is null and s.Latitude is not null


GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateConsumerManualGC]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE proc [SDS].[usp_UpdateConsumerManualGC]  
--declare  
@UniqueConsumerId numeric(17,0),  
@DistributorID int,  
@Distance decimal(18,10),  
@Latitude nvarchar(50),  
@Longitude nvarchar(50),  
@Source nvarchar(50),  
@ResuldId bigint output  
as  
BEGIN  
	set @ResuldId=0;  
	SELECT @DistributorID=DistributorID fROM [SDS].[tblConsumerDetails] WHERE [UniqueConsumerId]=@UniqueConsumerId  
  
	IF  Exists(Select [UniqueConsumerId] From [SDS].[tblConsumerLocationHistory] where [UniqueConsumerId]=@UniqueConsumerId and DistributorID=@DistributorID)  
	BEGIN     
		Update [SDS].[tblConsumerLocationHistory]  
		Set Distance=@Distance,  
			[ManualLatitude] =@Latitude,  
			[ManualLongitude]=@Longitude,  
			[ManualLastUpdateDateTime]=GetDate()  
		where [UniqueConsumerId]=@UniqueConsumerId and DistributorID=@DistributorID  
		set @ResuldId= @@ROWCOUNT;  
	END  
	ELSE  
	BEGIN  
		Insert Into [SDS].[tblConsumerLocationHistory]([UniqueConsumerId],[DistributorID],Distance,[ManualLatitude],[ManualLongitude],[ManualLastUpdateDateTime],[LastUpdatedDatetime])  
		Select @UniqueConsumerId,@DistributorID,@Distance,@Latitude,@Longitude,GetDate(),GetDate()  
		set @ResuldId= @@ROWCOUNT;  
	END  
END  
  
GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateDeliveryBoyVehicleInTripPlanning]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Santosh>
-- Create date: <05-08-2019>
-- Description:	<To update Delivery Boy/Vehicle in trip planning>
-- =============================================
CREATE PROCEDURE [SDS].[usp_UpdateDeliveryBoyVehicleInTripPlanning]
@DistributorId int,
@TripId bigint,
@TripDate Datetime,
@StaffRefNo numeric(17,0),
@StaffName nvarchar(200),
@VehicleId bigint,
@ClusterId bigint,
@UpdateFlag nvarchar(50),
@GodownId	nvarchar(20),
@GLatitude	nvarchar(50),
@GLongitude	nvarchar(50),
@RtnValue bigint output

AS
BEGIN
	IF(@UpdateFlag = 'DB')--Update Delivery Boy
	BEGIN
		UPDATE SDS.tblTripPlanning
		SET		StaffRefNo = @StaffRefNo, StaffName = @StaffName, UpdatedDate=GETDATE()
		WHERE	DistributorId =@DistributorId and cast(TripDate as date)=cast(@TripDate as date) AND (TripId=@TripId or @TripId=0) AND (ClusterId=@ClusterId or @ClusterId=0)
		set @RtnValue = CASE when @TripId = 0 then @ClusterId else @TripId end
	END

	IF(@UpdateFlag = 'VH')--Update Vehicle
	BEGIN
		UPDATE SDS.tblTripPlanning
		SET		VehicleId = @VehicleId, UpdatedDate=GETDATE()
		WHERE	DistributorId =@DistributorId and cast(TripDate as date)=cast(@TripDate as date) AND (TripId=@TripId or @TripId=0) AND (ClusterId=@ClusterId or @ClusterId=0)
		set @RtnValue = CASE when @TripId = 0 then @ClusterId else @TripId end
	END

	IF(@UpdateFlag = 'GD')--Update Godown
	BEGIN
		UPDATE SDS.tblTripPlanning
		SET		GodownId = @GodownId, GLatitude=@GLatitude, GLongitude=@GLongitude, UpdatedDate=GETDATE()
		WHERE	DistributorId =@DistributorId and cast(TripDate as date)=cast(@TripDate as date) AND (TripId=@TripId or @TripId=0) AND (ClusterId=@ClusterId or @ClusterId=0)
		set @RtnValue = CASE when @TripId = 0 then @ClusterId else @TripId end
	END
END


GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateDeliverySequence]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_UpdateDeliverySequence]
--	Description		:	To Update Delivery Sequence

--	Author			:	Swapnil

--	Date Modified	Modified By	     Modifications
--	10-FEb-2020		Swapnil			Created
**************************************************************/

create PROCEDURE [SDS].[usp_UpdateDeliverySequence]
@TransId bigint,
@SequenceNo int,
@ConsumerNo int,
@resultId bigint output
AS
BEGIN
	
	set @resultId=0;

	

	IF EXISTS(SELECT 1 FROM [SDS].[tblConsumerDeliveryDetails] WHERE TransId=@TransId AND ConsumerNo=@ConsumerNo)
	BEGIN
		UPDATE [SDS].[tblConsumerDeliveryDetails]
		SET SequenceNo=@SequenceNo
		WHERE TransId=@TransId AND ConsumerNo=@ConsumerNo
		set @resultId=@@ROWCOUNT
	END
	ELSE 
	BEGIN
		set @resultId= -1
	END
	

	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateDistActiveTripGeneration]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create proc [SDS].[usp_UpdateDistActiveTripGeneration]
--declare
@DistActiveTripGen sds.DistActiveTripGeneration readonly,
@ResuldId bigint output
as
BEGIN

		set @ResuldId=0;
			Merge SDS.tblDistributorwiseActiveTripGeneration as target
			using  @DistActiveTripGen as source
			on
			 target.DistributorId=source.DistributorId 
			When matched and source.DistributorId=target.DistributorId
			Then
			update 
			set   target.CaseId= ISNULL(source.CaseId,target.CaseId),
				  target.ActiveFlag= ISNULL(source.ActiveFlag,target.ActiveFlag),
				  target.LastUpdatedDate=Getdate()
			When not matched by target --and source.UniqueConsumerId=target.UniqueConsumerId
			Then
			INSERT (DistributorId,CaseId,ActiveFlag,LastUpdatedDate)
			VALUES (source.DistributorId,source.CaseId,source.ActiveFlag,Getdate());

			set @ResuldId= @@ROWCOUNT;
END



GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateFeedbackSystemStatus]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_UpdateFeedbackSystemStatus]
--	Description		:	To update FeedbackSystem

--	Author			:	Swapnil	13-Jul-2020

--	Date Modified		Modified By	     Modifications
--	13-Jul-2020			Swapnil         Created
**************************************************************/

CREATE PROCEDURE [SDS].[usp_UpdateFeedbackSystemStatus]
	@DistributorId int,
	@IsFeedbackSystem bit,
	@UpdatedBy nvarchar(50),
	@Result bigint OUTPUT
AS
BEGIN
		set @Result=0 
		UPDATE [SDS].[tblFeedbackSystem]
		SET [IsActive]=@IsFeedbackSystem,
			[LastUpdateBy]=@UpdatedBy,
			[LastUpdateTime]=GetDate()
		set @Result=2 

END






GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateGodownLocationCDCMSToSDS]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_UpdateGodownLocationCDCMSToSDS]

as

BEGIN

	UPDATE SDS.tblDistributorGodown SET GodownAddress=d.GoDownAddress,Latitude=d.Latitude,Longitude=d.Longitude,LastUpdateDateTime=GETDATE()
	from SDS.tblDistributorGodown s inner join DCMS.tblDistributorGodown d on s.GodownId=d.GoDownId and d.DistributorId=s.DistributorId
	WHERE d.ActiveFlag='Y' 

	insert into SDS.tblDistributorGodown (GodownId,DistributorId,GodownNo,GodownAddress,Latitude,Longitude,ActiveFlag,LastUpdateDateTime)
	select d.GoDownId,d.DistributorId,d.GoDownNo,d.GoDownAddress,d.Latitude,d.Longitude,d.ActiveFlag,GETDATE() 
	from DCMS.tblDistributorGodown d left outer join SDS.tblDistributorGodown s on d.DistributorId=s.DistributorId and s.GodownId=d.GoDownId
	WHERE d.ActiveFlag='Y' and s.GodownId IS NULL

END
GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateInOrOutSidePoly]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**************************************************************											
--	Stored Procedure Name	: [usp_UpdateInOrOutSidePoly]
--	Description		:	Update Inside or outside area,cluster and trading area flag in Consumer details
--	Author			:	Prasanna	07-March-2020 
--	07-March-2020		Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_UpdateInOrOutSidePoly]
@DistributorId int,
@InOutPolyConsumers SDS.InOutPolyConsumers readonly,
@Flag varchar(15)
AS
BEGIN
	IF(@Flag='AREA')
	BEGIN
		UPDATE [SDS].[tblConsumerDetails] SET InArea = t.InArea,LastUpdatedDatetime=getdate() 
		FROM [SDS].[tblConsumerDetails] c INNER JOIN @InOutPolyConsumers t ON c.UniqueConsumerId = t.UniqueConsumerId 
		WHERE c.DistributorID=@DistributorId
	END
	ELSE IF(@Flag='CLUSTER')
	BEGIN
		UPDATE [SDS].[tblConsumerDetails] SET InCluster = t.InCluster, ClusterId=t.InclusterId,LastUpdatedDatetime=getdate()
		FROM [SDS].[tblConsumerDetails] c INNER JOIN @InOutPolyConsumers t ON c.UniqueConsumerId = t.UniqueConsumerId
		WHERE c.DistributorID=@DistributorId
	END
	ELSE IF(@Flag='TRADINGAREA')
	BEGIN
		UPDATE [SDS].[tblConsumerDetails] SET inTradingArea = t.InTradingArea,LastUpdatedDatetime=getdate()
		FROM [SDS].[tblConsumerDetails] c INNER JOIN @InOutPolyConsumers t ON c.UniqueConsumerId = t.UniqueConsumerId
		WHERE c.DistributorID=@DistributorId
	END	
	ELSE IF(@Flag='CONSUMER')
	BEGIN
		UPDATE [SDS].[tblConsumerDetails] 
		SET InArea = t.InArea, InCluster = t.InCluster, inTradingArea = t.InTradingArea, ClusterId=t.InclusterId,LastUpdatedDatetime=getdate()
		FROM [SDS].[tblConsumerDetails] c INNER JOIN @InOutPolyConsumers t ON c.UniqueConsumerId = t.UniqueConsumerId
		WHERE c.DistributorID=@DistributorId
	END	
END


GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateTransferBookingData]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [SDS].[usp_UpdateTransferBookingData] --14193
--declare
@DistributorId INT=0
as
Begin
declare @RetVal INT=0
	IF OBJECT_ID('tempdb..#TransferBkg') IS NOT NULL DROP TABLE #TransferBkg 
	CREATE TABLE #TransferBkg(SourceDistributorId INT,SourceClusterId BIGINT,UniqueConsumerId NUMERIC(17,0),SourceAreaRefNo NUMERIC(17,0),
	OrderRefNo NUMERIC(17,0),DestDistributorId INT,DestClusterId BIGINT,DestAreaRefNo NUMERIC(17,0),IsTransfer CHAR(1),UpdatedBy NVARCHAR(20),IsTransferDate DATETIME)

	INSERT INTO #TransferBkg(SourceDistributorId,SourceClusterId,UniqueConsumerId,SourceAreaRefNo,OrderRefNo,
	DestDistributorId,DestClusterId,DestAreaRefNo,IsTransfer,UpdatedBy,IsTransferDate)
	SELECT itb.SourceDistributorId,itb.SourceClusterId,itb.UniqueConsumerId,itb.SourceAreaRefNo,itb.OrderRefNo,
	itb.DestDistributorId,itb.DestClusterId,itb.DestAreaRefNo,itb.IsTransfer,itb.UpdatedBy,itb.IsTransferDate
	FROM HPCLDCMS.[INTERFACE].tblTransferBookingNew itb LEFT OUTER JOIN
	SDS.tblTransferBookingNew tb ON itb.SourceDistributorId=tb.SourceDistributorId and itb.UniqueConsumerId=tb.UniqueConsumerId
	WHERE (itb.SourceDistributorId=@DistributorId or @DistributorId=0) AND itb.DestAreaRefNo IS NOT NULL AND tb.DestAreaRefNo IS NULL

	UPDATE sds.tblTransferBookingNew   
	SET DestAreaRefNo = tbk.DestAreaRefNo,
		IsTransfer=tbk.IsTransfer,
		IsTransferDate=tbk.IsTransferDate,
		UpdatedBy =tbk.UpdatedBy,
		LastUpdatedDate = GETDATE() 
	FROM sds.tblTransferBookingNew tb INNER JOIN #TransferBkg tbk 
	ON tb.SourceDistributorId=tbk.SourceDistributorId and tb.UniqueConsumerId=tbk.UniqueConsumerId
	
SET @RetVal=@@ROWCOUNT
	Begin-- Update Area Cluster Mapping for destination AreaRefNos as per Destination clusterIds
		declare @NewAreas table(id int identity, DestDistributorId int, DestClusterId bigint, DestAreaRefNo numeric(17,0))

		insert into @NewAreas	select distinct DestDistributorId, DestClusterId, DestAreaRefNo from #TransferBkg

		--Update Existing Mapping records with New Cluster Id
		Update  SDS.tblAreaClusterMapping
		set AreaClusterId=new.DestClusterId, LastUpdatedDatetime=getdate(), IsActive='Y'
		from SDS.tblAreaClusterMapping m inner join @NewAreas new on m.AreaRefNo=new.DestAreaRefNo and m.DistributorId=new.DestDistributorId

		--Insert the New Mapping records for arearefno if not exists
		insert into SDS.tblAreaClusterMapping(DistributorId,AreaClusterId,AreaRefNo,LastUpdatedDatetime,IsActive)
		Select new.DestDistributorId, DestClusterId, DestAreaRefNo, getdate(),'Y' 
		from @NewAreas new left outer join SDS.tblAreaClusterMapping m on new.DestAreaRefNo=m.AreaRefNo and new.DestDistributorId=m.DistributorId
		where m.AreaClusterId is null

		-- Update cluster updated flag after cluster mapping
		UPDATE sds.tblTransferBookingNew   
		SET IsClusterUpdated='Y'
		FROM sds.tblTransferBookingNew tb INNER JOIN #TransferBkg tbk 
		ON tb.SourceDistributorId=tbk.SourceDistributorId and tb.UniqueConsumerId=tbk.UniqueConsumerId
		SET @RetVal=SCOPE_IDENTITY()
	End
	return @RetVal
DROP TABLE #TransferBkg

End 
GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateTripCase]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	 <Author,Rahul>
-- Create date: <Create Date,13-01-2018,>
-- Description:	<Description,to get Item details from Table against respective distributor,>
-- =============================================
CREATE PROCEDURE [SDS].[usp_UpdateTripCase]

@TripCaseId bigint,
@CaseId int,
@ParameterId int,
@Weightage decimal(10,2),
@OnOffFlag char(3),
@SequencePriority int,
@RefId nvarchar(50),
@RefValue nvarchar(50),
@ResultId bigint out 
AS
BEGIN
    
Set @ResultId=0;

IF  EXISTS (select TripCaseId  From [SDS].[tblTripCaseParameter] Where TripCaseId=@TripCaseId)
BEGIN

Update [SDS].[tblTripCaseParameter]
Set [CaseId]=@CaseId,
[ParameterId]=@ParameterId,
[Weightage]=@Weightage,
[OnOffFlag]=@OnOffFlag,
RefId=@RefId,
RefValue=@RefValue,
[SequencePriority]=@SequencePriority

Where TripCaseId=@TripCaseId 

Set @ResultId=@@RowCount;
END
ELSE
BEGIN

Set @ResultId=-1;

END   

END


GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateTripDetailsByDeliveryBoy]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[usp_UpdateTripDetailsByDeliveryBoy]
--declare
@Id bigint,
@TripStartDate datetime,
@TripEndDate datetime,
@ActualDeliveryDate datetime,
@ReturnQty int,
@DeliveredQty int,
@OrderStatus nvarchar(100),
@StaffRefNo numeric(17,0),
@Latitude nvarchar(50),
@Longitude nvarchar(50),
@PlaceId nvarchar(max),
@StartedOn datetime=null,
@ReachedOn datetime=null,
@EndedOn datetime =null,
@Status nvarchar(20),
@OrderRefNo numeric(17,0)=null,
@DistributorId int=null,
@DeliverySource nvarchar(20),
@result bigint OUTPUT

--set @Id=120; set @ActualDeliveryDate='2020-08-03 20:12:23.876' set @ReturnQty=1
--set @OrderStatus='Deliver' set @StaffRefNo=12011513900000006 set @Latitude='37.421998333333335' set @Longitude='-122.08400000000002'
--set @PlaceId='' set @StartedOn='2020-08-03 20:10:35.837' set @ReachedOn='2020-08-03 20:10:37.670'
--set @EndedOn='' set @DeliveredQty=1 set @Status='OrderDetails' set @OrderRefNo=6201513900025265 set @DistributorId=15139

AS

BEGIN	
	set FMTONLY OFF
	Set @result=0;		
	declare @OId numeric(17,0)=0

	IF(@Status='TripDetails')
	BEGIN
		Update SDS.tblTripPlanning 
		Set TripStartDate=ISNULL(@TripStartDate,TripStartDate),
			[TripStatus]=@OrderStatus,
			TripEndDate=ISNULL(@TripEndDate,TripEndDate),
			UpdatedDate=Getdate()
		where TripId=@Id

		IF(@@rowcount=1) BEGIN SET @result=@Id END

	IF NOT EXISTS(select 1 from SDS.tblTripPlanningHistory TPH where TPH.TripId=@Id)
		BEGIN
			INSERT INTO SDS.tblTripPlanningHistory 
			(TripId, TripNo, TripDate, DistributorId,ClusterId, StaffRefNo, StaffName, AddiStaffRefNo, AddiStaffName, VehicleId,
			TotalOrders, TripStatus, TripStartDate, TripEndDate, CreatedDate, UpdatedDate)

			SELECT TripId, TripNo, TripDate, DistributorId,ClusterId, StaffRefNo, StaffName, AddiStaffRefNo, AddiStaffName, VehicleId,
			TotalOrders, TripStatus, TripStartDate, TripEndDate, CreatedDate, UpdatedDate
			FROM SDS.tblTripPlanning
			WHERE (TripId = @Id)
		END
		ELSE
		BEGIN
			UPDATE SDS.tblTripPlanningHistory
			SET TripStartDate = ISNULL(@TripStartDate, TripStartDate), TripEndDate = ISNULL(@TripEndDate, TripEndDate), UpdatedDate = GETDATE(),
			[TripStatus]=@OrderStatus
			WHERE(TripId = @Id)
		END	
			
	END
	ELSE IF(@Status='OrderDetails')
	BEGIN
		select @OId=isnull(OrderRefNo,0) from sds.tblTripPlanningDetails where TripPlanningDetId = @Id
		if (isnull(@OId,0)<>0) Begin set @OrderRefNo=@OId End
		--select @OrderRefNo
		UPDATE       SDS.tblTripPlanningDetails
		SET             ActualDeliveryDate =ISNULL(@ActualDeliveryDate,ActualDeliveryDate),
						ReturnQty = @ReturnQty,
						OrderStatus = @OrderStatus,
						UpdatedBy = @StaffRefNo,
						DeliveredBy = @StaffRefNo,
						StartedOn=ISNULL(@StartedOn,StartedOn),
						ReachedOn=ISNULL(@ReachedOn,ReachedOn),
						EndedOn=ISNULL(@EndedOn,EndedOn),
						Latitude=@Latitude,
						Longitude=@Longitude,
						PlaceId=@PlaceId,
						DeliverySource = @DeliverySource,
						UpdatedDate = GETDATE()
		WHERE        (TripPlanningDetId = @Id) and (OrderRefNo=@OrderRefNo)

			IF(@@rowcount=1)
			BEGIN
					SET @result=@Id
			END

			IF NOT EXISTS(select 1 from SDS.tblTripPlanningDetailsHistory TPDH where TPDH.TripPlanningDetId=@Id)
			BEGIN
				if (isnull(@OId,0)<>0)
				begin
					INSERT INTO SDS.tblTripPlanningDetailsHistory
							(TripPlanningDetId, TripId, SequenceNo, OrderRefNo, UniqueConsumerId, NatureCode, PriceCode, ItemDesc, AreaRefNo, 
							OrderNo, OrderDate, OrderQuantity, ExpectedDeliveryDate, ActualDeliveryDate, ReturnQty, TotalPrice, 
							OrderStatus, ProcessFlag, ProcessDate, Latitude,Longitude,PlaceId,CashMemoRefNo,CashMemoNo,AssignedTo,FromDistributorId,FromClusterId,
							StartedOn,ReachedOn,EndedOn,CreatedBy, CreatedDate, UpdatedBy,DeliveredBy, UpdatedDate,IsPODHD,DeliverySource)

					SELECT  TripPlanningDetId, TripId, SequenceNo, OrderRefNo, UniqueConsumerId, NatureCode, PriceCode, ItemDesc, AreaRefNo,
							OrderNo, OrderDate, OrderQuantity, ExpectedDeliveryDate, ActualDeliveryDate, ReturnQty, TotalPrice, 
							OrderStatus, ProcessFlag, ProcessDate,Latitude,Longitude,PlaceId,CashMemoRefNo,CashMemoNo,AssignedTo,FromDistributorId,FromClusterId,
							StartedOn,ReachedOn,EndedOn,CreatedBy, CreatedDate, UpdatedBy,DeliveredBy, UpdatedDate,IsPODHD,DeliverySource
					FROM    SDS.tblTripPlanningDetails
					WHERE  (TripPlanningDetId = @Id)
				end
				else
				begin
				--select 1
					---Get order details for insert
					Begin
					DECLARE @GroupCode VARCHAR(3)='', @strquery varchar(max)
					SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @DistributorId
					if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	
					IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

					CREATE TABLE #tblpendingOdr(id int identity, TripId bigint,SequenceNo int,TripNo nvarchar(50),TripPlanningDetId bigint,OrderRefNo numeric(17, 0),
					NatureCode varchar(2),PriceCode int, OrderNo int, OrderDate datetime,
						UniqueConsumerId numeric(17, 0), ConsumerNo int, ConsumerName nvarchar(500), AreaName nvarchar(200), Address nvarchar(500), Pin decimal(10,0), OrderQuantity int,
						ItemDesc nvarchar(50), TotalPrice decimal(10,2), ExpectedDeliveryDate datetime, 
						 OrderStatus nvarchar(10),PaymentType nvarchar(20), AreaRefNo numeric(17, 0), Latitude nvarchar(50), Longitude nvarchar(50), MobileNo nvarchar(20),
						StaffRefNo numeric(17, 0),StaffName nvarchar(200),DistributorId int,TripDate datetime,TripStatus nvarchar(20),TripStartDate datetime,TripEndDate datetime, ReturnQty int,
						ActualDeliveryDate datetime, CashMemoNo nvarchar(50),CashMemoRefNo numeric(17, 0),DeliveredBy nvarchar(200),DeliverySource nvarchar(20))

					set @strquery=( '
						insert into #tblpendingOdr (TripId,SequenceNo,TripNo,TripPlanningDetId,OrderRefNo,NatureCode,PriceCode, OrderNo, OrderDate,
						UniqueConsumerId, ConsumerNo, ConsumerName, AreaName, Address, Pin, OrderQuantity,
						ItemDesc, TotalPrice, ExpectedDeliveryDate, OrderStatus,PaymentType, AreaRefNo, Latitude, Longitude, MobileNo,
						StaffRefNo,StaffName,DistributorId,TripDate,TripStatus,TripStartDate,TripEndDate, ReturnQty,
						ActualDeliveryDate, CashMemoNo,CashMemoRefNo,DeliveredBy,DeliverySource)

						SELECT TP.TripId,TPD.SequenceNo,TP.TripNo,TPD.TripPlanningDetId,o.OrderRefNo,o.NatureCode,o.PriceCode, o.OrderNo, o.OrderDate,
							o.UniqueConsumerId, CD.ConsumerNo, CD.ConsumerName, CD.AreaName, CD.Address, CD.Pin, o.OrderQuantity,
							i.ItemDescription as ItemDesc, 0 as TotalPrice, o.ExpectedDeliveryDate, 0 as OrderStatus,
							''work on it'' AS PaymentType, TPD.AreaRefNo, pod.Latitute, pod.Longitute,ISNULL(CD.MobileNo,0) as MobileNo,
							TP.StaffRefNo,TP.StaffName,TP.DistributorId,TP.TripDate,TP.TripStatus,TP.TripStartDate,TP.TripEndDate, o.ReturnQty, o.ActualDeliveryDate,
						 TPD.CashMemoNo,TPD.CashMemoRefNo,dsd.StaffName DeliveredBy,TPD.DeliverySource
		
						FROM	SDS.tblTripPlanningDetails AS TPD WITH (nolock) INNER JOIN
						SDS.tblTripPlanning AS TP WITH (nolock) ON TPD.TripId = TP.TripId 
						left outer join dcms.tblDistributorStaffDetails AS dsd WITH (nolock) on dsd.StaffRefNo=TPd.DeliveredBy 
						left outer join dcms.tblRefillOrderDtls'+@GroupCode +' o with (NOLOCK) on tpd.AreaRefNo=o.AreaRefNo
						left outer join SDS.tblConsumerDetails AS CD WITH (nolock) ON CD.UniqueConsumerId = o.UniqueConsumerId 
						left outer join sds.tblCDCMSAreaPODDetails pod with (NOLOCK) on TPD.AreaRefNo=pod.AreaRefNo and pod.DistributorId='+convert(nvarchar(25),@DistributorId)+'
						left outer JOIN DCMS.tblItemPriceCodeMap i WITH (NOLOCK) ON o.PriceCode = i.PriceCode

						WHERE	TP.DistributorId='+convert(nvarchar(25),15139)+' and   o.OrderRefNo='+convert(nvarchar(25),@OrderRefNo) +'
						and CAST(TP.TripDate as date)=CAST(ISNULL('''+ CONVERT(nvarchar(50), @StartedOn,101)+''',TP.TripDate) as date)'
						)
							 
						print @strquery
						exec (@strquery)
					End
					-------------------------------------------------------------------

					INSERT INTO SDS.tblTripPlanningDetailsHistory
							(TripPlanningDetId, TripId, SequenceNo, OrderRefNo, UniqueConsumerId, NatureCode, PriceCode, ItemDesc, AreaRefNo, 
							OrderNo, OrderDate, OrderQuantity, ExpectedDeliveryDate, ActualDeliveryDate, ReturnQty, TotalPrice, 
							OrderStatus, ProcessFlag, ProcessDate, Latitude,Longitude,PlaceId,CashMemoRefNo,CashMemoNo,
							StartedOn,ReachedOn,EndedOn,CreatedBy, CreatedDate, UpdatedBy,DeliveredBy, UpdatedDate,IsPODHD,DeliverySource)

					SELECT  o.TripPlanningDetId, o.TripId, o.SequenceNo, o.OrderRefNo, o.UniqueConsumerId, o.NatureCode, o.PriceCode, o.ItemDesc, o.AreaRefNo,
							o.OrderNo, o.OrderDate, o.OrderQuantity, o.ExpectedDeliveryDate, @ActualDeliveryDate, @ReturnQty, o.TotalPrice, 
							@OrderStatus, d.ProcessFlag, d.ProcessDate,@Latitude,@Longitude,'',o.CashMemoRefNo,o.CashMemoNo,
							@StartedOn,@ReachedOn,@EndedOn,@StaffRefNo, getdate(), @StaffRefNo,@StaffRefNo, getdate(),'POD',o.DeliverySource
					FROM    #tblpendingOdr o left outer join SDS.tblTripPlanningDetails d on o.TripPlanningDetId=d.TripPlanningDetId

					WHERE   (o.OrderRefNo = @OrderRefNo)
				end
			END
			ELSE
			BEGIN
					Update SDS.tblTripPlanningDetailsHistory
					Set ActualDeliveryDate =ISNULL(@ActualDeliveryDate,ActualDeliveryDate),
						ReturnQty = @ReturnQty,
						OrderStatus = @OrderStatus,
						UpdatedBy = @StaffRefNo,
						StartedOn=ISNULL(@StartedOn,StartedOn),
						ReachedOn=ISNULL(@ReachedOn,ReachedOn),
						EndedOn=ISNULL(@EndedOn,EndedOn),
						Latitude=@Latitude,
						Longitude=@Longitude,
						PlaceId=@PlaceId,
						UpdatedDate = GETDATE(),
						DeliveredBy = @StaffRefNo,
						IsPODHD=IsPODHD,
						DeliverySource = @DeliverySource
						where TripPlanningDetId=@Id and (OrderRefNo = @OrderRefNo)
			END	

			if (@OrderStatus='DLVD')
			Begin
				declare @DelBoyId numeric(17,0)=0
				select @DelBoyId=isnull(StaffRefNo,0) from sds.tblTripPlanning t inner join sds.tblTripPlanningDetails d on t.TripId=d.TripId
				where d.TripPlanningDetId = @Id and AddiStaffRefNo=@StaffRefNo or StaffRefNo=@StaffRefNo

				update sds.tblDeliveryBoyStock set	FilledQuantity=FilledQuantity-ISNULL(@DeliveredQty,0),EmptyQuantity=EmptyQuantity+ISNULL(@ReturnQty,0)
				where DeliveryBoyId=@DelBoyId and ItemId=2
			End

	END	
	IF OBJECT_ID('tempdb..#tblpendingOdr') IS NOT NULL DROP TABLE #tblpendingOdr

END

GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateTripStatus]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--			sds.usp_UpdateTripStatus 14193,'DELIVERED',''

CREATE proc [SDS].[usp_UpdateTripStatus]
--declare
@DistributorId int,
@TripStatus nvarchar(100),
@TripIdStr varchar(Max)

--set @DistributorId=14193; set @TripIdStr='75,76,77'; set @TripStatus='Alloted'

as
Begin
	set FMTONLY OFF
	if (isnull(@TripIdStr,'')='') set @TripIdStr='0';
	exec ('update sds.tblTripPlanning set TripStatus='''+@TripStatus+''' where tripId in (' + @TripIdStr+')')

	declare @s table(StaffRefNo numeric(17,0), StaffName nvarchar(200))
	insert into @s exec ('select distinct StaffRefNo,StaffName from sds.tblTripPlanning where tripId in (' + @TripIdStr+')')
	
	select StaffRefNo, StaffName from @s

	--select StaffRefNo,StaffName from sds.tblTripPlanning
End


GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateTriptKMDelBoy]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_UpdateTriptKMDelBoy]    
--declare    
@DistributorId int ,
@TripDate datetime,     
@TotalKM_DelBoy decimal(18,2) ,    
@TotalTime_DelBoy decimal(18,2) ,    
@StaffRefNo numeric(17, 0)   
   
AS    
BEGIN    
    
 IF EXISTS(SELECT 1 FROM SDS.tblTripKMDetails with (nolock) WHERE StaffRefNo=@StaffRefNo and DistributorId=@DistributorId and   
 CAST(CreatedDate as date)=CAST(@TripDate as date)  )  
 BEGIN    
  UPDATE SDS.tblTripKMDetails SET TotalKM_DelBoy=@TotalKM_DelBoy,TotalTime_DelBoy=@TotalTime_DelBoy   
  WHERE  StaffRefNo=@StaffRefNo and DistributorId=@DistributorId and CAST(CreatedDate as date)=CAST(@TripDate as date)  
    END    
END 
GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateUserPassword]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select * from DCMS.tblDistributorMaster where DistributorId = 8131
--select * from sds.tbluser

CREATE PROCEDURE [SDS].[usp_UpdateUserPassword]
@UserId int,
@CurrentEncryptPassword nvarchar(50),
@NewPassword nvarchar(50),
@NewEncryptPassword nvarchar(1000),
@RtnValue bigint output

As
Begin
	--check if user exists
	if exists ( select 1 
				from sds.tbluser sdsU
				left join DCMS.tblDistributorMaster hpclM WITH(NOLOCK)
				on sdsU.RefNo = hpclM.DistributorId
				where sdsU.UserId =UserId AND sdsU.Status='Y')
	Begin
		--If user exists: check if current password valid
		if exists(select 1 from sds.tbluser where EncryptPassword = @CurrentEncryptPassword AND Status='Y')
		Begin
			--if current password valid : then update Password and EncryptPassword
			update sds.tbluser
			set Password = @NewPassword, EncryptPassword = @NewEncryptPassword
			where UserId = @UserId AND Status='Y'

			set  @RtnValue=@UserId
		End
		else
		Begin
			set @RtnValue=-1
		End
	End
	else
		Begin
			set @RtnValue=-1
		End
End



GO
/****** Object:  StoredProcedure [SDS].[usp_UpdateVitranDLVDDetails]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [SDS].[usp_UpdateVitranDLVDDetails]
--declare
@Id bigint=0,
@TripStartDate datetime,
@TripEndDate datetime,
@ActualDeliveryDate datetime,
@ReturnQty int,
@DeliveredQty int,
@OrderStatus nvarchar(100),
@StaffRefNo numeric(17,0),
@Latitude nvarchar(50),
@Longitude nvarchar(50),
@PlaceId nvarchar(max),
@StartedOn datetime=NULL,
@ReachedOn datetime=NULL,
@EndedOn datetime=NULL,
@Status nvarchar(20),
@OrderRefNo numeric(17,0),
@DistributorCode varchar(20),
@DeliverySource nvarchar(20),
@result bigint OUTPUT

--SET @Id =0;SET @TripStartDate ='2024-04-25';SET @TripEndDate ='2024-04-25';SET @ActualDeliveryDate ='2024-04-25';SET @ReturnQty =1;
--SET @DeliveredQty =1;SET @OrderStatus ='DLVD';SET @StaffRefNo =11811419300000017;SET @Latitude ='18.60522500479526';
--SET @Longitude ='73.71473108373469';SET @PlaceId =0;SET @StartedOn ='2024-04-25';SET @ReachedOn ='2024-04-25';SET @EndedOn ='2024-04-25';
--SET @Status ='OrderDetails';SET @OrderRefNo =1241419300061378;SET @DistributorCode='41049924';SET @DeliverySource ='VITRAN;


as

BEGIN
	Declare @Did int=0
	select @Did =DistributorId from DCMS.tblDistributorMaster where JDEDistributorCode=@DistributorCode
	declare @DelBoyName varchar(200)='', @vid bigint, @vNo varchar(20), @GroupCode varchar(5)='', @strquery varchar(max)=''
	SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) WHERE DistributorId = @Did
	if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode

	select @DelBoyName=staffname, @vid=dv.VehicleId,@vNo=v.VehicleNo from DCMS.tblDistributorStaffDetails d with(nolock) 
	left outer join SDS.tblVehicleDeliveryBoyMapping dv with(nolock) on d.StaffRefNo=dv.DeliveryBoyId  
	left outer join SDS.tblVehicleMaster v on dv.VehicleId=v.VehicleId
	where StaffRefNo=@StaffRefNo	

	IF OBJECT_ID('tempdb..#odr') IS NOT NULL DROP TABLE #odr
	create table #odr (id int identity, did int, OrderRefNo numeric(17,0), OrderNo varchar(10),OrderDate datetime,
	UniqueConsumerId numeric(17,0), ConsumerNo varchar(10), ConsumerName varchar(250),AreaRefNo numeric(17,0), 
	AreaName varchar(250), AreaClusterId bigint, ClusterName varchar(250))

	set @strquery=(' insert into #odr(did, OrderRefNo, OrderNo, OrderDate, UniqueConsumerId, ConsumerNo, ConsumerName, 
			AreaRefNo, AreaName, AreaClusterId, ClusterName)
		Select o.DistributorId, o.OrderRefNo, o.OrderNo, o.OrderDate, o.UniqueConsumerId, cd.ConsumerNo, cd.ConsumerName, 
			o.AreaRefNo, da.AreaName, ac.AreaClusterId, c.AreaClusterName
		From DCMS.tblRefillOrderDtls'+@GroupCode +' o with (nolock) 
			inner join SDS.tblConsumerDetails cd with (nolock) on o.UniqueConsumerId=cd.UniqueConsumerId and o.DistributorID=cd.DistributorID
			left outer join DCMS.tblDistributorAreaMaster da on o.AreaRefNo=da.AreaRefNo
			left outer join SDS.tblAreaClusterMapping ac on o.AreaRefNo=ac.AreaRefNo
			left outer join SDS.tblClusterMaster c on ac.AreaClusterId=c.ClusterId
		Where O.OrderRefNo='+convert(nvarchar(25),@OrderRefNo) +' and o.DistributorID='+convert(nvarchar(25),@Did)
		)
	print (@strquery)
	exec(@strquery)

	if not exists(select * from SDS.tblVitranDeliveryDetails where OrderRefNo=@OrderRefNo and DistributorId=@Did)
	Begin
		Insert into SDS.tblVitranDeliveryDetails(DistributorId, StaffRefNo, StaffName, OrderRefNo, OrderNo, OrderDate, UniqueConsumerId, 
			ConsumerNo, ConsumerName, AreaRefNo, AreaName, ActualDeliveryDate, DelLatitude, DelLongitude, ReturnQty, VehicleId, VehicleNo, 
			ClusterId, ClusterName, OrderStatusCode, DeliverySource, LastUpdatedDate)
		Select did, @StaffRefNo, @DelBoyName, @OrderRefNo, o.OrderNo, o.OrderDate, o.UniqueConsumerId, o.ConsumerNo, o.ConsumerName, 
			o.AreaRefNo, o.AreaName, @ActualDeliveryDate, @Latitude, @Longitude, @ReturnQty, @vid, @vNo, o.AreaClusterId, o.ClusterName,
			@OrderStatus, @DeliverySource,getdate()
		From #odr o Where O.OrderRefNo=@OrderRefNo and o.did=@Did

		set @result=@@ROWCOUNT
	End
	Else
	Begin
		Update SDS.tblVitranDeliveryDetails
		Set StaffRefNo=@StaffRefNo,
			StaffName=@DelBoyName,
			UniqueConsumerId=o.UniqueConsumerId,
			ConsumerNo=o.ConsumerNo,
			ConsumerName=o.ConsumerName,
			AreaRefNo=o.AreaRefNo,
			AreaName=o.AreaName,
			ActualDeliveryDate=@ActualDeliveryDate,
			DelLatitude=@Latitude,
			DelLongitude=@Longitude,
			ReturnQty=@ReturnQty,
			VehicleId=@vid,
			VehicleNo=@vNo,
			ClusterId=o.AreaClusterId,
			ClusterName=o.ClusterName,
			OrderStatusCode=@OrderStatus,
			DeliverySource=@DeliverySource,
			LastUpdatedDate=getdate()
		From SDS.tblVitranDeliveryDetails vt inner join #odr o on o.did=vt.DistributorID and o.OrderRefNo=vt.OrderRefNo

		set @result=@@ROWCOUNT
	End
	set @strquery=''
	set @strquery=' Update DCMS.tblRefillOrderDtls'+@GroupCode +'
		set OrderStatusCode='''+convert(nvarchar(25),@OrderStatus) +''',
			ActualDeliveryDate='''+convert(nvarchar(25),@ActualDeliveryDate,101) +''',
			ReturnQty='+convert(nvarchar(25),@ReturnQty) +'
		Where DistributorID='+convert(nvarchar(25),@Did) +' and OrderRefNo='+convert(nvarchar(25),@OrderRefNo) 

	print (@strquery)
	exec(@strquery)

	RETURN @result
	drop table #odr
END
GO
/****** Object:  StoredProcedure [SDS].[usp_UserDetailsByMobileNo]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--   [SDS].usp_UserDetailsByMobileNo 8097212129  
  
CREATE PROCEDURE [SDS].[usp_UserDetailsByMobileNo]  
--declare  
 @MobileNo varchar(15)  
 --set @MobileNo='8369031136'  
/**************************************************************             
-- Procedure Name : usp_UserDetailsByMobileNo  
-- Description  : To check user is authentic or not  
-- Parameters  : @MobileNo nvarchar(15) - Input Parameter for MobileNo to check MobileNo is correct or not        
-- Return Value : Return DisplayName,UserType if user is authentic--        
-- Author   : Prasanna   
-- Date Modified  Modified By    Modifications  
-- 04-April-2019  Prasanna   Created  
**************************************************************/  
 --print 1  
AS  
  
BEGIN  
-- For Testing by Vitaran team  
 If (@MobileNo='9370616164' or @MobileNo='9011993897' or @MobileNo='9665709402')   
 Begin  
  declare @StaffRefNo numeric(17,0), @rid int  
  if (@MobileNo='9370616164') set @StaffRefNo=11811419300000017  
  if (@MobileNo='9011993897') set @StaffRefNo=12011419300000011  
  if (@MobileNo='9665709402') set @StaffRefNo=12111419300000001  
  --if (@MobileNo='8951727679' or @MobileNo='9010603600') set @rid=5 else set @rid=4  
  
  SELECT dsm.WhetherDeliveryBoy,SDS.fn_CamelCase(dsm.StaffName) as StaffName,dsm.StaffRefNo,dm.DistributorID, dm.[JDEDistributorCode],  
  SDS.fn_CamelCase(dm.DistributorName) as DistributorName,'' as StaffAddress,dsm.IsGodownKeeper,dsm.ContactPhone1 as MobileNo,  
  CAST(dm.AddressLine1 + ','+ dm.AddressLine2 +','+ dm.AddressLine3 as varchar) as DistributorAddress ,dm.GSTN as  GSTNO,dm.Email,  
  (CASE WHEN dsm.WhetherDeliveryBoy='Y' THEN   
  (SELECT TOP 1 StaffRefNo FROM DCMS.tblDistributorStaffDetails WITH(NOLOCK) WHERE DistributorID=dm.DistributorId AND IsGodownKeeper='Y') END) AS GodownKeeperId,  
  (CASE WHEN dsm.WhetherDeliveryBoy='Y' and vdm.deliveryboyid=dsm.StaffRefNo THEN (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Delivery Boy' AND ActiveStatus='Y')  
     WHEN dsm.WhetherDeliveryBoy='Y' and vdm.AdditionalDelBoyId=dsm.StaffRefNo THEN (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Helper' AND ActiveStatus='Y')  
  ELSE (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Godown Keeper' AND ActiveStatus='Y') END)  
  AS RoleId,  
  (dm.PhoneNo + ','+ CAST(dm.MobileNo as nvarchar(100))) as ContactDetails  
  FROM DCMS.tblDistributorStaffDetails dsm WITH(NOLOCK) INNER JOIN   
  DCMS.tblDistributorMaster dm WITH(NOLOCK) ON dsm.DistributorID=dm.DistributorId   
  left outer join sds.tblVehicleDeliveryBoyMapping vdm on (dsm.StaffRefNo=vdm.deliveryboyid or dsm.StaffRefNo=vdm.AdditionalDelBoyId)  
  WHERE dsm.StaffRefNo=@StaffRefNo    
 End  
 else  
 Begin  
  SELECT dsm.WhetherDeliveryBoy,SDS.fn_CamelCase(dsm.StaffName) as StaffName,dsm.StaffRefNo,dm.DistributorID, dm.[JDEDistributorCode],  
  SDS.fn_CamelCase(dm.DistributorName) as DistributorName,'' as StaffAddress,dsm.IsGodownKeeper,dsm.ContactPhone1 as MobileNo,  
  CAST(dm.AddressLine1 + ','+ dm.AddressLine2 +','+ dm.AddressLine3 as varchar) as DistributorAddress ,dm.GSTN as  GSTNO,dm.Email,  
  (CASE WHEN dsm.WhetherDeliveryBoy='Y' THEN   
  (SELECT TOP 1 StaffRefNo FROM DCMS.tblDistributorStaffDetails WITH(NOLOCK) WHERE DistributorID=dm.DistributorId AND IsGodownKeeper='Y') END) AS GodownKeeperId,  
  (CASE WHEN dsm.WhetherDeliveryBoy='Y' and vdm.deliveryboyid=dsm.StaffRefNo THEN (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Delivery Boy' AND ActiveStatus='Y')  
     WHEN dsm.WhetherDeliveryBoy='Y' and vdm.AdditionalDelBoyId=dsm.StaffRefNo THEN (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Helper' AND ActiveStatus='Y')  
  WHEN gs.GodownKeeperId=dsm.StaffRefNo THEN (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Godown Keeper' AND ActiveStatus='Y')   
  ELSE 0 END) AS RoleId,  
  (dm.PhoneNo + ','+ CAST(dm.MobileNo as nvarchar(100))) as ContactDetails  
  FROM DCMS.tblDistributorStaffDetails dsm WITH(NOLOCK) INNER JOIN   
  DCMS.tblDistributorMaster dm WITH(NOLOCK) ON dsm.DistributorID=dm.DistributorId   
  left outer join sds.tblVehicleDeliveryBoyMapping vdm on (dsm.StaffRefNo=vdm.deliveryboyid or dsm.StaffRefNo=vdm.AdditionalDelBoyId)  
  left outer join SDS.tblDistributorGodownStaffMapping gs on dsm.StaffRefNo=gs.GodownKeeperId
  WHERE dsm.ContactPhone1=@MobileNo AND dsm.StaffStatusCode = 'Active' AND (dsm.IsGodownKeeper='Y' OR dsm.WhetherDeliveryBoy='Y')  
   AND (dsm.StaffName NOT LIKE 'DCMS%')  
  End  
END  
GO
/****** Object:  StoredProcedure [SDS].[usp_UserDetailsByUsername]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [SDS].[usp_UserDetailsByUsername]
	@Username varchar(35)
	

AS

BEGIN

	SELECT dsm.WhetherDeliveryBoy,SDS.fn_CamelCase(dsm.StaffName) as StaffName,dsm.StaffRefNo,dm.DistributorID, dm.[JDEDistributorCode],SDS.fn_CamelCase(dm.DistributorName) as DistributorName,'' as StaffAddress,dsm.IsGodownKeeper,dsm.ContactPhone1 as MobileNo,
	CAST(dm.AddressLine1 + ','+ dm.AddressLine2 +','+ dm.AddressLine3 as varchar) as DistributorAddress ,dm.GSTN as  GSTNO,dm.Email,
	(CASE WHEN dsm.WhetherDeliveryBoy='Y' THEN 
	(SELECT TOP 1 StaffRefNo FROM DCMS.tblDistributorStaffDetails WITH(NOLOCK) WHERE DistributorID=dm.DistributorId AND IsGodownKeeper='Y') END) AS GodownKeeperId,
	(CASE WHEN dsm.WhetherDeliveryBoy='Y' THEN 
	(SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Delivery Boy' AND ActiveStatus='Y')
	ELSE (SELECT RoleId FROM SDS.tblRoleMaster WHERE RoleName='Godown Keeper' AND ActiveStatus='Y') END) AS RoleId
	FROM DCMS.tblDistributorStaffDetails dsm WITH(NOLOCK) INNER JOIN 
	DCMS.tblDistributorMaster dm WITH(NOLOCK) ON dsm.DistributorID=dm.DistributorId 
	WHERE dm.[JDEDistributorCode]=@Username AND dsm.StaffStatusCode = 'Active' AND (dsm.IsGodownKeeper='Y' OR dsm.WhetherDeliveryBoy='Y')

END


GO
/****** Object:  StoredProcedure [SDS].[usp_UserLoginCheck]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		 sds.usp_UserLoginCheck '12550950', '15eKkR8EjkMflF+NTVQfXg==','','UNamePWD'

-- User Active is not checked here will return inactive users too. For Inactive user message will be different
CREATE proc [SDS].[usp_UserLoginCheck]
--declare
@username nvarchar(50),
@password nvarchar(500),
@userId bigint,
@operation varchar(20)
--set @username='12550950'; set @password='15eKkR8EjkMflF+NTVQfXg=='; set @operation='UNamePWD'
as			

BEGIN

	if(@operation='UNamePWD')
	Begin
		SELECT u.UserId, u.RoleId, u.RefNo, u.DisplayName, u.UserName, u.Password, u.EncryptPassword, u.Status, u.LastUpdatedDate, r.RoleName,
		isnull(b.IsOnBoardingStage1,0) IsOnBoardingStage1, isnull(b.IsOnBoardingStage2,0) IsOnBoardingStage2,Fs.IsActive as IsFeedbackSystem,
		ISNULL(cr.ActiveForOnBoarding,'N') AS ActiveForOnBoarding,cr.AllotedDateTime
		FROM SDS.tblUser AS u INNER JOIN 
		SDS.tblRoleMaster AS r ON u.RoleId = r.RoleId LEFT OUTER JOIN
		SDS.tblOnBoardingCompleted AS b ON u.RefNo = b.DistributorId LEFT OUTER JOIN
	   [SDS].[tblFeedbackSystem] AS Fs On Fs.Id= Fs.Id LEFT OUTER JOIN
		[SDS].[tblDistributorClassRoomLog] cr ON cr.DistributorId=u.RefNo
		where u.UserName= @username and u.EncryptPassword=@password --and u.Status='Y' 
	ENd
	
	if(@operation='UNameUID')
	Begin
		SELECT u.UserId, u.RoleId, u.RefNo, u.DisplayName, u.UserName, u.Password, u.EncryptPassword, u.Status, u.LastUpdatedDate, r.RoleName,
		isnull(b.IsOnBoardingStage1,0) IsOnBoardingStage1, isnull(b.IsOnBoardingStage2,0) IsOnBoardingStage2,Fs.IsActive as IsFeedbackSystem,
		ISNULL(cr.ActiveForOnBoarding,'N') AS ActiveForOnBoarding,cr.AllotedDateTime
		FROM SDS.tblUser AS u INNER JOIN SDS.tblRoleMaster AS r ON u.RoleId = r.RoleId LEFT OUTER JOIN
		SDS.tblOnBoardingCompleted AS b ON u.RefNo = b.DistributorId LEFT OUTER JOIN
	   [SDS].[tblFeedbackSystem] AS Fs On Fs.Id= Fs.Id LEFT OUTER JOIN
		[SDS].[tblDistributorClassRoomLog] cr ON cr.DistributorId=u.RefNo
		where u.UserName= @username and u.UserId=@userId --and u.Status='Y' 
	ENd
	if(@operation='ADSSO')
	Begin
		SELECT u.UserId, u.RoleId, u.RefNo, u.DisplayName, u.UserName, u.Password, u.EncryptPassword, u.Status, u.LastUpdatedDate, r.RoleName,
		isnull(b.IsOnBoardingStage1,0) IsOnBoardingStage1, isnull(b.IsOnBoardingStage2,0) IsOnBoardingStage2,Fs.IsActive as IsFeedbackSystem,
		ISNULL(cr.ActiveForOnBoarding,'N') AS ActiveForOnBoarding,cr.AllotedDateTime
		FROM SDS.tblUser AS u INNER JOIN SDS.tblRoleMaster AS r ON u.RoleId = r.RoleId LEFT OUTER JOIN
		SDS.tblOnBoardingCompleted AS b ON u.RefNo = b.DistributorId
		inner join sds.tblOfficerDetails o on u.RefNo=o.AreaCode and upper(o.OfficerRole)='SO' LEFT OUTER JOIN
	   [SDS].[tblFeedbackSystem] AS Fs On Fs.Id= Fs.Id LEFT OUTER JOIN
		[SDS].[tblDistributorClassRoomLog] cr ON cr.DistributorId=u.RefNo
		where o.EmployeeNo= @username
	End

END



GO
/****** Object:  StoredProcedure [SDS].[usp_UserLoginCheck_CDCMSToSDS]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		sds.usp_UserLoginCheck_CDCMSToSDS 11361100,1181088910000008

CREATE proc [SDS].[usp_UserLoginCheck_CDCMSToSDS]
--declare
@DealerCode varchar(50),
@ProfileId varchar(50)

--set @DealerCode=12550950; set @ProfileId=1191513911000003
as
BEGIN
	--if exists(select * from hpcldcms.interface.tblSDSLogin where DealerCode=@DealerCode and ProfileId=@ProfileId )--and LastLoggedIn >=DATEADD(MINUTE,-2,getdate())
	Begin
		SELECT u.UserId, u.RoleId, u.RefNo, u.DisplayName, u.UserName, u.Password, u.EncryptPassword, u.Status, u.LastUpdatedDate, r.RoleName,
		isnull(b.IsOnBoardingStage1,0) IsOnBoardingStage1, isnull(b.IsOnBoardingStage2,0) IsOnBoardingStage2,Fs.IsActive as IsFeedbackSystem,
		ISNULL(cr.ActiveForOnBoarding,'N') AS ActiveForOnBoarding,cr.AllotedDateTime
		FROM SDS.tblUser AS u INNER JOIN SDS.tblRoleMaster AS r ON u.RoleId = r.RoleId LEFT OUTER JOIN
		SDS.tblOnBoardingCompleted AS b ON u.RefNo = b.DistributorId  LEFT OUTER JOIN
	   [SDS].[tblFeedbackSystem] AS Fs On Fs.Id= Fs.Id LEFT OUTER JOIN
		[SDS].[tblDistributorClassRoomLog] cr ON cr.DistributorId=u.RefNo
		where u.UserName= @DealerCode
	End
End



GO
/****** Object:  StoredProcedure [SDS].[usp_ValidInvalidCLDtlsDiswiseTripGenLst]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_ValidInvalidCLDtlsDiswiseTripGenLst]

as
Begin

	select distinct clt.DistributorId,dc.JDEDistributorCode,dc.DistributorName,
	clt.ClusterId, cls.AreaClusterName,er.ErrorLog
	from SDS.tblClusterWiseTripDtls clt with (nolock)
	LEFT OUTER JOIN DCMS.tblDistributorMaster dc  on dc.DistributorId=clt.DistributorId
	Inner join SDS.tblClusterMaster cls  with (nolock) on clt.ClusterId= cls.ClusterId
	left outer join sds.tblErrorDetails er on er.ErrorId=clt.ErrorId
	where dc.IsDistributorLive = 'Y' AND CLS.IsActive = 'Y' and 
	cast(CLT.AddedOn as date)=cast(getdate()as date)  AND clt.TripStatus = 2 

End





GO
/****** Object:  StoredProcedure [SDS].[usp_ValidInvalidCLTripGenSmmryCnt]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE proc [SDS].[usp_ValidInvalidCLTripGenSmmryCnt]  
as  
Begin  
  
 declare @TotalCluster int,@ValidCluster int,  
          @ValidClTripNotGen int,@ValidClTripGen int,@InvalidCl int  
  
 --set @TotalCluster = (select COUNT(ClusterId) as TotalCluster FROM sds.tblClusterMaster with (nolock))  
  
 --set @ValidCluster = (select COUNT(ClusterId) as ValidCluster FROM sds.tblClusterMaster with (nolock))  

 set @TotalCluster = (select count(clusterId) from sds.tblclusterMaster where Regionid=1 and IsActive='Y'
	 and DistributorId in (select d.DistributorId
	From DCMS.tbldistributorMaster d left outer join SDS.tblOnBoardingCompleted ob on d.DistributorId=ob.DistributorId))

 set @ValidCluster = (select count(clusterId) from sds.tblclusterMaster where Regionid=1 and IsActive='Y'
	 and DistributorId in (select d.DistributorId
	From DCMS.tbldistributorMaster d left outer join SDS.tblOnBoardingCompleted ob on d.DistributorId=ob.DistributorId))
  
 set @ValidClTripNotGen = (select count(distinct ClusterId) from SDS.tblClusterWiseTripDtls   
 where TripStatus=2 and cast(addedon as date)=cast(getdate()as date))  
  
 set @ValidClTripGen = (select count(distinct ClusterId) from SDS.tblClusterWiseTripDtls where TripStatus=1 and cast(addedon as date)=cast(getdate()as date))  

  --set @ValidClTripGen = (select count(ClusterId) from SDS.tblClusterWiseTripDtls where TripStatus=1)

 set @InvalidCl = 0 --need to verify from rajendra sir  
  
 select ISNULL(@TotalCluster,0) as TotalCluster,ISNULL(@ValidCluster,0) as ValidCluster ,  
 ISNULL(@ValidClTripNotGen,0) as ValidClTripNotGen,ISNULL(@ValidClTripGen,0) as ValidClTripGen,  
 ISNULL(@InvalidCl,0) as InvalidCl  
  
  
End  
GO
/****** Object:  StoredProcedure [SDS].[usp_VehicleDelBoyMappingDelBoyList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---			SDS.usp_VehicleDelBoyMappingDelBoyList 10103,0,88888,null

--	Pass vehicleId=0 for unassigned stafflist
CREATE proc [SDS].[usp_VehicleDelBoyMappingDelBoyList]
--declare
@VehicleId	bigint,
@StaffRefNo numeric(17,0),
@DistributorId	bigint,
@status nvarchar(30)=null
--set @VehicleId=10103 set @DistributorId=88888 set @StaffRefNo=0
as
BEGIN
	SELECT        db.StaffRefNo, SDS.fn_CamelCase(db.StaffName) AS StaffName, vd.VehDelboyId, vd.VehicleId, 
		case when db.StaffRefNo=vd.DeliveryBoyId then vd.DeliveryBoyId else null end DeliveryBoyId, 
		case when db.StaffRefNo=vd.AdditionalDelBoyId then vd.AdditionalDelBoyId else null end AdditionalDelBoyId,		
		vd.DistributorId, vd.Active, vd.LastUpdatedDateTime, VM.VehicleNo
	FROM            DCMS.tblDistributorStaffDetails AS db WITH (NOLOCK) LEFT OUTER JOIN
		SDS.tblVehicleDeliveryBoyMapping AS vd ON (db.StaffRefNo = vd.AdditionalDelBoyId or vd.DeliveryBoyId = db.StaffRefNo) AND vd.Active = 'Y' LEFT OUTER JOIN
		SDS.tblVehicleMaster AS VM ON VM.VehicleId = vd.VehicleId
		where db.DistributorId=@DistributorId and (Vd.VehicleId=@VehicleId or isnull(Vd.VehicleId,0)=0) and (vd.Active='Y' or isnull(vd.active,'')='')
		and db.StaffStatusCode='Active' and (db.StaffRefNo=@StaffRefNo or @StaffRefNo=0) and db.WhetherDeliveryBoy='Y'  AND (db.StaffName NOT LIKE 'DCMS%')
	order by db.StaffName

	
END



GO
/****** Object:  StoredProcedure [SDS].[usp_VehicleDeliveryBoyMapping]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	Pass 0 in @DeliveryBoyId to remove mapping. 
CREATE proc [SDS].[usp_VehicleDeliveryBoyMapping]
--declare
@VehicleId	bigint,
@DeliveryBoyId	numeric(17, 0),
@AdditionalDelBoyId	numeric(17, 0),
@DistributorId	bigint,
@Active	char(1),
@Action nvarchar(10),
@RtnValue bigint output

as
--set @VehicleId = 10147;
--set @DeliveryBoyId = 11611513900000017;
--set @DistributorId =15139;
--set @AdditionalDelBoyId= null;
--set @Active='Y';
--set @Action='ASSIGN';

BEGIN
     declare @PreDelivreyBoyId numeric(17,0);
	 --if exists(select 1 from sds.tblDeliveryBoyClusterMapping where ClusterId=@DeliveryBoyId)
	set @PreDelivreyBoyId = (select DeliveryBoyId from sds.tblVehicleDeliveryBoyMapping where DistributorId=@DistributorId and VehicleId=@VehicleId)
	--select @PreDelivreyBoyId
	if(upper(@Action)='ASSIGN')
	Begin
	
		if not exists(select 1 from sds.tblVehicleDeliveryBoyMapping where (DeliveryBoyId=@DeliveryBoyId or AdditionalDelBoyId=@DeliveryBoyId or 
						DeliveryBoyId=@AdditionalDelBoyId or AdditionalDelBoyId=@AdditionalDelBoyId) and VehicleId<>@VehicleId)
		
		Begin
		
			If not exists(select 1 from sds.tblVehicleDeliveryBoyMapping where DistributorId=@DistributorId and VehicleId=@VehicleId)
			Begin
				insert into sds.tblVehicleDeliveryBoyMapping (VehicleId,DeliveryBoyId,AdditionalDelBoyId,DistributorId,Active,LastUpdatedDateTime)
				values (@VehicleId,@DeliveryBoyId,@AdditionalDelBoyId,@DistributorId,@Active,getdate())

				set @RtnValue=SCOPE_IDENTITY()

				if exists(select * from sds.tblDeliveryBoyClusterMapping where StaffRefNo =@DeliveryBoyId)
				Begin
					UPDATE sds.tblDeliveryBoyClusterMapping set AdditionalStaffRefNo=@AdditionalDelBoyId, LastUpdatedDatetime=getdate() where StaffRefNo =@DeliveryBoyId and AdditionalStaffRefNo = @AdditionalDelBoyId and AdditionalStaffRefNo = @DeliveryBoyId
				End
			End
			Else
			Begin
				update sds.tblVehicleDeliveryBoyMapping 
				set DeliveryBoyId=@DeliveryBoyId,AdditionalDelBoyId=@AdditionalDelBoyId,Active=@Active,LastUpdatedDateTime=getdate() 
				where DistributorId=@DistributorId and VehicleId=@VehicleId 

		
				set  @RtnValue=@@ROWCOUNT
				if exists(select * from sds.tblDeliveryBoyClusterMapping where StaffRefNo = @PreDelivreyBoyId)
				Begin
						
					UPDATE sds.tblDeliveryBoyClusterMapping set AdditionalStaffRefNo=@AdditionalDelBoyId, LastUpdatedDatetime=getdate() where StaffRefNo = @DeliveryBoyId
					UPDATE sds.tblDeliveryBoyClusterMapping set StaffRefNo = @DeliveryBoyId, AdditionalStaffRefNo=@AdditionalDelBoyId, LastUpdatedDatetime=getdate() where StaffRefNo = @PreDelivreyBoyId
			     set @RtnValue=4
				
				End
			End
		End
		else
		Begin
			set @RtnValue=-1
		End
	End
	else if(upper(@Action)='UNASSIGN')
	Begin
		delete from sds.tblVehicleDeliveryBoyMapping where DistributorId=@DistributorId and VehicleId=@VehicleId
		set @RtnValue=@@rowcount
	End
	--select * from sds.tblDeliveryBoyClusterMapping where StaffRefNo=11611513900000009
END



GO
/****** Object:  StoredProcedure [SDS].[usp_VehicleMasterAddEdit]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	Vehicle Master Add Edit. Created: Rajendra G. Dtd: 06-06-2019

CREATE PROCEDURE [SDS].[usp_VehicleMasterAddEdit]
@VehicleId	bigint=0,
@VehicleNo	nvarchar(50),
@DistributorId	int,
@OwnerName	nvarchar(50),
@ContactNo	varchar(10),
@VehicleType	nvarchar(50),
@NumberOfWheels	nvarchar(50),
@DateOfPassing	date,
@PassingExpiryDate	date,
@RTOCapacity	int,
@RegRTOCapacity int,
@RTOAgentName	nvarchar(100),
@RTOPasingScan	nvarchar(500),
@VehiclePermitNo	nvarchar(50),
@VehiclePermitValidDate	date,
@InsuranceNo	nvarchar(50),
@InsuranceCompany	nvarchar(50),
@InsuranceAgentName	nvarchar(50),
@InsuranceScan	nvarchar(500),
@InsuranceValidDate	date,
@PUCValidDate	date,
@Active	char(1),	
@Action nvarchar(10),
@RtnValue bigint OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	If (upper(@Action)='ADD')
	Begin		-- Check Duplocate vehicle No under same Distributor
		IF NOT EXISTS (SELECT VehicleNo FROM SDS.tblVehicleMaster with(nolock) WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(VehicleNo))) = ltrim(rtrim(lower(@VehicleNo))))
		Begin
			INSERT INTO SDS.tblVehicleMaster(VehicleNo,DistributorId,OwnerName,ContactNo,VehicleType,NumberOfWheels,DateOfPassing,PassingExpiryDate,RTOCapacity,RegRTOCapacity,
				RTOAgentName,RTOPasingScan,VehiclePermitNo,VehiclePermitValidDate,InsuranceNo,InsuranceCompany,InsuranceAgentName,InsuranceScan,InsuranceValidDate,
				PUCValidDate,Active,LastUpdateDateTime)
			Values(@VehicleNo,@DistributorId,@OwnerName,@ContactNo,@VehicleType,@NumberOfWheels,@DateOfPassing,@PassingExpiryDate,@RTOCapacity,@RegRTOCapacity,
				@RTOAgentName,@RTOPasingScan,@VehiclePermitNo,@VehiclePermitValidDate,@InsuranceNo,@InsuranceCompany,@InsuranceAgentName,@InsuranceScan,@InsuranceValidDate,
				@PUCValidDate,'Y',getdate())	
		
			SET @RtnValue = SCOPE_IDENTITY()
		End
		else
			SET @RtnValue = -1	
	End
	Else If (upper(@Action)='EDIT')
	Begin
		IF NOT EXISTS (SELECT VehicleNo FROM SDS.tblVehicleMaster with(nolock) 
		WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(VehicleNo))) = ltrim(rtrim(lower(@VehicleNo))) and VehicleId<>@VehicleId)
		Begin
			UPDATE	SDS.tblVehicleMaster
			SET VehicleNo= @VehicleNo,
				OwnerName= @OwnerName,
				ContactNo= @ContactNo,
				VehicleType= @VehicleType,
				NumberOfWheels= @NumberOfWheels,
				DateOfPassing= @DateOfPassing,
				PassingExpiryDate= @PassingExpiryDate,
				RTOCapacity= @RTOCapacity,
				RegRTOCapacity=@RegRTOCapacity,
				RTOAgentName= @RTOAgentName,
				--RTOPasingScan= ISNULL(@RTOPasingScan,RTOPasingScan),
				VehiclePermitNo= @VehiclePermitNo,
				VehiclePermitValidDate= @VehiclePermitValidDate,
				InsuranceNo= @InsuranceNo,
				InsuranceCompany= @InsuranceCompany,
				InsuranceAgentName= @InsuranceAgentName,
				InsuranceValidDate= @InsuranceValidDate,
				--InsuranceScan= ISNULL(@InsuranceScan,InsuranceScan),
				PUCValidDate= @PUCValidDate,
				--Active= @Active,
				LastUpdateDateTime= Getdate()
			where VehicleId= @VehicleId			

			SET @RtnValue = @VehicleId
		End
		else
			SET @RtnValue = -1
	End
	Else If (upper(@Action)='UpdateFile')
	Begin
	IF NOT EXISTS (SELECT VehicleNo FROM SDS.tblVehicleMaster with(nolock) 
		WHERE DistributorId = @DistributorId and ltrim(rtrim(lower(VehicleNo))) = ltrim(rtrim(lower(@VehicleNo))) and VehicleId<>@VehicleId)
		Begin
			UPDATE	SDS.tblVehicleMaster
			SET 
				RTOPasingScan= ISNULL(@RTOPasingScan,RTOPasingScan),
				InsuranceScan= ISNULL(@InsuranceScan,InsuranceScan),
				LastUpdateDateTime= Getdate()
			where VehicleId= @VehicleId			

			SET @RtnValue = @VehicleId
		End
		else
			SET @RtnValue = -1
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_VehicleMasterList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	Vehicle list distributer wise, if @distributorid =0 it will give all vehicles.

CREATE PROCEDURE [SDS].[usp_VehicleMasterList] 
@DistributorId int,
@VehicleId bigint,
@Flag varchar(10)

AS
BEGIN
	
	IF(@VehicleId<>0)
	BEGIN
		SELECT VM.[VehicleId],VM.[VehicleNo],VM.[DistributorId],SDS.fn_CamelCase( VM.[OwnerName]) as OwnerName,VM.[ContactNo],SDS.fn_CamelCase(VM.[VehicleType] ) as VehicleType,VM.[NumberOfWheels],
		VM.[DateOfPassing],VM.[PassingExpiryDate],VM.[RTOCapacity],VM.[RegRTOCapacity], VM.[RTOAgentName],[RTOPasingScan],VM.[VehiclePermitNo],VM.[VehiclePermitValidDate],
		VM.[InsuranceNo],VM.[InsuranceCompany],VM.[InsuranceAgentName],VM.[InsuranceScan],VM.[InsuranceValidDate],VM.[PUCValidDate],VM.[Active],VM.[LastUpdateDateTime] 
		,db.StaffRefNo, SDS.fn_CamelCase(  db.StaffName ) as StaffName, db1.StaffRefNo AdditionalDelBoyId,SDS.fn_CamelCase(  db1.StaffName ) as AdditionalDelBoyName

		from SDS.tblVehicleMaster VM left outer join 
		sds.tblVehicleDeliveryBoyMapping vd on vd.VehicleId=VM.VehicleId and vd.Active='Y'  left outer join
		DCMS.tblDistributorStaffDetails db WITH(NOLOCK) on vd.DeliveryBoyId=db.StaffRefNo  left outer join
		DCMS.tblDistributorStaffDetails db1 WITH(NOLOCK) on vd.AdditionalDelBoyId=db1.StaffRefNo  
		
		 where VM.[VehicleId] = @VehicleId 
	END
	ELSE
	BEGIN
		SELECT VM.[VehicleId],VM.[VehicleNo],VM.[DistributorId],SDS.fn_CamelCase( VM.[OwnerName]) as OwnerName,VM.[ContactNo],SDS.fn_CamelCase(VM.[VehicleType] ) as VehicleType,VM.[NumberOfWheels],
		VM.[DateOfPassing],VM.[PassingExpiryDate],VM.[RTOCapacity],VM.[RegRTOCapacity],VM.[RTOAgentName],[RTOPasingScan],VM.[VehiclePermitNo],VM.[VehiclePermitValidDate],
		VM.[InsuranceNo],VM.[InsuranceCompany],VM.[InsuranceAgentName],VM.[InsuranceScan],VM.[InsuranceValidDate],VM.[PUCValidDate],VM.[Active],VM.[LastUpdateDateTime] 
		,db.StaffRefNo,SDS.fn_CamelCase( db.StaffName) as StaffName, db1.StaffRefNo AdditionalDelBoyId,SDS.fn_CamelCase(  db1.StaffName ) as AdditionalDelBoyName

		from SDS.tblVehicleMaster VM left outer join 
		sds.tblVehicleDeliveryBoyMapping vd on vd.VehicleId=VM.VehicleId and vd.Active='Y'  left outer join
		DCMS.tblDistributorStaffDetails db WITH(NOLOCK) on vd.DeliveryBoyId=db.StaffRefNo  left outer join
		DCMS.tblDistributorStaffDetails db1 WITH(NOLOCK) on vd.AdditionalDelBoyId=db1.StaffRefNo 
		where (VM.DistributorId = @DistributorId or @DistributorId=0) and (VM.Active = @Flag or @Flag='ALL') 		
	END
END



GO
/****** Object:  StoredProcedure [SDS].[usp_VehicleUpdateStatus]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		Update vehicle status
create PROCEDURE [SDS].[usp_VehicleUpdateStatus]
@VehicleId bigint,
@ActiveStatus char(1),			-- while delete status will be set to N
@UpdatedRow int output
AS
BEGIN
		UPDATE	SDS.tblVehicleMaster SET Active = @ActiveStatus, LastUpdateDateTime=GETDATE() WHERE	VehicleId = @VehicleId  

		SET @UpdatedRow = @@ROWCOUNT
END



GO
/****** Object:  StoredProcedure [SDS].[usp_VerifyConsumer]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/**************************************************************											
--	Stored Procedure Name	: [usp_VerifyConsumer]
--	Description		:	Return uniqurConsumerId if consumer is available in consumer master otherwise return zero.

--	Author			:	Prasanna	02-April-2018

--	Date Modified		Modified By	     Modifications
--	02-April-2018			Prasanna	         Created
**************************************************************/
CREATE PROCEDURE [SDS].[usp_VerifyConsumer] 
	@ConsumerName varchar(100),
	@ContactNo varchar(20),
	@Return bigint output
AS
BEGIN
	DECLARE @Flag bigint=0
	SET @Return = 0
	SELECT @Flag=ISNULL(TCM.UniqueConsumerId,0) 
	FROM SDS.tblConsumerMaster TCM 
	WHERE  TCM.ConsumerName=@ConsumerName and TCM.ContactPersonContactNo=@ContactNo
			 
	set  @Return=@Flag
	
END




GO
/****** Object:  StoredProcedure [SDS].[usp_YesterdayDelDataEmail]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [SDS].[usp_YesterdayDelDataEmail]
@Flag varchar(10)='SA'
as

BEGIN
set FMTONLY OFF

	declare @RptDate date=cast(Getdate()-1 as date)
	declare @rg table (id int identity, SACode Varchar(10), Cid bigint, RptForDate datetime, NoOfTrips int, TripBkg int, TripBkgDelivered Int,TotalDel int) 
	Declare @Del table(id int identity, Sacode varchar(10), TotDel int)

		insert into @rg(SACode, Cid, RptForDate, NoOfTrips, TripBkg, TripBkgDelivered,TotalDel)
		select d.SACode,0,@RptDate,  
			count(distinct t.TripId) NoOFTrips, count(distinct td.OrderRefNo) TripBkgs,
			sum(case when cast(dl.ActualDeliveryDate as date)=@RptDate then 1 else 0 end) TripDeliveredBkg,0 TotDel
		from SDS.tblTripPlanning t inner join SDS.tblTripPlanningDetails td on t.TripId=td.TripId
			inner join DCMS.tblDistributorMaster d on t.DistributorId=d.DistributorId
			left outer join DCMS.tblDeliveryBoyRefillOrder dl on td.OrderRefNo=dl.OrderRefNo
		where cast(t.TripDate as date)=@RptDate   
			and d.IsDistributorLive='Y' and d.DistributorName not like '%INACTIVE%' and d.DistributorName not like 'ND%' and d.SACode not in ('358','387') 
		group by d.SACode

		insert into @Del(SaCode, TotDel) select SACode, count(orderrefno) TotDel From DCMS.tblDeliveryBoyRefillOrder dl 
		inner join SDS.tblOnBoardingCompleted ob on dl.DistributorId=ob.DistributorId and ob.IsOnBoardingStage1=2
		inner join DCMS.tblDistributorMaster d on dl.DistributorId=d.DistributorId
		where cast(dl.ActualDeliveryDate as date)=@RptDate 
		and d.IsDistributorLive='Y' and d.DistributorName not like '%INACTIVE%' and d.DistributorName not like 'ND%' and d.SACode not in ('358','387') 
		group by SACode
		
		--- Update Total Delivery for SA which has Trips
		update @rg set TotalDel=TotDel from @rg a inner join @Del b on a.SACode=b.SACode

		--Insert data for SA whose trips are not generated 
		insert into @rg(SACode, Cid, RptForDate, NoOfTrips, TripBkg, TripBkgDelivered,TotalDel)
		Select d.SACode,0,@RptDate,0,0,0,TotDel From @Del d left outer join @rg r on d.Sacode=r.SACode where r.SACode is null
	
	IF(@Flag='SA')
	Begin
		select z.ZOCode, z.ZOName, r.ROCode, r.ROName, s.SACode, s.SAName, isnull(dt.NoOfTrips,0) NoOfTrips,  isnull(dt.TripBkg,0) TripBkg,  
		isnull(dt.TripBkgDelivered,0) TripBkgDelivered,  isnull(dt.TotalDel,0) TotalDel 
		From @rg dt LEFT OUTER JOIN SDS.tblSAMaster AS s with(nolock) ON s.SACode COLLATE DATABASE_DEFAULT=dt.SACode
		LEFT OUTER JOIN SDS.tblROMaster AS r with(nolock) ON s.ROCode=r.ROCode 
		LEFT OUTER JOIN SDS.tblZOMaster AS z with(nolock) ON r.ZOCode=z.ZOCode 
		where z.ZOName like 'LPG%' order by r.ROName,s.SAName
	End
	Else
	Begin
		select z.ZOCode, z.ZOName, '' ROCode, '' ROName, '' SACode, '' SAName, sum(isnull(dt.NoOfTrips,0)) NoOfTrips, 
		sum(isnull(dt.TripBkg,0)) TripBkg, sum(isnull(dt.TripBkgDelivered,0)) TripBkgDelivered, sum(isnull(dt.TotalDel,0)) TotalDel
		From @rg dt LEFT OUTER JOIN SDS.tblSAMaster AS s with(nolock) ON s.SACode COLLATE DATABASE_DEFAULT=dt.SACode
		LEFT OUTER JOIN SDS.tblROMaster AS r with(nolock) ON s.ROCode=r.ROCode 
		LEFT OUTER JOIN SDS.tblZOMaster AS z with(nolock) ON r.ZOCode=z.ZOCode 
		where z.ZOName like 'LPG%'
		Group By z.ZOCode, z.ZOName
		
	End
END
GO
/****** Object:  StoredProcedure [SDS].[usp_YesterdayDeliveryDistwise]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [SDS].[usp_YesterdayDeliveryDistwise]
as
BEGIN
set FMTONLY OFF

	declare @RptDate date=cast(Getdate()-1 as date)
	declare @rg table (id int identity, SACode Varchar(10), DistributorId int, Cid bigint, RptForDate datetime, NoOfTrips int, TripBkg int, 
	TripBkgDelivered Int,TotalDel int) 
	declare @DelDt table(id int identity, SACode Varchar(10), Did int, ClusterId bigint, DelCnt int)

	insert into @rg(SACode, DistributorId, Cid, RptForDate, NoOfTrips, TripBkg, TripBkgDelivered)
	select d.SACode, d.DistributorId, ct.ClusterId, @RptDate,
		count(distinct t.TripId) TripCnt, count(distinct td.OrderRefNo) TripBkgCnt,
		sum(case when cast(dl.ActualDeliveryDate as date)=@RptDate then 1 else 0 end) TripDelBkg
	from DCMS.tblDistributorMaster d with(nolock)
		inner join SDS.tblClusterMaster ct on d.DistributorId=ct.DistributorId  
		left outer join SDS.tblTripPlanning t on ct.ClusterId=t.ClusterId
		inner join SDS.tblTripPlanningDetails td on t.TripId=td.TripId
		left outer join DCMS.tblDeliveryBoyRefillOrder dl on td.OrderRefNo=dl.OrderRefNo
	--where cast(t.TripDate as date)=cast(@RptDate as date)
	--	and d.IsDistributorLive='Y' and d.DistributorName not like '%INACTIVE%' and d.DistributorName not like 'ND%' and d.SACode not in ('358','387') 
	group by d.SACode, d.DistributorId, d.JDEDistributorCode, d.DistributorName, ct.ClusterId, ct.AreaClusterName

	insert into @DelDt(SACode, Did, ClusterId, DelCnt)
	select d.SACode, o.DistributorId, ac.AreaClusterId, count(distinct o.OrderRefNo) DelCnt
	from DCMS.tblDeliveryBoyRefillOrder o with (nolock)
		inner join SDS.tblOnBoardingCompleted ob on o.DistributorId=ob.DistributorId and ob.IsOnBoardingStage1=2
		inner join DCMS.tblDistributorMaster d on o.DistributorId=d.DistributorId
		left outer join SDS.tblConsumerDetails cd on o.UniqueConsumerId=cd.UniqueConsumerId and o.DistributorId=cd.DistributorID
		left outer join SDS.tblAreaClusterMapping ac on cd.AreaRefNo=ac.AreaRefNo
	--where cast(o.ActualDeliveryDate as date)=cast(@RptDate as date)
	--	and d.IsDistributorLive='Y' and d.DistributorName not like '%INACTIVE%' and d.DistributorName not like 'ND%' and d.SACode not in ('358','387') 
	Group by d.SACode, o.DistributorId, ac.AreaClusterId

	update @rg set TotalDel=DelCnt	from @rg a inner join @DelDt b on a.DistributorId=b.Did and a.Cid=b.ClusterId

	insert into @rg(SACode, DistributorId, Cid, RptForDate, NoOfTrips, TripBkg, TripBkgDelivered, TotalDel)
	select b.SACode, Did,ClusterId,@RptDate,0,0,0,DelCnt from @DelDt b left outer join @rg a on b.Did=a.DistributorId and b.ClusterId=a.Cid
	where a.Cid is null

	Select z.ZOCode, z.ZOName, ro.ROCode, ro.ROName, s.SACode, s.SAName, d.DistributorId, d.JDEDistributorCode, d.DistributorName,
	c.ClusterId, isnull(c.AreaClusterName,'Unmapped') ClusterName, r.RptForDate, isnull(r.NoOfTrips,0) NoOfTrips, isnull(r.TripBkg,0) TripBkg, 
	isnull(r.TripBkgDelivered,0) TripBkgDelivered, isnull(r.TotalDel,0) TotalDel
	from @rg r
	left outer join SDS.tblClusterMaster c on r.Cid=c.ClusterId
	left outer join DCMS.tblDistributorMaster d on r.DistributorId=d.DistributorId
	left outer join SDS.tblSAMaster s on r.SACode=s.SACode
	left outer join SDS.tblROMaster ro on s.ROCode=ro.ROCode
	left outer join SDS.tblZOMaster z on ro.ZOCode=z.ZOCode
	--where r.SACode='332' and r.DistributorId=14193
	order by z.ZOName, ro.ROName, s.SAName, d.DistributorName,isnull(c.AreaClusterName,'zzzzz')

END
GO
/****** Object:  StoredProcedure [SDS].[usp_ZOMasterList]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [SDS].[usp_ZOMasterList] 
@ActiveFlag varchar(5)		-- 'ALL' for all

as

select ZOCode,ZOName,ActiveFlag,LastUpdateBy,LastUpdateDateTime from sds.tblZOMaster where (ActiveFlag=@ActiveFlag or upper(@ActiveFlag)='ALL')
order by ZOName



GO
/****** Object:  StoredProcedure [SDS].[wsp_DailySchedulerCheck]    Script Date: 04-10-2024 12:01:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [SDS].[wsp_DailySchedulerCheck]
/**************************************************************											
--	Procedure Name	:	[wsp_DailySchedulerCheck]
--	Description		:	To Check Data is inserted through Scheduler
--	Date			    Name				Action
--	06-March-2021		Rahul G			    Created
**************************************************************/

AS

BEGIN
	    SET FMTONLY OFF
        CREATE TABLE #tblTemp(Query nvarchar(50), LastUpdatedDate nvarchar(20), TodayStatus nvarchar(5),Frequency nvarchar(10))
		--DECLARE @GroupCode VARCHAR(3)=''
		--SELECT @GroupCode = GroupCode FROM DCMS.tblDistributorGroupDetails WITH (NOLOCK) 
		--if(isnull(@GroupCode,'')='') set @GroupCode='' else set @GroupCode='$'+@GroupCode
	
		--Daily
		IF NOT EXISTS (SELECT 1 FROM [DCMS].[tblDistributorSystemStock])
		BEGIN 
			INSERT INTO #tblTemp
			SELECT  '[DCMS].[tblDistributorSystemStock]' as Query,'' LastUpdatedDate,'No' as TodayStatus,'' Frequency
		END 

		ELSE
		BEGIN
			INSERT INTO #tblTemp
			SELECT a.Query, CONVERT(VARCHAR(10), a.LastUpdateDateTime, 103) + ' '  + convert(VARCHAR(8), a.LastUpdateDateTime, 14) ,
			CASE WHEN CAST(a.LastUpdateDateTime as DATE) = CAST(GETDATE() as DATE) THEN 'Yes' ELSE 'No' END as TodayStatus,'Daily' Frequency
			FROM
			(
			SELECT top 1 '[DCMS].[tblDistributorSystemStock]' as Query, LastUpdateDateTime
			FROM [DCMS].[tblDistributorSystemStock] a with(nolock)
			ORDER BY LastUpdateDateTime DESC  
			) as a
		END

		--Daily	
		IF NOT EXISTS (SELECT 1 FROM [DCMS].[tblConsumerMaster])
		BEGIN 
			INSERT INTO #tblTemp
			SELECT  '[DCMS].[tblConsumerMaster]' as Query,'' LastUpdatedDate,'No' as TodayStatus,'' Frequency
		END 

		ELSE
		BEGIN
			INSERT INTO #tblTemp
			SELECT a.Query, CONVERT(VARCHAR(10), a.LastUpdateDateTime, 103) + ' '  + convert(VARCHAR(8), a.LastUpdateDateTime, 14) ,
			CASE WHEN CAST(a.LastUpdateDateTime as DATE) = CAST(GETDATE() as DATE) THEN 'Yes' ELSE 'No' END as TodayStatus,'Daily' Frequency
			FROM
			(
			SELECT top 1 '[DCMS].[tblConsumerMaster]' as Query, LastUpdateDateTime
			FROM [DCMS].[tblConsumerMaster] a with(nolock)
			ORDER BY LastUpdateDateTime DESC  
			) as a
		END

		--Daily
		IF NOT EXISTS (SELECT 1 FROM [DCMS].[tblDistributorGodown])
		BEGIN 
			INSERT INTO #tblTemp
			SELECT  '[DCMS].[tblDistributorGodown]' as Query,'' LastUpdatedDate,'No' as TodayStatus,'' Frequency
		END 

		ELSE
		BEGIN
			INSERT INTO #tblTemp
			SELECT a.Query, CONVERT(VARCHAR(10), a.LastUpdateDateTime, 103) + ' '  + convert(VARCHAR(8), a.LastUpdateDateTime, 14) ,
			CASE WHEN CAST(a.LastUpdateDateTime as DATE) = CAST(GETDATE() as DATE) THEN 'Yes' ELSE 'No' END as TodayStatus,'Daily' Frequency
			FROM
			(
			SELECT top 1 '[DCMS].[tblDistributorGodown]' as Query, LastUpdateDateTime
			FROM [DCMS].[tblDistributorGodown] a with(nolock)
			ORDER BY LastUpdateDateTime DESC  
			) as a
		END

		--Daily
		IF NOT EXISTS (SELECT 1 FROM [SDS].[tblAppConfiguration])
		BEGIN 
			INSERT INTO #tblTemp
			SELECT  'SDS Onboarding Email Scheduler' as Query,'' LastUpdatedDate,'No' as TodayStatus,'' Frequency
		END 

		ELSE
		BEGIN
			INSERT INTO #tblTemp
			SELECT a.Query, CONVERT(VARCHAR(10), a.[LastUpdatedOn], 103) + ' '  + convert(VARCHAR(8), a.[LastUpdatedOn], 14) ,
			CASE WHEN CAST(a.[LastUpdatedOn] as DATE) = CAST(GETDATE() as DATE) THEN 'Yes' ELSE 'No' END as TodayStatus,'Daily' Frequency
			FROM
			(
			SELECT top 1 'SDS Onboarding Email Scheduler' as Query, [LastUpdatedOn]
			FROM [SDS].[tblAppConfiguration] a with(nolock) WHERE [Key]='LastEmailSend'
			ORDER BY [LastUpdatedOn] DESC  
			) as a
		END

		SELECT Query , LastUpdatedDate , TodayStatus,Frequency FROM #tblTemp ORDER BY TodayStatus ASC
		
		DROP TABLE #tblTemp

END



GO
